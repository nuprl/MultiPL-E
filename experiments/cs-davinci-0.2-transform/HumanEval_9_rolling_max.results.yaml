language: cs
name: HumanEval_9_rolling_max
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var maxes = new List<long>();\n\
    \        long currentMax = numbers[0];\n        maxes.Add(currentMax);\n     \
    \   for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] > currentMax)\
    \ {\n                currentMax = numbers[i];\n            }\n            maxes.Add(currentMax);\n\
    \        }\n        return maxes;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <3483d846ef734708924ad6b7f033b62e>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <3483d846ef734708924ad6b7f033b62e>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <3483d846ef734708924ad6b7f033b62e>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <3483d846ef734708924ad6b7f033b62e>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var result = new List<long>();\n\
    \        var max = numbers[0];\n        result.Add(max);\n        for (int i =\
    \ 1; i < numbers.Count; i++) {\n            if (numbers[i] > max) {\n        \
    \        max = numbers[i];\n            }\n            result.Add(max);\n    \
    \    }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long currentMax = numbers[0];\n        result.Add(currentMax);\n\
    \        for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i]\
    \ > currentMax) {\n                currentMax = numbers[i];\n            }\n \
    \           result.Add(currentMax);\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <2e584f5162a04f6092bda554a6dd71d0>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <2e584f5162a04f6092bda554a6dd71d0>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <2e584f5162a04f6092bda554a6dd71d0>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <2e584f5162a04f6092bda554a6dd71d0>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var result = new List<long>();\n\
    \        long max = numbers[0];\n        result.Add(max);\n        for (int i\
    \ = 1; i < numbers.Count; i++) {\n            if (numbers[i] > max) {\n      \
    \          max = numbers[i];\n            }\n            result.Add(max);\n  \
    \      }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        foreach (long number in numbers)\
    \ {\n            max = Math.Max(max, number);\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dc32dfbab7664cbb8ca18cc978d65584>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dc32dfbab7664cbb8ca18cc978d65584>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659795192
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            max = Math.Max(max,\
    \ numbers[i]);\n            result.Add(max);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <b850238bdf9f44aea7a64116731de81a>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <b850238bdf9f44aea7a64116731de81a>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <b850238bdf9f44aea7a64116731de81a>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <b850238bdf9f44aea7a64116731de81a>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var max = numbers[0];\n\
    \        var result = new List<long>();\n        result.Add(max);\n        for\
    \ (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] > max) {\n\
    \                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00001] in <857c8e12ca8e4a06aef0cc960effd3c9>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <857c8e12ca8e4a06aef0cc960effd3c9>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00001] in <857c8e12ca8e4a06aef0cc960effd3c9>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <857c8e12ca8e4a06aef0cc960effd3c9>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var result = new List<long>();\n\
    \        long max = numbers[0];\n        result.Add(max);\n        for (int i\
    \ = 1; i < numbers.Count; i++) {\n            if (numbers[i] > max) {\n      \
    \          max = numbers[i];\n            }\n            result.Add(max);\n  \
    \      }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var result = new List<long>();\n\
    \        long max = numbers[0];\n        result.Add(max);\n        for (int i\
    \ = 1; i < numbers.Count; i++) {\n            if (numbers[i] > max) {\n      \
    \          max = numbers[i];\n            }\n            result.Add(max);\n  \
    \      }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var max = numbers[0];\n\
    \        var result = new List<long>();\n        result.Add(max);\n        for\
    \ (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] > max) {\n\
    \                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00001] in <857c8e12ca8e4a06aef0cc960effd3c9>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <857c8e12ca8e4a06aef0cc960effd3c9>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00001] in <857c8e12ca8e4a06aef0cc960effd3c9>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <857c8e12ca8e4a06aef0cc960effd3c9>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var result = new List<long>();\n\
    \        long max = numbers[0];\n        result.Add(max);\n        for (int i\
    \ = 1; i < numbers.Count; i++) {\n            if (numbers[i] > max) {\n      \
    \          max = numbers[i];\n            }\n            result.Add(max);\n  \
    \      }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var result = new List<long>();\n\
    \        var max = numbers[0];\n        result.Add(max);\n        for (int i =\
    \ 1; i < numbers.Count; i++) {\n            if (numbers[i] > max) {\n        \
    \        max = numbers[i];\n            }\n            result.Add(max);\n    \
    \    }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var result = new List<long>();\n\
    \        long max = numbers[0];\n        result.Add(max);\n        for (int i\
    \ = 1; i < numbers.Count; i++) {\n            max = Math.Max(max, numbers[i]);\n\
    \            result.Add(max);\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var result = new List<long>();\n\
    \        long max = numbers[0];\n        result.Add(max);\n        for (int i\
    \ = 1; i < numbers.Count; i++) {\n            if (numbers[i] > max) {\n      \
    \          max = numbers[i];\n            }\n            result.Add(max);\n  \
    \      }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var result = new List<long>();\n\
    \        var max = numbers[0];\n        result.Add(max);\n        for (int i =\
    \ 1; i < numbers.Count; i++) {\n            if (numbers[i] > max) {\n        \
    \        max = numbers[i];\n            }\n            result.Add(max);\n    \
    \    }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var result = new List<long>();\n\
    \        long max = numbers[0];\n        result.Add(max);\n        for (int i\
    \ = 1; i < numbers.Count; i++) {\n            if (numbers[i] > max) {\n      \
    \          max = numbers[i];\n            }\n            result.Add(max);\n  \
    \      }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var result = new List<long>();\n\
    \        var max = numbers[0];\n        result.Add(max);\n        for (int i =\
    \ 1; i < numbers.Count; i++) {\n            if (numbers[i] > max) {\n        \
    \        max = numbers[i];\n            }\n            result.Add(max);\n    \
    \    }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var result = new List<long>();\n\
    \        var max = numbers[0];\n        result.Add(max);\n        for (int i =\
    \ 1; i < numbers.Count; i++) {\n            if (numbers[i] > max) {\n        \
    \        max = numbers[i];\n            }\n            result.Add(max);\n    \
    \    }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var result = new List<long>();\n\
    \        long currentMax = numbers[0];\n        result.Add(currentMax);\n    \
    \    for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] > currentMax)\
    \ {\n                currentMax = numbers[i];\n            }\n            result.Add(currentMax);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <0e4f59b96fc64a33a0f069fa974055fc>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <0e4f59b96fc64a33a0f069fa974055fc>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <0e4f59b96fc64a33a0f069fa974055fc>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <0e4f59b96fc64a33a0f069fa974055fc>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var result = new List<long>();\n\
    \        long max = numbers[0];\n        result.Add(max);\n        for (int i\
    \ = 1; i < numbers.Count; i++) {\n            if (numbers[i] > max) {\n      \
    \          max = numbers[i];\n            }\n            result.Add(max);\n  \
    \      }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var result = new List<long>();\n\
    \        long max = numbers[0];\n        result.Add(max);\n        for (int i\
    \ = 1; i < numbers.Count; i++) {\n            if (numbers[i] > max) {\n      \
    \          max = numbers[i];\n            }\n            result.Add(max);\n  \
    \      }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var max = new List<long>();\n\
    \        long currentMax = numbers[0];\n        max.Add(currentMax);\n       \
    \ for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] > currentMax)\
    \ {\n                currentMax = numbers[i];\n            }\n            max.Add(currentMax);\n\
    \        }\n        return max;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <0dd5b292023741ab88eb27357f0e414e>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <0dd5b292023741ab88eb27357f0e414e>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <0dd5b292023741ab88eb27357f0e414e>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <0dd5b292023741ab88eb27357f0e414e>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var result = new List<long>();\n\
    \        long max = numbers[0];\n        result.Add(max);\n        for (int i\
    \ = 1; i < numbers.Count; i++) {\n            if (numbers[i] > max) {\n      \
    \          max = numbers[i];\n            }\n            result.Add(max);\n  \
    \      }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var max = new List<long>();\n\
    \        long currentMax = numbers[0];\n        max.Add(currentMax);\n       \
    \ for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] > currentMax)\
    \ {\n                currentMax = numbers[i];\n            }\n            max.Add(currentMax);\n\
    \        }\n        return max;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <0dd5b292023741ab88eb27357f0e414e>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <0dd5b292023741ab88eb27357f0e414e>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <0dd5b292023741ab88eb27357f0e414e>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <0dd5b292023741ab88eb27357f0e414e>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> maxes = new\
    \ List<long>();\n        long max = numbers[0];\n        maxes.Add(max);\n   \
    \     for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            maxes.Add(max);\n\
    \        }\n        return maxes;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <789e794cc2164ffc85b75fa2f2e21c50>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <789e794cc2164ffc85b75fa2f2e21c50>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <789e794cc2164ffc85b75fa2f2e21c50>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <789e794cc2164ffc85b75fa2f2e21c50>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795192
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            max = Math.Max(max,\
    \ numbers[i]);\n            result.Add(max);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <b850238bdf9f44aea7a64116731de81a>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <b850238bdf9f44aea7a64116731de81a>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <b850238bdf9f44aea7a64116731de81a>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <b850238bdf9f44aea7a64116731de81a>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long currentMax = numbers[0];\n        result.Add(currentMax);\n\
    \        for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i]\
    \ > currentMax) {\n                currentMax = numbers[i];\n            }\n \
    \           result.Add(currentMax);\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <2e584f5162a04f6092bda554a6dd71d0>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <2e584f5162a04f6092bda554a6dd71d0>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <2e584f5162a04f6092bda554a6dd71d0>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <2e584f5162a04f6092bda554a6dd71d0>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> maxes = new\
    \ List<long>();\n        long max = numbers[0];\n        maxes.Add(max);\n   \
    \     for (int i = 1; i < numbers.Count; i++) {\n            max = Math.Max(max,\
    \ numbers[i]);\n            maxes.Add(max);\n        }\n        return maxes;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <193e0dd68d334e44aa73824fa7d32e87>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <193e0dd68d334e44aa73824fa7d32e87>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <193e0dd68d334e44aa73824fa7d32e87>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <193e0dd68d334e44aa73824fa7d32e87>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795192
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            max = Math.Max(max,\
    \ numbers[i]);\n            result.Add(max);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <b850238bdf9f44aea7a64116731de81a>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <b850238bdf9f44aea7a64116731de81a>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <b850238bdf9f44aea7a64116731de81a>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <b850238bdf9f44aea7a64116731de81a>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var result = new List<long>();\n\
    \        long max = numbers[0];\n        result.Add(max);\n        for (int i\
    \ = 1; i < numbers.Count; i++) {\n            if (numbers[i] > max) {\n      \
    \          max = numbers[i];\n            }\n            result.Add(max);\n  \
    \      }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var result = new List<long>();\n\
    \        long max = numbers[0];\n        result.Add(max);\n        for (int i\
    \ = 1; i < numbers.Count; i++) {\n            max = Math.Max(max, numbers[i]);\n\
    \            result.Add(max);\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var result = new List<long>();\n\
    \        long max = numbers[0];\n        result.Add(max);\n        for (int i\
    \ = 1; i < numbers.Count; i++) {\n            if (numbers[i] > max) {\n      \
    \          max = numbers[i];\n            }\n            result.Add(max);\n  \
    \      }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var result = new List<long>();\n\
    \        var max = numbers[0];\n        result.Add(max);\n        for (int i =\
    \ 1; i < numbers.Count; i++) {\n            if (numbers[i] > max) {\n        \
    \        max = numbers[i];\n            }\n            result.Add(max);\n    \
    \    }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long currentMax = numbers[0];\n        result.Add(currentMax);\n\
    \        for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i]\
    \ > currentMax) {\n                currentMax = numbers[i];\n            }\n \
    \           result.Add(currentMax);\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <2e584f5162a04f6092bda554a6dd71d0>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <2e584f5162a04f6092bda554a6dd71d0>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <2e584f5162a04f6092bda554a6dd71d0>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <2e584f5162a04f6092bda554a6dd71d0>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var result = new List<long>();\n\
    \        long max = numbers[0];\n        result.Add(max);\n        for (int i\
    \ = 1; i < numbers.Count; i++) {\n            max = Math.Max(max, numbers[i]);\n\
    \            result.Add(max);\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long currentMax = numbers[0];\n        result.Add(currentMax);\n\
    \        for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i]\
    \ > currentMax) {\n                currentMax = numbers[i];\n            }\n \
    \           result.Add(currentMax);\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <2e584f5162a04f6092bda554a6dd71d0>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <2e584f5162a04f6092bda554a6dd71d0>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <2e584f5162a04f6092bda554a6dd71d0>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <2e584f5162a04f6092bda554a6dd71d0>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            max = Math.Max(max,\
    \ numbers[i]);\n            result.Add(max);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <b850238bdf9f44aea7a64116731de81a>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <b850238bdf9f44aea7a64116731de81a>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <b850238bdf9f44aea7a64116731de81a>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <b850238bdf9f44aea7a64116731de81a>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var result = new List<long>();\n\
    \        var max = numbers[0];\n        result.Add(max);\n        for (int i =\
    \ 1; i < numbers.Count; i++) {\n            max = Math.Max(max, numbers[i]);\n\
    \            result.Add(max);\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5d0d9a9703e74f0bb56790b545339400>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5d0d9a9703e74f0bb56790b545339400>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5d0d9a9703e74f0bb56790b545339400>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5d0d9a9703e74f0bb56790b545339400>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            max = Math.Max(max,\
    \ numbers[i]);\n            result.Add(max);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <b850238bdf9f44aea7a64116731de81a>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <b850238bdf9f44aea7a64116731de81a>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <b850238bdf9f44aea7a64116731de81a>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <b850238bdf9f44aea7a64116731de81a>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var result = new List<long>();\n\
    \        var max = numbers[0];\n        result.Add(max);\n        for (int i =\
    \ 1; i < numbers.Count; i++) {\n            max = Math.Max(max, numbers[i]);\n\
    \            result.Add(max);\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5d0d9a9703e74f0bb56790b545339400>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5d0d9a9703e74f0bb56790b545339400>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5d0d9a9703e74f0bb56790b545339400>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5d0d9a9703e74f0bb56790b545339400>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var result = new List<long>();\n\
    \        var max = numbers[0];\n        result.Add(max);\n        for (int i =\
    \ 1; i < numbers.Count; i++) {\n            if (numbers[i] > max) {\n        \
    \        max = numbers[i];\n            }\n            result.Add(max);\n    \
    \    }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var result = new List<long>();\n\
    \        long max = numbers[0];\n        result.Add(max);\n        for (int i\
    \ = 1; i < numbers.Count; i++) {\n            if (numbers[i] > max) {\n      \
    \          max = numbers[i];\n            }\n            result.Add(max);\n  \
    \      }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var result = new List<long>();\n\
    \        long max = numbers[0];\n        result.Add(max);\n        for (int i\
    \ = 1; i < numbers.Count; i++) {\n            if (numbers[i] > max) {\n      \
    \          max = numbers[i];\n            }\n            result.Add(max);\n  \
    \      }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var result = new List<long>();\n\
    \        var max = numbers[0];\n        result.Add(max);\n        for (int i =\
    \ 1; i < numbers.Count; i++) {\n            if (numbers[i] > max) {\n        \
    \        max = numbers[i];\n            }\n            result.Add(max);\n    \
    \    }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var result = new List<long>();\n\
    \        long max = numbers[0];\n        result.Add(max);\n        for (int i\
    \ = 1; i < numbers.Count; i++) {\n            max = Math.Max(max, numbers[i]);\n\
    \            result.Add(max);\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var result = new List<long>();\n\
    \        long max = numbers[0];\n        result.Add(max);\n        for (int i\
    \ = 1; i < numbers.Count; i++) {\n            if (numbers[i] > max) {\n      \
    \          max = numbers[i];\n            }\n            result.Add(max);\n  \
    \      }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            max = Math.Max(max,\
    \ numbers[i]);\n            result.Add(max);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <b850238bdf9f44aea7a64116731de81a>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <b850238bdf9f44aea7a64116731de81a>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <b850238bdf9f44aea7a64116731de81a>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <b850238bdf9f44aea7a64116731de81a>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var max = numbers[0];\n\
    \        var result = new List<long>();\n        result.Add(max);\n        for\
    \ (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] > max) {\n\
    \                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00001] in <857c8e12ca8e4a06aef0cc960effd3c9>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <857c8e12ca8e4a06aef0cc960effd3c9>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00001] in <857c8e12ca8e4a06aef0cc960effd3c9>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <857c8e12ca8e4a06aef0cc960effd3c9>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            max = Math.Max(max,\
    \ numbers[i]);\n            result.Add(max);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <b850238bdf9f44aea7a64116731de81a>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <b850238bdf9f44aea7a64116731de81a>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <b850238bdf9f44aea7a64116731de81a>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <b850238bdf9f44aea7a64116731de81a>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var result = new List<long>();\n\
    \        long max = numbers[0];\n        result.Add(max);\n        for (int i\
    \ = 1; i < numbers.Count; i++) {\n            if (numbers[i] > max) {\n      \
    \          max = numbers[i];\n            }\n            result.Add(max);\n  \
    \      }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long currentMax = numbers[0];\n        result.Add(currentMax);\n\
    \        for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i]\
    \ > currentMax) {\n                currentMax = numbers[i];\n            }\n \
    \           result.Add(currentMax);\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <2e584f5162a04f6092bda554a6dd71d0>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <2e584f5162a04f6092bda554a6dd71d0>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <2e584f5162a04f6092bda554a6dd71d0>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <2e584f5162a04f6092bda554a6dd71d0>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long currentMax = numbers[0];\n        result.Add(currentMax);\n\
    \        for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i]\
    \ > currentMax) {\n                currentMax = numbers[i];\n            }\n \
    \           result.Add(currentMax);\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <2e584f5162a04f6092bda554a6dd71d0>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <2e584f5162a04f6092bda554a6dd71d0>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <2e584f5162a04f6092bda554a6dd71d0>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <2e584f5162a04f6092bda554a6dd71d0>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var result = new List<long>();\n\
    \        long max = numbers[0];\n        result.Add(max);\n        for (int i\
    \ = 1; i < numbers.Count; i++) {\n            if (numbers[i] > max) {\n      \
    \          max = numbers[i];\n            }\n            result.Add(max);\n  \
    \      }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var result = new List<long>();\n\
    \        long max = numbers[0];\n        result.Add(max);\n        for (int i\
    \ = 1; i < numbers.Count; i++) {\n            if (numbers[i] > max) {\n      \
    \          max = numbers[i];\n            }\n            result.Add(max);\n  \
    \      }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var result = new List<long>();\n\
    \        long max = numbers[0];\n        result.Add(max);\n        for (int i\
    \ = 1; i < numbers.Count; i++) {\n            max = Math.Max(max, numbers[i]);\n\
    \            result.Add(max);\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var max = numbers[0];\n\
    \        var result = new List<long>();\n        result.Add(max);\n        for\
    \ (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] > max) {\n\
    \                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00001] in <857c8e12ca8e4a06aef0cc960effd3c9>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <857c8e12ca8e4a06aef0cc960effd3c9>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00001] in <857c8e12ca8e4a06aef0cc960effd3c9>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <857c8e12ca8e4a06aef0cc960effd3c9>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            max = Math.Max(max,\
    \ numbers[i]);\n            result.Add(max);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <b850238bdf9f44aea7a64116731de81a>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <b850238bdf9f44aea7a64116731de81a>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <b850238bdf9f44aea7a64116731de81a>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <b850238bdf9f44aea7a64116731de81a>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var result = new List<long>();\n\
    \        long max = numbers[0];\n        result.Add(max);\n        for (int i\
    \ = 1; i < numbers.Count; i++) {\n            if (numbers[i] > max) {\n      \
    \          max = numbers[i];\n            }\n            result.Add(max);\n  \
    \      }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var result = new List<long>();\n\
    \        long max = numbers[0];\n        result.Add(max);\n        for (int i\
    \ = 1; i < numbers.Count; i++) {\n            if (numbers[i] > max) {\n      \
    \          max = numbers[i];\n            }\n            result.Add(max);\n  \
    \      }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var result = new List<long>();\n\
    \        var max = numbers[0];\n        result.Add(max);\n        for (int i =\
    \ 1; i < numbers.Count; i++) {\n            if (numbers[i] > max) {\n        \
    \        max = numbers[i];\n            }\n            result.Add(max);\n    \
    \    }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long currentMax = numbers[0];\n        result.Add(currentMax);\n\
    \        for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i]\
    \ > currentMax) {\n                currentMax = numbers[i];\n            }\n \
    \           result.Add(currentMax);\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <2e584f5162a04f6092bda554a6dd71d0>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <2e584f5162a04f6092bda554a6dd71d0>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <2e584f5162a04f6092bda554a6dd71d0>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <2e584f5162a04f6092bda554a6dd71d0>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var result = new List<long>();\n\
    \        long max = numbers[0];\n        result.Add(max);\n        for (int i\
    \ = 1; i < numbers.Count; i++) {\n            max = Math.Max(max, numbers[i]);\n\
    \            result.Add(max);\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var result = new List<long>();\n\
    \        long currentMax = numbers[0];\n        result.Add(currentMax);\n    \
    \    for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] > currentMax)\
    \ {\n                currentMax = numbers[i];\n            }\n            result.Add(currentMax);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <0e4f59b96fc64a33a0f069fa974055fc>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <0e4f59b96fc64a33a0f069fa974055fc>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <0e4f59b96fc64a33a0f069fa974055fc>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <0e4f59b96fc64a33a0f069fa974055fc>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var result = new List<long>();\n\
    \        var max = numbers[0];\n        result.Add(max);\n        for (int i =\
    \ 1; i < numbers.Count; i++) {\n            if (numbers[i] > max) {\n        \
    \        max = numbers[i];\n            }\n            result.Add(max);\n    \
    \    }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var result = new List<long>();\n\
    \        var max = numbers[0];\n        result.Add(max);\n        for (int i =\
    \ 1; i < numbers.Count; i++) {\n            if (numbers[i] > max) {\n        \
    \        max = numbers[i];\n            }\n            result.Add(max);\n    \
    \    }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var result = new List<long>();\n\
    \        var max = numbers[0];\n        result.Add(max);\n        for (int i =\
    \ 1; i < numbers.Count; i++) {\n            if (numbers[i] > max) {\n        \
    \        max = numbers[i];\n            }\n            result.Add(max);\n    \
    \    }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var result = new List<long>();\n\
    \        long max = numbers[0];\n        result.Add(max);\n        for (int i\
    \ = 1; i < numbers.Count; i++) {\n            if (numbers[i] > max) {\n      \
    \          max = numbers[i];\n            }\n            result.Add(max);\n  \
    \      }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> res = new List<long>();\n\
    \        long currMax = numbers[0];\n        res.Add(currMax);\n        for (int\
    \ i = 1; i < numbers.Count; i++) {\n            currMax = Math.Max(currMax, numbers[i]);\n\
    \            res.Add(currMax);\n        }\n        return res;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <b58e62deb9ff4aabb033d1c682cac46b>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <b58e62deb9ff4aabb033d1c682cac46b>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <b58e62deb9ff4aabb033d1c682cac46b>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <b58e62deb9ff4aabb033d1c682cac46b>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795192
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var maxes = new List<long>();\n\
    \        long maxSoFar = numbers[0];\n        maxes.Add(maxSoFar);\n        for\
    \ (int i = 1; i < numbers.Count; i++) {\n            maxSoFar = Math.Max(maxSoFar,\
    \ numbers[i]);\n            maxes.Add(maxSoFar);\n        }\n        return maxes;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <b574f33c01d74946bddf32eb31454b90>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <b574f33c01d74946bddf32eb31454b90>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <b574f33c01d74946bddf32eb31454b90>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <b574f33c01d74946bddf32eb31454b90>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795192
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var result = new List<long>();\n\
    \        long max = numbers[0];\n        result.Add(max);\n        for (int i\
    \ = 1; i < numbers.Count; i++) {\n            if (numbers[i] > max) {\n      \
    \          max = numbers[i];\n            }\n            result.Add(max);\n  \
    \      }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var result = new List<long>();\n\
    \        long max = numbers[0];\n        result.Add(max);\n        for (int i\
    \ = 1; i < numbers.Count; i++) {\n            if (numbers[i] > max) {\n      \
    \          max = numbers[i];\n            }\n            result.Add(max);\n  \
    \      }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var result = new List<long>();\n\
    \        long max = numbers[0];\n        result.Add(max);\n        for (int i\
    \ = 1; i < numbers.Count; i++) {\n            if (numbers[i] > max) {\n      \
    \          max = numbers[i];\n            }\n            result.Add(max);\n  \
    \      }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            max = Math.Max(max,\
    \ numbers[i]);\n            result.Add(max);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <b850238bdf9f44aea7a64116731de81a>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <b850238bdf9f44aea7a64116731de81a>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <b850238bdf9f44aea7a64116731de81a>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <b850238bdf9f44aea7a64116731de81a>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var result = new List<long>();\n\
    \        var max = long.MinValue;\n        foreach (var number in numbers) {\n\
    \            max = Math.Max(max, number);\n            result.Add(max);\n    \
    \    }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1ed202ee44324bfbbbc35f00dc7756e5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1ed202ee44324bfbbbc35f00dc7756e5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659795192
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long currentMax = numbers[0];\n        result.Add(currentMax);\n\
    \        for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i]\
    \ > currentMax) {\n                currentMax = numbers[i];\n            }\n \
    \           result.Add(currentMax);\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <2e584f5162a04f6092bda554a6dd71d0>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <2e584f5162a04f6092bda554a6dd71d0>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <2e584f5162a04f6092bda554a6dd71d0>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <2e584f5162a04f6092bda554a6dd71d0>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var maxes = new List<long>();\n\
    \        long max = numbers[0];\n        maxes.Add(max);\n        for (int i =\
    \ 1; i < numbers.Count; i++) {\n            if (numbers[i] > max) {\n        \
    \        max = numbers[i];\n            }\n            maxes.Add(max);\n     \
    \   }\n        return maxes;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <cc8189bf258c48cdaa1496bac0ad7ef1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <cc8189bf258c48cdaa1496bac0ad7ef1>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <cc8189bf258c48cdaa1496bac0ad7ef1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <cc8189bf258c48cdaa1496bac0ad7ef1>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var result = new List<long>();\n\
    \        long max = numbers[0];\n        result.Add(max);\n        for (int i\
    \ = 1; i < numbers.Count; i++) {\n            if (numbers[i] > max) {\n      \
    \          max = numbers[i];\n            }\n            result.Add(max);\n  \
    \      }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var result = new List<long>();\n\
    \        long max = long.MinValue;\n        foreach (var number in numbers) {\n\
    \            if (number > max) {\n                max = number;\n            }\n\
    \            result.Add(max);\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4799b61aa8554f3bbc974f4867704b86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4799b61aa8554f3bbc974f4867704b86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659795192
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var maxes = new List<long>();\n\
    \        long max = numbers[0];\n        maxes.Add(max);\n        for (int i =\
    \ 1; i < numbers.Count; i++) {\n            if (numbers[i] > max) {\n        \
    \        max = numbers[i];\n            }\n            maxes.Add(max);\n     \
    \   }\n        return maxes;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <cc8189bf258c48cdaa1496bac0ad7ef1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <cc8189bf258c48cdaa1496bac0ad7ef1>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <cc8189bf258c48cdaa1496bac0ad7ef1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <cc8189bf258c48cdaa1496bac0ad7ef1>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var result = new List<long>();\n\
    \        long max = numbers[0];\n        result.Add(max);\n        for (int i\
    \ = 1; i < numbers.Count; i++) {\n            max = Math.Max(max, numbers[i]);\n\
    \            result.Add(max);\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var result = new List<long>();\n\
    \        var max = numbers[0];\n        result.Add(max);\n        for (int i =\
    \ 1; i < numbers.Count; i++) {\n            if (numbers[i] > max) {\n        \
    \        max = numbers[i];\n            }\n            result.Add(max);\n    \
    \    }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var result = new List<long>();\n\
    \        long max = numbers[0];\n        result.Add(max);\n        for (int i\
    \ = 1; i < numbers.Count; i++) {\n            if (numbers[i] > max) {\n      \
    \          max = numbers[i];\n            }\n            result.Add(max);\n  \
    \      }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long currentMax = numbers[0];\n        result.Add(currentMax);\n\
    \        for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i]\
    \ > currentMax) {\n                currentMax = numbers[i];\n            }\n \
    \           result.Add(currentMax);\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <2e584f5162a04f6092bda554a6dd71d0>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <2e584f5162a04f6092bda554a6dd71d0>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <2e584f5162a04f6092bda554a6dd71d0>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <2e584f5162a04f6092bda554a6dd71d0>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var max = new List<long>();\n\
    \        long currentMax = numbers[0];\n        max.Add(currentMax);\n       \
    \ for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] > currentMax)\
    \ {\n                currentMax = numbers[i];\n            }\n            max.Add(currentMax);\n\
    \        }\n        return max;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <0dd5b292023741ab88eb27357f0e414e>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <0dd5b292023741ab88eb27357f0e414e>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <0dd5b292023741ab88eb27357f0e414e>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <0dd5b292023741ab88eb27357f0e414e>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      foreach (long number in numbers.Skip(1)) {\n            max = Math.Max(max,\
    \ number);\n            result.Add(max);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <c961ff3ce4a4472ab98633b3a6db94d8>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <c961ff3ce4a4472ab98633b3a6db94d8>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <c961ff3ce4a4472ab98633b3a6db94d8>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <c961ff3ce4a4472ab98633b3a6db94d8>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795192
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var result = new List<long>();\n\
    \        long max = numbers[0];\n        result.Add(max);\n        for (int i\
    \ = 1; i < numbers.Count; i++) {\n            max = Math.Max(max, numbers[i]);\n\
    \            result.Add(max);\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var result = new List<long>();\n\
    \        long max = numbers[0];\n        result.Add(max);\n        for (int i\
    \ = 1; i < numbers.Count; i++) {\n            if (numbers[i] > max) {\n      \
    \          max = numbers[i];\n            }\n            result.Add(max);\n  \
    \      }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var result = new List<long>();\n\
    \        long max = numbers[0];\n        result.Add(max);\n        for (int i\
    \ = 1; i < numbers.Count; i++) {\n            if (numbers[i] > max) {\n      \
    \          max = numbers[i];\n            }\n            result.Add(max);\n  \
    \      }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var result = new List<long>();\n\
    \        long max = numbers[0];\n        result.Add(max);\n        for (int i\
    \ = 1; i < numbers.Count; i++) {\n            if (numbers[i] > max) {\n      \
    \          max = numbers[i];\n            }\n            result.Add(max);\n  \
    \      }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var maxes = new List<long>();\n\
    \        long max = numbers[0];\n        maxes.Add(max);\n        for (int i =\
    \ 1; i < numbers.Count; i++) {\n            if (numbers[i] > max) {\n        \
    \        max = numbers[i];\n            }\n            maxes.Add(max);\n     \
    \   }\n        return maxes;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <cc8189bf258c48cdaa1496bac0ad7ef1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <cc8189bf258c48cdaa1496bac0ad7ef1>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <cc8189bf258c48cdaa1496bac0ad7ef1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <cc8189bf258c48cdaa1496bac0ad7ef1>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var maxes = new List<long>();\n\
    \        long max = numbers[0];\n        maxes.Add(max);\n        for (int i =\
    \ 1; i < numbers.Count; i++) {\n            if (numbers[i] > max) {\n        \
    \        max = numbers[i];\n            }\n            maxes.Add(max);\n     \
    \   }\n        return maxes;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <cc8189bf258c48cdaa1496bac0ad7ef1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <cc8189bf258c48cdaa1496bac0ad7ef1>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <cc8189bf258c48cdaa1496bac0ad7ef1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <cc8189bf258c48cdaa1496bac0ad7ef1>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            max = Math.Max(max,\
    \ numbers[i]);\n            result.Add(max);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <b850238bdf9f44aea7a64116731de81a>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <b850238bdf9f44aea7a64116731de81a>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <b850238bdf9f44aea7a64116731de81a>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <b850238bdf9f44aea7a64116731de81a>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> maxes = new\
    \ List<long>();\n        long max = numbers[0];\n        maxes.Add(max);\n   \
    \     for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            maxes.Add(max);\n\
    \        }\n        return maxes;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <789e794cc2164ffc85b75fa2f2e21c50>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <789e794cc2164ffc85b75fa2f2e21c50>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <789e794cc2164ffc85b75fa2f2e21c50>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <789e794cc2164ffc85b75fa2f2e21c50>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795192
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long currentMax = numbers[0];\n        result.Add(currentMax);\n\
    \        for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i]\
    \ > currentMax) {\n                currentMax = numbers[i];\n            }\n \
    \           result.Add(currentMax);\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <2e584f5162a04f6092bda554a6dd71d0>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <2e584f5162a04f6092bda554a6dd71d0>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <2e584f5162a04f6092bda554a6dd71d0>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <2e584f5162a04f6092bda554a6dd71d0>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var maxes = new List<long>();\n\
    \        var max = numbers[0];\n        maxes.Add(max);\n        for (int i =\
    \ 1; i < numbers.Count; i++) {\n            if (numbers[i] > max) {\n        \
    \        max = numbers[i];\n            }\n            maxes.Add(max);\n     \
    \   }\n        return maxes;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <f1d81ac57ce54c8b9639be45b5d12fae>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <f1d81ac57ce54c8b9639be45b5d12fae>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <f1d81ac57ce54c8b9639be45b5d12fae>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <f1d81ac57ce54c8b9639be45b5d12fae>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var max = numbers[0];\n\
    \        var result = new List<long>();\n        result.Add(max);\n        for\
    \ (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] > max) {\n\
    \                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00001] in <857c8e12ca8e4a06aef0cc960effd3c9>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <857c8e12ca8e4a06aef0cc960effd3c9>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00001] in <857c8e12ca8e4a06aef0cc960effd3c9>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <857c8e12ca8e4a06aef0cc960effd3c9>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var result = new List<long>();\n\
    \        long max = numbers[0];\n        result.Add(max);\n        for (int i\
    \ = 1; i < numbers.Count; i++) {\n            if (numbers[i] > max) {\n      \
    \          max = numbers[i];\n            }\n            result.Add(max);\n  \
    \      }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var result = new List<long>();\n\
    \        var max = numbers[0];\n        result.Add(max);\n        for (int i =\
    \ 1; i < numbers.Count; i++) {\n            if (numbers[i] > max) {\n        \
    \        max = numbers[i];\n            }\n            result.Add(max);\n    \
    \    }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            max = Math.Max(max,\
    \ numbers[i]);\n            result.Add(max);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <b850238bdf9f44aea7a64116731de81a>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <b850238bdf9f44aea7a64116731de81a>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <b850238bdf9f44aea7a64116731de81a>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <b850238bdf9f44aea7a64116731de81a>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var result = new List<long>();\n\
    \        long max = numbers[0];\n        result.Add(max);\n        for (int i\
    \ = 1; i < numbers.Count; i++) {\n            if (numbers[i] > max) {\n      \
    \          max = numbers[i];\n            }\n            result.Add(max);\n  \
    \      }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var result = new List<long>();\n\
    \        long currentMax = numbers[0];\n        result.Add(currentMax);\n    \
    \    for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] > currentMax)\
    \ {\n                currentMax = numbers[i];\n            }\n            result.Add(currentMax);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <0e4f59b96fc64a33a0f069fa974055fc>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <0e4f59b96fc64a33a0f069fa974055fc>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <0e4f59b96fc64a33a0f069fa974055fc>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <0e4f59b96fc64a33a0f069fa974055fc>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var max = numbers[0];\n\
    \        var result = new List<long>();\n        result.Add(max);\n        for\
    \ (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] > max) {\n\
    \                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00001] in <857c8e12ca8e4a06aef0cc960effd3c9>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <857c8e12ca8e4a06aef0cc960effd3c9>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00001] in <857c8e12ca8e4a06aef0cc960effd3c9>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <857c8e12ca8e4a06aef0cc960effd3c9>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var result = new List<long>();\n\
    \        long max = 0;\n        foreach (var number in numbers) {\n          \
    \  max = Math.Max(max, number);\n            result.Add(max);\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <17890a58677745e39956a0141675ecb7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <17890a58677745e39956a0141675ecb7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659795192
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var result = new List<long>();\n\
    \        var max = numbers[0];\n        result.Add(max);\n        for (int i =\
    \ 1; i < numbers.Count; i++) {\n            if (numbers[i] > max) {\n        \
    \        max = numbers[i];\n            }\n            result.Add(max);\n    \
    \    }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long currentMax = numbers[0];\n        result.Add(currentMax);\n\
    \        for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i]\
    \ > currentMax) {\n                currentMax = numbers[i];\n            }\n \
    \           result.Add(currentMax);\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <2e584f5162a04f6092bda554a6dd71d0>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <2e584f5162a04f6092bda554a6dd71d0>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <2e584f5162a04f6092bda554a6dd71d0>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <2e584f5162a04f6092bda554a6dd71d0>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var max = numbers[0];\n\
    \        var result = new List<long>();\n        result.Add(max);\n        for\
    \ (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] > max) {\n\
    \                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00001] in <857c8e12ca8e4a06aef0cc960effd3c9>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <857c8e12ca8e4a06aef0cc960effd3c9>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00001] in <857c8e12ca8e4a06aef0cc960effd3c9>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <857c8e12ca8e4a06aef0cc960effd3c9>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long currentMax = numbers[0];\n        result.Add(currentMax);\n\
    \        for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i]\
    \ > currentMax) {\n                currentMax = numbers[i];\n            }\n \
    \           result.Add(currentMax);\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <2e584f5162a04f6092bda554a6dd71d0>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <2e584f5162a04f6092bda554a6dd71d0>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <2e584f5162a04f6092bda554a6dd71d0>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <2e584f5162a04f6092bda554a6dd71d0>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> maxes = new\
    \ List<long>();\n        long max = numbers[0];\n        maxes.Add(max);\n   \
    \     for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            maxes.Add(max);\n\
    \        }\n        return maxes;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <789e794cc2164ffc85b75fa2f2e21c50>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <789e794cc2164ffc85b75fa2f2e21c50>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <789e794cc2164ffc85b75fa2f2e21c50>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <789e794cc2164ffc85b75fa2f2e21c50>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795192
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        foreach (long number in numbers)\
    \ {\n            max = Math.Max(max, number);\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dc32dfbab7664cbb8ca18cc978d65584>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dc32dfbab7664cbb8ca18cc978d65584>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659795192
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var result = new List<long>();\n\
    \        var max = long.MinValue;\n        foreach (var number in numbers) {\n\
    \            max = Math.Max(max, number);\n            result.Add(max);\n    \
    \    }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1ed202ee44324bfbbbc35f00dc7756e5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1ed202ee44324bfbbbc35f00dc7756e5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659795192
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = long.MinValue;\n        foreach (long number\
    \ in numbers) {\n            max = Math.Max(max, number);\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bf6691903b8d41d88221e196fc4750fa>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bf6691903b8d41d88221e196fc4750fa>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659795192
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var result = new List<long>();\n\
    \        long max = numbers[0];\n        result.Add(max);\n        for (int i\
    \ = 1; i < numbers.Count; i++) {\n            max = Math.Max(max, numbers[i]);\n\
    \            result.Add(max);\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers[0];\n        result.Add(max);\n  \
    \      for (int i = 1; i < numbers.Count; i++) {\n            max = Math.Max(max,\
    \ numbers[i]);\n            result.Add(max);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <b850238bdf9f44aea7a64116731de81a>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <b850238bdf9f44aea7a64116731de81a>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <b850238bdf9f44aea7a64116731de81a>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <b850238bdf9f44aea7a64116731de81a>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var result = new List<long>();\n\
    \        long max = numbers[0];\n        result.Add(max);\n        for (int i\
    \ = 1; i < numbers.Count; i++) {\n            if (numbers[i] > max) {\n      \
    \          max = numbers[i];\n            }\n            result.Add(max);\n  \
    \      }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var maxes = new List<long>();\n\
    \        long max = numbers[0];\n        maxes.Add(max);\n        for (int i =\
    \ 1; i < numbers.Count; i++) {\n            if (numbers[i] > max) {\n        \
    \        max = numbers[i];\n            }\n            maxes.Add(max);\n     \
    \   }\n        return maxes;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <cc8189bf258c48cdaa1496bac0ad7ef1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <cc8189bf258c48cdaa1496bac0ad7ef1>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <cc8189bf258c48cdaa1496bac0ad7ef1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <cc8189bf258c48cdaa1496bac0ad7ef1>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> maxes = new\
    \ List<long>();\n        long max = numbers[0];\n        maxes.Add(max);\n   \
    \     for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] >\
    \ max) {\n                max = numbers[i];\n            }\n            maxes.Add(max);\n\
    \        }\n        return maxes;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <789e794cc2164ffc85b75fa2f2e21c50>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <789e794cc2164ffc85b75fa2f2e21c50>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <789e794cc2164ffc85b75fa2f2e21c50>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <789e794cc2164ffc85b75fa2f2e21c50>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795192
