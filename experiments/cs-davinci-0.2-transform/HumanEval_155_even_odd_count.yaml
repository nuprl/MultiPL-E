name: HumanEval_155_even_odd_count
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given an integer. return a tuple that has the number of even\
  \ and odd digits respectively.\n    // Example:\n    // >>> EvenOddCount((-12L))\n\
  \    // (Tuple.Create(1L, 1L))\n    // >>> EvenOddCount((123L))\n    // (Tuple.Create(1L,\
  \ 2L))\n    public static Tuple<long, long> EvenOddCount(long num) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(EvenOddCount((7L)).Equals((Tuple.Create(0L,\
  \ 1L))));\n    Debug.Assert(EvenOddCount((-78L)).Equals((Tuple.Create(1L, 1L))));\n\
  \    Debug.Assert(EvenOddCount((3452L)).Equals((Tuple.Create(2L, 2L))));\n    Debug.Assert(EvenOddCount((346211L)).Equals((Tuple.Create(3L,\
  \ 3L))));\n    Debug.Assert(EvenOddCount((-345821L)).Equals((Tuple.Create(3L, 3L))));\n\
  \    Debug.Assert(EvenOddCount((-2L)).Equals((Tuple.Create(1L, 0L))));\n    Debug.Assert(EvenOddCount((-45347L)).Equals((Tuple.Create(2L,\
  \ 3L))));\n    Debug.Assert(EvenOddCount((0L)).Equals((Tuple.Create(1L, 0L))));\n\
  \    }\n\n}\n"
completions: ["        long even = 0;\n        long odd = 0;\n        if (num < 0)\
    \ {\n            num = -num;\n        }\n        while (num > 0) {\n         \
    \   long digit = num % 10;\n            if (digit % 2 == 0) {\n              \
    \  even++;\n            } else {\n                odd++;\n            }\n    \
    \        num /= 10;\n        }\n        return Tuple.Create(even, odd);", "  \
    \      long even = 0;\n        long odd = 0;\n        while (num != 0) {\n   \
    \         if (num % 2 == 0) {\n                even++;\n            } else {\n\
    \                odd++;\n            }\n            num /= 10;\n        }\n  \
    \      return Tuple.Create(even, odd);", "        long even = 0;\n        long\
    \ odd = 0;\n        while (num != 0) {\n            if (num % 2 == 0) {\n    \
    \            even++;\n            } else {\n                odd++;\n         \
    \   }\n            num /= 10;\n        }\n        return Tuple.Create(even, odd);",
  "        // TODO: Implement\n        return Tuple.Create(0L, 0L);", "        long\
    \ even = 0;\n        long odd = 0;\n        while (num != 0) {\n            if\
    \ (num % 2 == 0) {\n                even++;\n            } else {\n          \
    \      odd++;\n            }\n            num /= 10;\n        }\n        return\
    \ Tuple.Create(even, odd);", "        var even = 0L;\n        var odd = 0L;\n\
    \        while (num != 0) {\n            var digit = num % 10;\n            if\
    \ (digit % 2 == 0) {\n                even++;\n            } else {\n        \
    \        odd++;\n            }\n            num /= 10;\n        }\n        return\
    \ Tuple.Create(even, odd);", "        long even = 0;\n        long odd = 0;\n\
    \        while (num != 0) {\n            if (num % 2 == 0) {\n               \
    \ even++;\n            } else {\n                odd++;\n            }\n     \
    \       num /= 10;\n        }\n        return Tuple.Create(even, odd);", "   \
    \     long even = 0;\n        long odd = 0;\n        if (num < 0) {\n        \
    \    num = -num;\n        }\n        while (num > 0) {\n            if (num %\
    \ 2 == 0) {\n                even++;\n            } else {\n                odd++;\n\
    \            }\n            num /= 10;\n        }\n        return Tuple.Create(even,\
    \ odd);", "        long even = 0;\n        long odd = 0;\n        while (num !=\
    \ 0) {\n            if (num % 2 == 0) {\n                even++;\n           \
    \ } else {\n                odd++;\n            }\n            num /= 10;\n  \
    \      }\n        return Tuple.Create(even, odd);", "        long even = 0;\n\
    \        long odd = 0;\n        if (num < 0) {\n            num = -num;\n    \
    \    }\n        while (num > 0) {\n            if (num % 2 == 0) {\n         \
    \       even++;\n            } else {\n                odd++;\n            }\n\
    \            num /= 10;\n        }\n        return Tuple.Create(even, odd);",
  "        long even = 0;\n        long odd = 0;\n        while (num != 0) {\n   \
    \         if (num % 2 == 0) {\n                even++;\n            } else {\n\
    \                odd++;\n            }\n            num /= 10;\n        }\n  \
    \      return Tuple.Create(even, odd);", "        long evenCount = 0;\n      \
    \  long oddCount = 0;\n        while (num != 0) {\n            if (num % 2 ==\
    \ 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n\
    \            }\n            num /= 10;\n        }\n        return Tuple.Create(evenCount,\
    \ oddCount);", "        long even = 0;\n        long odd = 0;\n        if (num\
    \ < 0) {\n            num = -num;\n        }\n        while (num > 0) {\n    \
    \        if (num % 2 == 0) {\n                even++;\n            } else {\n\
    \                odd++;\n            }\n            num /= 10;\n        }\n  \
    \      return Tuple.Create(even, odd);", "        long even = 0;\n        long\
    \ odd = 0;\n        foreach (char c in num.ToString()) {\n            if (c %\
    \ 2 == 0) {\n                even++;\n            } else {\n                odd++;\n\
    \            }\n        }\n        return Tuple.Create(even, odd);", "       \
    \ long even = 0;\n        long odd = 0;\n        while (num != 0) {\n        \
    \    if (num % 2 == 0) {\n                even++;\n            } else {\n    \
    \            odd++;\n            }\n            num /= 10;\n        }\n      \
    \  return Tuple.Create(even, odd);", "        long even = 0;\n        long odd\
    \ = 0;\n        while (num != 0) {\n            if (num % 2 == 0) {\n        \
    \        even++;\n            } else {\n                odd++;\n            }\n\
    \            num /= 10;\n        }\n        return Tuple.Create(even, odd);",
  "        long even = 0;\n        long odd = 0;\n        while (num != 0) {\n   \
    \         if (num % 2 == 0) {\n                even++;\n            } else {\n\
    \                odd++;\n            }\n            num /= 10;\n        }\n  \
    \      return Tuple.Create(even, odd);", "        long even = 0;\n        long\
    \ odd = 0;\n        while (num != 0) {\n            if (num % 2 == 0) {\n    \
    \            even++;\n            } else {\n                odd++;\n         \
    \   }\n            num /= 10;\n        }\n        return Tuple.Create(even, odd);",
  "        // TODO: Implement this function.\n        long even = 0;\n        long\
    \ odd = 0;\n        if (num < 0) {\n            num = num * -1;\n        }\n \
    \       while (num > 0) {\n            long digit = num % 10;\n            if\
    \ (digit % 2 == 0) {\n                even++;\n            } else {\n        \
    \        odd++;\n            }\n            num = num / 10;\n        }\n     \
    \   return Tuple.Create(even, odd);", "        // TODO: Implement this function.\n\
    \        long even = 0;\n        long odd = 0;\n        while (num != 0) {\n \
    \           if (num % 2 == 0) {\n                even++;\n            } else {\n\
    \                odd++;\n            }\n            num /= 10;\n        }\n  \
    \      return Tuple.Create(even, odd);", "        long even = 0;\n        long\
    \ odd = 0;\n        while (num != 0) {\n            if (num % 2 == 0) {\n    \
    \            even++;\n            } else {\n                odd++;\n         \
    \   }\n            num /= 10;\n        }\n        return Tuple.Create(even, odd);",
  "        long even = 0;\n        long odd = 0;\n        while (num != 0) {\n   \
    \         long digit = num % 10;\n            if (digit % 2 == 0) {\n        \
    \        even++;\n            } else {\n                odd++;\n            }\n\
    \            num /= 10;\n        }\n        return Tuple.Create(even, odd);",
  "        long even = 0;\n        long odd = 0;\n        while (num != 0) {\n   \
    \         if (num % 2 == 0) {\n                even++;\n            } else {\n\
    \                odd++;\n            }\n            num /= 10;\n        }\n  \
    \      return Tuple.Create(even, odd);", "        long even = 0;\n        long\
    \ odd = 0;\n        while (num != 0) {\n            long digit = num % 10;\n \
    \           if (digit % 2 == 0) {\n                even++;\n            } else\
    \ {\n                odd++;\n            }\n            num /= 10;\n        }\n\
    \        return Tuple.Create(even, odd);", "        long even = 0;\n        long\
    \ odd = 0;\n        while (num != 0) {\n            if (num % 2 == 0) {\n    \
    \            even++;\n            } else {\n                odd++;\n         \
    \   }\n            num /= 10;\n        }\n        return Tuple.Create(even, odd);",
  "        long even = 0;\n        long odd = 0;\n        while (num != 0) {\n   \
    \         long digit = num % 10;\n            if (digit % 2 == 0) {\n        \
    \        even += 1;\n            } else {\n                odd += 1;\n       \
    \     }\n            num /= 10;\n        }\n        return Tuple.Create(even,\
    \ odd);", "        long even = 0;\n        long odd = 0;\n        while (num !=\
    \ 0) {\n            if (num % 2 == 0) {\n                even++;\n           \
    \ } else {\n                odd++;\n            }\n            num /= 10;\n  \
    \      }\n        return Tuple.Create(even, odd);", "        long even = 0;\n\
    \        long odd = 0;\n        while (num != 0) {\n            if (num % 2 ==\
    \ 0) {\n                even++;\n            } else {\n                odd++;\n\
    \            }\n            num /= 10;\n        }\n        return Tuple.Create(even,\
    \ odd);", "        // Your code goes here.\n        return null;", "        long\
    \ even = 0;\n        long odd = 0;\n        while (num != 0) {\n            if\
    \ (num % 2 == 0) {\n                even++;\n            } else {\n          \
    \      odd++;\n            }\n            num /= 10;\n        }\n        return\
    \ Tuple.Create(even, odd);", "        long even = 0;\n        long odd = 0;\n\
    \        while (num != 0) {\n            long digit = num % 10;\n            if\
    \ (digit % 2 == 0) {\n                even++;\n            } else {\n        \
    \        odd++;\n            }\n            num /= 10;\n        }\n        return\
    \ Tuple.Create(even, odd);", "        long even = 0;\n        long odd = 0;\n\
    \        while (num != 0) {\n            long digit = num % 10;\n            if\
    \ (digit % 2 == 0) {\n                even++;\n            } else {\n        \
    \        odd++;\n            }\n            num /= 10;\n        }\n        return\
    \ Tuple.Create(even, odd);", "        long even = 0;\n        long odd = 0;\n\
    \        while (num != 0) {\n            if (num % 2 == 0) {\n               \
    \ even++;\n            } else {\n                odd++;\n            }\n     \
    \       num /= 10;\n        }\n        return Tuple.Create(even, odd);", "   \
    \     long even = 0;\n        long odd = 0;\n        while (num != 0) {\n    \
    \        long digit = num % 10;\n            if (digit % 2 == 0) {\n         \
    \       even++;\n            } else {\n                odd++;\n            }\n\
    \            num /= 10;\n        }\n        return Tuple.Create(even, odd);",
  "        long even = 0;\n        long odd = 0;\n        while (num != 0) {\n   \
    \         if (num % 2 == 0) {\n                even += 1;\n            } else\
    \ {\n                odd += 1;\n            }\n            num /= 10;\n      \
    \  }\n        return Tuple.Create(even, odd);", "        long even = 0;\n    \
    \    long odd = 0;\n        if (num < 0) {\n            num = -num;\n        }\n\
    \        while (num > 0) {\n            if (num % 2 == 0) {\n                even++;\n\
    \            } else {\n                odd++;\n            }\n            num\
    \ /= 10;\n        }\n        return Tuple.Create(even, odd);", "        long even\
    \ = 0;\n        long odd = 0;\n        while (num != 0) {\n            if (num\
    \ % 2 == 0) {\n                even++;\n            } else {\n               \
    \ odd++;\n            }\n            num /= 10;\n        }\n        return Tuple.Create(even,\
    \ odd);", "        long even = 0;\n        long odd = 0;\n        while (num !=\
    \ 0) {\n            if (num % 2 == 0) {\n                even++;\n           \
    \ } else {\n                odd++;\n            }\n            num /= 10;\n  \
    \      }\n        return Tuple.Create(even, odd);", "        long even = 0;\n\
    \        long odd = 0;\n        while (num != 0) {\n            if (num % 2 ==\
    \ 0) {\n                even++;\n            } else {\n                odd++;\n\
    \            }\n            num /= 10;\n        }\n        return Tuple.Create(even,\
    \ odd);", "        long even = 0;\n        long odd = 0;\n        while (num !=\
    \ 0) {\n            long digit = num % 10;\n            if (digit % 2 == 0) {\n\
    \                even++;\n            } else {\n                odd++;\n     \
    \       }\n            num /= 10;\n        }\n        return Tuple.Create(even,\
    \ odd);", "        long even = 0;\n        long odd = 0;\n        while (num !=\
    \ 0) {\n            if (num % 2 == 0) {\n                even++;\n           \
    \ } else {\n                odd++;\n            }\n            num /= 10;\n  \
    \      }\n        return Tuple.Create(even, odd);", "        // Your code goes\
    \ here\n        return null;", "        long even = 0;\n        long odd = 0;\n\
    \        if (num < 0) {\n            num = -num;\n        }\n        while (num\
    \ > 0) {\n            if (num % 2 == 0) {\n                even++;\n         \
    \   } else {\n                odd++;\n            }\n            num /= 10;\n\
    \        }\n        return Tuple.Create(even, odd);", "        long even = 0;\n\
    \        long odd = 0;\n        while (num != 0) {\n            if (num % 2 ==\
    \ 0) {\n                even++;\n            } else {\n                odd++;\n\
    \            }\n            num /= 10;\n        }\n        return Tuple.Create(even,\
    \ odd);", "        long even = 0;\n        long odd = 0;\n        while (num !=\
    \ 0) {\n            if (num % 2 == 0) {\n                even++;\n           \
    \ } else {\n                odd++;\n            }\n            num /= 10;\n  \
    \      }\n        return Tuple.Create(even, odd);", "        long even = 0;\n\
    \        long odd = 0;\n        while (num != 0) {\n            long digit = num\
    \ % 10;\n            if (digit % 2 == 0) {\n                even++;\n        \
    \    } else {\n                odd++;\n            }\n            num /= 10;\n\
    \        }\n        return Tuple.Create(even, odd);", "        long even = 0;\n\
    \        long odd = 0;\n        while (num != 0) {\n            if (num % 2 ==\
    \ 0) {\n                even++;\n            } else {\n                odd++;\n\
    \            }\n            num /= 10;\n        }\n        return Tuple.Create(even,\
    \ odd);", "        long even = 0;\n        long odd = 0;\n        while (num !=\
    \ 0) {\n            if (num % 2 == 0) {\n                even++;\n           \
    \ } else {\n                odd++;\n            }\n            num /= 10;\n  \
    \      }\n        return Tuple.Create(even, odd);", "        long even = 0;\n\
    \        long odd = 0;\n        while (num != 0) {\n            if (num % 2 ==\
    \ 0) {\n                even++;\n            } else {\n                odd++;\n\
    \            }\n            num /= 10;\n        }\n        return Tuple.Create(even,\
    \ odd);", "        long even = 0;\n        long odd = 0;\n        while (num !=\
    \ 0) {\n            if (num % 2 == 0) {\n                even++;\n           \
    \ } else {\n                odd++;\n            }\n            num /= 10;\n  \
    \      }\n        return Tuple.Create(even, odd);", "        long even = 0;\n\
    \        long odd = 0;\n        while (num != 0) {\n            long digit = num\
    \ % 10;\n            if (digit % 2 == 0) {\n                even++;\n        \
    \    } else {\n                odd++;\n            }\n            num /= 10;\n\
    \        }\n        return Tuple.Create(even, odd);", "        long even = 0;\n\
    \        long odd = 0;\n        while (num != 0) {\n            long digit = num\
    \ % 10;\n            if (digit % 2 == 0) {\n                even++;\n        \
    \    } else {\n                odd++;\n            }\n            num /= 10;\n\
    \        }\n        return Tuple.Create(even, odd);", "        long even = 0;\n\
    \        long odd = 0;\n        while (num != 0) {\n            if (num % 2 ==\
    \ 0) {\n                even++;\n            } else {\n                odd++;\n\
    \            }\n            num /= 10;\n        }\n        return Tuple.Create(even,\
    \ odd);", "        long even = 0;\n        long odd = 0;\n        while (num !=\
    \ 0) {\n            if (num % 2 == 0) {\n                even++;\n           \
    \ } else {\n                odd++;\n            }\n            num /= 10;\n  \
    \      }\n        return Tuple.Create(even, odd);", "        long even = 0;\n\
    \        long odd = 0;\n        while (num != 0) {\n            if (num % 2 ==\
    \ 0) {\n                even++;\n            } else {\n                odd++;\n\
    \            }\n            num /= 10;\n        }\n        return Tuple.Create(even,\
    \ odd);", "        long even = 0;\n        long odd = 0;\n        while (num !=\
    \ 0) {\n            long digit = num % 10;\n            if (digit % 2 == 0) {\n\
    \                even++;\n            } else {\n                odd++;\n     \
    \       }\n            num /= 10;\n        }\n        return Tuple.Create(even,\
    \ odd);", "        long even = 0;\n        long odd = 0;\n        while (num !=\
    \ 0) {\n            long digit = num % 10;\n            if (digit % 2 == 0) {\n\
    \                even++;\n            } else {\n                odd++;\n     \
    \       }\n            num /= 10;\n        }\n        return Tuple.Create(even,\
    \ odd);", "        long even = 0;\n        long odd = 0;\n        while (num !=\
    \ 0) {\n            long digit = num % 10;\n            if (digit % 2 == 0) {\n\
    \                even += 1;\n            } else {\n                odd += 1;\n\
    \            }\n            num /= 10;\n        }\n        return Tuple.Create(even,\
    \ odd);", "        long even = 0;\n        long odd = 0;\n        while (num !=\
    \ 0) {\n            if (num % 2 == 0) {\n                even++;\n           \
    \ } else {\n                odd++;\n            }\n            num /= 10;\n  \
    \      }\n        return Tuple.Create(even, odd);", "        long even = 0;\n\
    \        long odd = 0;\n        while (num != 0) {\n            long digit = num\
    \ % 10;\n            if (digit % 2 == 0) {\n                even += 1;\n     \
    \       } else {\n                odd += 1;\n            }\n            num /=\
    \ 10;\n        }\n        return Tuple.Create(even, odd);", "        long even\
    \ = 0;\n        long odd = 0;\n        while (num != 0) {\n            if (num\
    \ % 2 == 0) {\n                even++;\n            } else {\n               \
    \ odd++;\n            }\n            num /= 10;\n        }\n        return Tuple.Create(even,\
    \ odd);", "        long even = 0;\n        long odd = 0;\n        if (num < 0)\
    \ {\n            num = -num;\n        }\n        while (num > 0) {\n         \
    \   long digit = num % 10;\n            if (digit % 2 == 0) {\n              \
    \  even++;\n            } else {\n                odd++;\n            }\n    \
    \        num /= 10;\n        }\n        return Tuple.Create(even, odd);", "  \
    \      long even = 0;\n        long odd = 0;\n        while (num != 0) {\n   \
    \         if (num % 2 == 0) {\n                even++;\n            } else {\n\
    \                odd++;\n            }\n            num /= 10;\n        }\n  \
    \      return Tuple.Create(even, odd);", "        long even = 0;\n        long\
    \ odd = 0;\n        if (num < 0) {\n            num = -num;\n        }\n     \
    \   while (num > 0) {\n            long digit = num % 10;\n            if (digit\
    \ % 2 == 0) {\n                even++;\n            } else {\n               \
    \ odd++;\n            }\n            num /= 10;\n        }\n        return Tuple.Create(even,\
    \ odd);", "        long even = 0;\n        long odd = 0;\n        while (num !=\
    \ 0) {\n            long digit = num % 10;\n            if (digit % 2 == 0) {\n\
    \                even++;\n            } else {\n                odd++;\n     \
    \       }\n            num /= 10;\n        }\n        return Tuple.Create(even,\
    \ odd);", "        long even = 0;\n        long odd = 0;\n        while (num !=\
    \ 0) {\n            long digit = num % 10;\n            if (digit % 2 == 0) {\n\
    \                even += 1;\n            } else {\n                odd += 1;\n\
    \            }\n            num /= 10;\n        }\n        return Tuple.Create(even,\
    \ odd);", "        long even = 0;\n        long odd = 0;\n        while (num !=\
    \ 0) {\n            if (num % 2 == 0) {\n                even++;\n           \
    \ } else {\n                odd++;\n            }\n            num /= 10;\n  \
    \      }\n        return Tuple.Create(even, odd);", "        long even = 0;\n\
    \        long odd = 0;\n        while (num != 0) {\n            if (num % 2 ==\
    \ 0) {\n                even++;\n            } else {\n                odd++;\n\
    \            }\n            num /= 10;\n        }\n        return Tuple.Create(even,\
    \ odd);", "        long even = 0;\n        long odd = 0;\n        while (num !=\
    \ 0) {\n            if (num % 2 == 0) {\n                even++;\n           \
    \ } else {\n                odd++;\n            }\n            num /= 10;\n  \
    \      }\n        return Tuple.Create(even, odd);", "        long even = 0;\n\
    \        long odd = 0;\n        while (num != 0) {\n            if (num % 2 ==\
    \ 0) {\n                even++;\n            } else {\n                odd++;\n\
    \            }\n            num /= 10;\n        }\n        return Tuple.Create(even,\
    \ odd);", "        long even = 0;\n        long odd = 0;\n        while (num !=\
    \ 0) {\n            if (num % 2 == 0) {\n                even++;\n           \
    \ } else {\n                odd++;\n            }\n            num /= 10;\n  \
    \      }\n        return Tuple.Create(even, odd);", "        // Fill in your code\
    \ here.\n        return null;", "        long even = 0;\n        long odd = 0;\n\
    \        while (num != 0) {\n            long digit = num % 10;\n            if\
    \ (digit % 2 == 0) {\n                even += 1;\n            } else {\n     \
    \           odd += 1;\n            }\n            num /= 10;\n        }\n    \
    \    return Tuple.Create(even, odd);", "        // TODO: Implement this function.\n\
    \        long even = 0;\n        long odd = 0;\n        if (num < 0) {\n     \
    \       num = num * -1;\n        }\n        while (num > 0) {\n            if\
    \ (num % 2 == 0) {\n                even++;\n            } else {\n          \
    \      odd++;\n            }\n            num = num / 10;\n        }\n       \
    \ return Tuple.Create(even, odd);", "        long evenCount = 0;\n        long\
    \ oddCount = 0;\n        long absNum = Math.Abs(num);\n        while (absNum >\
    \ 0) {\n            long digit = absNum % 10;\n            if (digit % 2 == 0)\
    \ {\n                evenCount++;\n            } else {\n                oddCount++;\n\
    \            }\n            absNum /= 10;\n        }\n        return Tuple.Create(evenCount,\
    \ oddCount);", "        long even = 0;\n        long odd = 0;\n        while (num\
    \ != 0) {\n            if (num % 2 == 0) {\n                even++;\n        \
    \    } else {\n                odd++;\n            }\n            num /= 10;\n\
    \        }\n        return Tuple.Create(even, odd);", "        long even = 0;\n\
    \        long odd = 0;\n        while (num != 0) {\n            if (num % 2 ==\
    \ 0) {\n                even++;\n            } else {\n                odd++;\n\
    \            }\n            num /= 10;\n        }\n        return Tuple.Create(even,\
    \ odd);", "        long even = 0;\n        long odd = 0;\n        while (num !=\
    \ 0) {\n            if (num % 2 == 0) {\n                even++;\n           \
    \ } else {\n                odd++;\n            }\n            num /= 10;\n  \
    \      }\n        return Tuple.Create(even, odd);", "        long even = 0;\n\
    \        long odd = 0;\n        while (num != 0) {\n            if (num % 2 ==\
    \ 0) {\n                even++;\n            } else {\n                odd++;\n\
    \            }\n            num /= 10;\n        }\n        return Tuple.Create(even,\
    \ odd);", "        long even = 0;\n        long odd = 0;\n        while (num !=\
    \ 0) {\n            if (num % 2 == 0) {\n                even++;\n           \
    \ } else {\n                odd++;\n            }\n            num /= 10;\n  \
    \      }\n        return Tuple.Create(even, odd);", "        long even = 0;\n\
    \        long odd = 0;\n        if (num < 0) {\n            num = -num;\n    \
    \    }\n        while (num > 0) {\n            if (num % 2 == 0) {\n         \
    \       even++;\n            } else {\n                odd++;\n            }\n\
    \            num /= 10;\n        }\n        return Tuple.Create(even, odd);",
  "        long even = 0;\n        long odd = 0;\n        while (num != 0) {\n   \
    \         if (num % 2 == 0) {\n                even += 1;\n            } else\
    \ {\n                odd += 1;\n            }\n            num /= 10;\n      \
    \  }\n        return Tuple.Create(even, odd);", "        long even = 0;\n    \
    \    long odd = 0;\n        if (num < 0) {\n            num = -num;\n        }\n\
    \        while (num > 0) {\n            if (num % 2 == 0) {\n                even++;\n\
    \            } else {\n                odd++;\n            }\n            num\
    \ /= 10;\n        }\n        return Tuple.Create(even, odd);", "        long even\
    \ = 0;\n        long odd = 0;\n        while (num != 0) {\n            if (num\
    \ % 2 == 0) {\n                even++;\n            } else {\n               \
    \ odd++;\n            }\n            num /= 10;\n        }\n        return Tuple.Create(even,\
    \ odd);", "        long even = 0;\n        long odd = 0;\n        while (num !=\
    \ 0) {\n            long digit = num % 10;\n            if (digit % 2 == 0) {\n\
    \                even++;\n            } else {\n                odd++;\n     \
    \       }\n            num /= 10;\n        }\n        return Tuple.Create(even,\
    \ odd);", "        long even = 0;\n        long odd = 0;\n        while (num !=\
    \ 0) {\n            long digit = num % 10;\n            if (digit % 2 == 0) {\n\
    \                even++;\n            } else {\n                odd++;\n     \
    \       }\n            num /= 10;\n        }\n        return Tuple.Create(even,\
    \ odd);", "        long even = 0;\n        long odd = 0;\n        while (num !=\
    \ 0) {\n            long digit = num % 10;\n            if (digit % 2 == 0) {\n\
    \                even++;\n            } else {\n                odd++;\n     \
    \       }\n            num /= 10;\n        }\n        return Tuple.Create(even,\
    \ odd);", "        long even = 0;\n        long odd = 0;\n        while (num !=\
    \ 0) {\n            if (num % 2 == 0) {\n                even++;\n           \
    \ } else {\n                odd++;\n            }\n            num /= 10;\n  \
    \      }\n        return Tuple.Create(even, odd);", "        long even = 0;\n\
    \        long odd = 0;\n        while (num != 0) {\n            if (num % 2 ==\
    \ 0) {\n                even++;\n            } else {\n                odd++;\n\
    \            }\n            num /= 10;\n        }\n        return Tuple.Create(even,\
    \ odd);", "        long even = 0;\n        long odd = 0;\n        if (num < 0)\
    \ {\n            num = -num;\n        }\n        while (num > 0) {\n         \
    \   long digit = num % 10;\n            if (digit % 2 == 0) {\n              \
    \  even += 1;\n            } else {\n                odd += 1;\n            }\n\
    \            num /= 10;\n        }\n        return Tuple.Create(even, odd);",
  "        long even = 0;\n        long odd = 0;\n        while (num != 0) {\n   \
    \         if (num % 2 == 0) {\n                even++;\n            } else {\n\
    \                odd++;\n            }\n            num /= 10;\n        }\n  \
    \      return Tuple.Create(even, odd);", "        long even = 0;\n        long\
    \ odd = 0;\n        if (num < 0) {\n            num = -num;\n        }\n     \
    \   while (num > 0) {\n            if (num % 2 == 0) {\n                even++;\n\
    \            } else {\n                odd++;\n            }\n            num\
    \ /= 10;\n        }\n        return Tuple.Create(even, odd);", "        long even\
    \ = 0;\n        long odd = 0;\n        if (num < 0) {\n            num = -num;\n\
    \        }\n        while (num > 0) {\n            if (num % 2 == 0) {\n     \
    \           even++;\n            } else {\n                odd++;\n          \
    \  }\n            num /= 10;\n        }\n        return Tuple.Create(even, odd);",
  "        long even = 0;\n        long odd = 0;\n        while (num != 0) {\n   \
    \         if (num % 2 == 0) {\n                even++;\n            } else {\n\
    \                odd++;\n            }\n            num /= 10;\n        }\n  \
    \      return Tuple.Create(even, odd);", "        long even = 0;\n        long\
    \ odd = 0;\n        if (num < 0) {\n            num = -num;\n        }\n     \
    \   while (num > 0) {\n            if (num % 2 == 0) {\n                even++;\n\
    \            } else {\n                odd++;\n            }\n            num\
    \ /= 10;\n        }\n        return Tuple.Create(even, odd);", "        var even\
    \ = 0L;\n        var odd = 0L;\n        var absNum = Math.Abs(num);\n        while\
    \ (absNum > 0) {\n            var digit = absNum % 10;\n            if (digit\
    \ % 2 == 0) {\n                even += 1;\n            } else {\n            \
    \    odd += 1;\n            }\n            absNum /= 10;\n        }\n        return\
    \ Tuple.Create(even, odd);", "        long even = 0;\n        long odd = 0;\n\
    \        while (num != 0) {\n            if (num % 2 == 0) {\n               \
    \ even++;\n            } else {\n                odd++;\n            }\n     \
    \       num /= 10;\n        }\n        return Tuple.Create(even, odd);", "   \
    \     long even = 0;\n        long odd = 0;\n        if (num < 0) {\n        \
    \    num = -num;\n        }\n        while (num > 0) {\n            if (num %\
    \ 2 == 0) {\n                even++;\n            } else {\n                odd++;\n\
    \            }\n            num /= 10;\n        }\n        return Tuple.Create(even,\
    \ odd);", "        long even = 0;\n        long odd = 0;\n        while (num !=\
    \ 0) {\n            if (num % 2 == 0) {\n                even++;\n           \
    \ } else {\n                odd++;\n            }\n            num /= 10;\n  \
    \      }\n        return Tuple.Create(even, odd);", "        // Your code goes\
    \ here.\n        return Tuple.Create(0L, 0L);", "        long even = 0;\n    \
    \    long odd = 0;\n        if (num < 0) {\n            num = -num;\n        }\n\
    \        while (num > 0) {\n            long digit = num % 10;\n            if\
    \ (digit % 2 == 0) {\n                even++;\n            } else {\n        \
    \        odd++;\n            }\n            num /= 10;\n        }\n        return\
    \ Tuple.Create(even, odd);", "        long even = 0;\n        long odd = 0;\n\
    \        while (num != 0) {\n            if (num % 2 == 0) {\n               \
    \ even += 1;\n            } else {\n                odd += 1;\n            }\n\
    \            num /= 10;\n        }\n        return Tuple.Create(even, odd);",
  "        long even = 0;\n        long odd = 0;\n        if (num < 0) {\n       \
    \     num = -num;\n        }\n        while (num > 0) {\n            if (num %\
    \ 2 == 0) {\n                even++;\n            } else {\n                odd++;\n\
    \            }\n            num /= 10;\n        }\n        return Tuple.Create(even,\
    \ odd);", "        var evenCount = 0L;\n        var oddCount = 0L;\n        var\
    \ absNum = Math.Abs(num);\n        while (absNum > 0) {\n            var digit\
    \ = absNum % 10;\n            if (digit % 2 == 0) {\n                evenCount++;\n\
    \            } else {\n                oddCount++;\n            }\n          \
    \  absNum /= 10;\n        }\n        return Tuple.Create(evenCount, oddCount);",
  "        long even = 0;\n        long odd = 0;\n        while (num != 0) {\n   \
    \         if (num % 2 == 0) {\n                even++;\n            } else {\n\
    \                odd++;\n            }\n            num /= 10;\n        }\n  \
    \      return Tuple.Create(even, odd);", "        long even = 0;\n        long\
    \ odd = 0;\n        foreach (var c in num.ToString()) {\n            if (c % 2\
    \ == 0) {\n                even++;\n            } else {\n                odd++;\n\
    \            }\n        }\n        return Tuple.Create(even, odd);", "       \
    \ long even = 0;\n        long odd = 0;\n        foreach (char c in num.ToString())\
    \ {\n            if (c % 2 == 0) {\n                even++;\n            } else\
    \ {\n                odd++;\n            }\n        }\n        return Tuple.Create(even,\
    \ odd);", "        long even = 0;\n        long odd = 0;\n        while (num !=\
    \ 0) {\n            if (num % 2 == 0) {\n                even++;\n           \
    \ } else {\n                odd++;\n            }\n            num /= 10;\n  \
    \      }\n        return Tuple.Create(even, odd);", "        long even = 0;\n\
    \        long odd = 0;\n        while (num != 0) {\n            if (num % 2 ==\
    \ 0) {\n                even++;\n            } else {\n                odd++;\n\
    \            }\n            num /= 10;\n        }\n        return Tuple.Create(even,\
    \ odd);", "        long even = 0;\n        long odd = 0;\n        while (num !=\
    \ 0) {\n            if (num % 2 == 0) {\n                even++;\n           \
    \ } else {\n                odd++;\n            }\n            num /= 10;\n  \
    \      }\n        return Tuple.Create(even, odd);", "        long even = 0;\n\
    \        long odd = 0;\n        while (num != 0) {\n            if (num % 2 ==\
    \ 0) {\n                even++;\n            } else {\n                odd++;\n\
    \            }\n            num /= 10;\n        }\n        return Tuple.Create(even,\
    \ odd);", "        long even = 0;\n        long odd = 0;\n        if (num < 0)\
    \ {\n            num = -num;\n        }\n        while (num > 0) {\n         \
    \   if (num % 2 == 0) {\n                even++;\n            } else {\n     \
    \           odd++;\n            }\n            num /= 10;\n        }\n       \
    \ return Tuple.Create(even, odd);", "        long even = 0;\n        long odd\
    \ = 0;\n        if (num < 0) {\n            num = -num;\n        }\n        while\
    \ (num > 0) {\n            if (num % 2 == 0) {\n                even++;\n    \
    \        } else {\n                odd++;\n            }\n            num /= 10;\n\
    \        }\n        return Tuple.Create(even, odd);", "        long even = 0;\n\
    \        long odd = 0;\n        while (num != 0) {\n            if (num % 2 ==\
    \ 0) {\n                even++;\n            } else {\n                odd++;\n\
    \            }\n            num /= 10;\n        }\n        return Tuple.Create(even,\
    \ odd);", "        long even = 0;\n        long odd = 0;\n        if (num < 0)\
    \ num = -num;\n        while (num > 0) {\n            if ((num % 10) % 2 == 0)\
    \ even++;\n            else odd++;\n            num /= 10;\n        }\n      \
    \  return Tuple.Create(even, odd);", "        long even = 0;\n        long odd\
    \ = 0;\n        while (num != 0) {\n            long digit = num % 10;\n     \
    \       if (digit % 2 == 0) {\n                even++;\n            } else {\n\
    \                odd++;\n            }\n            num /= 10;\n        }\n  \
    \      return Tuple.Create(even, odd);", "        long even = 0;\n        long\
    \ odd = 0;\n        while (num != 0) {\n            if (num % 2 == 0) {\n    \
    \            even++;\n            } else {\n                odd++;\n         \
    \   }\n            num /= 10;\n        }\n        return Tuple.Create(even, odd);",
  "        long even = 0;\n        long odd = 0;\n        while (num != 0) {\n   \
    \         if (num % 2 == 0) {\n                even++;\n            } else {\n\
    \                odd++;\n            }\n            num /= 10;\n        }\n  \
    \      return Tuple.Create(even, odd);", "        long even = 0;\n        long\
    \ odd = 0;\n        while (num != 0) {\n            if (num % 2 == 0) {\n    \
    \            even++;\n            } else {\n                odd++;\n         \
    \   }\n            num /= 10;\n        }\n        return Tuple.Create(even, odd);",
  "        long even = 0;\n        long odd = 0;\n        while (num != 0) {\n   \
    \         if (num % 2 == 0) {\n                even++;\n            } else {\n\
    \                odd++;\n            }\n            num /= 10;\n        }\n  \
    \      return Tuple.Create(even, odd);", "        long even = 0;\n        long\
    \ odd = 0;\n        while (num != 0) {\n            if (num % 2 == 0) {\n    \
    \            even++;\n            } else {\n                odd++;\n         \
    \   }\n            num /= 10;\n        }\n        return Tuple.Create(even, odd);",
  "        long even = 0;\n        long odd = 0;\n        long n = Math.Abs(num);\n\
    \        while (n > 0) {\n            if (n % 2 == 0) {\n                even++;\n\
    \            } else {\n                odd++;\n            }\n            n /=\
    \ 10;\n        }\n        return Tuple.Create(even, odd);", "        long even\
    \ = 0;\n        long odd = 0;\n        while (num != 0) {\n            if (num\
    \ % 2 == 0) {\n                even++;\n            } else {\n               \
    \ odd++;\n            }\n            num /= 10;\n        }\n        return Tuple.Create(even,\
    \ odd);", "        long even = 0;\n        long odd = 0;\n        while (num !=\
    \ 0) {\n            if (num % 2 == 0) {\n                even++;\n           \
    \ } else {\n                odd++;\n            }\n            num /= 10;\n  \
    \      }\n        return Tuple.Create(even, odd);", "        var even = 0L;\n\
    \        var odd = 0L;\n        var n = Math.Abs(num);\n        while (n > 0)\
    \ {\n            var d = n % 10;\n            if (d % 2 == 0) {\n            \
    \    even += 1;\n            } else {\n                odd += 1;\n           \
    \ }\n            n /= 10;\n        }\n        return Tuple.Create(even, odd);",
  "        long even = 0;\n        long odd = 0;\n        while (num != 0) {\n   \
    \         if (num % 2 == 0) {\n                even++;\n            } else {\n\
    \                odd++;\n            }\n            num /= 10;\n        }\n  \
    \      return Tuple.Create(even, odd);", "        long even = 0;\n        long\
    \ odd = 0;\n        while (num != 0) {\n            if (num % 2 == 0) {\n    \
    \            even += 1;\n            } else {\n                odd += 1;\n   \
    \         }\n            num /= 10;\n        }\n        return Tuple.Create(even,\
    \ odd);", "        var even = 0L;\n        var odd = 0L;\n        var n = Math.Abs(num);\n\
    \        while (n > 0) {\n            var digit = n % 10;\n            if (digit\
    \ % 2 == 0) {\n                even += 1;\n            } else {\n            \
    \    odd += 1;\n            }\n            n /= 10;\n        }\n        return\
    \ Tuple.Create(even, odd);", "        long even = 0;\n        long odd = 0;\n\
    \        while (num != 0) {\n            long digit = num % 10;\n            if\
    \ (digit % 2 == 0) {\n                even += 1;\n            } else {\n     \
    \           odd += 1;\n            }\n            num /= 10;\n        }\n    \
    \    return Tuple.Create(even, odd);", "        var even = 0L;\n        var odd\
    \ = 0L;\n        var n = Math.Abs(num);\n        while (n > 0) {\n           \
    \ var d = n % 10;\n            if (d % 2 == 0) {\n                even += 1;\n\
    \            } else {\n                odd += 1;\n            }\n            n\
    \ /= 10;\n        }\n        return Tuple.Create(even, odd);", "        var even\
    \ = 0L;\n        var odd = 0L;\n        foreach (var digit in num.ToString())\
    \ {\n            if (digit % 2 == 0) {\n                even++;\n            }\
    \ else {\n                odd++;\n            }\n        }\n        return Tuple.Create(even,\
    \ odd);", "        long even = 0;\n        long odd = 0;\n        while (num !=\
    \ 0) {\n            if (num % 2 == 0) {\n                even++;\n           \
    \ } else {\n                odd++;\n            }\n            num /= 10;\n  \
    \      }\n        return Tuple.Create(even, odd);", "        long even = 0;\n\
    \        long odd = 0;\n        while (num != 0) {\n            if (num % 2 ==\
    \ 0) {\n                even++;\n            } else {\n                odd++;\n\
    \            }\n            num /= 10;\n        }\n        return Tuple.Create(even,\
    \ odd);", "        long even = 0;\n        long odd = 0;\n        while (num !=\
    \ 0) {\n            if (num % 2 == 0) {\n                even++;\n           \
    \ } else {\n                odd++;\n            }\n            num /= 10;\n  \
    \      }\n        return Tuple.Create(even, odd);", "        long even = 0;\n\
    \        long odd = 0;\n        while (num != 0) {\n            if (num % 2 ==\
    \ 0) {\n                even++;\n            } else {\n                odd++;\n\
    \            }\n            num /= 10;\n        }\n        return Tuple.Create(even,\
    \ odd);", "        long even = 0;\n        long odd = 0;\n        while (num !=\
    \ 0) {\n            if (num % 2 == 0) {\n                even++;\n           \
    \ } else {\n                odd++;\n            }\n            num /= 10;\n  \
    \      }\n        return Tuple.Create(even, odd);", "        long even = 0;\n\
    \        long odd = 0;\n        if (num < 0) {\n            num = -num;\n    \
    \    }\n        while (num > 0) {\n            if (num % 2 == 0) {\n         \
    \       even += 1;\n            } else {\n                odd += 1;\n        \
    \    }\n            num /= 10;\n        }\n        return Tuple.Create(even, odd);",
  "        long even = 0;\n        long odd = 0;\n        if (num < 0) {\n       \
    \     num = -num;\n        }\n        while (num > 0) {\n            long digit\
    \ = num % 10;\n            if (digit % 2 == 0) {\n                even++;\n  \
    \          } else {\n                odd++;\n            }\n            num /=\
    \ 10;\n        }\n        return Tuple.Create(even, odd);", "        long even\
    \ = 0;\n        long odd = 0;\n        if (num < 0) {\n            num = -num;\n\
    \        }\n        while (num > 0) {\n            if (num % 2 == 0) {\n     \
    \           even++;\n            } else {\n                odd++;\n          \
    \  }\n            num /= 10;\n        }\n        return Tuple.Create(even, odd);",
  "        long even = 0;\n        long odd = 0;\n        while (num != 0) {\n   \
    \         if (num % 2 == 0) {\n                even++;\n            } else {\n\
    \                odd++;\n            }\n            num /= 10;\n        }\n  \
    \      return Tuple.Create(even, odd);", "        long even = 0;\n        long\
    \ odd = 0;\n        if (num < 0) {\n            num = -num;\n        }\n     \
    \   while (num > 0) {\n            if (num % 2 == 0) {\n                even++;\n\
    \            } else {\n                odd++;\n            }\n            num\
    \ /= 10;\n        }\n        return Tuple.Create(even, odd);", "        long even\
    \ = 0;\n        long odd = 0;\n        foreach (char c in num.ToString()) {\n\
    \            if (c % 2 == 0) {\n                even++;\n            } else {\n\
    \                odd++;\n            }\n        }\n        return Tuple.Create(even,\
    \ odd);", "        long even = 0;\n        long odd = 0;\n        if (num < 0)\
    \ {\n            num = -num;\n        }\n        while (num > 0) {\n         \
    \   if (num % 2 == 0) {\n                even++;\n            } else {\n     \
    \           odd++;\n            }\n            num /= 10;\n        }\n       \
    \ return Tuple.Create(even, odd);", "        long even = 0;\n        long odd\
    \ = 0;\n        while (num != 0) {\n            if (num % 2 == 0) {\n        \
    \        even++;\n            } else {\n                odd++;\n            }\n\
    \            num /= 10;\n        }\n        return Tuple.Create(even, odd);",
  "        long even = 0;\n        long odd = 0;\n        while (num != 0) {\n   \
    \         if (num % 2 == 0) {\n                even++;\n            } else {\n\
    \                odd++;\n            }\n            num /= 10;\n        }\n  \
    \      return Tuple.Create(even, odd);", "        long even = 0;\n        long\
    \ odd = 0;\n        foreach (char c in num.ToString()) {\n            if (c %\
    \ 2 == 0) {\n                even++;\n            } else {\n                odd++;\n\
    \            }\n        }\n        return Tuple.Create(even, odd);", "       \
    \ long even = 0;\n        long odd = 0;\n        while (num != 0) {\n        \
    \    if (num % 2 == 0) {\n                even++;\n            } else {\n    \
    \            odd++;\n            }\n            num /= 10;\n        }\n      \
    \  return Tuple.Create(even, odd);", "        long even = 0;\n        long odd\
    \ = 0;\n        while (num != 0) {\n            if (num % 2 == 0) {\n        \
    \        even += 1;\n            } else {\n                odd += 1;\n       \
    \     }\n            num /= 10;\n        }\n        return Tuple.Create(even,\
    \ odd);", "        long even = 0, odd = 0;\n        while (num != 0) {\n     \
    \       if ((num % 10) % 2 == 0) {\n                even++;\n            } else\
    \ {\n                odd++;\n            }\n            num /= 10;\n        }\n\
    \        return Tuple.Create(even, odd);", "        long even = 0;\n        long\
    \ odd = 0;\n        if (num < 0) {\n            num = -num;\n        }\n     \
    \   while (num > 0) {\n            if (num % 2 == 0) {\n                even++;\n\
    \            } else {\n                odd++;\n            }\n            num\
    \ /= 10;\n        }\n        return Tuple.Create(even, odd);", "        long even\
    \ = 0;\n        long odd = 0;\n        while (num != 0) {\n            long digit\
    \ = num % 10;\n            if (digit % 2 == 0) {\n                even += 1;\n\
    \            } else {\n                odd += 1;\n            }\n            num\
    \ /= 10;\n        }\n        return Tuple.Create(even, odd);", "        long even\
    \ = 0;\n        long odd = 0;\n        while (num != 0) {\n            if (num\
    \ % 2 == 0) {\n                even++;\n            } else {\n               \
    \ odd++;\n            }\n            num /= 10;\n        }\n        return Tuple.Create(even,\
    \ odd);", "        long even = 0;\n        long odd = 0;\n        while (num !=\
    \ 0) {\n            if (num % 2 == 0) {\n                even++;\n           \
    \ } else {\n                odd++;\n            }\n            num /= 10;\n  \
    \      }\n        return Tuple.Create(even, odd);", "        long even = 0;\n\
    \        long odd = 0;\n        while (num != 0) {\n            if (num % 2 ==\
    \ 0) {\n                even++;\n            } else {\n                odd++;\n\
    \            }\n            num /= 10;\n        }\n        return Tuple.Create(even,\
    \ odd);", "        long even = 0;\n        long odd = 0;\n        while (num !=\
    \ 0) {\n            if (num % 2 == 0) {\n                even++;\n           \
    \ } else {\n                odd++;\n            }\n            num /= 10;\n  \
    \      }\n        return Tuple.Create(even, odd);", "        long even = 0;\n\
    \        long odd = 0;\n        while (num != 0) {\n            if (num % 2 ==\
    \ 0) {\n                even++;\n            } else {\n                odd++;\n\
    \            }\n            num /= 10;\n        }\n        return Tuple.Create(even,\
    \ odd);", "        // Your code goes here.\n        // You can add more classes/methods/fields\
    \ if you like.\n        long even = 0;\n        long odd = 0;\n        while (num\
    \ != 0) {\n            long digit = num % 10;\n            if (digit % 2 == 0)\
    \ {\n                even += 1;\n            } else {\n                odd +=\
    \ 1;\n            }\n            num /= 10;\n        }\n        return Tuple.Create(even,\
    \ odd);", "        // TODO: Implement me\n        return null;", "        long\
    \ even = 0;\n        long odd = 0;\n        if (num < 0) {\n            num =\
    \ -num;\n        }\n        while (num > 0) {\n            long digit = num %\
    \ 10;\n            if (digit % 2 == 0) {\n                even += 1;\n       \
    \     } else {\n                odd += 1;\n            }\n            num /= 10;\n\
    \        }\n        return Tuple.Create(even, odd);", "        long even = 0;\n\
    \        long odd = 0;\n        while (num != 0) {\n            if (num % 2 ==\
    \ 0) {\n                even++;\n            } else {\n                odd++;\n\
    \            }\n            num /= 10;\n        }\n        return Tuple.Create(even,\
    \ odd);", "        long even = 0;\n        long odd = 0;\n        while (num !=\
    \ 0) {\n            if (num % 2 == 0) {\n                even++;\n           \
    \ } else {\n                odd++;\n            }\n            num /= 10;\n  \
    \      }\n        return Tuple.Create(even, odd);", "        long even = 0;\n\
    \        long odd = 0;\n        while (num != 0) {\n            if (num % 2 ==\
    \ 0) {\n                even++;\n            } else {\n                odd++;\n\
    \            }\n            num /= 10;\n        }\n        return Tuple.Create(even,\
    \ odd);", "        long even = 0;\n        long odd = 0;\n        while (num !=\
    \ 0) {\n            if (num % 2 == 0) {\n                even++;\n           \
    \ } else {\n                odd++;\n            }\n            num /= 10;\n  \
    \      }\n        return Tuple.Create(even, odd);", "        // Your code goes\
    \ here.\n        var even = 0;\n        var odd = 0;\n        while (num != 0)\
    \ {\n            var digit = num % 10;\n            if (digit % 2 == 0) {\n  \
    \              even++;\n            } else {\n                odd++;\n       \
    \     }\n            num /= 10;\n        }\n        return Tuple.Create(even,\
    \ odd);", "        long even = 0;\n        long odd = 0;\n        while (num !=\
    \ 0) {\n            if (num % 2 == 0) {\n                even++;\n           \
    \ } else {\n                odd++;\n            }\n            num /= 10;\n  \
    \      }\n        return Tuple.Create(even, odd);", "        long even = 0;\n\
    \        long odd = 0;\n        while (num != 0) {\n            if (num % 2 ==\
    \ 0) {\n                even++;\n            } else {\n                odd++;\n\
    \            }\n            num /= 10;\n        }\n        return Tuple.Create(even,\
    \ odd);", "        long even = 0;\n        long odd = 0;\n        while (num !=\
    \ 0) {\n            if (num % 2 == 0) {\n                even++;\n           \
    \ } else {\n                odd++;\n            }\n            num /= 10;\n  \
    \      }\n        return Tuple.Create(even, odd);", "        long even = 0;\n\
    \        long odd = 0;\n        foreach (char c in num.ToString()) {\n       \
    \     if (c % 2 == 0) {\n                even++;\n            } else {\n     \
    \           odd++;\n            }\n        }\n        return Tuple.Create(even,\
    \ odd);", "        long even = 0;\n        long odd = 0;\n        while (num !=\
    \ 0) {\n            if (num % 2 == 0) {\n                even++;\n           \
    \ } else {\n                odd++;\n            }\n            num /= 10;\n  \
    \      }\n        return Tuple.Create(even, odd);", "        long even = 0;\n\
    \        long odd = 0;\n        while (num != 0) {\n            long digit = num\
    \ % 10;\n            if (digit % 2 == 0) {\n                even++;\n        \
    \    } else {\n                odd++;\n            }\n            num /= 10;\n\
    \        }\n        return Tuple.Create(even, odd);", "        long even = 0;\n\
    \        long odd = 0;\n        while (num != 0) {\n            long digit = num\
    \ % 10;\n            if (digit % 2 == 0) {\n                even++;\n        \
    \    } else {\n                odd++;\n            }\n            num /= 10;\n\
    \        }\n        return Tuple.Create(even, odd);", "        long even = 0;\n\
    \        long odd = 0;\n        while (num != 0) {\n            if (num % 2 ==\
    \ 0) {\n                even++;\n            } else {\n                odd++;\n\
    \            }\n            num /= 10;\n        }\n        return Tuple.Create(even,\
    \ odd);", "        long even = 0;\n        long odd = 0;\n        while (num !=\
    \ 0) {\n            if (num % 2 == 0) {\n                even++;\n           \
    \ } else {\n                odd++;\n            }\n            num /= 10;\n  \
    \      }\n        return Tuple.Create(even, odd);", "        long even = 0;\n\
    \        long odd = 0;\n        while (num != 0) {\n            if (num % 2 ==\
    \ 0) {\n                even++;\n            } else {\n                odd++;\n\
    \            }\n            num /= 10;\n        }\n        return Tuple.Create(even,\
    \ odd);", "        long even = 0;\n        long odd = 0;\n        if (num < 0)\
    \ {\n            num = -num;\n        }\n        while (num > 0) {\n         \
    \   long digit = num % 10;\n            if (digit % 2 == 0) {\n              \
    \  even++;\n            } else {\n                odd++;\n            }\n    \
    \        num /= 10;\n        }\n        return Tuple.Create(even, odd);", "  \
    \      long even = 0;\n        long odd = 0;\n        while (num != 0) {\n   \
    \         if (num % 2 == 0) {\n                even++;\n            } else {\n\
    \                odd++;\n            }\n            num /= 10;\n        }\n  \
    \      return Tuple.Create(even, odd);", "        long even = 0;\n        long\
    \ odd = 0;\n        while (num != 0) {\n            if (num % 2 == 0) {\n    \
    \            even++;\n            } else {\n                odd++;\n         \
    \   }\n            num /= 10;\n        }\n        return Tuple.Create(even, odd);",
  "        long even = 0;\n        long odd = 0;\n        if (num < 0) {\n       \
    \     num = -num;\n        }\n        while (num > 0) {\n            long digit\
    \ = num % 10;\n            if (digit % 2 == 0) {\n                even++;\n  \
    \          } else {\n                odd++;\n            }\n            num /=\
    \ 10;\n        }\n        return Tuple.Create(even, odd);", "        long even\
    \ = 0;\n        long odd = 0;\n        if (num < 0) {\n            num = -num;\n\
    \        }\n        while (num > 0) {\n            if (num % 2 == 0) {\n     \
    \           even++;\n            } else {\n                odd++;\n          \
    \  }\n            num /= 10;\n        }\n        return Tuple.Create(even, odd);",
  "        long even = 0;\n        long odd = 0;\n        while (num != 0) {\n   \
    \         if (num % 2 == 0) {\n                even++;\n            } else {\n\
    \                odd++;\n            }\n            num /= 10;\n        }\n  \
    \      return Tuple.Create(even, odd);", "        long even = 0;\n        long\
    \ odd = 0;\n        while (num != 0) {\n            if (num % 2 == 0) {\n    \
    \            even++;\n            } else {\n                odd++;\n         \
    \   }\n            num /= 10;\n        }\n        return Tuple.Create(even, odd);",
  "        long even = 0;\n        long odd = 0;\n        if (num < 0) {\n       \
    \     num = -num;\n        }\n        while (num > 0) {\n            if (num %\
    \ 2 == 0) {\n                even++;\n            } else {\n                odd++;\n\
    \            }\n            num /= 10;\n        }\n        return Tuple.Create(even,\
    \ odd);", "        long even = 0;\n        long odd = 0;\n        long n = Math.Abs(num);\n\
    \        while (n > 0) {\n            long digit = n % 10;\n            if (digit\
    \ % 2 == 0) {\n                even += 1;\n            } else {\n            \
    \    odd += 1;\n            }\n            n /= 10;\n        }\n        return\
    \ Tuple.Create(even, odd);", "        long evenCount = 0;\n        long oddCount\
    \ = 0;\n        long numAbs = Math.Abs(num);\n        while (numAbs > 0) {\n \
    \           long digit = numAbs % 10;\n            if (digit % 2 == 0) {\n   \
    \             evenCount++;\n            } else {\n                oddCount++;\n\
    \            }\n            numAbs /= 10;\n        }\n        return Tuple.Create(evenCount,\
    \ oddCount);", "        var even = 0L;\n        var odd = 0L;\n        while (num\
    \ != 0) {\n            var digit = num % 10;\n            if (digit % 2 == 0)\
    \ {\n                even++;\n            } else {\n                odd++;\n \
    \           }\n            num /= 10;\n        }\n        return Tuple.Create(even,\
    \ odd);", "        long even = 0;\n        long odd = 0;\n        while (num !=\
    \ 0) {\n            if (num % 2 == 0) {\n                even++;\n           \
    \ } else {\n                odd++;\n            }\n            num /= 10;\n  \
    \      }\n        return Tuple.Create(even, odd);", "        long even = 0;\n\
    \        long odd = 0;\n        while (num != 0) {\n            long digit = num\
    \ % 10;\n            if (digit % 2 == 0) {\n                even++;\n        \
    \    } else {\n                odd++;\n            }\n            num /= 10;\n\
    \        }\n        return Tuple.Create(even, odd);", "        long even = 0;\n\
    \        long odd = 0;\n        while (num != 0) {\n            long digit = num\
    \ % 10;\n            if (digit % 2 == 0) {\n                even++;\n        \
    \    } else {\n                odd++;\n            }\n            num /= 10;\n\
    \        }\n        return Tuple.Create(even, odd);", "        long even = 0;\n\
    \        long odd = 0;\n        while (num != 0) {\n            long digit = num\
    \ % 10;\n            if (digit % 2 == 0) {\n                even++;\n        \
    \    } else {\n                odd++;\n            }\n            num /= 10;\n\
    \        }\n        return Tuple.Create(even, odd);", "        long even = 0;\n\
    \        long odd = 0;\n        while (num != 0) {\n            if (num % 2 ==\
    \ 0) {\n                even++;\n            } else {\n                odd++;\n\
    \            }\n            num /= 10;\n        }\n        return Tuple.Create(even,\
    \ odd);", "        long even = 0;\n        long odd = 0;\n        while (num !=\
    \ 0) {\n            long digit = num % 10;\n            if (digit % 2 == 0) {\n\
    \                even += 1;\n            } else {\n                odd += 1;\n\
    \            }\n            num /= 10;\n        }\n        return Tuple.Create(even,\
    \ odd);", "        long even = 0;\n        long odd = 0;\n        if (num < 0)\
    \ {\n            num = -num;\n        }\n        while (num > 0) {\n         \
    \   if (num % 2 == 0) {\n                even++;\n            } else {\n     \
    \           odd++;\n            }\n            num /= 10;\n        }\n       \
    \ return Tuple.Create(even, odd);", "        long even = 0;\n        long odd\
    \ = 0;\n        while (num != 0) {\n            if (num % 2 == 0) {\n        \
    \        even++;\n            } else {\n                odd++;\n            }\n\
    \            num /= 10;\n        }\n        return Tuple.Create(even, odd);",
  "        long even = 0;\n        long odd = 0;\n        while (num != 0) {\n   \
    \         if (num % 2 == 0) {\n                even++;\n            } else {\n\
    \                odd++;\n            }\n            num /= 10;\n        }\n  \
    \      return Tuple.Create(even, odd);", "        long even = 0;\n        long\
    \ odd = 0;\n        while (num != 0) {\n            if (num % 2 == 0) {\n    \
    \            even++;\n            } else {\n                odd++;\n         \
    \   }\n            num /= 10;\n        }\n        return Tuple.Create(even, odd);",
  "        long even = 0;\n        long odd = 0;\n        while (num != 0) {\n   \
    \         long digit = num % 10;\n            if (digit % 2 == 0) {\n        \
    \        even += 1;\n            } else {\n                odd += 1;\n       \
    \     }\n            num /= 10;\n        }\n        return Tuple.Create(even,\
    \ odd);", "        long even = 0;\n        long odd = 0;\n        while (num !=\
    \ 0) {\n            if (num % 2 == 0) {\n                even++;\n           \
    \ } else {\n                odd++;\n            }\n            num /= 10;\n  \
    \      }\n        return Tuple.Create(even, odd);", "        long even = 0;\n\
    \        long odd = 0;\n        while (num != 0) {\n            long digit = num\
    \ % 10;\n            if (digit % 2 == 0) {\n                even++;\n        \
    \    } else {\n                odd++;\n            }\n            num /= 10;\n\
    \        }\n        return Tuple.Create(even, odd);", "        long even = 0;\n\
    \        long odd = 0;\n        if (num < 0) {\n            num = -num;\n    \
    \    }\n        while (num > 0) {\n            if (num % 2 == 0) {\n         \
    \       even++;\n            } else {\n                odd++;\n            }\n\
    \            num /= 10;\n        }\n        return Tuple.Create(even, odd);",
  "        // TODO: Implement this function.\n        long even = 0;\n        long\
    \ odd = 0;\n        if (num < 0) {\n            num = num * -1;\n        }\n \
    \       while (num > 0) {\n            if (num % 2 == 0) {\n                even++;\n\
    \            } else {\n                odd++;\n            }\n            num\
    \ = num / 10;\n        }\n        return Tuple.Create(even, odd);"]
stop_tokens:
- "\n    }\n"
