name: HumanEval_146_specialFilter
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Write a function that takes an array of numbers as input and\
  \ returns \n    // the number of elements in the array that are greater than 10\
  \ and both \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n\
  \    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
  \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
  \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n\
  \    // (2L)\n    public static long Specialfilter(List<long> nums) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new\
  \ List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n\
  \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,\
  \ (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new\
  \ long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==\
  \ (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,\
  \ (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new\
  \ List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,\
  \ (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
  \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\
  \n}\n"
completions: ['        return nums.Where(n => n > 10 && n.ToString().First() % 2 !=
    0 && n.ToString().Last() % 2 != 0).Count();', "        // Your code here\n   \
    \     return 0;", '        return nums.Where(x => x > 10 && x.ToString().First()
    % 2 != 0 && x.ToString().Last() % 2 != 0).Count();', '        return nums.Where(n
    => n > 10 && n.ToString().First() % 2 != 0 && n.ToString().Last() % 2 != 0).Count();',
  "        // Your code goes here.\n        return 0;", "        // Your code here\n\
    \        return 0;", '        return nums.Where(x => x > 10 && x % 2 == 1 && x
    % 10 == 1).Count();', '        return nums.Where(x => x > 10 && x.ToString().First()
    % 2 != 0 && x.ToString().Last() % 2 != 0).Count();', '        return nums.Where(n
    => n > 10 && n.ToString().First() % 2 != 0 && n.ToString().Last() % 2 != 0).Count();',
  '        return nums.Where(x => x > 10 && x.ToString().First() % 2 != 0 && x.ToString().Last()
    % 2 != 0).Count();', '        return nums.Where(n => n > 10 && n.ToString().First()
    % 2 != 0 && n.ToString().Last() % 2 != 0).Count();', '        return nums.Where(x
    => x > 10 && x.ToString().First() % 2 != 0 && x.ToString().Last() % 2 != 0).Count();',
  '        return nums.Where(x => x > 10 && (x % 10) % 2 == 1 && (x / 10) % 2 == 1).Count();',
  '        return nums.Where(x => x > 10 && x.ToString().First() % 2 != 0 && x.ToString().Last()
    % 2 != 0).Count();', '        return nums.Where(x => x > 10 && x.ToString().First()
    % 2 != 0 && x.ToString().Last() % 2 != 0).Count();', '        return nums.Where(n
    => n > 10 && n.ToString().First() % 2 != 0 && n.ToString().Last() % 2 != 0).Count();',
  '        return nums.Where(n => n > 10 && n % 2 == 1 && n % 10 == 1).Count();',
  "        long count = 0;\n        foreach (long num in nums) {\n            if (num\
    \ > 10 && num.ToString().Length > 1) {\n                if (num.ToString()[0]\
    \ % 2 != 0 && num.ToString()[num.ToString().Length - 1] % 2 != 0) {\n        \
    \            count++;\n                }\n            }\n        }\n        return\
    \ count;", '        return nums.Where(x => x > 10 && x.ToString().First() % 2
    != 0 && x.ToString().Last() % 2 != 0).Count();', '        return nums.Where(x
    => x > 10 && x.ToString().First() % 2 != 0 && x.ToString().Last() % 2 != 0).Count();']
stop_tokens:
- "\n    }\n"
