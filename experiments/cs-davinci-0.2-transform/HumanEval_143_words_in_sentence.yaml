name: HumanEval_143_words_in_sentence
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You are given a string representing a sentence,\n    // the\
  \ sentence contains some words separated by a space,\n    // and you have to return\
  \ a string that contains the words from the original sentence,\n    // whose lengths\
  \ are prime numbers,\n    // the order of the words in the new string should be\
  \ the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"\
  This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"\
  lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <=\
  \ len(sentence) <= 100\n    // * sentence contains only letters\n    public static\
  \ string WordsInSentence(string sentence) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
  This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
  \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
  there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
  Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
  go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\"\
  )).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
  is\")));\n    }\n\n}\n"
completions: ["        var words = sentence.Split(' ');\n        var primes = new\
    \ List<int>();\n        for (int i = 0; i < words.Length; i++) {\n           \
    \ if (IsPrime(words[i].Length)) {\n                primes.Add(i);\n          \
    \  }\n        }\n        var sb = new StringBuilder();\n        foreach (var i\
    \ in primes) {\n            sb.Append(words[i]);\n            sb.Append(' ');\n\
    \        }\n        return sb.ToString().Trim();", "        // your code goes\
    \ here\n        return \"\";", "        var words = sentence.Split(' ');\n   \
    \     var result = new List<string>();\n        foreach (var word in words) {\n\
    \            if (IsPrime(word.Length)) {\n                result.Add(word);\n\
    \            }\n        }\n        return string.Join(\" \", result);", "    \
    \    // Your code goes here\n        return \"\";", "        // Your code goes\
    \ here\n        string[] words = sentence.Split(' ');\n        string result =\
    \ \"\";\n        foreach (string word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                result += word + \" \";\n            }\n        }\n     \
    \   return result.Trim();", "        // Write your code here\n        return \"\
    \";", "        // Write your code here\n        return \"\";", "        var words\
    \ = sentence.Split(' ');\n        var result = new List<string>();\n        foreach\
    \ (var word in words) {\n            if (IsPrime(word.Length)) {\n           \
    \     result.Add(word);\n            }\n        }\n        return string.Join(\"\
    \ \", result);", "        // Write your code here\n        return \"\";", "  \
    \      // Write your code here\n        return \"\";", "        // Your code goes\
    \ here\n        return \"\";", "        string[] words = sentence.Split(' ');\n\
    \        string result = \"\";\n        foreach (string word in words) {\n   \
    \         if (IsPrime(word.Length)) {\n                result += word + \" \"\
    ;\n            }\n        }\n        return result.Trim();", "        // TODO\n\
    \        return \"\";", "        // Write your code here\n        return \"\";",
  "        string[] words = sentence.Split(' ');\n        string result = \"\";\n\
    \        foreach (string word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                result += word + \" \";\n            }\n        }\n     \
    \   return result.Trim();", "        string[] words = sentence.Split(' ');\n \
    \       List<string> result = new List<string>();\n        foreach (string word\
    \ in words) {\n            if (IsPrime(word.Length)) {\n                result.Add(word);\n\
    \            }\n        }\n        return string.Join(\" \", result);", "    \
    \    string[] words = sentence.Split(' ');\n        string result = \"\";\n  \
    \      foreach (string word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                result += word + \" \";\n            }\n        }\n     \
    \   return result.Trim();", "        string[] words = sentence.Split(' ');\n \
    \       string result = \"\";\n        foreach (string word in words) {\n    \
    \        if (IsPrime(word.Length)) {\n                result += word + \" \";\n\
    \            }\n        }\n        return result.Trim();", "        string[] words\
    \ = sentence.Split(' ');\n        string result = \"\";\n        foreach (string\
    \ word in words) {\n            if (IsPrime(word.Length)) {\n                result\
    \ += word + \" \";\n            }\n        }\n        return result.Trim();",
  "        // Your code goes here\n        return \"\";"]
stop_tokens:
- "\n    }\n"
