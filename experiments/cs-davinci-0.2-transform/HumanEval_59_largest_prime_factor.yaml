name: HumanEval_59_largest_prime_factor
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not\
  \ a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n    // >>> LargestPrimeFactor((2048L))\n\
  \    // (2L)\n    public static long LargestPrimeFactor(long n) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
  \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
  \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
  \ == (29L));\n    }\n\n}\n"
completions: ["        long largest = 0;\n        long i = 2;\n        while (i *\
    \ i <= n) {\n            if (n % i == 0) {\n                largest = i;\n   \
    \             n /= i;\n            } else {\n                i += 1;\n       \
    \     }\n        }\n        if (n > 1) {\n            largest = n;\n        }\n\
    \        return largest;", "        long largest = 1;\n        for (long i = 2;\
    \ i * i <= n; i++) {\n            if (n % i == 0) {\n                largest =\
    \ i;\n                while (n % i == 0) {\n                    n /= i;\n    \
    \            }\n            }\n        }\n        if (n > 1) {\n            largest\
    \ = n;\n        }\n        return largest;", "        long i = 2;\n        while\
    \ (i * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n   \
    \         } else {\n                i++;\n            }\n        }\n        return\
    \ n;", "        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;",
  "        long p = 2;\n        while (n % p == 0) {\n            n /= p;\n      \
    \  }\n        p = 3;\n        while (n > 1) {\n            while (n % p == 0)\
    \ {\n                n /= p;\n            }\n            p += 2;\n        }\n\
    \        return p - 2;", "        long largest = 0;\n        for (long i = 2;\
    \ i <= n; i++) {\n            if (n % i == 0) {\n                largest = i;\n\
    \                n /= i;\n                i = 1;\n            }\n        }\n \
    \       return largest;", "        long largest = 1;\n        long d = 2;\n  \
    \      while (n > 1) {\n            while (n % d == 0) {\n                largest\
    \ = d;\n                n /= d;\n            }\n            d += 1;\n        }\n\
    \        return largest;", "        long largest = 1;\n        long i = 2;\n \
    \       while (i * i <= n) {\n            if (n % i == 0) {\n                largest\
    \ = i;\n                while (n % i == 0) {\n                    n /= i;\n  \
    \              }\n            }\n            i += 1;\n        }\n        if (n\
    \ > 1) {\n            largest = n;\n        }\n        return largest;", "   \
    \     long largest = 0;\n        long factor = 2;\n        while (n > 1) {\n \
    \           if (n % factor == 0) {\n                largest = factor;\n      \
    \          n /= factor;\n                while (n % factor == 0) {\n         \
    \           n /= factor;\n                }\n            }\n            factor\
    \ += 1;\n        }\n        return largest;", "        long largest = 0;\n   \
    \     for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n       \
    \         largest = i;\n                n /= i;\n                i--;\n      \
    \      }\n        }\n        return largest;", "        long largest = 0;\n  \
    \      long factor = 2;\n        while (n > 1) {\n            if (n % factor ==\
    \ 0) {\n                largest = factor;\n                while (n % factor ==\
    \ 0) {\n                    n /= factor;\n                }\n            }\n \
    \           factor += 1;\n        }\n        return largest;", "        long largest\
    \ = 0;\n        long d = 2;\n        while (n > 1) {\n            while (n % d\
    \ == 0) {\n                largest = d;\n                n /= d;\n           \
    \ }\n            d += 1;\n        }\n        return largest;", "        long largest\
    \ = 0;\n        long factor = 2;\n        while (n > 1) {\n            while (n\
    \ % factor == 0) {\n                n /= factor;\n                largest = factor;\n\
    \            }\n            factor++;\n        }\n        return largest;", " \
    \       long largest = 0;\n        long factor = 2;\n        while (n > 1) {\n\
    \            while (n % factor == 0) {\n                n /= factor;\n       \
    \         largest = factor;\n            }\n            factor += 1;\n       \
    \ }\n        return largest;", "        long largest = 0;\n        long factor\
    \ = 2;\n        while (n > 1) {\n            while (n % factor == 0) {\n     \
    \           largest = factor;\n                n /= factor;\n            }\n \
    \           factor++;\n        }\n        return largest;", "        long factor\
    \ = 2;\n        while (n > 1) {\n            if (n % factor == 0) {\n        \
    \        n /= factor;\n            } else {\n                factor++;\n     \
    \       }\n        }\n        return factor;", "        long i = 2;\n        while\
    \ (i * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n   \
    \         } else {\n                i++;\n            }\n        }\n        return\
    \ n;", "        long largest = 1;\n        long i = 2;\n        while (i * i <=\
    \ n) {\n            if (n % i == 0) {\n                largest = i;\n        \
    \        n /= i;\n            } else {\n                i += 1;\n            }\n\
    \        }\n        if (n > 1) {\n            largest = n;\n        }\n      \
    \  return largest;", "        long largest = 1;\n        long i = 2;\n       \
    \ while (i * i <= n) {\n            if (n % i == 0) {\n                largest\
    \ = i;\n                while (n % i == 0) {\n                    n /= i;\n  \
    \              }\n            }\n            i += 1;\n        }\n        if (n\
    \ > 1) {\n            largest = n;\n        }\n        return largest;", "   \
    \     long factor = 2;\n        while (n > 1) {\n            if (n % factor ==\
    \ 0) {\n                n /= factor;\n            } else {\n                factor++;\n\
    \            }\n        }\n        return factor;"]
stop_tokens:
- "\n    }\n"
