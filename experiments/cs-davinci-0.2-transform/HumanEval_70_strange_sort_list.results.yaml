language: cs
name: HumanEval_70_strange_sort_list
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    res = new List<long>();\n        List<long> lst2 = new List<long>(lst);\n        lst2.Sort();\n
    \       int i = 0;\n        while (lst2.Count > 0) {\n            if (i % 2 ==
    0) {\n                res.Add(lst2[0]);\n                lst2.RemoveAt(0);\n            }
    else {\n                res.Add(lst2[lst2.Count - 1]);\n                lst2.RemoveAt(lst2.Count
    - 1);\n            }\n            i++;\n        }\n        return res;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new
    List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,
    (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,
    (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,
    (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5094ec6f7f8a49888835306451aaa339>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5094ec6f7f8a49888835306451aaa339>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798578
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    result = new List<long>();\n        List<long> lst2 = new List<long>(lst);\n        lst2.Sort();\n
    \       int i = 0;\n        while (lst2.Count > 0) {\n            if (i % 2 ==
    0) {\n                result.Add(lst2[0]);\n                lst2.RemoveAt(0);\n
    \           } else {\n                result.Add(lst2[lst2.Count - 1]);\n                lst2.RemoveAt(lst2.Count
    - 1);\n            }\n            i++;\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new
    List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,
    (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,
    (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,
    (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <913770e125ff4d4f872a187ba159be7b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <913770e125ff4d4f872a187ba159be7b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798578
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    result = new List<long>();\n        List<long> lstCopy = new List<long>(lst);\n
    \       bool isMin = true;\n        while (lstCopy.Count > 0) {\n            long
    min = lstCopy.Min();\n            long max = lstCopy.Max();\n            if (isMin)
    {\n                result.Add(min);\n                lstCopy.Remove(min);\n            }
    else {\n                result.Add(max);\n                lstCopy.Remove(max);\n
    \           }\n            isMin = !isMin;\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new
    List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,
    (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,
    (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,
    (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c6139391a0f949f09c786b6df4025444>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c6139391a0f949f09c786b6df4025444>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798773
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        var result
    = new List<long>();\n        var min = lst.Min();\n        var max = lst.Max();\n
    \       var minIndex = lst.IndexOf(min);\n        var maxIndex = lst.IndexOf(max);\n
    \       var minCount = lst.Count(x => x == min);\n        var maxCount = lst.Count(x
    => x == max);\n        var minList = new List<long>();\n        var maxList =
    new List<long>();\n        for (int i = 0; i < minCount; i++) {\n            minList.Add(min);\n
    \       }\n        for (int i = 0; i < maxCount; i++) {\n            maxList.Add(max);\n
    \       }\n        var minListIndex = 0;\n        var maxListIndex = 0;\n        for
    (int i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0) {\n                result.Add(minList[minListIndex]);\n
    \               minListIndex++;\n            } else {\n                result.Add(maxList[maxListIndex]);\n
    \               maxListIndex++;\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new
    List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,
    (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,
    (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,
    (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.StrangeSortList
    (System.Collections.Generic.List`1[T] lst) [0x000dd] in <ef48ae794e654f2289b806c9e96123e8>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <ef48ae794e654f2289b806c9e96123e8>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.StrangeSortList
    (System.Collections.Generic.List`1[T] lst) [0x000dd] in <ef48ae794e654f2289b806c9e96123e8>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <ef48ae794e654f2289b806c9e96123e8>:0
    \n"
  stdout: ''
  timestamp: 1659798773
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        if (lst.Count
    == 0) {\n            return new List<long>();\n        }\n        List<long> result
    = new List<long>();\n        List<long> remaining = new List<long>(lst);\n        while
    (remaining.Count > 0) {\n            long min = remaining.Min();\n            long
    max = remaining.Max();\n            result.Add(min);\n            remaining.Remove(min);\n
    \           if (remaining.Count > 0) {\n                result.Add(max);\n                remaining.Remove(max);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <14bee3127be1451596974bcdc2668fe0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <14bee3127be1451596974bcdc2668fe0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798773
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    result = new List<long>();\n        if (lst.Count == 0) {\n            return
    result;\n        }\n        long min = lst.Min();\n        long max = lst.Max();\n
    \       long min_index = lst.IndexOf(min);\n        long max_index = lst.IndexOf(max);\n
    \       lst.RemoveAt((int)min_index);\n        lst.RemoveAt((int)max_index);\n
    \       result.Add(min);\n        result.Add(max);\n        while (lst.Count >
    0) {\n            min = lst.Min();\n            max = lst.Max();\n            min_index
    = lst.IndexOf(min);\n            max_index = lst.IndexOf(max);\n            lst.RemoveAt((int)min_index);\n
    \           lst.RemoveAt((int)max_index);\n            result.Add(min);\n            result.Add(max);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].RemoveAt (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.StrangeSortList
    (System.Collections.Generic.List`1[T] lst) [0x00049] in <46cb356a0c3745c0b0b511ff52e90334>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <46cb356a0c3745c0b0b511ff52e90334>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].RemoveAt (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.StrangeSortList
    (System.Collections.Generic.List`1[T] lst) [0x00049] in <46cb356a0c3745c0b0b511ff52e90334>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <46cb356a0c3745c0b0b511ff52e90334>:0
    \n"
  stdout: ''
  timestamp: 1659798773
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        var result
    = new List<long>();\n        var sorted = lst.OrderBy(x => x).ToList();\n        var
    min = sorted.First();\n        var max = sorted.Last();\n        var minIndex
    = lst.IndexOf(min);\n        var maxIndex = lst.IndexOf(max);\n        var minCount
    = 0;\n        var maxCount = 0;\n        var minFound = false;\n        var maxFound
    = false;\n        for (int i = 0; i < lst.Count; i++) {\n            if (i ==
    minIndex) {\n                result.Add(min);\n                minFound = true;\n
    \               minCount++;\n            } else if (i == maxIndex) {\n                result.Add(max);\n
    \               maxFound = true;\n                maxCount++;\n            } else
    {\n                if (minFound && maxFound) {\n                    min = sorted[minCount];\n
    \                   max = sorted[sorted.Count - maxCount - 1];\n                    minIndex
    = lst.IndexOf(min);\n                    maxIndex = lst.IndexOf(max);\n                    minFound
    = false;\n                    maxFound = false;\n                }\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <41f22ae1bc5047fabb494d7b0a0f17ed>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <41f22ae1bc5047fabb494d7b0a0f17ed>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798773
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        if (lst.Count
    == 0) {\n            return lst;\n        }\n        var min = lst.Min();\n        var
    max = lst.Max();\n        var result = new List<long>();\n        var minIndex
    = lst.IndexOf(min);\n        var maxIndex = lst.IndexOf(max);\n        var minRemaining
    = lst.Where((x, i) => i != minIndex).ToList();\n        var maxRemaining = lst.Where((x,
    i) => i != maxIndex).ToList();\n        var minRemainingSorted = minRemaining.OrderBy(x
    => x).ToList();\n        var maxRemainingSorted = maxRemaining.OrderByDescending(x
    => x).ToList();\n        var minRemainingSortedIndex = 0;\n        var maxRemainingSortedIndex
    = 0;\n        var minRemainingSortedCount = minRemainingSorted.Count;\n        var
    maxRemainingSortedCount = maxRemainingSorted.Count;\n        var minRemainingSortedIndexMax
    = minRemainingSortedCount - 1;\n        var maxRemainingSortedIndexMax = maxRemainingSortedCount
    - 1;\n        var minRemainingSortedIndexMin = 0;\n        var maxRemainingSortedIndexMin
    = 0;\n        var minRemainingSortedIndexMinMax = minRemainingSortedIndexMax;\n
    \       var maxRemainingSortedIndexMinMax = maxRemainingSortedIndexMax;\n        var
    minRemainingSortedIndexMinMaxCount = minRemainingSortedIndexMax + 1;\n        var
    maxRemainingSortedIndexMinMaxCount = maxRemainingSortedIndexMax + 1;\n        var
    minRemainingSortedIndexMinMaxCountHalf = minRemainingSortedIndexMinMaxCount /
    2;\n        var maxRemainingSortedIndexMinMaxCountHalf = maxRemainingSortedIndexMinMaxCount
    / 2;\n        var minRemainingSortedIndexMinMaxCountHalfMinusOne = minRemainingSortedIndexMinMaxCountHalf
    - 1;\n        var maxRemainingSortedIndexMinMaxCountHalfMinusOne = maxRemainingSortedIndexMinMaxCountHalf
    - 1;\n        var minRemainingSortedIndexMin\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8phylzj1.cs(48,39): error CS1002: ; expected

    '
  timestamp: 1659798773
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        if (lst.Count
    == 0) {\n            return lst;\n        }\n        List<long> res = new List<long>();\n
    \       long min = lst.Min();\n        long max = lst.Max();\n        bool min_first
    = true;\n        while (lst.Count > 0) {\n            if (min_first) {\n                res.Add(min);\n
    \               lst.Remove(min);\n                min_first = false;\n            }
    else {\n                res.Add(max);\n                lst.Remove(max);\n                min_first
    = true;\n            }\n            if (lst.Count == 0) {\n                break;\n
    \           }\n            min = lst.Min();\n            max = lst.Max();\n        }\n
    \       return res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new
    List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,
    (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,
    (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,
    (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <54b686fe26ce48b89b36fbed63e6b528>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <54b686fe26ce48b89b36fbed63e6b528>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798773
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    result = new List<long>();\n        List<long> lstCopy = new List<long>(lst);\n
    \       bool isMin = true;\n        while (lstCopy.Count > 0) {\n            long
    min = lstCopy.Min();\n            long max = lstCopy.Max();\n            if (isMin)
    {\n                result.Add(min);\n                lstCopy.Remove(min);\n            }
    else {\n                result.Add(max);\n                lstCopy.Remove(max);\n
    \           }\n            isMin = !isMin;\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new
    List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,
    (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,
    (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,
    (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c6139391a0f949f09c786b6df4025444>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c6139391a0f949f09c786b6df4025444>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798773
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        // Your
    code goes here.\n        return lst;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8af5dcd6187d479cb1dc553726cd843b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8af5dcd6187d479cb1dc553726cd843b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798578
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    result = new List<long>();\n        List<long> sorted = lst.OrderBy(x => x).ToList();\n
    \       int i = 0;\n        while (sorted.Count > 0) {\n            if (i % 2
    == 0) {\n                result.Add(sorted[0]);\n                sorted.RemoveAt(0);\n
    \           } else {\n                result.Add(sorted[sorted.Count - 1]);\n
    \               sorted.RemoveAt(sorted.Count - 1);\n            }\n            i++;\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1aa54d2847a540c7b26b2d4dceaaced4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1aa54d2847a540c7b26b2d4dceaaced4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798578
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    result = new List<long>();\n        List<long> lst2 = new List<long>(lst);\n        while
    (lst2.Count > 0) {\n            long min = lst2.Min();\n            long max =
    lst2.Max();\n            result.Add(min);\n            lst2.Remove(min);\n            if
    (lst2.Count > 0) {\n                result.Add(max);\n                lst2.Remove(max);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2faadfe65b4d49b8bb30fd36826e71ac>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2faadfe65b4d49b8bb30fd36826e71ac>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798578
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    result = new List<long>();\n        List<long> lst1 = new List<long>(lst);\n        List<long>
    lst2 = new List<long>(lst);\n        lst1.Sort();\n        lst2.Sort();\n        lst2.Reverse();\n
    \       int i = 0;\n        while (i < lst.Count) {\n            if (i % 2 ==
    0) {\n                result.Add(lst1[0]);\n                lst1.RemoveAt(0);\n
    \           } else {\n                result.Add(lst2[0]);\n                lst2.RemoveAt(0);\n
    \           }\n            i = i + 1;\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new
    List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,
    (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,
    (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,
    (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <447d5c9349de4514a53b2a79579eb5ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <447d5c9349de4514a53b2a79579eb5ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798578
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    result = new List<long>();\n        List<long> lst2 = new List<long>(lst);\n        long
    min = lst2.Min();\n        long max = lst2.Max();\n        while (lst2.Count >
    0) {\n            result.Add(min);\n            lst2.Remove(min);\n            if
    (lst2.Count > 0) {\n                result.Add(max);\n                lst2.Remove(max);\n
    \           }\n            min = lst2.Min();\n            max = lst2.Max();\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.Min (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.StrangeSortList
    (System.Collections.Generic.List`1[T] lst) [0x00050] in <a4d0e01fb1ae43e4965601bfd9eb4c6e>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <a4d0e01fb1ae43e4965601bfd9eb4c6e>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.Min (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.StrangeSortList
    (System.Collections.Generic.List`1[T] lst) [0x00050] in <a4d0e01fb1ae43e4965601bfd9eb4c6e>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <a4d0e01fb1ae43e4965601bfd9eb4c6e>:0
    \n"
  stdout: ''
  timestamp: 1659798773
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        if (lst.Count
    == 0) {\n            return lst;\n        }\n        long min = lst.Min();\n        long
    max = lst.Max();\n        bool isMin = true;\n        List<long> res = new List<long>();\n
    \       while (lst.Count > 0) {\n            if (isMin) {\n                res.Add(min);\n
    \               lst.Remove(min);\n            } else {\n                res.Add(max);\n
    \               lst.Remove(max);\n            }\n            isMin = !isMin;\n
    \           min = lst.Min();\n            max = lst.Max();\n        }\n        return
    res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new
    List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,
    (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,
    (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,
    (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.Min (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.StrangeSortList
    (System.Collections.Generic.List`1[T] lst) [0x00061] in <2cbef89fd51a41d1ac9a6cc1a052ef88>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <2cbef89fd51a41d1ac9a6cc1a052ef88>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.Min (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.StrangeSortList
    (System.Collections.Generic.List`1[T] lst) [0x00061] in <2cbef89fd51a41d1ac9a6cc1a052ef88>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <2cbef89fd51a41d1ac9a6cc1a052ef88>:0
    \n"
  stdout: ''
  timestamp: 1659798773
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    result = new List<long>();\n        List<long> lst1 = new List<long>(lst);\n        List<long>
    lst2 = new List<long>(lst);\n        lst1.Sort();\n        lst2.Sort();\n        lst2.Reverse();\n
    \       for (int i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0) {\n
    \               result.Add(lst1[0]);\n                lst1.RemoveAt(0);\n            }
    else {\n                result.Add(lst2[0]);\n                lst2.RemoveAt(0);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <155ebdeac1b04af489da62727788e63a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <155ebdeac1b04af489da62727788e63a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798581
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    result = new List<long>();\n        if (lst.Count == 0) {\n            return
    result;\n        }\n        List<long> lst2 = new List<long>(lst);\n        while
    (lst2.Count > 0) {\n            long min = lst2.Min();\n            result.Add(min);\n
    \           lst2.Remove(min);\n            if (lst2.Count > 0) {\n                long
    max = lst2.Max();\n                result.Add(max);\n                lst2.Remove(max);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5746686bf34640e2ac132f1183b00fbe>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5746686bf34640e2ac132f1183b00fbe>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798773
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    result = new List<long>();\n        List<long> temp = new List<long>();\n        for
    (int i = 0; i < lst.Count; i++) {\n            temp.Add(lst[i]);\n        }\n
    \       while (temp.Count > 0) {\n            long min = temp[0];\n            long
    max = temp[0];\n            int minIndex = 0;\n            int maxIndex = 0;\n
    \           for (int i = 0; i < temp.Count; i++) {\n                if (temp[i]
    < min) {\n                    min = temp[i];\n                    minIndex = i;\n
    \               }\n                if (temp[i] > max) {\n                    max
    = temp[i];\n                    maxIndex = i;\n                }\n            }\n
    \           result.Add(min);\n            temp.RemoveAt(minIndex);\n            if
    (temp.Count > 0) {\n                result.Add(max);\n                temp.RemoveAt(maxIndex);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].RemoveAt (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.StrangeSortList
    (System.Collections.Generic.List`1[T] lst) [0x000dc] in <d827e56c942e44df84926461ec8757a9>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <d827e56c942e44df84926461ec8757a9>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].RemoveAt (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.StrangeSortList
    (System.Collections.Generic.List`1[T] lst) [0x000dc] in <d827e56c942e44df84926461ec8757a9>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <d827e56c942e44df84926461ec8757a9>:0
    \n"
  stdout: ''
  timestamp: 1659798773
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    result = new List<long>();\n        List<long> lst2 = new List<long>(lst);\n        while
    (lst2.Count > 0) {\n            long min = lst2.Min();\n            result.Add(min);\n
    \           lst2.Remove(min);\n            if (lst2.Count > 0) {\n                long
    max = lst2.Max();\n                result.Add(max);\n                lst2.Remove(max);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0efbdac53a64491da395c5559dcd08fd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0efbdac53a64491da395c5559dcd08fd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798578
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        if (lst.Count
    == 0) {\n            return lst;\n        }\n        var min = lst.Min();\n        var
    max = lst.Max();\n        var res = new List<long>();\n        var i = 0;\n        while
    (lst.Count > 0) {\n            if (i % 2 == 0) {\n                res.Add(min);\n
    \               lst.Remove(min);\n                min = lst.Min();\n            }
    else {\n                res.Add(max);\n                lst.Remove(max);\n                max
    = lst.Max();\n            }\n            i += 1;\n        }\n        return res;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new
    List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,
    (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,
    (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,
    (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.StrangeSortList
    (System.Collections.Generic.List`1[T] lst) [0x00067] in <5096dd1fe73f4fa986e5294a3898bf27>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <5096dd1fe73f4fa986e5294a3898bf27>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.StrangeSortList
    (System.Collections.Generic.List`1[T] lst) [0x00067] in <5096dd1fe73f4fa986e5294a3898bf27>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <5096dd1fe73f4fa986e5294a3898bf27>:0
    \n"
  stdout: ''
  timestamp: 1659798773
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    result = new List<long>();\n        List<long> lstCopy = new List<long>(lst);\n
    \       while (lstCopy.Count > 0) {\n            long min = lstCopy.Min();\n            long
    max = lstCopy.Max();\n            result.Add(min);\n            lstCopy.Remove(min);\n
    \           if (lstCopy.Count > 0) {\n                result.Add(max);\n                lstCopy.Remove(max);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d2314be362f0483589aa08cfa49dbd7b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d2314be362f0483589aa08cfa49dbd7b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798773
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    result = new List<long>();\n        List<long> temp = new List<long>();\n        temp.AddRange(lst);\n
    \       while (temp.Count > 0) {\n            long min = temp.Min();\n            result.Add(min);\n
    \           temp.Remove(min);\n            if (temp.Count > 0) {\n                long
    max = temp.Max();\n                result.Add(max);\n                temp.Remove(max);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <04780713e96a4c258d25e5038f8a6e2f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <04780713e96a4c258d25e5038f8a6e2f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798773
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    res = new List<long>();\n        List<long> lst2 = new List<long>(lst);\n        lst2.Sort();\n
    \       int i = 0;\n        while (lst2.Count > 0) {\n            if (i % 2 ==
    0) {\n                res.Add(lst2[0]);\n                lst2.RemoveAt(0);\n            }
    else {\n                res.Add(lst2[lst2.Count - 1]);\n                lst2.RemoveAt(lst2.Count
    - 1);\n            }\n            i++;\n        }\n        return res;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new
    List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,
    (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,
    (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,
    (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5094ec6f7f8a49888835306451aaa339>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5094ec6f7f8a49888835306451aaa339>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798578
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        var sorted
    = lst.OrderBy(x => x).ToList();\n        var result = new List<long>();\n        while
    (sorted.Count > 0) {\n            result.Add(sorted[0]);\n            sorted.RemoveAt(0);\n
    \           if (sorted.Count > 0) {\n                result.Add(sorted[sorted.Count
    - 1]);\n                sorted.RemoveAt(sorted.Count - 1);\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L,
    (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new long[]{(long)5L,
    (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cf5a5311dcff43ef91a06c06e920292d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cf5a5311dcff43ef91a06c06e920292d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798773
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    result = new List<long>();\n        List<long> lst2 = new List<long>(lst);\n        while
    (lst2.Count > 0) {\n            long min = lst2.Min();\n            result.Add(min);\n
    \           lst2.Remove(min);\n            if (lst2.Count > 0) {\n                long
    max = lst2.Max();\n                result.Add(max);\n                lst2.Remove(max);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0efbdac53a64491da395c5559dcd08fd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0efbdac53a64491da395c5559dcd08fd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798578
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    result = new List<long>();\n        List<long> remaining = new List<long>(lst);\n
    \       while (remaining.Count > 0) {\n            long min = remaining.Min();\n
    \           remaining.Remove(min);\n            result.Add(min);\n            if
    (remaining.Count > 0) {\n                long max = remaining.Max();\n                remaining.Remove(max);\n
    \               result.Add(max);\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new
    List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,
    (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,
    (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,
    (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <14da970c9af34ac69e1b03558af5cbf0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <14da970c9af34ac69e1b03558af5cbf0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798578
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    res = new List<long>();\n        List<long> lst2 = new List<long>(lst);\n        lst2.Sort();\n
    \       bool min = true;\n        while (lst2.Count > 0) {\n            if (min)
    {\n                res.Add(lst2[0]);\n                lst2.RemoveAt(0);\n            }
    else {\n                res.Add(lst2[lst2.Count - 1]);\n                lst2.RemoveAt(lst2.Count
    - 1);\n            }\n            min = !min;\n        }\n        return res;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new
    List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,
    (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,
    (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,
    (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a98b97bb29664183817d90ad60080cb4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a98b97bb29664183817d90ad60080cb4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798773
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        var sorted
    = lst.OrderBy(x => x).ToList();\n        var result = new List<long>();\n        var
    min = true;\n        while (sorted.Count > 0) {\n            if (min) {\n                result.Add(sorted[0]);\n
    \               sorted.RemoveAt(0);\n            } else {\n                result.Add(sorted[sorted.Count
    - 1]);\n                sorted.RemoveAt(sorted.Count - 1);\n            }\n            min
    = !min;\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <050f4c90be8542fb98cae1e180fb830b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <050f4c90be8542fb98cae1e180fb830b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798773
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        if (lst.Count
    == 0) {\n            return lst;\n        }\n        List<long> result = new List<long>();\n
    \       List<long> lst2 = new List<long>(lst);\n        lst2.Sort();\n        int
    i = 0;\n        while (lst2.Count > 0) {\n            if (i % 2 == 0) {\n                result.Add(lst2[0]);\n
    \               lst2.RemoveAt(0);\n            } else {\n                result.Add(lst2[lst2.Count
    - 1]);\n                lst2.RemoveAt(lst2.Count - 1);\n            }\n            i++;\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <99adceececdd401fa710b68a1f3dc4d4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <99adceececdd401fa710b68a1f3dc4d4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798773
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        var res
    = new List<long>();\n        var sorted = lst.OrderBy(x => x).ToList();\n        var
    min = sorted.First();\n        var max = sorted.Last();\n        var minIndex
    = lst.IndexOf(min);\n        var maxIndex = lst.IndexOf(max);\n        var minCount
    = lst.Count(x => x == min);\n        var maxCount = lst.Count(x => x == max);\n
    \       var minRemaining = minCount;\n        var maxRemaining = maxCount;\n        var
    minRemainingIndex = minIndex;\n        var maxRemainingIndex = maxIndex;\n        var
    minRemainingList = new List<long>();\n        var maxRemainingList = new List<long>();\n
    \       for (int i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0) {\n
    \               if (minRemaining > 0) {\n                    res.Add(min);\n                    minRemaining--;\n
    \               } else {\n                    minRemainingList.Add(lst[minRemainingIndex]);\n
    \                   minRemainingIndex++;\n                }\n            } else
    {\n                if (maxRemaining > 0) {\n                    res.Add(max);\n
    \                   maxRemaining--;\n                } else {\n                    maxRemainingList.Add(lst[maxRemainingIndex]);\n
    \                   maxRemainingIndex++;\n                }\n            }\n        }\n
    \       res.AddRange(minRemainingList);\n        res.AddRange(maxRemainingList);\n
    \       return res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new
    List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,
    (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,
    (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,
    (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8635a575dff247a2873fb8f42816c050>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8635a575dff247a2873fb8f42816c050>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798773
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        // Your
    code here.\n        return lst;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L,
    (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new long[]{(long)5L,
    (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <740ad9c1fe1f4d229c268f39fec71e21>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <740ad9c1fe1f4d229c268f39fec71e21>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798773
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        if (lst.Count
    == 0) {\n            return lst;\n        }\n        List<long> res = new List<long>();\n
    \       List<long> lst2 = new List<long>(lst);\n        long min = lst2.Min();\n
    \       res.Add(min);\n        lst2.Remove(min);\n        while (lst2.Count >
    0) {\n            long max = lst2.Max();\n            res.Add(max);\n            lst2.Remove(max);\n
    \           if (lst2.Count > 0) {\n                min = lst2.Min();\n                res.Add(min);\n
    \               lst2.Remove(min);\n            }\n        }\n        return res;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new
    List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,
    (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,
    (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,
    (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <537560ed6e514309bf2353b1d7b37a4c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <537560ed6e514309bf2353b1d7b37a4c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798579
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        if (lst.Count
    == 0) {\n            return lst;\n        }\n        List<long> result = new List<long>();\n
    \       long min = lst.Min();\n        long max = lst.Max();\n        long minIndex
    = lst.IndexOf(min);\n        long maxIndex = lst.IndexOf(max);\n        result.Add(min);\n
    \       result.Add(max);\n        lst.RemoveAt((int)minIndex);\n        lst.RemoveAt((int)maxIndex);\n
    \       while (lst.Count > 0) {\n            min = lst.Min();\n            max
    = lst.Max();\n            minIndex = lst.IndexOf(min);\n            maxIndex =
    lst.IndexOf(max);\n            result.Insert(0, min);\n            result.Add(max);\n
    \           lst.RemoveAt((int)minIndex);\n            lst.RemoveAt((int)maxIndex);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].RemoveAt (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.StrangeSortList
    (System.Collections.Generic.List`1[T] lst) [0x00059] in <0918aa3ffe104d608eedeb114dfc4a7d>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <0918aa3ffe104d608eedeb114dfc4a7d>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].RemoveAt (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.StrangeSortList
    (System.Collections.Generic.List`1[T] lst) [0x00059] in <0918aa3ffe104d608eedeb114dfc4a7d>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <0918aa3ffe104d608eedeb114dfc4a7d>:0
    \n"
  stdout: ''
  timestamp: 1659798580
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        // Your
    code goes here.\n        return lst;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8af5dcd6187d479cb1dc553726cd843b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8af5dcd6187d479cb1dc553726cd843b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798578
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        // Your
    code goes here.\n        return lst;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8af5dcd6187d479cb1dc553726cd843b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8af5dcd6187d479cb1dc553726cd843b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798578
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        var result
    = new List<long>();\n        var sorted = lst.OrderBy(x => x).ToList();\n        var
    min = sorted.First();\n        var max = sorted.Last();\n        var minIndex
    = lst.IndexOf(min);\n        var maxIndex = lst.IndexOf(max);\n        var minRemaining
    = sorted.Skip(1).ToList();\n        var maxRemaining = sorted.Take(sorted.Count
    - 1).ToList();\n        var minRemainingIndex = lst.IndexOf(minRemaining.First());\n
    \       var maxRemainingIndex = lst.IndexOf(maxRemaining.Last());\n        while
    (lst.Count > 0) {\n            if (minIndex < maxIndex) {\n                result.Add(min);\n
    \               lst.RemoveAt(minIndex);\n                if (minRemaining.Count
    > 0) {\n                    min = minRemaining.First();\n                    minIndex
    = lst.IndexOf(min);\n                    minRemaining = minRemaining.Skip(1).ToList();\n
    \               }\n                if (maxRemaining.Count > 0) {\n                    max
    = maxRemaining.Last();\n                    maxIndex = lst.IndexOf(max);\n                    maxRemaining
    = maxRemaining.Take(maxRemaining.Count - 1).ToList();\n                }\n            }
    else {\n                result.Add(max);\n                lst.RemoveAt(maxIndex);\n
    \               if (maxRemaining.Count > 0) {\n                    max = maxRemaining.Last();\n
    \                   maxIndex = lst.IndexOf(max);\n                    maxRemaining
    = maxRemaining.Take(maxRemaining.Count - 1).ToList();\n                }\n                if
    (minRemaining.Count > 0) {\n                    min = minRemaining.First();\n
    \                   minIndex = lst.IndexOf(min);\n                    minRemaining
    = minRemaining.Skip(1).ToList();\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L,
    (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new long[]{(long)5L,
    (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].RemoveAt (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.StrangeSortList
    (System.Collections.Generic.List`1[T] lst) [0x00132] in <7d365f35101c4efd82bf989416792611>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <7d365f35101c4efd82bf989416792611>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].RemoveAt (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.StrangeSortList
    (System.Collections.Generic.List`1[T] lst) [0x00132] in <7d365f35101c4efd82bf989416792611>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <7d365f35101c4efd82bf989416792611>:0
    \n"
  stdout: ''
  timestamp: 1659798773
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    result = new List<long>();\n        if (lst.Count == 0) {\n            return
    result;\n        }\n        List<long> sorted = new List<long>(lst);\n        sorted.Sort();\n
    \       int i = 0;\n        int j = sorted.Count - 1;\n        while (i <= j)
    {\n            result.Add(sorted[i]);\n            i++;\n            if (i <=
    j) {\n                result.Add(sorted[j]);\n                j--;\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5a5ba45e62b44a5780733bba5ce0106a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5a5ba45e62b44a5780733bba5ce0106a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798773
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        if (lst.Count
    == 0) {\n            return lst;\n        }\n        List<long> result = new List<long>();\n
    \       long min = lst.Min();\n        long max = lst.Max();\n        bool isMin
    = true;\n        while (lst.Count > 0) {\n            if (isMin) {\n                result.Add(min);\n
    \               lst.Remove(min);\n                min = lst.Min();\n            }
    else {\n                result.Add(max);\n                lst.Remove(max);\n                max
    = lst.Max();\n            }\n            isMin = !isMin;\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new
    List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,
    (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,
    (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,
    (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.StrangeSortList
    (System.Collections.Generic.List`1[T] lst) [0x00062] in <d8761a0fc48d48459657f4f8a0c78eda>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <d8761a0fc48d48459657f4f8a0c78eda>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.StrangeSortList
    (System.Collections.Generic.List`1[T] lst) [0x00062] in <d8761a0fc48d48459657f4f8a0c78eda>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <d8761a0fc48d48459657f4f8a0c78eda>:0
    \n"
  stdout: ''
  timestamp: 1659798579
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    result = new List<long>();\n        if (lst.Count == 0) {\n            return
    result;\n        }\n        List<long> lst2 = new List<long>(lst);\n        bool
    is_min = true;\n        while (lst2.Count > 0) {\n            long min = lst2[0];\n
    \           long max = lst2[0];\n            int min_index = 0;\n            int
    max_index = 0;\n            for (int i = 0; i < lst2.Count; i++) {\n                if
    (lst2[i] < min) {\n                    min = lst2[i];\n                    min_index
    = i;\n                }\n                if (lst2[i] > max) {\n                    max
    = lst2[i];\n                    max_index = i;\n                }\n            }\n
    \           if (is_min) {\n                result.Add(min);\n                lst2.RemoveAt(min_index);\n
    \           } else {\n                result.Add(max);\n                lst2.RemoveAt(max_index);\n
    \           }\n            is_min = !is_min;\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new
    List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,
    (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,
    (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,
    (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a828055699224f858faaa2f70ffd2f34>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a828055699224f858faaa2f70ffd2f34>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798773
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    res = new List<long>();\n        List<long> lst1 = new List<long>(lst);\n        List<long>
    lst2 = new List<long>(lst);\n        lst1.Sort();\n        lst2.Sort();\n        lst2.Reverse();\n
    \       for (int i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0) {\n
    \               res.Add(lst1[0]);\n                lst1.RemoveAt(0);\n            }
    else {\n                res.Add(lst2[0]);\n                lst2.RemoveAt(0);\n
    \           }\n        }\n        return res;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7715705591f243a591269476660e5ee1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7715705591f243a591269476660e5ee1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798579
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    result = new List<long>();\n        if (lst.Count == 0) {\n            return
    result;\n        }\n        long min = lst.Min();\n        long max = lst.Max();\n
    \       bool isMin = true;\n        while (lst.Count > 0) {\n            if (isMin)
    {\n                result.Add(min);\n                lst.Remove(min);\n            }
    else {\n                result.Add(max);\n                lst.Remove(max);\n            }\n
    \           min = lst.Min();\n            max = lst.Max();\n            isMin
    = !isMin;\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.Min (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.StrangeSortList
    (System.Collections.Generic.List`1[T] lst) [0x0005c] in <0f0076e68d7e4835944f251555548ef1>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <0f0076e68d7e4835944f251555548ef1>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.Min (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.StrangeSortList
    (System.Collections.Generic.List`1[T] lst) [0x0005c] in <0f0076e68d7e4835944f251555548ef1>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <0f0076e68d7e4835944f251555548ef1>:0
    \n"
  stdout: ''
  timestamp: 1659798578
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        if (lst.Count
    == 0) {\n            return lst;\n        }\n        List<long> result = new List<long>();\n
    \       List<long> remaining = new List<long>(lst);\n        while (remaining.Count
    > 0) {\n            long min = remaining.Min();\n            result.Add(min);\n
    \           remaining.Remove(min);\n            if (remaining.Count == 0) {\n
    \               break;\n            }\n            long max = remaining.Max();\n
    \           result.Add(max);\n            remaining.Remove(max);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L,
    (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new long[]{(long)5L,
    (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8c9385c2a9f1487c9a6f360d33b6ff96>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8c9385c2a9f1487c9a6f360d33b6ff96>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798579
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        if (lst.Count
    == 0) {\n            return lst;\n        }\n        List<long> result = new List<long>();\n
    \       List<long> remaining = new List<long>(lst);\n        while (remaining.Count
    > 0) {\n            long min = remaining.Min();\n            remaining.Remove(min);\n
    \           result.Add(min);\n            if (remaining.Count > 0) {\n                long
    max = remaining.Max();\n                remaining.Remove(max);\n                result.Add(max);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b98670957d614a3799081ca82cdb8b9e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b98670957d614a3799081ca82cdb8b9e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798579
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    result = new List<long>();\n        List<long> remaining = new List<long>(lst);\n
    \       while (remaining.Count > 0) {\n            long min = remaining.Min();\n
    \           remaining.Remove(min);\n            result.Add(min);\n            if
    (remaining.Count > 0) {\n                long max = remaining.Max();\n                remaining.Remove(max);\n
    \               result.Add(max);\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new
    List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,
    (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,
    (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,
    (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <14da970c9af34ac69e1b03558af5cbf0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <14da970c9af34ac69e1b03558af5cbf0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798578
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        // Your
    code here.\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00032] in <ef41041dc641405189d3cb49e97167f2>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00032] in <ef41041dc641405189d3cb49e97167f2>:0
    \n"
  stdout: ''
  timestamp: 1659798773
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    res = new List<long>();\n        List<long> lst2 = new List<long>(lst);\n        while
    (lst2.Count > 0) {\n            long min = lst2.Min();\n            res.Add(min);\n
    \           lst2.Remove(min);\n            if (lst2.Count > 0) {\n                long
    max = lst2.Max();\n                res.Add(max);\n                lst2.Remove(max);\n
    \           }\n        }\n        return res;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <63222c06a6a54bb7a6bbb939f561e968>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <63222c06a6a54bb7a6bbb939f561e968>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798582
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        if (lst.Count
    == 0) {\n            return lst;\n        }\n        var sorted = lst.OrderBy(x
    => x).ToList();\n        var result = new List<long>();\n        var i = 0;\n
    \       var j = sorted.Count - 1;\n        while (i <= j) {\n            result.Add(sorted[i]);\n
    \           i++;\n            if (i <= j) {\n                result.Add(sorted[j]);\n
    \               j--;\n            }\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new
    List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,
    (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,
    (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,
    (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <28a44667444d4df29fecf1c171de32d8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <28a44667444d4df29fecf1c171de32d8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798774
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    ret = new List<long>();\n        List<long> lst2 = new List<long>(lst);\n        lst2.Sort();\n
    \       bool isMin = true;\n        while (lst2.Count > 0) {\n            if (isMin)
    {\n                ret.Add(lst2[0]);\n                lst2.RemoveAt(0);\n            }
    else {\n                ret.Add(lst2[lst2.Count - 1]);\n                lst2.RemoveAt(lst2.Count
    - 1);\n            }\n            isMin = !isMin;\n        }\n        return ret;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new
    List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,
    (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,
    (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,
    (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <596a5c0396a54f739c5a7ca2bbb10898>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <596a5c0396a54f739c5a7ca2bbb10898>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798774
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    result = new List<long>();\n        List<long> lst2 = new List<long>(lst);\n        bool
    isMin = true;\n        while (lst2.Count > 0) {\n            long min = lst2[0];\n
    \           long max = lst2[0];\n            foreach (long x in lst2) {\n                if
    (x < min) {\n                    min = x;\n                }\n                if
    (x > max) {\n                    max = x;\n                }\n            }\n
    \           if (isMin) {\n                result.Add(min);\n                lst2.Remove(min);\n
    \           } else {\n                result.Add(max);\n                lst2.Remove(max);\n
    \           }\n            isMin = !isMin;\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new
    List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,
    (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,
    (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,
    (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4a31fcba3ccf4930980a6db77d5255ba>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4a31fcba3ccf4930980a6db77d5255ba>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798774
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        // Your
    code here.\n        return lst;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L,
    (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new long[]{(long)5L,
    (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <740ad9c1fe1f4d229c268f39fec71e21>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <740ad9c1fe1f4d229c268f39fec71e21>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798773
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        var sorted
    = lst.OrderBy(x => x).ToList();\n        var result = new List<long>();\n        var
    max = sorted.Count - 1;\n        var min = 0;\n        while (min <= max) {\n
    \           result.Add(sorted[min]);\n            if (min != max) {\n                result.Add(sorted[max]);\n
    \           }\n            min++;\n            max--;\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new
    List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,
    (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,
    (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,
    (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <77390d7703234d36a3a8656c815f1e80>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <77390d7703234d36a3a8656c815f1e80>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798774
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        if (lst.Count
    == 0) {\n            return lst;\n        }\n        List<long> result = new List<long>();\n
    \       List<long> remaining = new List<long>(lst);\n        while (remaining.Count
    > 0) {\n            long min = remaining.Min();\n            remaining.Remove(min);\n
    \           result.Add(min);\n            if (remaining.Count > 0) {\n                long
    max = remaining.Max();\n                remaining.Remove(max);\n                result.Add(max);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b98670957d614a3799081ca82cdb8b9e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b98670957d614a3799081ca82cdb8b9e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798579
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        var result
    = new List<long>();\n        var min = lst.Min();\n        var max = lst.Max();\n
    \       var minIndex = lst.IndexOf(min);\n        var maxIndex = lst.IndexOf(max);\n
    \       var minCount = lst.Count(x => x == min);\n        var maxCount = lst.Count(x
    => x == max);\n        var minList = new List<long>();\n        var maxList =
    new List<long>();\n        var minListIndex = 0;\n        var maxListIndex = 0;\n
    \       for (int i = 0; i < lst.Count; i++) {\n            if (lst[i] == min)
    {\n                minList.Add(i);\n            }\n            if (lst[i] == max)
    {\n                maxList.Add(i);\n            }\n        }\n        for (int
    i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0) {\n                result.Add(min);\n
    \               minListIndex++;\n                if (minListIndex == minCount)
    {\n                    minListIndex = 0;\n                }\n            } else
    {\n                result.Add(max);\n                maxListIndex++;\n                if
    (maxListIndex == maxCount) {\n                    maxListIndex = 0;\n                }\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e98227eade584dde820b5f61b329d100>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e98227eade584dde820b5f61b329d100>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798774
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        if (lst.Count
    == 0) {\n            return lst;\n        }\n        List<long> res = new List<long>();\n
    \       res.Add(lst.Min());\n        lst.Remove(lst.Min());\n        while (lst.Count
    > 0) {\n            res.Add(lst.Max());\n            lst.Remove(lst.Max());\n
    \           if (lst.Count > 0) {\n                res.Add(lst.Min());\n                lst.Remove(lst.Min());\n
    \           }\n        }\n        return res;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d89a1615b33f43ef9a4a3d78e9e0c21c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d89a1615b33f43ef9a4a3d78e9e0c21c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798774
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        // Your
    code goes here.\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00032] in <9eec6bde7ca74089b81fe269cf42d2c7>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00032] in <9eec6bde7ca74089b81fe269cf42d2c7>:0
    \n"
  stdout: ''
  timestamp: 1659798578
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    result = new List<long>();\n        List<long> remaining = new List<long>(lst);\n
    \       while (remaining.Count > 0) {\n            long min = remaining.Min();\n
    \           long max = remaining.Max();\n            result.Add(min);\n            remaining.Remove(min);\n
    \           if (remaining.Count > 0) {\n                result.Add(max);\n                remaining.Remove(max);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f2699cbd42c8493484b54dbca59125ff>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f2699cbd42c8493484b54dbca59125ff>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798579
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        var res
    = new List<long>();\n        var min = lst.Min();\n        var max = lst.Max();\n
    \       var minIndex = lst.IndexOf(min);\n        var maxIndex = lst.IndexOf(max);\n
    \       var minCount = lst.Count(x => x == min);\n        var maxCount = lst.Count(x
    => x == max);\n        var minRemaining = minCount;\n        var maxRemaining
    = maxCount;\n        var minRemainingIndex = minIndex;\n        var maxRemainingIndex
    = maxIndex;\n        var minRemainingCount = minCount;\n        var maxRemainingCount
    = maxCount;\n        var minRemainingCountIndex = minIndex;\n        var maxRemainingCountIndex
    = maxIndex;\n        var minRemainingCountIndexRemaining = minCount;\n        var
    maxRemainingCountIndexRemaining = maxCount;\n        var minRemainingCountIndexRemainingIndex
    = minIndex;\n        var maxRemainingCountIndexRemainingIndex = maxIndex;\n        var
    minRemainingCountIndexRemainingIndexRemaining = minCount;\n        var maxRemainingCountIndexRemainingIndexRemaining
    = maxCount;\n        var minRemainingCountIndexRemainingIndexRemainingIndex =
    minIndex;\n        var maxRemainingCountIndexRemainingIndexRemainingIndex = maxIndex;\n
    \       var minRemainingCountIndexRemainingIndexRemainingIndexRemaining = minCount;\n
    \       var maxRemainingCountIndexRemainingIndexRemainingIndexRemaining = maxCount;\n
    \       var minRemainingCountIndexRemainingIndexRemainingIndexRemainingIndex =
    minIndex;\n        var maxRemainingCountIndexRemainingIndexRemainingIndexRemainingIndex
    = maxIndex;\n        var minRemainingCountIndexRemainingIndexRemainingIndexRemainingIndexRemaining
    = minCount;\n        var maxRemainingCountIndexRemainingIndexRemainingIndexRemainingIndexRemaining
    = maxCount;\n        var minRemainingCountIndexRemainingIndexRemainingIndexRemainingIndexRemainingIndex
    = minIndex;\n        var maxRemainingCountIndexRemainingIndexRemainingIndexRemainingIndexRemainingIndex
    = maxIndex;\n        var minRemainingCountIndexRemainingIndexRemainingIndexRemainingIndexRemainingIndexRemaining
    = minCount;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new
    List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,
    (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,
    (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,
    (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjoocno1w.cs(19,30): error CS0161: ''Problem.StrangeSortList(List<long>)'':
    not all code paths return a value

    '
  timestamp: 1659798774
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    result = new List<long>();\n        List<long> tmp = new List<long>();\n        long
    min = lst.Min();\n        long max = lst.Max();\n        while (lst.Count > 0)
    {\n            result.Add(min);\n            lst.Remove(min);\n            if
    (lst.Count == 0) {\n                break;\n            }\n            result.Add(max);\n
    \           lst.Remove(max);\n            min = lst.Min();\n            max =
    lst.Max();\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.Min (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.StrangeSortList
    (System.Collections.Generic.List`1[T] lst) [0x00050] in <fc75e99a15684c54b30ee8ac5bde9fec>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <fc75e99a15684c54b30ee8ac5bde9fec>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.Min (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.StrangeSortList
    (System.Collections.Generic.List`1[T] lst) [0x00050] in <fc75e99a15684c54b30ee8ac5bde9fec>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <fc75e99a15684c54b30ee8ac5bde9fec>:0
    \n"
  stdout: ''
  timestamp: 1659798774
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    result = new List<long>();\n        List<long> lst_copy = new List<long>(lst);\n
    \       while (lst_copy.Count > 0) {\n            long min = lst_copy.Min();\n
    \           result.Add(min);\n            lst_copy.Remove(min);\n            if
    (lst_copy.Count > 0) {\n                long max = lst_copy.Max();\n                result.Add(max);\n
    \               lst_copy.Remove(max);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new
    List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,
    (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,
    (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,
    (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eebbb960c6df4473a5a4d58cb6b36069>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eebbb960c6df4473a5a4d58cb6b36069>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798580
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    res = new List<long>();\n        List<long> lst2 = new List<long>(lst);\n        while
    (lst2.Count > 0) {\n            long min = lst2.Min();\n            res.Add(min);\n
    \           lst2.Remove(min);\n            if (lst2.Count > 0) {\n                long
    max = lst2.Max();\n                res.Add(max);\n                lst2.Remove(max);\n
    \           }\n        }\n        return res;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <63222c06a6a54bb7a6bbb939f561e968>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <63222c06a6a54bb7a6bbb939f561e968>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798582
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    result = new List<long>();\n        List<long> remaining = new List<long>(lst);\n
    \       while (remaining.Count > 0) {\n            long min = remaining.Min();\n
    \           remaining.Remove(min);\n            result.Add(min);\n            if
    (remaining.Count > 0) {\n                long max = remaining.Max();\n                remaining.Remove(max);\n
    \               result.Add(max);\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new
    List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,
    (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,
    (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,
    (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <14da970c9af34ac69e1b03558af5cbf0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <14da970c9af34ac69e1b03558af5cbf0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798578
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        var lst2
    = new List<long>();\n        var lst3 = new List<long>(lst);\n        var lst4
    = new List<long>();\n        var lst5 = new List<long>();\n        var lst6 =
    new List<long>();\n        var lst7 = new List<long>();\n        var lst8 = new
    List<long>();\n        var lst9 = new List<long>();\n        var lst10 = new List<long>();\n
    \       var lst11 = new List<long>();\n        var lst12 = new List<long>();\n
    \       var lst13 = new List<long>();\n        var lst14 = new List<long>();\n
    \       var lst15 = new List<long>();\n        var lst16 = new List<long>();\n
    \       var lst17 = new List<long>();\n        var lst18 = new List<long>();\n
    \       var lst19 = new List<long>();\n        var lst20 = new List<long>();\n
    \       var lst21 = new List<long>();\n        var lst22 = new List<long>();\n
    \       var lst23 = new List<long>();\n        var lst24 = new List<long>();\n
    \       var lst25 = new List<long>();\n        var lst26 = new List<long>();\n
    \       var lst27 = new List<long>();\n        var lst28 = new List<long>();\n
    \       var lst29 = new List<long>();\n        var lst30 = new List<long>();\n
    \       var lst31 = new List<long>();\n        var lst32 = new List<long>();\n
    \       var lst33 = new List<long>();\n        var lst34 = new List<long>();\n
    \       var lst35 = new List<long>();\n        var lst36 = new List<long>();\n
    \       var lst37 = new List<long>();\n        var lst38 = new List<long>();\n
    \       var lst39 = new List<long>();\n        var lst40 = new List<long>();\n
    \       var\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new
    List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,
    (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,
    (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,
    (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps3x_gvxl.cs(59,12): error CS1002: ; expected

    '
  timestamp: 1659798578
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        // Your
    code goes here.\n        return lst;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8af5dcd6187d479cb1dc553726cd843b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8af5dcd6187d479cb1dc553726cd843b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798578
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    result = new List<long>();\n        List<long> lst1 = new List<long>(lst);\n        List<long>
    lst2 = new List<long>(lst);\n        lst1.Sort();\n        lst2.Sort();\n        lst2.Reverse();\n
    \       for (int i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0) {\n
    \               result.Add(lst1[0]);\n                lst1.RemoveAt(0);\n            }
    else {\n                result.Add(lst2[0]);\n                lst2.RemoveAt(0);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <155ebdeac1b04af489da62727788e63a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <155ebdeac1b04af489da62727788e63a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798581
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    result = new List<long>();\n        List<long> lst2 = new List<long>(lst);\n        lst2.Sort();\n
    \       int i = 0;\n        while (lst2.Count > 0) {\n            if (i % 2 ==
    0) {\n                result.Add(lst2[0]);\n                lst2.RemoveAt(0);\n
    \           } else {\n                result.Add(lst2[lst2.Count - 1]);\n                lst2.RemoveAt(lst2.Count
    - 1);\n            }\n            i++;\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new
    List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,
    (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,
    (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,
    (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <913770e125ff4d4f872a187ba159be7b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <913770e125ff4d4f872a187ba159be7b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798578
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    result = new List<long>();\n        List<long> lstCopy = new List<long>(lst);\n
    \       while (lstCopy.Count > 0) {\n            long min = lstCopy.Min();\n            long
    max = lstCopy.Max();\n            result.Add(min);\n            if (min != max)
    {\n                result.Add(max);\n            }\n            lstCopy.Remove(min);\n
    \           lstCopy.Remove(max);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1054abad8f864ef6addd45146ddea94a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1054abad8f864ef6addd45146ddea94a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798580
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    result = new List<long>();\n        List<long> lst2 = new List<long>(lst);\n        while
    (lst2.Count > 0) {\n            long min = lst2.Min();\n            result.Add(min);\n
    \           lst2.Remove(min);\n            if (lst2.Count > 0) {\n                long
    max = lst2.Max();\n                result.Add(max);\n                lst2.Remove(max);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0efbdac53a64491da395c5559dcd08fd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0efbdac53a64491da395c5559dcd08fd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798578
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        if (lst.Count
    == 0) {\n            return lst;\n        }\n        List<long> res = new List<long>();\n
    \       List<long> lst_copy = new List<long>(lst);\n        lst_copy.Sort();\n
    \       bool flag = true;\n        while (lst_copy.Count > 0) {\n            if
    (flag) {\n                res.Add(lst_copy[0]);\n                lst_copy.RemoveAt(0);\n
    \           } else {\n                res.Add(lst_copy[lst_copy.Count - 1]);\n
    \               lst_copy.RemoveAt(lst_copy.Count - 1);\n            }\n            flag
    = !flag;\n        }\n        return res;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <05aa8f6145fe4ac2b0cba678bb22d20d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <05aa8f6145fe4ac2b0cba678bb22d20d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798774
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    result = new List<long>();\n        List<long> min = new List<long>();\n        List<long>
    max = new List<long>();\n        if (lst.Count == 0) {\n            return result;\n
    \       }\n        min.Add(lst[0]);\n        for (int i = 1; i < lst.Count; i++)
    {\n            if (lst[i] < min[0]) {\n                min.Insert(0, lst[i]);\n
    \           } else if (lst[i] > min[0]) {\n                max.Add(lst[i]);\n
    \           } else {\n                min.Add(lst[i]);\n            }\n        }\n
    \       while (min.Count > 0 && max.Count > 0) {\n            result.Add(min[0]);\n
    \           min.RemoveAt(0);\n            result.Add(max[0]);\n            max.RemoveAt(0);\n
    \       }\n        if (min.Count > 0) {\n            result.Add(min[0]);\n            min.RemoveAt(0);\n
    \       }\n        if (max.Count > 0) {\n            result.Add(max[0]);\n            max.RemoveAt(0);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <92218ecbacdd4798808d1d642c267995>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <92218ecbacdd4798808d1d642c267995>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798774
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        if (lst.Count
    == 0) {\n            return lst;\n        }\n        List<long> result = new List<long>();\n
    \       List<long> remaining = new List<long>(lst);\n        while (remaining.Count
    > 0) {\n            long min = remaining.Min();\n            remaining.Remove(min);\n
    \           result.Add(min);\n            if (remaining.Count > 0) {\n                long
    max = remaining.Max();\n                remaining.Remove(max);\n                result.Add(max);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b98670957d614a3799081ca82cdb8b9e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b98670957d614a3799081ca82cdb8b9e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798579
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    result = new List<long>();\n        List<long> lstCopy = new List<long>(lst);\n
    \       lstCopy.Sort();\n        int i = 0;\n        while (lstCopy.Count > 0)
    {\n            if (i % 2 == 0) {\n                result.Add(lstCopy[0]);\n                lstCopy.RemoveAt(0);\n
    \           } else {\n                result.Add(lstCopy[lstCopy.Count - 1]);\n
    \               lstCopy.RemoveAt(lstCopy.Count - 1);\n            }\n            i++;\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dd0b5ddff83c46e6a097dc4b1ba6fd11>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dd0b5ddff83c46e6a097dc4b1ba6fd11>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798774
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        if (lst.Count
    == 0) {\n            return lst;\n        }\n        List<long> res = new List<long>();\n
    \       List<long> lst2 = new List<long>(lst);\n        lst2.Sort();\n        int
    i = 0;\n        while (lst2.Count > 0) {\n            if (i % 2 == 0) {\n                res.Add(lst2[0]);\n
    \               lst2.RemoveAt(0);\n            } else {\n                res.Add(lst2[lst2.Count
    - 1]);\n                lst2.RemoveAt(lst2.Count - 1);\n            }\n            i++;\n
    \       }\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L,
    (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new long[]{(long)5L,
    (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e1238e3827f149cbb55ad3d3aec9fd83>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e1238e3827f149cbb55ad3d3aec9fd83>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798774
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    result = new List<long>();\n        List<long> remaining = new List<long>(lst);\n
    \       while (remaining.Count > 0) {\n            long min = remaining.Min();\n
    \           remaining.Remove(min);\n            result.Add(min);\n            if
    (remaining.Count > 0) {\n                long max = remaining.Max();\n                remaining.Remove(max);\n
    \               result.Add(max);\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new
    List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,
    (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,
    (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,
    (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <14da970c9af34ac69e1b03558af5cbf0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <14da970c9af34ac69e1b03558af5cbf0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798578
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        if (lst.Count
    == 0) {\n            return lst;\n        }\n        List<long> result = new List<long>();\n
    \       long min = lst.Min();\n        long max = lst.Max();\n        bool isMin
    = true;\n        while (lst.Count > 0) {\n            if (isMin) {\n                result.Add(min);\n
    \               lst.Remove(min);\n                min = lst.Min();\n            }
    else {\n                result.Add(max);\n                lst.Remove(max);\n                max
    = lst.Max();\n            }\n            isMin = !isMin;\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new
    List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,
    (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,
    (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,
    (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.StrangeSortList
    (System.Collections.Generic.List`1[T] lst) [0x00062] in <d8761a0fc48d48459657f4f8a0c78eda>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <d8761a0fc48d48459657f4f8a0c78eda>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.StrangeSortList
    (System.Collections.Generic.List`1[T] lst) [0x00062] in <d8761a0fc48d48459657f4f8a0c78eda>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <d8761a0fc48d48459657f4f8a0c78eda>:0
    \n"
  stdout: ''
  timestamp: 1659798579
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    ret = new List<long>();\n        List<long> lst2 = new List<long>(lst);\n        lst2.Sort();\n
    \       int i = 0;\n        while (lst2.Count > 0) {\n            if (i % 2 ==
    0) {\n                ret.Add(lst2[0]);\n                lst2.RemoveAt(0);\n            }
    else {\n                ret.Add(lst2[lst2.Count - 1]);\n                lst2.RemoveAt(lst2.Count
    - 1);\n            }\n            i++;\n        }\n        return ret;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new
    List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,
    (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,
    (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,
    (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ad7b4a245d3849108183f853c59f6f7a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ad7b4a245d3849108183f853c59f6f7a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798774
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    ret = new List<long>();\n        List<long> lst2 = new List<long>(lst);\n        lst2.Sort();\n
    \       int i = 0;\n        while (lst2.Count > 0) {\n            ret.Add(lst2[i]);\n
    \           lst2.RemoveAt(i);\n            if (lst2.Count == 0) {\n                break;\n
    \           }\n            if (i == 0) {\n                i = lst2.Count - 1;\n
    \           } else {\n                i = 0;\n            }\n        }\n        return
    ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new
    List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,
    (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,
    (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,
    (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1590cd68864c4b6eb1b3aeeb15d19aba>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1590cd68864c4b6eb1b3aeeb15d19aba>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798774
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        if (lst.Count
    == 0) {\n            return lst;\n        }\n        List<long> result = new List<long>();\n
    \       List<long> remaining = new List<long>(lst);\n        while (remaining.Count
    > 0) {\n            long min = remaining.Min();\n            remaining.Remove(min);\n
    \           result.Add(min);\n            if (remaining.Count > 0) {\n                long
    max = remaining.Max();\n                remaining.Remove(max);\n                result.Add(max);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b98670957d614a3799081ca82cdb8b9e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b98670957d614a3799081ca82cdb8b9e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798579
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    result = new List<long>();\n        List<long> lst2 = new List<long>(lst);\n        lst2.Sort();\n
    \       int i = 0;\n        while (lst2.Count > 0) {\n            if (i % 2 ==
    0) {\n                result.Add(lst2[0]);\n                lst2.RemoveAt(0);\n
    \           } else {\n                result.Add(lst2[lst2.Count - 1]);\n                lst2.RemoveAt(lst2.Count
    - 1);\n            }\n            i++;\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new
    List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,
    (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,
    (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,
    (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <913770e125ff4d4f872a187ba159be7b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <913770e125ff4d4f872a187ba159be7b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798578
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    result = new List<long>();\n        List<long> lst1 = new List<long>(lst);\n        List<long>
    lst2 = new List<long>(lst);\n        lst1.Sort();\n        lst2.Sort();\n        lst2.Reverse();\n
    \       for (int i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0) {\n
    \               result.Add(lst1[0]);\n                lst1.RemoveAt(0);\n            }
    else {\n                result.Add(lst2[0]);\n                lst2.RemoveAt(0);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <155ebdeac1b04af489da62727788e63a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <155ebdeac1b04af489da62727788e63a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798581
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    result = new List<long>();\n        List<long> lst2 = new List<long>(lst);\n        lst2.Sort();\n
    \       int i = 0;\n        while (lst2.Count > 0) {\n            if (i % 2 ==
    0) {\n                result.Add(lst2[0]);\n                lst2.RemoveAt(0);\n
    \           } else {\n                result.Add(lst2[lst2.Count - 1]);\n                lst2.RemoveAt(lst2.Count
    - 1);\n            }\n            i += 1;\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new
    List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,
    (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,
    (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,
    (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <38bd96f4eaf04300b49e37133919048c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <38bd96f4eaf04300b49e37133919048c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798579
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        if (lst.Count
    == 0) {\n            return lst;\n        }\n        List<long> res = new List<long>();\n
    \       List<long> lst_copy = new List<long>(lst);\n        long min = lst_copy.Min();\n
    \       res.Add(min);\n        lst_copy.Remove(min);\n        while (lst_copy.Count
    > 0) {\n            long max = lst_copy.Max();\n            res.Add(max);\n            lst_copy.Remove(max);\n
    \           if (lst_copy.Count == 0) {\n                break;\n            }\n
    \           long min2 = lst_copy.Min();\n            res.Add(min2);\n            lst_copy.Remove(min2);\n
    \       }\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L,
    (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new long[]{(long)5L,
    (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <45384d4b64d847b9aa91cc1477cace85>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <45384d4b64d847b9aa91cc1477cace85>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798774
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        if (lst.Count
    == 0) {\n            return lst;\n        }\n        List<long> res = new List<long>();\n
    \       List<long> lst1 = new List<long>(lst);\n        List<long> lst2 = new
    List<long>(lst);\n        lst1.Sort();\n        lst2.Sort();\n        lst2.Reverse();\n
    \       int i = 0;\n        while (lst1.Count > 0) {\n            res.Add(lst1[i]);\n
    \           lst1.RemoveAt(i);\n            if (lst1.Count == 0) {\n                break;\n
    \           }\n            res.Add(lst2[i]);\n            lst2.RemoveAt(i);\n
    \       }\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L,
    (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new long[]{(long)5L,
    (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8366c778dc4c407c97d04649b6e2ab2a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8366c778dc4c407c97d04649b6e2ab2a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798578
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    result = new List<long>();\n        List<long> lst2 = new List<long>(lst);\n        lst2.Sort();\n
    \       int i = 0;\n        while (lst2.Count > 0) {\n            result.Add(lst2[i]);\n
    \           lst2.RemoveAt(i);\n            if (lst2.Count > 0) {\n                result.Add(lst2[lst2.Count
    - 1]);\n                lst2.RemoveAt(lst2.Count - 1);\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L,
    (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new long[]{(long)5L,
    (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <27467333d55642819e36bae247612c84>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <27467333d55642819e36bae247612c84>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798774
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        // Your
    code here\n        return lst;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L,
    (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new long[]{(long)5L,
    (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <35edaa352dd849fe825cb8a31fe3fa5c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <35edaa352dd849fe825cb8a31fe3fa5c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798580
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        if (lst.Count
    == 0) {\n            return lst;\n        }\n        List<long> res = new List<long>();\n
    \       List<long> lst1 = new List<long>(lst);\n        List<long> lst2 = new
    List<long>(lst);\n        lst1.Sort();\n        lst2.Sort();\n        lst2.Reverse();\n
    \       for (int i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0) {\n
    \               res.Add(lst1[0]);\n                lst1.RemoveAt(0);\n            }
    else {\n                res.Add(lst2[0]);\n                lst2.RemoveAt(0);\n
    \           }\n        }\n        return res;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a2e7415341ed47cbbf91bcd6f12fb9b5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a2e7415341ed47cbbf91bcd6f12fb9b5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798580
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        var sorted
    = lst.OrderBy(x => x).ToList();\n        var result = new List<long>();\n        var
    i = 0;\n        var j = sorted.Count - 1;\n        while (i <= j) {\n            result.Add(sorted[i]);\n
    \           i++;\n            if (i <= j) {\n                result.Add(sorted[j]);\n
    \               j--;\n            }\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new
    List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,
    (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,
    (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,
    (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <32a3f517edee4d2aa05c4babd2c763b5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <32a3f517edee4d2aa05c4babd2c763b5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798578
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    result = new List<long>();\n        List<long> sorted = lst.OrderBy(x => x).ToList();\n
    \       int i = 0;\n        while (sorted.Count > 0) {\n            if (i % 2
    == 0) {\n                result.Add(sorted[0]);\n                sorted.RemoveAt(0);\n
    \           } else {\n                result.Add(sorted[sorted.Count - 1]);\n
    \               sorted.RemoveAt(sorted.Count - 1);\n            }\n            i++;\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1aa54d2847a540c7b26b2d4dceaaced4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1aa54d2847a540c7b26b2d4dceaaced4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798578
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        if (lst.Count
    == 0) {\n            return lst;\n        }\n        long min = lst.Min();\n        long
    max = lst.Max();\n        int minIndex = lst.IndexOf(min);\n        int maxIndex
    = lst.IndexOf(max);\n        lst.RemoveAt(minIndex);\n        lst.RemoveAt(maxIndex
    - 1);\n        List<long> result = new List<long>();\n        result.Add(min);\n
    \       result.Add(max);\n        while (lst.Count > 0) {\n            min = lst.Min();\n
    \           max = lst.Max();\n            minIndex = lst.IndexOf(min);\n            maxIndex
    = lst.IndexOf(max);\n            lst.RemoveAt(minIndex);\n            lst.RemoveAt(maxIndex
    - 1);\n            result.Add(min);\n            result.Add(max);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L,
    (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new long[]{(long)5L,
    (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d5bf2f43744849bdacdfabea3d0e55ce>:0
    \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of
    range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].RemoveAt (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.StrangeSortList
    (System.Collections.Generic.List`1[T] lst) [0x0008b] in <d5bf2f43744849bdacdfabea3d0e55ce>:0
    \n  at Problem.Main (System.String[] args) [0x00053] in <d5bf2f43744849bdacdfabea3d0e55ce>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].RemoveAt (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.StrangeSortList
    (System.Collections.Generic.List`1[T] lst) [0x0008b] in <d5bf2f43744849bdacdfabea3d0e55ce>:0
    \n  at Problem.Main (System.String[] args) [0x00053] in <d5bf2f43744849bdacdfabea3d0e55ce>:0
    \n"
  stdout: ''
  timestamp: 1659798774
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    res = new List<long>();\n        List<long> lst1 = new List<long>(lst);\n        lst1.Sort();\n
    \       int i = 0;\n        while (lst1.Count > 0) {\n            if (i % 2 ==
    0) {\n                res.Add(lst1[0]);\n                lst1.RemoveAt(0);\n            }
    else {\n                res.Add(lst1[lst1.Count - 1]);\n                lst1.RemoveAt(lst1.Count
    - 1);\n            }\n            i++;\n        }\n        return res;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new
    List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,
    (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,
    (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,
    (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9ee0e99093d14e06bfa2e641f022833b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9ee0e99093d14e06bfa2e641f022833b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798774
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    result = new List<long>();\n        List<long> lst1 = new List<long>(lst);\n        List<long>
    lst2 = new List<long>(lst);\n        lst1.Sort();\n        lst2.Sort();\n        lst2.Reverse();\n
    \       for (int i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0) {\n
    \               result.Add(lst1[0]);\n                lst1.RemoveAt(0);\n            }
    else {\n                result.Add(lst2[0]);\n                lst2.RemoveAt(0);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <155ebdeac1b04af489da62727788e63a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <155ebdeac1b04af489da62727788e63a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798581
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    result = new List<long>();\n        List<long> temp = new List<long>();\n        temp.AddRange(lst);\n
    \       while (temp.Count > 0) {\n            long min = temp.Min();\n            long
    max = temp.Max();\n            result.Add(min);\n            result.Add(max);\n
    \           temp.Remove(min);\n            temp.Remove(max);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new
    List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,
    (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,
    (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,
    (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <89f172d6c8404687868a6c151bb97255>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <89f172d6c8404687868a6c151bb97255>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798579
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    res = new List<long>();\n        List<long> lst2 = new List<long>(lst);\n        lst2.Sort();\n
    \       int i = 0;\n        while (lst2.Count > 0) {\n            if (i % 2 ==
    0) {\n                res.Add(lst2[0]);\n                lst2.RemoveAt(0);\n            }
    else {\n                res.Add(lst2[lst2.Count - 1]);\n                lst2.RemoveAt(lst2.Count
    - 1);\n            }\n            i += 1;\n        }\n        return res;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new
    List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,
    (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,
    (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,
    (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a8d8414c6e61490db35256b4bf4a7afd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a8d8414c6e61490db35256b4bf4a7afd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798580
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        var sorted
    = lst.OrderBy(x => x).ToList();\n        var result = new List<long>();\n        var
    i = 0;\n        var j = sorted.Count - 1;\n        while (i <= j) {\n            result.Add(sorted[i]);\n
    \           i++;\n            if (i <= j) {\n                result.Add(sorted[j]);\n
    \               j--;\n            }\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new
    List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,
    (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,
    (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,
    (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <32a3f517edee4d2aa05c4babd2c763b5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <32a3f517edee4d2aa05c4babd2c763b5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798578
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    result = new List<long>();\n        List<long> lst1 = new List<long>(lst);\n        while
    (lst1.Count > 0) {\n            long min = lst1.Min();\n            result.Add(min);\n
    \           lst1.Remove(min);\n            if (lst1.Count > 0) {\n                long
    max = lst1.Max();\n                result.Add(max);\n                lst1.Remove(max);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a5d7abb550e7449aba6fac57109f5a4b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a5d7abb550e7449aba6fac57109f5a4b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798774
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    result = new List<long>();\n        List<long> lst2 = new List<long>(lst);\n        lst2.Sort();\n
    \       int i = 0;\n        while (lst2.Count > 0) {\n            if (i % 2 ==
    0) {\n                result.Add(lst2[0]);\n                lst2.RemoveAt(0);\n
    \           } else {\n                result.Add(lst2[lst2.Count - 1]);\n                lst2.RemoveAt(lst2.Count
    - 1);\n            }\n            i++;\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new
    List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,
    (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,
    (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,
    (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <913770e125ff4d4f872a187ba159be7b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <913770e125ff4d4f872a187ba159be7b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798578
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        var result
    = new List<long>();\n        var min = lst.Min();\n        var max = lst.Max();\n
    \       var minIndex = lst.IndexOf(min);\n        var maxIndex = lst.IndexOf(max);\n
    \       var minCount = lst.Count(x => x == min);\n        var maxCount = lst.Count(x
    => x == max);\n        var minRemaining = minCount - 1;\n        var maxRemaining
    = maxCount - 1;\n        var minRemainingIndex = minIndex + 1;\n        var maxRemainingIndex
    = maxIndex + 1;\n        var minRemainingIndexes = new List<int>();\n        var
    maxRemainingIndexes = new List<int>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            if (lst[i] == min && i != minIndex) {\n                minRemainingIndexes.Add(i);\n
    \           }\n            if (lst[i] == max && i != maxIndex) {\n                maxRemainingIndexes.Add(i);\n
    \           }\n        }\n        var minRemainingIndexesCount = minRemainingIndexes.Count;\n
    \       var maxRemainingIndexesCount = maxRemainingIndexes.Count;\n        var
    minRemainingIndexesIndex = 0;\n        var maxRemainingIndexesIndex = 0;\n        var
    minRemainingIndexesIndexes = new List<int>();\n        var maxRemainingIndexesIndexes
    = new List<int>();\n        for (int i = 0; i < lst.Count; i++) {\n            if
    (i % 2 == 0) {\n                if (minRemaining > 0) {\n                    result.Add(min);\n
    \                   minRemaining--;\n                } else {\n                    if
    (minRemainingIndexesCount > 0) {\n                        result.Add(lst[minRemainingIndexes[minRemainingIndexesIndex]]);\n
    \                       minRemainingIndexesIndex++;\n                        minRemainingIndexesCount--;\n
    \                   } else {\n                        result.Add(max);\n                        maxRemaining--;\n
    \                   }\n                }\n            } else {\n                if
    (maxRemaining > 0\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new
    List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,
    (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,
    (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,
    (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu035fzyp.cs(63,37): error CS1026: ) expected

    /tmp/tmpu035fzyp.cs(63,37): error CS1525: Invalid expression term ''}''

    /tmp/tmpu035fzyp.cs(63,37): error CS1002: ; expected

    /tmp/tmpu035fzyp.cs(65,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpu035fzyp.cs(77,2): error CS1513: } expected

    '
  timestamp: 1659798773
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    result = new List<long>();\n        List<long> sorted = lst.OrderBy(x => x).ToList();\n
    \       int i = 0;\n        while (sorted.Count > 0) {\n            if (i % 2
    == 0) {\n                result.Add(sorted[0]);\n                sorted.RemoveAt(0);\n
    \           } else {\n                result.Add(sorted[sorted.Count - 1]);\n
    \               sorted.RemoveAt(sorted.Count - 1);\n            }\n            i++;\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1aa54d2847a540c7b26b2d4dceaaced4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1aa54d2847a540c7b26b2d4dceaaced4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798578
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    result = new List<long>();\n        List<long> lst_copy = new List<long>(lst);\n
    \       lst_copy.Sort();\n        int i = 0;\n        while (lst_copy.Count >
    0) {\n            if (i % 2 == 0) {\n                result.Add(lst_copy[0]);\n
    \               lst_copy.RemoveAt(0);\n            } else {\n                result.Add(lst_copy[lst_copy.Count
    - 1]);\n                lst_copy.RemoveAt(lst_copy.Count - 1);\n            }\n
    \           i++;\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d39084c0e46f46c98fbab94b2327861c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d39084c0e46f46c98fbab94b2327861c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798580
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    result = new List<long>();\n        List<long> lstCopy = new List<long>(lst);\n
    \       while (lstCopy.Count > 0) {\n            long min = lstCopy.Min();\n            result.Add(min);\n
    \           lstCopy.Remove(min);\n            if (lstCopy.Count > 0) {\n                long
    max = lstCopy.Max();\n                result.Add(max);\n                lstCopy.Remove(max);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2975d53ef2bf478284678b688221b6cd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2975d53ef2bf478284678b688221b6cd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798774
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        if (lst.Count
    == 0) {\n            return lst;\n        }\n        List<long> res = new List<long>();\n
    \       List<long> lst_copy = new List<long>(lst);\n        lst_copy.Sort();\n
    \       bool is_min = true;\n        while (lst_copy.Count > 0) {\n            if
    (is_min) {\n                res.Add(lst_copy[0]);\n                lst_copy.RemoveAt(0);\n
    \           } else {\n                res.Add(lst_copy[lst_copy.Count - 1]);\n
    \               lst_copy.RemoveAt(lst_copy.Count - 1);\n            }\n            is_min
    = !is_min;\n        }\n        return res;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a8dd00a4140547da871e0d28f737a4f3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a8dd00a4140547da871e0d28f737a4f3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798774
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    result = new List<long>();\n        List<long> lst2 = new List<long>(lst);\n        while
    (lst2.Count > 0) {\n            long min = lst2.Min();\n            result.Add(min);\n
    \           lst2.Remove(min);\n            if (lst2.Count == 0) {\n                break;\n
    \           }\n            long max = lst2.Max();\n            result.Add(max);\n
    \           lst2.Remove(max);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ec7442eb22b541548c4ebc91f52c1d39>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ec7442eb22b541548c4ebc91f52c1d39>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798774
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    res = new List<long>();\n        List<long> lst2 = new List<long>(lst);\n        lst2.Sort();\n
    \       int i = 0;\n        while (lst2.Count > 0) {\n            if (i % 2 ==
    0) {\n                res.Add(lst2[0]);\n                lst2.RemoveAt(0);\n            }
    else {\n                res.Add(lst2[lst2.Count - 1]);\n                lst2.RemoveAt(lst2.Count
    - 1);\n            }\n            i += 1;\n        }\n        return res;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new
    List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,
    (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,
    (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,
    (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a8d8414c6e61490db35256b4bf4a7afd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a8d8414c6e61490db35256b4bf4a7afd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798580
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    result = new List<long>();\n        List<long> lst2 = new List<long>(lst);\n        lst2.Sort();\n
    \       int i = 0;\n        while (lst2.Count > 0) {\n            if (i % 2 ==
    0) {\n                result.Add(lst2[0]);\n                lst2.RemoveAt(0);\n
    \           } else {\n                result.Add(lst2[lst2.Count - 1]);\n                lst2.RemoveAt(lst2.Count
    - 1);\n            }\n            i++;\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new
    List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,
    (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,
    (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,
    (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <913770e125ff4d4f872a187ba159be7b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <913770e125ff4d4f872a187ba159be7b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798578
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        if (lst.Count
    == 0) {\n            return lst;\n        }\n        List<long> result = new List<long>();\n
    \       List<long> remaining = new List<long>(lst);\n        while (remaining.Count
    > 0) {\n            long min = remaining.Min();\n            result.Add(min);\n
    \           remaining.Remove(min);\n            if (remaining.Count == 0) {\n
    \               break;\n            }\n            long max = remaining.Max();\n
    \           result.Add(max);\n            remaining.Remove(max);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L,
    (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new long[]{(long)5L,
    (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8c9385c2a9f1487c9a6f360d33b6ff96>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8c9385c2a9f1487c9a6f360d33b6ff96>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798579
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        var lst2
    = new List<long>();\n        var lst3 = new List<long>(lst);\n        var lst4
    = new List<long>();\n        var lst5 = new List<long>();\n        var lst6 =
    new List<long>();\n        var lst7 = new List<long>();\n        var lst8 = new
    List<long>();\n        var lst9 = new List<long>();\n        var lst10 = new List<long>();\n
    \       var lst11 = new List<long>();\n        var lst12 = new List<long>();\n
    \       var lst13 = new List<long>();\n        var lst14 = new List<long>();\n
    \       var lst15 = new List<long>();\n        var lst16 = new List<long>();\n
    \       var lst17 = new List<long>();\n        var lst18 = new List<long>();\n
    \       var lst19 = new List<long>();\n        var lst20 = new List<long>();\n
    \       var lst21 = new List<long>();\n        var lst22 = new List<long>();\n
    \       var lst23 = new List<long>();\n        var lst24 = new List<long>();\n
    \       var lst25 = new List<long>();\n        var lst26 = new List<long>();\n
    \       var lst27 = new List<long>();\n        var lst28 = new List<long>();\n
    \       var lst29 = new List<long>();\n        var lst30 = new List<long>();\n
    \       var lst31 = new List<long>();\n        var lst32 = new List<long>();\n
    \       var lst33 = new List<long>();\n        var lst34 = new List<long>();\n
    \       var lst35 = new List<long>();\n        var lst36 = new List<long>();\n
    \       var lst37 = new List<long>();\n        var lst38 = new List<long>();\n
    \       var lst39 = new List<long>();\n        var lst40 = new List<long>();\n
    \       var\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new
    List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,
    (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,
    (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,
    (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps3x_gvxl.cs(59,12): error CS1002: ; expected

    '
  timestamp: 1659798578
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        if (lst.Count
    == 0) {\n            return lst;\n        }\n        List<long> res = new List<long>();\n
    \       List<long> lst_copy = new List<long>(lst);\n        long min = lst_copy.Min();\n
    \       res.Add(min);\n        lst_copy.Remove(min);\n        while (lst_copy.Count
    > 0) {\n            long max = lst_copy.Max();\n            res.Add(max);\n            lst_copy.Remove(max);\n
    \           if (lst_copy.Count == 0) {\n                break;\n            }\n
    \           long min2 = lst_copy.Min();\n            res.Add(min2);\n            lst_copy.Remove(min2);\n
    \       }\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L,
    (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new long[]{(long)5L,
    (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <45384d4b64d847b9aa91cc1477cace85>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <45384d4b64d847b9aa91cc1477cace85>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798774
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        var res
    = new List<long>();\n        var min = lst.Min();\n        var max = lst.Max();\n
    \       var min_count = lst.Count(x => x == min);\n        var max_count = lst.Count(x
    => x == max);\n        var min_idx = 0;\n        var max_idx = 0;\n        for
    (int i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0) {\n                if
    (min_count > 0) {\n                    res.Add(min);\n                    min_count--;\n
    \               } else {\n                    res.Add(lst[min_idx]);\n                    min_idx++;\n
    \               }\n            } else {\n                if (max_count > 0) {\n
    \                   res.Add(max);\n                    max_count--;\n                }
    else {\n                    res.Add(lst[max_idx]);\n                    max_idx++;\n
    \               }\n            }\n        }\n        return res;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1d7cd45448764e2ba132c4bee3068c40>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1d7cd45448764e2ba132c4bee3068c40>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798774
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        if (lst.Count
    == 0) {\n            return lst;\n        }\n        var min = lst.Min();\n        var
    max = lst.Max();\n        var newList = new List<long>();\n        var minIndex
    = lst.IndexOf(min);\n        var maxIndex = lst.IndexOf(max);\n        var minCount
    = 0;\n        var maxCount = 0;\n        var minFlag = true;\n        var maxFlag
    = true;\n        while (newList.Count != lst.Count) {\n            if (minFlag)
    {\n                newList.Add(min);\n                minCount++;\n                minFlag
    = false;\n            } else if (maxFlag) {\n                newList.Add(max);\n
    \               maxCount++;\n                maxFlag = false;\n            } else
    {\n                if (minCount == maxCount) {\n                    minFlag =
    true;\n                } else {\n                    maxFlag = true;\n                }\n
    \           }\n        }\n        return newList;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2af210c6668a4875bb9094ecac748333>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2af210c6668a4875bb9094ecac748333>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798775
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        var result
    = new List<long>();\n        var sorted = lst.OrderBy(x => x).ToList();\n        var
    min = sorted.First();\n        var max = sorted.Last();\n        var minIndex
    = 0;\n        var maxIndex = sorted.Count - 1;\n        var isMin = true;\n        while
    (minIndex <= maxIndex) {\n            if (isMin) {\n                result.Add(sorted[minIndex]);\n
    \               minIndex++;\n            } else {\n                result.Add(sorted[maxIndex]);\n
    \               maxIndex--;\n            }\n            isMin = !isMin;\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L,
    (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new long[]{(long)5L,
    (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d09153fd18f64457b91a8a1425a1697f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d09153fd18f64457b91a8a1425a1697f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798775
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    res = new List<long>();\n        List<long> lst2 = new List<long>(lst);\n        lst2.Sort();\n
    \       while (lst2.Count > 0) {\n            res.Add(lst2[0]);\n            lst2.RemoveAt(0);\n
    \           if (lst2.Count > 0) {\n                res.Add(lst2[lst2.Count - 1]);\n
    \               lst2.RemoveAt(lst2.Count - 1);\n            }\n        }\n        return
    res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new
    List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,
    (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,
    (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,
    (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <af121637a92c406c95dd306cc5811dc4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <af121637a92c406c95dd306cc5811dc4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798775
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        // Your
    code goes here.\n        return lst;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8af5dcd6187d479cb1dc553726cd843b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8af5dcd6187d479cb1dc553726cd843b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798578
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    result = new List<long>();\n        if (lst.Count == 0) {\n            return
    result;\n        }\n        List<long> lst1 = new List<long>();\n        List<long>
    lst2 = new List<long>();\n        lst1.Add(lst[0]);\n        for (long i = 1;
    i < lst.Count; i++) {\n            lst2.Add(lst[(int)i]);\n        }\n        while
    (lst2.Count > 0) {\n            long min = lst2[0];\n            long max = lst2[0];\n
    \           for (long i = 0; i < lst2.Count; i++) {\n                if (lst2[(int)i]
    < min) {\n                    min = lst2[(int)i];\n                }\n                if
    (lst2[(int)i] > max) {\n                    max = lst2[(int)i];\n                }\n
    \           }\n            lst1.Add(min);\n            lst1.Add(max);\n            lst2.Remove(min);\n
    \           lst2.Remove(max);\n        }\n        return lst1;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <395c2aa0f91b491994c920f0195a14c9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <395c2aa0f91b491994c920f0195a14c9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798775
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    result = new List<long>();\n        List<long> lst_copy = new List<long>(lst);\n
    \       while (lst_copy.Count > 0) {\n            long min = lst_copy.Min();\n
    \           lst_copy.Remove(min);\n            result.Add(min);\n            if
    (lst_copy.Count > 0) {\n                long max = lst_copy.Max();\n                lst_copy.Remove(max);\n
    \               result.Add(max);\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new
    List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,
    (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,
    (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,
    (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <35447d0e9658408aa30027d8bfea4da5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <35447d0e9658408aa30027d8bfea4da5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798775
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        // Your
    code here\n        return lst;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L,
    (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new long[]{(long)5L,
    (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <35edaa352dd849fe825cb8a31fe3fa5c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <35edaa352dd849fe825cb8a31fe3fa5c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798580
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    result = new List<long>();\n        List<long> lst2 = new List<long>(lst);\n        lst2.Sort();\n
    \       int i = 0;\n        while (lst2.Count > 0) {\n            if (i % 2 ==
    0) {\n                result.Add(lst2[0]);\n                lst2.RemoveAt(0);\n
    \           } else {\n                result.Add(lst2[lst2.Count - 1]);\n                lst2.RemoveAt(lst2.Count
    - 1);\n            }\n            i += 1;\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new
    List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,
    (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,
    (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,
    (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <38bd96f4eaf04300b49e37133919048c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <38bd96f4eaf04300b49e37133919048c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798579
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    result = new List<long>();\n        List<long> temp = new List<long>();\n        int
    i = 0;\n        while (lst.Count > 0) {\n            if (i % 2 == 0) {\n                temp
    = lst.OrderBy(x => x).ToList();\n            } else {\n                temp =
    lst.OrderByDescending(x => x).ToList();\n            }\n            result.Add(temp[0]);\n
    \           lst.Remove(temp[0]);\n            i++;\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new
    List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,
    (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,
    (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,
    (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c27dff4158744a779c78ce099fe8e52c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c27dff4158744a779c78ce099fe8e52c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798580
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    result = new List<long>();\n        List<long> lst1 = new List<long>(lst);\n        List<long>
    lst2 = new List<long>(lst);\n        lst1.Sort();\n        lst2.Sort();\n        lst2.Reverse();\n
    \       for (int i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0) {\n
    \               result.Add(lst1[0]);\n                lst1.RemoveAt(0);\n            }
    else {\n                result.Add(lst2[0]);\n                lst2.RemoveAt(0);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <155ebdeac1b04af489da62727788e63a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <155ebdeac1b04af489da62727788e63a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798581
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    res = new List<long>();\n        List<long> lst1 = new List<long>(lst);\n        List<long>
    lst2 = new List<long>(lst);\n        lst1.Sort();\n        lst2.Sort();\n        lst2.Reverse();\n
    \       for (int i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0) {\n
    \               res.Add(lst1[0]);\n                lst1.RemoveAt(0);\n            }
    else {\n                res.Add(lst2[0]);\n                lst2.RemoveAt(0);\n
    \           }\n        }\n        return res;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7715705591f243a591269476660e5ee1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7715705591f243a591269476660e5ee1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798579
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    result = new List<long>();\n        List<long> lstCopy = new List<long>(lst);\n
    \       int i = 0;\n        while (lstCopy.Count > 0) {\n            long min
    = lstCopy.Min();\n            long max = lstCopy.Max();\n            if (i % 2
    == 0) {\n                result.Add(min);\n                lstCopy.Remove(min);\n
    \           } else {\n                result.Add(max);\n                lstCopy.Remove(max);\n
    \           }\n            i++;\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bbe283537b5d46bd91e52085f54fb741>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bbe283537b5d46bd91e52085f54fb741>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798775
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    result = new List<long>();\n        if (lst.Count == 0) {\n            return
    result;\n        }\n        List<long> remaining = new List<long>(lst);\n        while
    (remaining.Count > 0) {\n            long min = remaining.Min();\n            result.Add(min);\n
    \           remaining.Remove(min);\n            if (remaining.Count == 0) {\n
    \               break;\n            }\n            long max = remaining.Max();\n
    \           result.Add(max);\n            remaining.Remove(max);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L,
    (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new long[]{(long)5L,
    (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3f056b8bafc243d0a7060e7ad7f261db>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3f056b8bafc243d0a7060e7ad7f261db>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798775
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    result = new List<long>();\n        List<long> lst2 = new List<long>(lst);\n        lst2.Sort();\n
    \       int i = 0;\n        while (lst2.Count > 0) {\n            if (i % 2 ==
    0) {\n                result.Add(lst2[0]);\n                lst2.RemoveAt(0);\n
    \           } else {\n                result.Add(lst2[lst2.Count - 1]);\n                lst2.RemoveAt(lst2.Count
    - 1);\n            }\n            i += 1;\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new
    List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,
    (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,
    (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,
    (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <38bd96f4eaf04300b49e37133919048c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <38bd96f4eaf04300b49e37133919048c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798579
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    result = new List<long>();\n        List<long> remaining = new List<long>(lst);\n
    \       while (remaining.Count > 0) {\n            long min = remaining.Min();\n
    \           long max = remaining.Max();\n            result.Add(min);\n            remaining.Remove(min);\n
    \           if (remaining.Count > 0) {\n                result.Add(max);\n                remaining.Remove(max);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f2699cbd42c8493484b54dbca59125ff>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f2699cbd42c8493484b54dbca59125ff>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798579
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    result = new List<long>();\n        long min = lst.Min();\n        long max =
    lst.Max();\n        while (lst.Count > 0) {\n            result.Add(min);\n            lst.Remove(min);\n
    \           if (lst.Count > 0) {\n                result.Add(max);\n                lst.Remove(max);\n
    \           }\n            min = lst.Min();\n            max = lst.Max();\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L,
    (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new long[]{(long)5L,
    (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.Min (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.StrangeSortList
    (System.Collections.Generic.List`1[T] lst) [0x00047] in <a42db0cf34c74892886ff312130bbe7f>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <a42db0cf34c74892886ff312130bbe7f>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.Min (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.StrangeSortList
    (System.Collections.Generic.List`1[T] lst) [0x00047] in <a42db0cf34c74892886ff312130bbe7f>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <a42db0cf34c74892886ff312130bbe7f>:0
    \n"
  stdout: ''
  timestamp: 1659798775
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    result = new List<long>();\n        List<long> copy = new List<long>(lst);\n        while
    (copy.Count > 0) {\n            long min = copy.Min();\n            long max =
    copy.Max();\n            result.Add(min);\n            copy.Remove(min);\n            if
    (copy.Count > 0) {\n                result.Add(max);\n                copy.Remove(max);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d971045863ee4e9590165643307f802b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d971045863ee4e9590165643307f802b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798775
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        var sorted
    = lst.OrderBy(x => x).ToList();\n        var result = new List<long>();\n        while
    (sorted.Count > 0) {\n            result.Add(sorted[0]);\n            sorted.RemoveAt(0);\n
    \           if (sorted.Count > 0) {\n                result.Add(sorted[sorted.Count
    - 1]);\n                sorted.RemoveAt(sorted.Count - 1);\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L,
    (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new long[]{(long)5L,
    (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cf5a5311dcff43ef91a06c06e920292d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cf5a5311dcff43ef91a06c06e920292d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798773
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        if (lst.Count
    == 0) {\n            return lst;\n        }\n        List<long> result = new List<long>();\n
    \       List<long> remaining = new List<long>(lst);\n        while (remaining.Count
    > 0) {\n            long min = remaining.Min();\n            result.Add(min);\n
    \           remaining.Remove(min);\n            if (remaining.Count == 0) {\n
    \               break;\n            }\n            long max = remaining.Max();\n
    \           result.Add(max);\n            remaining.Remove(max);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L,
    (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new long[]{(long)5L,
    (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8c9385c2a9f1487c9a6f360d33b6ff96>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8c9385c2a9f1487c9a6f360d33b6ff96>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798579
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        if (lst.Count
    == 0) {\n            return lst;\n        }\n        List<long> result = new List<long>();\n
    \       List<long> remaining = new List<long>(lst);\n        while (remaining.Count
    > 0) {\n            long min = remaining.Min();\n            result.Add(min);\n
    \           remaining.Remove(min);\n            if (remaining.Count == 0) {\n
    \               break;\n            }\n            long max = remaining.Max();\n
    \           result.Add(max);\n            remaining.Remove(max);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L,
    (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new long[]{(long)5L,
    (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8c9385c2a9f1487c9a6f360d33b6ff96>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8c9385c2a9f1487c9a6f360d33b6ff96>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798579
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        if (lst.Count
    == 0) {\n            return lst;\n        }\n        List<long> res = new List<long>();\n
    \       List<long> lst1 = new List<long>(lst);\n        List<long> lst2 = new
    List<long>(lst);\n        lst1.Sort();\n        lst2.Sort();\n        lst2.Reverse();\n
    \       int i = 0;\n        while (lst1.Count > 0) {\n            if (i % 2 ==
    0) {\n                res.Add(lst1[0]);\n                lst1.RemoveAt(0);\n            }
    else {\n                res.Add(lst2[0]);\n                lst2.RemoveAt(0);\n
    \           }\n            i++;\n        }\n        return res;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <52fa5ee8abd344649bfdb92deed88d76>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <52fa5ee8abd344649bfdb92deed88d76>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798775
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        var res
    = new List<long>();\n        var min = lst.Min();\n        var max = lst.Max();\n
    \       var min_index = lst.IndexOf(min);\n        var max_index = lst.IndexOf(max);\n
    \       var min_count = lst.Count(x => x == min);\n        var max_count = lst.Count(x
    => x == max);\n        var min_removed = false;\n        var max_removed = false;\n
    \       var min_removed_count = 0;\n        var max_removed_count = 0;\n        var
    min_removed_index = 0;\n        var max_removed_index = 0;\n        var min_removed_indexes
    = new List<int>();\n        var max_removed_indexes = new List<int>();\n        for
    (var i = 0; i < lst.Count; i++) {\n            if (lst[i] == min && !min_removed)
    {\n                min_removed = true;\n                min_removed_index = i;\n
    \               min_removed_indexes.Add(i);\n                continue;\n            }\n
    \           if (lst[i] == max && !max_removed) {\n                max_removed
    = true;\n                max_removed_index = i;\n                max_removed_indexes.Add(i);\n
    \               continue;\n            }\n            res.Add(lst[i]);\n        }\n
    \       if (min_removed_index < max_removed_index) {\n            res.Insert(min_removed_index,
    min);\n            res.Insert(max_removed_index, max);\n        } else {\n            res.Insert(max_removed_index,
    max);\n            res.Insert(min_removed_index, min);\n        }\n        return
    res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new
    List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,
    (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,
    (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,
    (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3df6a594574c445787eb5ff397304b50>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3df6a594574c445787eb5ff397304b50>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798775
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    result = new List<long>();\n        List<long> temp = new List<long>();\n        temp.AddRange(lst);\n
    \       while (temp.Count > 0) {\n            long min = temp.Min();\n            long
    max = temp.Max();\n            result.Add(min);\n            temp.Remove(min);\n
    \           if (temp.Count > 0) {\n                result.Add(max);\n                temp.Remove(max);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eceab839743e41f68bf50205cb83b466>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eceab839743e41f68bf50205cb83b466>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798578
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        if (lst.Count
    == 0) {\n            return lst;\n        }\n        List<long> res = new List<long>();\n
    \       List<long> lst2 = new List<long>(lst);\n        lst2.Sort();\n        int
    i = 0;\n        while (lst2.Count > 0) {\n            if (i % 2 == 0) {\n                res.Add(lst2[0]);\n
    \               lst2.RemoveAt(0);\n            } else {\n                res.Add(lst2[lst2.Count
    - 1]);\n                lst2.RemoveAt(lst2.Count - 1);\n            }\n            i
    += 1;\n        }\n        return res;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <98661943198443d8a517d7cf94fdf9c9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <98661943198443d8a517d7cf94fdf9c9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798580
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        var sorted
    = lst.OrderBy(x => x).ToList();\n        var result = new List<long>();\n        while
    (sorted.Count > 0) {\n            result.Add(sorted[0]);\n            sorted.RemoveAt(0);\n
    \           if (sorted.Count > 0) {\n                result.Add(sorted[sorted.Count
    - 1]);\n                sorted.RemoveAt(sorted.Count - 1);\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L,
    (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new long[]{(long)5L,
    (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cf5a5311dcff43ef91a06c06e920292d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cf5a5311dcff43ef91a06c06e920292d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798773
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    result = new List<long>();\n        List<long> lst1 = new List<long>(lst);\n        List<long>
    lst2 = new List<long>(lst);\n        lst1.Sort();\n        lst2.Sort();\n        lst2.Reverse();\n
    \       while (lst1.Count > 0) {\n            result.Add(lst1[0]);\n            lst1.RemoveAt(0);\n
    \           if (lst2.Count > 0) {\n                result.Add(lst2[0]);\n                lst2.RemoveAt(0);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <79f0b32a079b4d578be24a36d863c293>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <79f0b32a079b4d578be24a36d863c293>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798775
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    result = new List<long>();\n        if (lst.Count == 0) {\n            return
    result;\n        }\n        if (lst.Count == 1) {\n            result.Add(lst[0]);\n
    \           return result;\n        }\n        List<long> lst1 = new List<long>();\n
    \       List<long> lst2 = new List<long>();\n        for (int i = 0; i < lst.Count;
    i++) {\n            if (i % 2 == 0) {\n                lst1.Add(lst[i]);\n            }
    else {\n                lst2.Add(lst[i]);\n            }\n        }\n        lst1.Sort();\n
    \       lst2.Sort();\n        lst2.Reverse();\n        for (int i = 0; i < lst1.Count;
    i++) {\n            result.Add(lst1[i]);\n            if (i < lst2.Count) {\n
    \               result.Add(lst2[i]);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new
    List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,
    (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,
    (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,
    (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d6d5a26c5ff54ec0af5f2081bdf33f28>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d6d5a26c5ff54ec0af5f2081bdf33f28>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798775
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        var result
    = new List<long>();\n        var min = lst.Min();\n        var max = lst.Max();\n
    \       var minIndex = lst.IndexOf(min);\n        var maxIndex = lst.IndexOf(max);\n
    \       var minCount = lst.Count(x => x == min);\n        var maxCount = lst.Count(x
    => x == max);\n        var minCountLeft = minCount;\n        var maxCountLeft
    = maxCount;\n        var minCountRight = minCount;\n        var maxCountRight
    = maxCount;\n        var minIndexLeft = minIndex;\n        var maxIndexLeft =
    maxIndex;\n        var minIndexRight = minIndex;\n        var maxIndexRight =
    maxIndex;\n        var minLeft = min;\n        var maxLeft = max;\n        var
    minRight = min;\n        var maxRight = max;\n        var minLeftIndex = minIndex;\n
    \       var maxLeftIndex = maxIndex;\n        var minRightIndex = minIndex;\n
    \       var maxRightIndex = maxIndex;\n        var minLeftCount = minCount;\n
    \       var maxLeftCount = maxCount;\n        var minRightCount = minCount;\n
    \       var maxRightCount = maxCount;\n        var minLeftCountLeft = minCount;\n
    \       var maxLeftCountLeft = maxCount;\n        var minRightCountRight = minCount;\n
    \       var maxRightCountRight = maxCount;\n        var minLeftCountRight = minCount;\n
    \       var maxLeftCountRight = maxCount;\n        var minRightCountLeft = minCount;\n
    \       var maxRightCountLeft = maxCount;\n        var minLeftIndexLeft = minIndex;\n
    \       var maxLeftIndexLeft = maxIndex;\n        var minRightIndexRight = minIndex;\n
    \       var maxRightIndexRight = maxIndex;\n        var minLeftIndexRight = minIndex;\n
    \       var maxLeftIndexRight = maxIndex;\n        var minRightIndexLeft = minIndex;\n
    \       var maxRightIndexLeft = maxIndex;\n        var minLeftLeft = min;\n        var
    maxLeftLeft = max;\n        var minRightRight = min;\n        var maxRightRight
    = max;\n        var minLeftRight = min;\n        var maxLeftRight\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpczonsh0s.cs(68,25): error CS1002: ; expected

    '
  timestamp: 1659798774
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    res = new List<long>();\n        List<long> lst2 = new List<long>(lst);\n        while
    (lst2.Count > 0) {\n            long min = lst2.Min();\n            res.Add(min);\n
    \           lst2.Remove(min);\n            if (lst2.Count > 0) {\n                long
    max = lst2.Max();\n                res.Add(max);\n                lst2.Remove(max);\n
    \           }\n        }\n        return res;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <63222c06a6a54bb7a6bbb939f561e968>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <63222c06a6a54bb7a6bbb939f561e968>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798582
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    res = new List<long>();\n        List<long> lst1 = new List<long>(lst);\n        List<long>
    lst2 = new List<long>(lst);\n        lst1.Sort();\n        lst2.Sort();\n        lst2.Reverse();\n
    \       for (int i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0) {\n
    \               res.Add(lst1[0]);\n                lst1.RemoveAt(0);\n            }
    else {\n                res.Add(lst2[0]);\n                lst2.RemoveAt(0);\n
    \           }\n        }\n        return res;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7715705591f243a591269476660e5ee1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7715705591f243a591269476660e5ee1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798579
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    res = new List<long>();\n        List<long> lst2 = new List<long>(lst);\n        lst2.Sort();\n
    \       int i = 0;\n        while (lst2.Count > 0) {\n            if (i % 2 ==
    0) {\n                res.Add(lst2[0]);\n                lst2.RemoveAt(0);\n            }
    else {\n                res.Add(lst2[lst2.Count - 1]);\n                lst2.RemoveAt(lst2.Count
    - 1);\n            }\n            i++;\n        }\n        return res;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new
    List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,
    (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,
    (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,
    (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5094ec6f7f8a49888835306451aaa339>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5094ec6f7f8a49888835306451aaa339>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798578
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    res = new List<long>();\n        List<long> lst_copy = new List<long>(lst);\n
    \       lst_copy.Sort();\n        int i = 0;\n        while (lst_copy.Count >
    0) {\n            if (i % 2 == 0) {\n                res.Add(lst_copy[0]);\n                lst_copy.RemoveAt(0);\n
    \           } else {\n                res.Add(lst_copy[lst_copy.Count - 1]);\n
    \               lst_copy.RemoveAt(lst_copy.Count - 1);\n            }\n            i
    += 1;\n        }\n        return res;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <44072f2c07ee464bb48b7752b7e7e396>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <44072f2c07ee464bb48b7752b7e7e396>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798775
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        if (lst.Count
    == 0) {\n            return lst;\n        }\n        List<long> result = new List<long>();\n
    \       List<long> remaining = new List<long>(lst);\n        while (remaining.Count
    > 0) {\n            long min = remaining.Min();\n            remaining.Remove(min);\n
    \           result.Add(min);\n            if (remaining.Count > 0) {\n                long
    max = remaining.Max();\n                remaining.Remove(max);\n                result.Add(max);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b98670957d614a3799081ca82cdb8b9e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b98670957d614a3799081ca82cdb8b9e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798579
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    res = new List<long>();\n        List<long> lst2 = new List<long>(lst);\n        lst2.Sort();\n
    \       int i = 0;\n        while (lst2.Count > 0) {\n            if (i % 2 ==
    0) {\n                res.Add(lst2[0]);\n                lst2.RemoveAt(0);\n            }
    else {\n                res.Add(lst2[lst2.Count - 1]);\n                lst2.RemoveAt(lst2.Count
    - 1);\n            }\n            i += 1;\n        }\n        return res;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new
    List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,
    (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,
    (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,
    (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a8d8414c6e61490db35256b4bf4a7afd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a8d8414c6e61490db35256b4bf4a7afd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798580
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        var s
    = new List<long>();\n        var m = new List<long>();\n        var b = new List<long>();\n
    \       var i = (long)0L;\n        while (((long)lst.Count) > (long)0L) {\n            var
    t = (long)0L;\n            var f = (long)0L;\n            var c = (long)0L;\n
    \           foreach (var v in lst) {\n                if (((long)0L) == (long)0L)
    {\n                    t = v;\n                    f = (long)1L;\n                }
    else if (((long)0L) == (long)1L) {\n                    if ((v) < (t)) {\n                        t
    = v;\n                    }\n                } else if (((long)0L) == (long)2L)
    {\n                    if ((v) > (t)) {\n                        t = v;\n                    }\n
    \               }\n                c = (c) + (long)1L;\n            }\n            if
    (((long)0L) == (long)0L) {\n                s.Add(t);\n                lst.Remove(t);\n
    \           } else if (((long)0L) == (long)1L) {\n                m.Add(t);\n
    \               lst.Remove(t);\n            } else if (((long)0L) == (long)2L)
    {\n                b.Add(t);\n                lst.Remove(t);\n            }\n
    \           i = (i) + (long)1L;\n        }\n        return (((s.Concat(m)).Concat(b)).ToList());\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new
    List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,
    (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,
    (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,
    (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <91a4bbed9602498e9b54d1aa3fb1569f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <91a4bbed9602498e9b54d1aa3fb1569f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798775
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        var result
    = new List<long>();\n        var sorted = lst.OrderBy(x => x).ToList();\n        var
    min = sorted.First();\n        var max = sorted.Last();\n        var minIndex
    = lst.IndexOf(min);\n        var maxIndex = lst.IndexOf(max);\n        var minCount
    = lst.Count(x => x == min);\n        var maxCount = lst.Count(x => x == max);\n
    \       var minIndexes = new List<int>();\n        var maxIndexes = new List<int>();\n
    \       for (int i = 0; i < lst.Count; i++) {\n            if (lst[i] == min)
    {\n                minIndexes.Add(i);\n            }\n            if (lst[i] ==
    max) {\n                maxIndexes.Add(i);\n            }\n        }\n        var
    minIndexesSorted = minIndexes.OrderBy(x => x).ToList();\n        var maxIndexesSorted
    = maxIndexes.OrderBy(x => x).ToList();\n        var minIndexesSortedReverse =
    minIndexesSorted.Reverse().ToList();\n        var maxIndexesSortedReverse = maxIndexesSorted.Reverse().ToList();\n
    \       var minIndexesSortedReverseIndex = 0;\n        var maxIndexesSortedReverseIndex
    = 0;\n        var minIndexesSortedIndex = 0;\n        var maxIndexesSortedIndex
    = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            if (i % 2 ==
    0) {\n                if (minIndexesSortedIndex < minIndexesSorted.Count) {\n
    \                   result.Add(min);\n                    minIndexesSortedIndex++;\n
    \               } else {\n                    result.Add(max);\n                    maxIndexesSortedIndex++;\n
    \               }\n            } else {\n                if (maxIndexesSortedIndex
    < maxIndexesSorted.Count) {\n                    result.Add(max);\n                    maxIndexesSortedIndex++;\n
    \               } else {\n                    result.Add(min);\n                    minIndexesS\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new
    List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,
    (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,
    (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,
    (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyuqrxg4b.cs(61,32): error CS1002: ; expected

    /tmp/tmpyuqrxg4b.cs(63,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpyuqrxg4b.cs(75,2): error CS1513: } expected

    '
  timestamp: 1659798774
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    ret = new List<long>();\n        List<long> lst2 = new List<long>(lst);\n        lst2.Sort();\n
    \       int i = 0;\n        while (lst2.Count > 0) {\n            if (i % 2 ==
    0) {\n                ret.Add(lst2[0]);\n                lst2.RemoveAt(0);\n            }
    else {\n                ret.Add(lst2[lst2.Count - 1]);\n                lst2.RemoveAt(lst2.Count
    - 1);\n            }\n            i++;\n        }\n        return ret;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new
    List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,
    (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,
    (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,
    (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ad7b4a245d3849108183f853c59f6f7a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ad7b4a245d3849108183f853c59f6f7a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798774
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    res = new List<long>();\n        List<long> lst1 = new List<long>(lst);\n        List<long>
    lst2 = new List<long>(lst);\n        lst1.Sort();\n        lst2.Sort();\n        lst2.Reverse();\n
    \       int i = 0;\n        while (lst1.Count > 0) {\n            if (i % 2 ==
    0) {\n                res.Add(lst1[0]);\n                lst1.RemoveAt(0);\n            }
    else {\n                res.Add(lst2[0]);\n                lst2.RemoveAt(0);\n
    \           }\n            i++;\n        }\n        return res;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9cec39bf6baf47fc8bb730603ac5ffa0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9cec39bf6baf47fc8bb730603ac5ffa0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798579
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    res = new List<long>();\n        List<long> lst2 = new List<long>(lst);\n        while
    (lst2.Count > 0) {\n            long min = lst2.Min();\n            res.Add(min);\n
    \           lst2.Remove(min);\n            if (lst2.Count > 0) {\n                long
    max = lst2.Max();\n                res.Add(max);\n                lst2.Remove(max);\n
    \           }\n        }\n        return res;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <63222c06a6a54bb7a6bbb939f561e968>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <63222c06a6a54bb7a6bbb939f561e968>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798582
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    res = new List<long>();\n        List<long> lst2 = new List<long>(lst);\n        lst2.Sort();\n
    \       int i = 0;\n        while (lst2.Count > 0) {\n            if (i % 2 ==
    0) {\n                res.Add(lst2[0]);\n                lst2.RemoveAt(0);\n            }
    else {\n                res.Add(lst2[lst2.Count - 1]);\n                lst2.RemoveAt(lst2.Count
    - 1);\n            }\n            i += 1;\n        }\n        return res;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new
    List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,
    (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,
    (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,
    (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a8d8414c6e61490db35256b4bf4a7afd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a8d8414c6e61490db35256b4bf4a7afd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798580
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        var result
    = new List<long>();\n        var sorted = lst.OrderBy(x => x).ToList();\n        var
    min = sorted.First();\n        var max = sorted.Last();\n        var minIndex
    = lst.IndexOf(min);\n        var maxIndex = lst.IndexOf(max);\n        var minCount
    = 0;\n        var maxCount = 0;\n        var minList = new List<long>();\n        var
    maxList = new List<long>();\n        for (int i = 0; i < lst.Count; i++) {\n            if
    (lst[i] == min) {\n                minCount++;\n                minList.Add(i);\n
    \           }\n            if (lst[i] == max) {\n                maxCount++;\n
    \               maxList.Add(i);\n            }\n        }\n        var minIndexes
    = minList.OrderBy(x => x).ToList();\n        var maxIndexes = maxList.OrderBy(x
    => x).ToList();\n        var minIndexesCount = 0;\n        var maxIndexesCount
    = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            if (minCount
    > 0) {\n                result.Add(min);\n                minCount--;\n                minIndexesCount++;\n
    \           }\n            if (maxCount > 0) {\n                result.Add(max);\n
    \               maxCount--;\n                maxIndexesCount++;\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <63b9d0345ca64dffbc0e0d7688a951c1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <63b9d0345ca64dffbc0e0d7688a951c1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798775
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        if (lst.Count
    == 0) {\n            return lst;\n        }\n        List<long> res = new List<long>();\n
    \       long min = lst.Min();\n        long max = lst.Max();\n        bool isMin
    = true;\n        while (lst.Count > 0) {\n            if (isMin) {\n                res.Add(min);\n
    \               lst.Remove(min);\n                min = lst.Min();\n            }
    else {\n                res.Add(max);\n                lst.Remove(max);\n                max
    = lst.Max();\n            }\n            isMin = !isMin;\n        }\n        return
    res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new
    List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,
    (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,
    (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,
    (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.StrangeSortList
    (System.Collections.Generic.List`1[T] lst) [0x00062] in <0ff525a467d049b194873c04d31c0720>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <0ff525a467d049b194873c04d31c0720>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.StrangeSortList
    (System.Collections.Generic.List`1[T] lst) [0x00062] in <0ff525a467d049b194873c04d31c0720>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <0ff525a467d049b194873c04d31c0720>:0
    \n"
  stdout: ''
  timestamp: 1659798775
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        var sorted
    = lst.OrderBy(x => x).ToList();\n        var result = new List<long>();\n        int
    i = 0;\n        while (sorted.Count > 0) {\n            if (i % 2 == 0) {\n                result.Add(sorted[0]);\n
    \               sorted.RemoveAt(0);\n            } else {\n                result.Add(sorted[sorted.Count
    - 1]);\n                sorted.RemoveAt(sorted.Count - 1);\n            }\n            i++;\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <052fb2bd051f49f1a9a4a9c23d0535e7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <052fb2bd051f49f1a9a4a9c23d0535e7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798775
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        if (lst.Count
    == 0) {\n            return lst;\n        }\n        List<long> res = new List<long>();\n
    \       List<long> lst2 = new List<long>(lst);\n        int i = 0;\n        while
    (lst2.Count > 0) {\n            long min = lst2.Min();\n            long max =
    lst2.Max();\n            if (i % 2 == 0) {\n                res.Add(min);\n                lst2.Remove(min);\n
    \           } else {\n                res.Add(max);\n                lst2.Remove(max);\n
    \           }\n            i += 1;\n        }\n        return res;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <19ef36b161fa41b49f1b989fda3c9e1e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <19ef36b161fa41b49f1b989fda3c9e1e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798775
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        if (lst.Count
    == 0) {\n            return lst;\n        }\n        var min = lst.Min();\n        var
    max = lst.Max();\n        var result = new List<long>();\n        var min_index
    = lst.IndexOf(min);\n        var max_index = lst.IndexOf(max);\n        result.Add(min);\n
    \       result.Add(max);\n        lst.RemoveAt(min_index);\n        lst.RemoveAt(max_index
    - 1);\n        while (lst.Count > 0) {\n            min = lst.Min();\n            max
    = lst.Max();\n            min_index = lst.IndexOf(min);\n            max_index
    = lst.IndexOf(max);\n            result.Add(min);\n            result.Add(max);\n
    \           lst.RemoveAt(min_index);\n            lst.RemoveAt(max_index - 1);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <972486b11c354bb0933d00b4acb7dd66>:0
    \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of
    range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].RemoveAt (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.StrangeSortList
    (System.Collections.Generic.List`1[T] lst) [0x0009b] in <972486b11c354bb0933d00b4acb7dd66>:0
    \n  at Problem.Main (System.String[] args) [0x00053] in <972486b11c354bb0933d00b4acb7dd66>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].RemoveAt (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.StrangeSortList
    (System.Collections.Generic.List`1[T] lst) [0x0009b] in <972486b11c354bb0933d00b4acb7dd66>:0
    \n  at Problem.Main (System.String[] args) [0x00053] in <972486b11c354bb0933d00b4acb7dd66>:0
    \n"
  stdout: ''
  timestamp: 1659798775
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    res = new List<long>();\n        List<long> lst1 = new List<long>(lst);\n        List<long>
    lst2 = new List<long>(lst);\n        lst1.Sort();\n        lst2.Sort();\n        lst2.Reverse();\n
    \       for (int i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0) {\n
    \               res.Add(lst1[0]);\n                lst1.RemoveAt(0);\n            }
    else {\n                res.Add(lst2[0]);\n                lst2.RemoveAt(0);\n
    \           }\n        }\n        return res;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7715705591f243a591269476660e5ee1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7715705591f243a591269476660e5ee1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798579
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        if (lst.Count
    == 0) {\n            return lst;\n        }\n        List<long> result = new List<long>();\n
    \       List<long> remaining = new List<long>(lst);\n        while (remaining.Count
    > 0) {\n            long min = remaining.Min();\n            result.Add(min);\n
    \           remaining.Remove(min);\n            if (remaining.Count == 0) {\n
    \               break;\n            }\n            long max = remaining.Max();\n
    \           result.Add(max);\n            remaining.Remove(max);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L,
    (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new long[]{(long)5L,
    (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8c9385c2a9f1487c9a6f360d33b6ff96>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8c9385c2a9f1487c9a6f360d33b6ff96>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798579
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        if (lst.Count
    == 0) {\n            return lst;\n        }\n        List<long> lst1 = new List<long>();\n
    \       List<long> lst2 = new List<long>();\n        lst1.Add(lst[0]);\n        lst.RemoveAt(0);\n
    \       while (lst.Count > 0) {\n            lst1.Add(lst.Max());\n            lst.Remove(lst.Max());\n
    \           if (lst.Count > 0) {\n                lst1.Add(lst.Min());\n                lst.Remove(lst.Min());\n
    \           }\n        }\n        return lst1;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ac8c128b00ff4e2db795d81b7d09c9b5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ac8c128b00ff4e2db795d81b7d09c9b5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798775
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        if (lst.Count
    == 0) {\n            return lst;\n        }\n        List<long> sorted = new List<long>();\n
    \       List<long> remaining = new List<long>(lst);\n        while (remaining.Count
    > 0) {\n            long min = remaining.Min();\n            long max = remaining.Max();\n
    \           sorted.Add(min);\n            remaining.Remove(min);\n            if
    (remaining.Count > 0) {\n                sorted.Add(max);\n                remaining.Remove(max);\n
    \           }\n        }\n        return sorted;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a9e60cf521b04adc964a9a46cade7952>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a9e60cf521b04adc964a9a46cade7952>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798775
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    ret = new List<long>();\n        List<long> lst2 = new List<long>(lst);\n        while
    (lst2.Count > 0) {\n            long min = lst2.Min();\n            ret.Add(min);\n
    \           lst2.Remove(min);\n            if (lst2.Count > 0) {\n                long
    max = lst2.Max();\n                ret.Add(max);\n                lst2.Remove(max);\n
    \           }\n        }\n        return ret;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be608adabc0b4de4a7496540177b5c99>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be608adabc0b4de4a7496540177b5c99>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798581
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    result = new List<long>();\n        List<long> temp = new List<long>();\n        temp.AddRange(lst);\n
    \       while (temp.Count > 0) {\n            long min = temp.Min();\n            result.Add(min);\n
    \           temp.Remove(min);\n            if (temp.Count > 0) {\n                long
    max = temp.Max();\n                result.Add(max);\n                temp.Remove(max);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <04780713e96a4c258d25e5038f8a6e2f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <04780713e96a4c258d25e5038f8a6e2f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798773
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    result = new List<long>();\n        List<long> lst2 = new List<long>(lst);\n        while
    (lst2.Count > 0) {\n            long min = lst2.Min();\n            long max =
    lst2.Max();\n            result.Add(min);\n            lst2.Remove(min);\n            if
    (lst2.Count > 0) {\n                result.Add(max);\n                lst2.Remove(max);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2faadfe65b4d49b8bb30fd36826e71ac>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2faadfe65b4d49b8bb30fd36826e71ac>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798578
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        // Your
    code goes here.\n        return lst;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8af5dcd6187d479cb1dc553726cd843b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8af5dcd6187d479cb1dc553726cd843b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798578
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    result = new List<long>();\n        if (lst.Count == 0) {\n            return
    result;\n        }\n        if (lst.Count == 1) {\n            result.Add(lst[0]);\n
    \           return result;\n        }\n        List<long> lst2 = new List<long>();\n
    \       for (int i = 0; i < lst.Count; i++) {\n            lst2.Add(lst[i]);\n
    \       }\n        bool isMin = true;\n        while (lst2.Count > 0) {\n            long
    min = lst2[0];\n            long max = lst2[0];\n            int minIndex = 0;\n
    \           int maxIndex = 0;\n            for (int i = 0; i < lst2.Count; i++)
    {\n                if (lst2[i] < min) {\n                    min = lst2[i];\n
    \                   minIndex = i;\n                }\n                if (lst2[i]
    > max) {\n                    max = lst2[i];\n                    maxIndex = i;\n
    \               }\n            }\n            if (isMin) {\n                result.Add(min);\n
    \               lst2.RemoveAt(minIndex);\n            } else {\n                result.Add(max);\n
    \               lst2.RemoveAt(maxIndex);\n            }\n            isMin = !isMin;\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5432f0e94966413f832a83851724209f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5432f0e94966413f832a83851724209f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798775
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    res = new List<long>();\n        List<long> lst2 = new List<long>(lst);\n        while
    (lst2.Count > 0) {\n            long min = lst2.Min();\n            long max =
    lst2.Max();\n            res.Add(min);\n            lst2.Remove(min);\n            if
    (lst2.Count > 0) {\n                res.Add(max);\n                lst2.Remove(max);\n
    \           }\n        }\n        return res;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9964ae7c5df34e41a4ed008e8279a4b2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9964ae7c5df34e41a4ed008e8279a4b2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798581
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    ret = new List<long>();\n        List<long> lst2 = new List<long>(lst);\n        while
    (lst2.Count > 0) {\n            long min = lst2.Min();\n            ret.Add(min);\n
    \           lst2.Remove(min);\n            if (lst2.Count > 0) {\n                long
    max = lst2.Max();\n                ret.Add(max);\n                lst2.Remove(max);\n
    \           }\n        }\n        return ret;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be608adabc0b4de4a7496540177b5c99>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be608adabc0b4de4a7496540177b5c99>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798581
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    result = new List<long>();\n        List<long> sorted = lst.OrderBy(x => x).ToList();\n
    \       int i = 0;\n        while (sorted.Count > 0) {\n            if (i % 2
    == 0) {\n                result.Add(sorted[0]);\n                sorted.RemoveAt(0);\n
    \           } else {\n                result.Add(sorted[sorted.Count - 1]);\n
    \               sorted.RemoveAt(sorted.Count - 1);\n            }\n            i++;\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1aa54d2847a540c7b26b2d4dceaaced4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1aa54d2847a540c7b26b2d4dceaaced4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798578
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    ret = new List<long>();\n        List<long> lst2 = new List<long>(lst);\n        while
    (lst2.Count > 0) {\n            long min = lst2.Min();\n            ret.Add(min);\n
    \           lst2.Remove(min);\n            if (lst2.Count > 0) {\n                long
    max = lst2.Max();\n                ret.Add(max);\n                lst2.Remove(max);\n
    \           }\n        }\n        return ret;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be608adabc0b4de4a7496540177b5c99>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be608adabc0b4de4a7496540177b5c99>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798581
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    result = new List<long>();\n        List<long> lst2 = new List<long>(lst);\n        while
    (lst2.Count > 0) {\n            result.Add(lst2.Min());\n            lst2.Remove(lst2.Min());\n
    \           if (lst2.Count > 0) {\n                result.Add(lst2.Max());\n                lst2.Remove(lst2.Max());\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <64bf2d01f15a457b89ab7f691da120bc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <64bf2d01f15a457b89ab7f691da120bc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798776
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        var result
    = new List<long>();\n        var sorted = lst.OrderBy(x => x).ToList();\n        var
    min = sorted.First();\n        var max = sorted.Last();\n        var minIndex
    = lst.IndexOf(min);\n        var maxIndex = lst.IndexOf(max);\n        var minIndexes
    = new List<int>();\n        var maxIndexes = new List<int>();\n        for (int
    i = 0; i < lst.Count; i++) {\n            if (lst[i] == min) {\n                minIndexes.Add(i);\n
    \           }\n            if (lst[i] == max) {\n                maxIndexes.Add(i);\n
    \           }\n        }\n        var minIndexesSorted = minIndexes.OrderBy(x
    => x).ToList();\n        var maxIndexesSorted = maxIndexes.OrderBy(x => x).ToList();\n
    \       var minIndexesSortedIndex = 0;\n        var maxIndexesSortedIndex = 0;\n
    \       var minIndexesSortedCount = minIndexesSorted.Count;\n        var maxIndexesSortedCount
    = maxIndexesSorted.Count;\n        var minIndexesSortedCurrent = minIndexesSorted[minIndexesSortedIndex];\n
    \       var maxIndexesSortedCurrent = maxIndexesSorted[maxIndexesSortedIndex];\n
    \       var minIndexesSortedNext = minIndexesSorted[minIndexesSortedIndex + 1];\n
    \       var maxIndexesSortedNext = maxIndexesSorted[maxIndexesSortedIndex + 1];\n
    \       var minIndexesSortedLast = minIndexesSorted[minIndexesSortedCount - 1];\n
    \       var maxIndexesSortedLast = maxIndexesSorted[maxIndexesSortedCount - 1];\n
    \       var minIndexesSortedLastIndex = minIndexesSortedCount - 1;\n        var
    maxIndexesSortedLastIndex = maxIndexesSortedCount - 1;\n        var minIndexesSortedLastNext
    = minIndexesSorted[minIndexesSortedLastIndex - 1];\n        var maxIndexesSortedLastNext
    = maxIndexesSorted[max\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L,
    (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new long[]{(long)5L,
    (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_ue7ezcb.cs(51,60): error CS1003: Syntax error, '']'' expected

    /tmp/tmp_ue7ezcb.cs(51,60): error CS1002: ; expected

    '
  timestamp: 1659798775
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        // Your
    code goes here.\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00032] in <9eec6bde7ca74089b81fe269cf42d2c7>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00032] in <9eec6bde7ca74089b81fe269cf42d2c7>:0
    \n"
  stdout: ''
  timestamp: 1659798578
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    result = new List<long>();\n        List<long> lst2 = new List<long>(lst);\n        while
    (lst2.Count > 0) {\n            long min = lst2.Min();\n            result.Add(min);\n
    \           lst2.Remove(min);\n            if (lst2.Count > 0) {\n                long
    max = lst2.Max();\n                result.Add(max);\n                lst2.Remove(max);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0efbdac53a64491da395c5559dcd08fd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0efbdac53a64491da395c5559dcd08fd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798578
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        if (lst.Count
    == 0) {\n            return lst;\n        }\n        List<long> res = new List<long>();\n
    \       List<long> lst2 = new List<long>(lst);\n        long min = lst2.Min();\n
    \       res.Add(min);\n        lst2.Remove(min);\n        while (lst2.Count >
    0) {\n            long max = lst2.Max();\n            res.Add(max);\n            lst2.Remove(max);\n
    \           if (lst2.Count > 0) {\n                min = lst2.Min();\n                res.Add(min);\n
    \               lst2.Remove(min);\n            }\n        }\n        return res;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new
    List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,
    (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,
    (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,
    (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <537560ed6e514309bf2353b1d7b37a4c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <537560ed6e514309bf2353b1d7b37a4c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798579
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    result = new List<long>();\n        List<long> remaining = new List<long>(lst);\n
    \       while (remaining.Count > 0) {\n            long min = remaining.Min();\n
    \           long max = remaining.Max();\n            result.Add(min);\n            remaining.Remove(min);\n
    \           if (remaining.Count > 0) {\n                result.Add(max);\n                remaining.Remove(max);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f2699cbd42c8493484b54dbca59125ff>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f2699cbd42c8493484b54dbca59125ff>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798579
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        // Your
    code goes here.\n        return lst;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8af5dcd6187d479cb1dc553726cd843b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8af5dcd6187d479cb1dc553726cd843b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798578
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    result = new List<long>();\n        List<long> sorted = lst.OrderBy(x => x).ToList();\n
    \       int i = 0;\n        int j = sorted.Count - 1;\n        while (i <= j)
    {\n            result.Add(sorted[i]);\n            i++;\n            if (i <=
    j) {\n                result.Add(sorted[j]);\n                j--;\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f9509086e6d94cfe826315f54c82e49c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f9509086e6d94cfe826315f54c82e49c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798578
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    res = new List<long>();\n        while (lst.Count > 0) {\n            long min
    = lst.Min();\n            res.Add(min);\n            lst.Remove(min);\n            if
    (lst.Count == 0) {\n                break;\n            }\n            long max
    = lst.Max();\n            res.Add(max);\n            lst.Remove(max);\n        }\n
    \       return res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new
    List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,
    (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,
    (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,
    (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8396cf15259a4c8a99cf0c19977aa902>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8396cf15259a4c8a99cf0c19977aa902>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798776
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        if (lst.Count
    == 0) {\n            return lst;\n        }\n        List<long> res = new List<long>();\n
    \       List<long> lst2 = new List<long>(lst);\n        long min = lst2.Min();\n
    \       res.Add(min);\n        lst2.Remove(min);\n        while (lst2.Count >
    0) {\n            long max = lst2.Max();\n            res.Add(max);\n            lst2.Remove(max);\n
    \           if (lst2.Count > 0) {\n                min = lst2.Min();\n                res.Add(min);\n
    \               lst2.Remove(min);\n            }\n        }\n        return res;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new
    List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,
    (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,
    (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,
    (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <537560ed6e514309bf2353b1d7b37a4c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <537560ed6e514309bf2353b1d7b37a4c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798579
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        var res
    = new List<long>();\n        var sorted = lst.OrderBy(x => x).ToList();\n        var
    min = sorted.First();\n        var max = sorted.Last();\n        var minIndex
    = lst.IndexOf(min);\n        var maxIndex = lst.IndexOf(max);\n        var minCount
    = 0;\n        var maxCount = 0;\n        var minRemaining = sorted.Count;\n        var
    maxRemaining = sorted.Count;\n        while (minCount < lst.Count) {\n            res.Add(min);\n
    \           minCount++;\n            minRemaining--;\n            if (minCount
    < lst.Count) {\n                res.Add(max);\n                maxCount++;\n                maxRemaining--;\n
    \           }\n            min = sorted[minRemaining - 1];\n            max =
    sorted[maxRemaining - 1];\n        }\n        return res;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.StrangeSortList
    (System.Collections.Generic.List`1[T] lst) [0x000a5] in <d6c1e78bd2994aa89427ba686cece53e>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <d6c1e78bd2994aa89427ba686cece53e>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.StrangeSortList
    (System.Collections.Generic.List`1[T] lst) [0x000a5] in <d6c1e78bd2994aa89427ba686cece53e>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <d6c1e78bd2994aa89427ba686cece53e>:0
    \n"
  stdout: ''
  timestamp: 1659798776
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        if (lst.Count
    == 0) {\n            return lst;\n        }\n        List<long> result = new List<long>();\n
    \       long min = lst.Min();\n        long max = lst.Max();\n        bool isMin
    = true;\n        while (lst.Count > 0) {\n            if (isMin) {\n                result.Add(min);\n
    \               lst.Remove(min);\n                min = lst.Min();\n            }
    else {\n                result.Add(max);\n                lst.Remove(max);\n                max
    = lst.Max();\n            }\n            isMin = !isMin;\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new
    List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,
    (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,
    (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,
    (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.StrangeSortList
    (System.Collections.Generic.List`1[T] lst) [0x00062] in <d8761a0fc48d48459657f4f8a0c78eda>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <d8761a0fc48d48459657f4f8a0c78eda>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.StrangeSortList
    (System.Collections.Generic.List`1[T] lst) [0x00062] in <d8761a0fc48d48459657f4f8a0c78eda>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <d8761a0fc48d48459657f4f8a0c78eda>:0
    \n"
  stdout: ''
  timestamp: 1659798579
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        // Your
    code goes here.\n        return lst;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8af5dcd6187d479cb1dc553726cd843b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8af5dcd6187d479cb1dc553726cd843b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798578
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        // Write
    your code here\n        return lst;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <884d0c1080374804a55a7d2851fc36a9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <884d0c1080374804a55a7d2851fc36a9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798776
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    result = new List<long>();\n        List<long> copy = new List<long>(lst);\n        copy.Sort();\n
    \       int i = 0;\n        while (copy.Count > 0) {\n            if (i % 2 ==
    0) {\n                result.Add(copy[0]);\n                copy.RemoveAt(0);\n
    \           } else {\n                result.Add(copy[copy.Count - 1]);\n                copy.RemoveAt(copy.Count
    - 1);\n            }\n            i++;\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new
    List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,
    (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,
    (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,
    (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f2791b3317564458946954d66f7297f7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f2791b3317564458946954d66f7297f7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798581
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        var sorted
    = lst.OrderBy(x => x).ToList();\n        var result = new List<long>();\n        var
    i = 0;\n        var j = sorted.Count - 1;\n        while (i <= j) {\n            result.Add(sorted[i]);\n
    \           i++;\n            if (i <= j) {\n                result.Add(sorted[j]);\n
    \               j--;\n            }\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new
    List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,
    (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,
    (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,
    (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <32a3f517edee4d2aa05c4babd2c763b5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <32a3f517edee4d2aa05c4babd2c763b5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798578
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        // Your
    code goes here.\n        return lst;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8af5dcd6187d479cb1dc553726cd843b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8af5dcd6187d479cb1dc553726cd843b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798578
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        var result
    = new List<long>();\n        var min = lst.Min();\n        var max = lst.Max();\n
    \       var minIndex = lst.IndexOf(min);\n        var maxIndex = lst.IndexOf(max);\n
    \       var minCount = lst.Count(x => x == min);\n        var maxCount = lst.Count(x
    => x == max);\n        var minCountLeft = minCount;\n        var maxCountLeft
    = maxCount;\n        var minCountRight = minCount;\n        var maxCountRight
    = maxCount;\n        var minIndexLeft = minIndex;\n        var maxIndexLeft =
    maxIndex;\n        var minIndexRight = minIndex;\n        var maxIndexRight =
    maxIndex;\n        var minIndexLeftCount = 0;\n        var maxIndexLeftCount =
    0;\n        var minIndexRightCount = 0;\n        var maxIndexRightCount = 0;\n
    \       var minIndexLeftCountLeft = 0;\n        var maxIndexLeftCountLeft = 0;\n
    \       var minIndexRightCountRight = 0;\n        var maxIndexRightCountRight
    = 0;\n        var minIndexLeftCountRight = 0;\n        var maxIndexLeftCountRight
    = 0;\n        var minIndexRightCountLeft = 0;\n        var maxIndexRightCountLeft
    = 0;\n        var minIndexLeftCountLeftLeft = 0;\n        var maxIndexLeftCountLeftLeft
    = 0;\n        var minIndexRightCountRightRight = 0;\n        var maxIndexRightCountRightRight
    = 0;\n        var minIndexLeftCountRightRight = 0;\n        var maxIndexLeftCountRightRight
    = 0;\n        var minIndexRightCountLeftLeft = 0;\n        var maxIndexRightCountLeftLeft
    = 0;\n        var minIndexLeftCountLeftRight = 0;\n        var maxIndexLeftCountLeftRight
    = 0;\n        var minIndexRightCountRightLeft = 0;\n        var maxIndexRightCountRightLeft
    = 0;\n        var minIndexLeftCountRightLeft = 0;\n        var maxIndexLeftCountRightLeft
    = 0;\n        var minIndexRightCountLeftRight = 0;\n        var maxIndexRightCountLeftRight
    = 0;\n        var minIndexLeftCountLeftLeftLeft = 0;\n        var maxIndexLeft\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new
    List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,
    (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,
    (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,
    (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf0up44y_.cs(64,25): error CS1002: ; expected

    '
  timestamp: 1659798775
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        if (lst.Count
    == 0) {\n            return lst;\n        }\n        var min = lst.Min();\n        var
    max = lst.Max();\n        var minIndex = lst.IndexOf(min);\n        var maxIndex
    = lst.IndexOf(max);\n        var res = new List<long>();\n        res.Add(min);\n
    \       res.Add(max);\n        lst.RemoveAt(minIndex);\n        lst.RemoveAt(maxIndex
    - 1);\n        while (lst.Count > 0) {\n            min = lst.Min();\n            max
    = lst.Max();\n            minIndex = lst.IndexOf(min);\n            maxIndex =
    lst.IndexOf(max);\n            res.Insert(0, min);\n            res.Add(max);\n
    \           lst.RemoveAt(minIndex);\n            lst.RemoveAt(maxIndex - 1);\n
    \       }\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L,
    (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new long[]{(long)5L,
    (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7610e32fe9b842c991401b6fe5ab3bb3>:0
    \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of
    range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].RemoveAt (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.StrangeSortList
    (System.Collections.Generic.List`1[T] lst) [0x0009e] in <7610e32fe9b842c991401b6fe5ab3bb3>:0
    \n  at Problem.Main (System.String[] args) [0x00053] in <7610e32fe9b842c991401b6fe5ab3bb3>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].RemoveAt (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.StrangeSortList
    (System.Collections.Generic.List`1[T] lst) [0x0009e] in <7610e32fe9b842c991401b6fe5ab3bb3>:0
    \n  at Problem.Main (System.String[] args) [0x00053] in <7610e32fe9b842c991401b6fe5ab3bb3>:0
    \n"
  stdout: ''
  timestamp: 1659798776
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        if (lst.Count
    == 0) {\n            return lst;\n        }\n        List<long> result = new List<long>();\n
    \       List<long> remaining = new List<long>(lst);\n        while (remaining.Count
    > 0) {\n            long min = remaining.Min();\n            result.Add(min);\n
    \           remaining.Remove(min);\n            if (remaining.Count == 0) {\n
    \               break;\n            }\n            long max = remaining.Max();\n
    \           result.Add(max);\n            remaining.Remove(max);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L,
    (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new long[]{(long)5L,
    (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8c9385c2a9f1487c9a6f360d33b6ff96>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8c9385c2a9f1487c9a6f360d33b6ff96>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798579
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        // Your
    code goes here.\n        return lst;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8af5dcd6187d479cb1dc553726cd843b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8af5dcd6187d479cb1dc553726cd843b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798578
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        if (lst.Count
    == 0) {\n            return lst;\n        }\n        var min = lst.Min();\n        var
    max = lst.Max();\n        var res = new List<long>();\n        var min_idx = lst.IndexOf(min);\n
    \       var max_idx = lst.IndexOf(max);\n        res.Add(min);\n        res.Add(max);\n
    \       lst.RemoveAt(min_idx);\n        lst.RemoveAt(max_idx);\n        while
    (lst.Count > 0) {\n            min = lst.Min();\n            max = lst.Max();\n
    \           min_idx = lst.IndexOf(min);\n            max_idx = lst.IndexOf(max);\n
    \           res.Add(min);\n            res.Add(max);\n            lst.RemoveAt(min_idx);\n
    \           lst.RemoveAt(max_idx);\n        }\n        return res;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].RemoveAt (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.StrangeSortList
    (System.Collections.Generic.List`1[T] lst) [0x00056] in <fdca112c2f8245358348c5daac4493cc>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <fdca112c2f8245358348c5daac4493cc>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].RemoveAt (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.StrangeSortList
    (System.Collections.Generic.List`1[T] lst) [0x00056] in <fdca112c2f8245358348c5daac4493cc>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <fdca112c2f8245358348c5daac4493cc>:0
    \n"
  stdout: ''
  timestamp: 1659798776
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        // Your
    code here\n        return lst;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L,
    (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new long[]{(long)5L,
    (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <35edaa352dd849fe825cb8a31fe3fa5c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <35edaa352dd849fe825cb8a31fe3fa5c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798580
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    res = new List<long>();\n        List<long> lst2 = new List<long>(lst);\n        while
    (lst2.Count > 0) {\n            long min = lst2.Min();\n            long max =
    lst2.Max();\n            res.Add(min);\n            lst2.Remove(min);\n            if
    (lst2.Count > 0) {\n                res.Add(max);\n                lst2.Remove(max);\n
    \           }\n        }\n        return res;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9964ae7c5df34e41a4ed008e8279a4b2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9964ae7c5df34e41a4ed008e8279a4b2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798581
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    res = new List<long>();\n        List<long> lst2 = new List<long>(lst);\n        lst2.Sort();\n
    \       int i = 0;\n        while (lst2.Count > 0) {\n            if (i % 2 ==
    0) {\n                res.Add(lst2[0]);\n                lst2.RemoveAt(0);\n            }
    else {\n                res.Add(lst2[lst2.Count - 1]);\n                lst2.RemoveAt(lst2.Count
    - 1);\n            }\n            i += 1;\n        }\n        return res;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new
    List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,
    (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,
    (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,
    (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a8d8414c6e61490db35256b4bf4a7afd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a8d8414c6e61490db35256b4bf4a7afd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798580
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    ret = new List<long>();\n        List<long> lst2 = new List<long>(lst);\n        lst2.Sort();\n
    \       int i = 0;\n        while (lst2.Count > 0) {\n            if (i % 2 ==
    0) {\n                ret.Add(lst2[0]);\n                lst2.RemoveAt(0);\n            }
    else {\n                ret.Add(lst2[lst2.Count - 1]);\n                lst2.RemoveAt(lst2.Count
    - 1);\n            }\n            i += 1;\n        }\n        return ret;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new
    List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,
    (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,
    (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,
    (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6ba810d99f664058b515191699afeb8d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6ba810d99f664058b515191699afeb8d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798776
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    result = new List<long>();\n        List<long> remaining = new List<long>(lst);\n
    \       while (remaining.Count > 0) {\n            long min = remaining.Min();\n
    \           remaining.Remove(min);\n            result.Add(min);\n            if
    (remaining.Count > 0) {\n                long max = remaining.Max();\n                remaining.Remove(max);\n
    \               result.Add(max);\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new
    List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,
    (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,
    (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,
    (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,
    (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <14da970c9af34ac69e1b03558af5cbf0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <14da970c9af34ac69e1b03558af5cbf0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798578
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        return
    lst.OrderBy(x => x).ThenByDescending(x => x).ToList();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fdb9646cf4cc4b85891b447712c9e4af>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fdb9646cf4cc4b85891b447712c9e4af>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798776
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    result = new List<long>();\n        List<long> lst2 = new List<long>(lst);\n        while
    (lst2.Count > 0) {\n            long min = lst2.Min();\n            long max =
    lst2.Max();\n            result.Add(min);\n            lst2.Remove(min);\n            if
    (lst2.Count > 0) {\n                result.Add(max);\n                lst2.Remove(max);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2faadfe65b4d49b8bb30fd36826e71ac>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2faadfe65b4d49b8bb30fd36826e71ac>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798578
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    result = new List<long>();\n        List<long> min = new List<long>();\n        List<long>
    max = new List<long>();\n        for (int i = 0; i < lst.Count; i++) {\n            if
    (i % 2 == 0) {\n                min.Add(lst[i]);\n            } else {\n                max.Add(lst[i]);\n
    \           }\n        }\n        min.Sort();\n        max.Sort();\n        max.Reverse();\n
    \       for (int i = 0; i < min.Count; i++) {\n            result.Add(min[i]);\n
    \       }\n        for (int i = 0; i < max.Count; i++) {\n            result.Add(max[i]);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4298618c5b074ceabe798d888259ceb7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4298618c5b074ceabe798d888259ceb7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798776
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    result = new List<long>();\n        List<long> sorted = lst.OrderBy(x => x).ToList();\n
    \       int i = 0;\n        while (sorted.Count > 0) {\n            if (i % 2
    == 0) {\n                result.Add(sorted[0]);\n                sorted.RemoveAt(0);\n
    \           } else {\n                result.Add(sorted[sorted.Count - 1]);\n
    \               sorted.RemoveAt(sorted.Count - 1);\n            }\n            i++;\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1aa54d2847a540c7b26b2d4dceaaced4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1aa54d2847a540c7b26b2d4dceaaced4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798578
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        // Your
    code goes here.\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00032] in <9eec6bde7ca74089b81fe269cf42d2c7>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00032] in <9eec6bde7ca74089b81fe269cf42d2c7>:0
    \n"
  stdout: ''
  timestamp: 1659798578
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    result = new List<long>();\n        List<long> remaining = new List<long>(lst);\n
    \       while (remaining.Count > 0) {\n            long min = remaining.Min();\n
    \           long max = remaining.Max();\n            result.Add(min);\n            remaining.Remove(min);\n
    \           if (remaining.Count > 0) {\n                result.Add(max);\n                remaining.Remove(max);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f2699cbd42c8493484b54dbca59125ff>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f2699cbd42c8493484b54dbca59125ff>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798579
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given list of integers, return list in strange order.\n    //
    Strange sorting, is when you start with the minimum value,\n    // then maximum
    of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>
    StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n
    \   // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n
    \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,
    (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> StrangeSortList(List<long> lst) {\n        List<long>
    res = new List<long>();\n        List<long> lst2 = new List<long>(lst);\n        while
    (lst2.Count > 0) {\n            long min = lst2.Min();\n            res.Add(min);\n
    \           lst2.Remove(min);\n            if (lst2.Count > 0) {\n                long
    max = lst2.Max();\n                res.Add(max);\n                lst2.Remove(max);\n
    \           }\n        }\n        return res;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L,
    (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new
    long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)6L,
    (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)5L, (long)5L, (long)5L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)2L,
    (long)7L, (long)3L, (long)6L, (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L,
    (long)-5L, (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L,
    (long)-5L, (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new
    List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <63222c06a6a54bb7a6bbb939f561e968>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <63222c06a6a54bb7a6bbb939f561e968>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798582
