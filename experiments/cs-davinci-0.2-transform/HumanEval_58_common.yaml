name: HumanEval_58_common
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Return sorted unique common elements for two lists.\n    //\
  \ >>> Common((new List<long>(new long[]{(long)1L, (long)4L, (long)3L, (long)34L,\
  \ (long)653L, (long)2L, (long)5L})), (new List<long>(new long[]{(long)5L, (long)7L,\
  \ (long)1L, (long)5L, (long)9L, (long)653L, (long)121L})))\n    // (new List<long>(new\
  \ long[]{(long)1L, (long)5L, (long)653L}))\n    // >>> Common((new List<long>(new\
  \ long[]{(long)5L, (long)3L, (long)2L, (long)8L})), (new List<long>(new long[]{(long)3L,\
  \ (long)2L})))\n    // (new List<long>(new long[]{(long)2L, (long)3L}))\n    public\
  \ static List<long> Common(List<long> l1, List<long> l2) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Common((new\
  \ List<long>(new long[]{(long)1L, (long)4L, (long)3L, (long)34L, (long)653L, (long)2L,\
  \ (long)5L})), (new List<long>(new long[]{(long)5L, (long)7L, (long)1L, (long)5L,\
  \ (long)9L, (long)653L, (long)121L}))).Equals((new List<long>(new long[]{(long)1L,\
  \ (long)5L, (long)653L}))));\n    Debug.Assert(Common((new List<long>(new long[]{(long)5L,\
  \ (long)3L, (long)2L, (long)8L})), (new List<long>(new long[]{(long)3L, (long)2L}))).Equals((new\
  \ List<long>(new long[]{(long)2L, (long)3L}))));\n    Debug.Assert(Common((new List<long>(new\
  \ long[]{(long)4L, (long)3L, (long)2L, (long)8L})), (new List<long>(new long[]{(long)3L,\
  \ (long)2L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)4L}))));\n\
  \    Debug.Assert(Common((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,\
  \ (long)8L})), (new List<long>())).Equals((new List<long>())));\n    }\n\n}\n"
completions: ["        l1.Sort();\n        l2.Sort();\n        List<long> res = new\
    \ List<long>();\n        int i1 = 0;\n        int i2 = 0;\n        while (i1 <\
    \ l1.Count && i2 < l2.Count) {\n            if (l1[i1] == l2[i2]) {\n        \
    \        res.Add(l1[i1]);\n                i1++;\n                i2++;\n    \
    \        } else if (l1[i1] < l2[i2]) {\n                i1++;\n            } else\
    \ {\n                i2++;\n            }\n        }\n        return res;", " \
    \       l1.Sort();\n        l2.Sort();\n        List<long> res = new List<long>();\n\
    \        int i1 = 0;\n        int i2 = 0;\n        while ((i1 < l1.Count) && (i2\
    \ < l2.Count)) {\n            if (l1[i1] == l2[i2]) {\n                res.Add(l1[i1]);\n\
    \                i1 += 1;\n                i2 += 1;\n            } else if (l1[i1]\
    \ < l2[i2]) {\n                i1 += 1;\n            } else {\n              \
    \  i2 += 1;\n            }\n        }\n        return res;", "        l1.Sort();\n\
    \        l2.Sort();\n        List<long> result = new List<long>();\n        int\
    \ i1 = 0;\n        int i2 = 0;\n        while ((i1 < l1.Count) && (i2 < l2.Count))\
    \ {\n            if (l1[i1] == l2[i2]) {\n                result.Add(l1[i1]);\n\
    \                i1 += 1;\n                i2 += 1;\n            } else if (l1[i1]\
    \ < l2[i2]) {\n                i1 += 1;\n            } else {\n              \
    \  i2 += 1;\n            }\n        }\n        return result;", "        l1.Sort();\n\
    \        l2.Sort();\n        List<long> result = new List<long>();\n        int\
    \ i1 = 0;\n        int i2 = 0;\n        while ((i1 < l1.Count) && (i2 < l2.Count))\
    \ {\n            if (l1[i1] == l2[i2]) {\n                result.Add(l1[i1]);\n\
    \                i1++;\n                i2++;\n            } else if (l1[i1] <\
    \ l2[i2]) {\n                i1++;\n            } else {\n                i2++;\n\
    \            }\n        }\n        return result;", "        l1.Sort();\n    \
    \    l2.Sort();\n        List<long> result = new List<long>();\n        int i1\
    \ = 0;\n        int i2 = 0;\n        while (i1 < l1.Count && i2 < l2.Count) {\n\
    \            if (l1[i1] == l2[i2]) {\n                result.Add(l1[i1]);\n  \
    \              i1++;\n                i2++;\n            } else if (l1[i1] < l2[i2])\
    \ {\n                i1++;\n            } else {\n                i2++;\n    \
    \        }\n        }\n        return result;", "        var l = new List<long>();\n\
    \        l1.Sort();\n        l2.Sort();\n        int i1 = 0;\n        int i2 =\
    \ 0;\n        while (i1 < l1.Count && i2 < l2.Count) {\n            if (l1[i1]\
    \ == l2[i2]) {\n                l.Add(l1[i1]);\n                i1 += 1;\n   \
    \             i2 += 1;\n            } else if (l1[i1] < l2[i2]) {\n          \
    \      i1 += 1;\n            } else {\n                i2 += 1;\n            }\n\
    \        }\n        return l;", "        l1.Sort();\n        l2.Sort();\n    \
    \    List<long> res = new List<long>();\n        int i1 = 0;\n        int i2 =\
    \ 0;\n        while ((i1 < l1.Count) && (i2 < l2.Count)) {\n            if (l1[i1]\
    \ == l2[i2]) {\n                res.Add(l1[i1]);\n                i1++;\n    \
    \            i2++;\n            } else if (l1[i1] < l2[i2]) {\n              \
    \  i1++;\n            } else {\n                i2++;\n            }\n       \
    \ }\n        return res;", "        l1.Sort();\n        l2.Sort();\n        List<long>\
    \ l3 = new List<long>();\n        int i = 0;\n        int j = 0;\n        while\
    \ ((i < l1.Count) && (j < l2.Count)) {\n            if (l1[i] == l2[j]) {\n  \
    \              l3.Add(l1[i]);\n                i++;\n                j++;\n  \
    \          } else if (l1[i] < l2[j]) {\n                i++;\n            } else\
    \ {\n                j++;\n            }\n        }\n        return l3;", "  \
    \      var s1 = new HashSet<long>(l1);\n        var s2 = new HashSet<long>(l2);\n\
    \        s1.IntersectWith(s2);\n        return new List<long>(s1);", "       \
    \ var l3 = new List<long>();\n        l1.Sort();\n        l2.Sort();\n       \
    \ var i = 0;\n        var j = 0;\n        while ((i < l1.Count) && (j < l2.Count))\
    \ {\n            if (l1[i] == l2[j]) {\n                l3.Add(l1[i]);\n     \
    \           i += 1;\n                j += 1;\n            } else if (l1[i] < l2[j])\
    \ {\n                i += 1;\n            } else {\n                j += 1;\n\
    \            }\n        }\n        return l3;", "        l1.Sort();\n        l2.Sort();\n\
    \        List<long> result = new List<long>();\n        int i1 = 0;\n        int\
    \ i2 = 0;\n        while (i1 < l1.Count && i2 < l2.Count) {\n            if (l1[i1]\
    \ == l2[i2]) {\n                result.Add(l1[i1]);\n                i1++;\n \
    \               i2++;\n            } else if (l1[i1] < l2[i2]) {\n           \
    \     i1++;\n            } else {\n                i2++;\n            }\n    \
    \    }\n        return result;", "        var l3 = new List<long>();\n       \
    \ foreach (var v in l1) {\n            if (l2.Contains(v)) {\n               \
    \ l3.Add(v);\n            }\n        }\n        l3.Sort();\n        return l3;",
  "        var l = new List<long>();\n        foreach (var i in l1) {\n          \
    \  if (l2.Contains(i)) {\n                l.Add(i);\n            }\n        }\n\
    \        l.Sort();\n        return l;", "        var l3 = new List<long>();\n\
    \        foreach (var i in l1) {\n            if (l2.Contains(i)) {\n        \
    \        l3.Add(i);\n            }\n        }\n        l3.Sort();\n        return\
    \ l3;", "        l1.Sort();\n        l2.Sort();\n        List<long> result = new\
    \ List<long>();\n        int i1 = 0;\n        int i2 = 0;\n        while ((i1\
    \ < l1.Count) && (i2 < l2.Count)) {\n            if (l1[i1] == l2[i2]) {\n   \
    \             result.Add(l1[i1]);\n                i1 += 1;\n                i2\
    \ += 1;\n            } else if (l1[i1] < l2[i2]) {\n                i1 += 1;\n\
    \            } else {\n                i2 += 1;\n            }\n        }\n  \
    \      return result;", "        l1.Sort();\n        l2.Sort();\n        var l\
    \ = new List<long>();\n        var i1 = 0;\n        var i2 = 0;\n        while\
    \ ((i1 < l1.Count) && (i2 < l2.Count)) {\n            if (l1[i1] == l2[i2]) {\n\
    \                l.Add(l1[i1]);\n                i1++;\n                i2++;\n\
    \            } else if (l1[i1] < l2[i2]) {\n                i1++;\n          \
    \  } else {\n                i2++;\n            }\n        }\n        return l;",
  "        l1.Sort();\n        l2.Sort();\n        List<long> res = new List<long>();\n\
    \        int i1 = 0;\n        int i2 = 0;\n        while ((i1 < l1.Count) && (i2\
    \ < l2.Count)) {\n            if (l1[i1] == l2[i2]) {\n                res.Add(l1[i1]);\n\
    \                i1 += 1;\n                i2 += 1;\n            } else if (l1[i1]\
    \ < l2[i2]) {\n                i1 += 1;\n            } else {\n              \
    \  i2 += 1;\n            }\n        }\n        return res;", "        var l3 =\
    \ new List<long>();\n        foreach (var i in l1) {\n            if (l2.Contains(i))\
    \ {\n                l3.Add(i);\n            }\n        }\n        l3.Sort();\n\
    \        return l3;", "        l1.Sort();\n        l2.Sort();\n        List<long>\
    \ res = new List<long>();\n        int i1 = 0;\n        int i2 = 0;\n        while\
    \ (i1 < l1.Count && i2 < l2.Count) {\n            if (l1[i1] == l2[i2]) {\n  \
    \              res.Add(l1[i1]);\n                i1++;\n                i2++;\n\
    \            } else if (l1[i1] < l2[i2]) {\n                i1++;\n          \
    \  } else {\n                i2++;\n            }\n        }\n        return res;",
  "        l1.Sort();\n        l2.Sort();\n        List<long> res = new List<long>();\n\
    \        int i1 = 0;\n        int i2 = 0;\n        while ((i1 < l1.Count) && (i2\
    \ < l2.Count)) {\n            if (l1[i1] == l2[i2]) {\n                res.Add(l1[i1]);\n\
    \                i1++;\n                i2++;\n            } else if (l1[i1] <\
    \ l2[i2]) {\n                i1++;\n            } else {\n                i2++;\n\
    \            }\n        }\n        return res;", "        List<long> result =\
    \ new List<long>();\n        l1.Sort();\n        l2.Sort();\n        int i = 0;\n\
    \        int j = 0;\n        while (i < l1.Count && j < l2.Count) {\n        \
    \    if (l1[i] == l2[j]) {\n                result.Add(l1[i]);\n             \
    \   i++;\n                j++;\n            } else if (l1[i] < l2[j]) {\n    \
    \            i++;\n            } else {\n                j++;\n            }\n\
    \        }\n        return result;", "        var l = new List<long>();\n    \
    \    l1.Sort();\n        l2.Sort();\n        var i1 = 0;\n        var i2 = 0;\n\
    \        while ((i1 < l1.Count) && (i2 < l2.Count)) {\n            var v1 = l1[i1];\n\
    \            var v2 = l2[i2];\n            if (v1 == v2) {\n                l.Add(v1);\n\
    \                i1 += 1;\n                i2 += 1;\n            } else if (v1\
    \ < v2) {\n                i1 += 1;\n            } else {\n                i2\
    \ += 1;\n            }\n        }\n        return l;", "        l1.Sort();\n \
    \       l2.Sort();\n        List<long> res = new List<long>();\n        int i1\
    \ = 0;\n        int i2 = 0;\n        while ((i1 < l1.Count) && (i2 < l2.Count))\
    \ {\n            if (l1[i1] == l2[i2]) {\n                res.Add(l1[i1]);\n \
    \               i1 += 1;\n                i2 += 1;\n            } else if (l1[i1]\
    \ < l2[i2]) {\n                i1 += 1;\n            } else {\n              \
    \  i2 += 1;\n            }\n        }\n        return res;", "        l1.Sort();\n\
    \        l2.Sort();\n        List<long> res = new List<long>();\n        int i1\
    \ = 0;\n        int i2 = 0;\n        while ((i1 < l1.Count) && (i2 < l2.Count))\
    \ {\n            if (l1[i1] == l2[i2]) {\n                res.Add(l1[i1]);\n \
    \               i1++;\n                i2++;\n            } else if (l1[i1] <\
    \ l2[i2]) {\n                i1++;\n            } else {\n                i2++;\n\
    \            }\n        }\n        return res;", "        var l = new List<long>();\n\
    \        var s = new HashSet<long>();\n        foreach (var x in l1) {\n     \
    \       s.Add(x);\n        }\n        foreach (var x in l2) {\n            if\
    \ (s.Contains(x)) {\n                l.Add(x);\n            }\n        }\n   \
    \     l.Sort();\n        return l;", "        l1.Sort();\n        l2.Sort();\n\
    \        List<long> res = new List<long>();\n        int i1 = 0;\n        int\
    \ i2 = 0;\n        while (i1 < l1.Count && i2 < l2.Count) {\n            if (l1[i1]\
    \ == l2[i2]) {\n                res.Add(l1[i1]);\n                i1++;\n    \
    \            i2++;\n            } else if (l1[i1] < l2[i2]) {\n              \
    \  i1++;\n            } else {\n                i2++;\n            }\n       \
    \ }\n        return res;", "        var l = new List<long>();\n        foreach\
    \ (var e in l1) {\n            if (l2.Contains(e)) {\n                l.Add(e);\n\
    \            }\n        }\n        l.Sort();\n        return l;", "        var\
    \ s1 = new HashSet<long>(l1);\n        var s2 = new HashSet<long>(l2);\n     \
    \   s1.IntersectWith(s2);\n        var l = new List<long>(s1);\n        l.Sort();\n\
    \        return l;", "        var l = new List<long>();\n        var s = new HashSet<long>();\n\
    \        foreach (var i in l1) {\n            s.Add(i);\n        }\n        foreach\
    \ (var i in l2) {\n            if (s.Contains(i)) {\n                l.Add(i);\n\
    \            }\n        }\n        l.Sort();\n        return l;", "        l1.Sort();\n\
    \        l2.Sort();\n        int i1 = 0;\n        int i2 = 0;\n        List<long>\
    \ res = new List<long>();\n        while (i1 < l1.Count && i2 < l2.Count) {\n\
    \            if (l1[i1] == l2[i2]) {\n                res.Add(l1[i1]);\n     \
    \           i1++;\n                i2++;\n            } else if (l1[i1] < l2[i2])\
    \ {\n                i1++;\n            } else {\n                i2++;\n    \
    \        }\n        }\n        return res;", "        var l = new List<long>();\n\
    \        var s1 = new HashSet<long>(l1);\n        var s2 = new HashSet<long>(l2);\n\
    \        foreach (var e in s1) {\n            if (s2.Contains(e)) {\n        \
    \        l.Add(e);\n            }\n        }\n        l.Sort();\n        return\
    \ l;", "        var l = new List<long>();\n        foreach (var e in l1) {\n \
    \           if (l2.Contains(e)) {\n                l.Add(e);\n            }\n\
    \        }\n        l.Sort();\n        return l;", "        var l = new List<long>();\n\
    \        l1.Sort();\n        l2.Sort();\n        int i1 = 0;\n        int i2 =\
    \ 0;\n        while ((i1 < l1.Count) && (i2 < l2.Count)) {\n            if (l1[i1]\
    \ == l2[i2]) {\n                l.Add(l1[i1]);\n                i1++;\n      \
    \          i2++;\n            } else if (l1[i1] < l2[i2]) {\n                i1++;\n\
    \            } else {\n                i2++;\n            }\n        }\n     \
    \   return l;", "        l1.Sort();\n        l2.Sort();\n        List<long> res\
    \ = new List<long>();\n        int i1 = 0;\n        int i2 = 0;\n        while\
    \ ((i1 < l1.Count) && (i2 < l2.Count)) {\n            if (l1[i1] == l2[i2]) {\n\
    \                res.Add(l1[i1]);\n                i1++;\n                i2++;\n\
    \            } else if (l1[i1] < l2[i2]) {\n                i1++;\n          \
    \  } else {\n                i2++;\n            }\n        }\n        return res;",
  "        l1.Sort();\n        l2.Sort();\n        List<long> res = new List<long>();\n\
    \        int i1 = 0;\n        int i2 = 0;\n        while (i1 < l1.Count && i2\
    \ < l2.Count) {\n            if (l1[i1] == l2[i2]) {\n                res.Add(l1[i1]);\n\
    \                i1++;\n                i2++;\n            } else if (l1[i1] <\
    \ l2[i2]) {\n                i1++;\n            } else {\n                i2++;\n\
    \            }\n        }\n        return res;", "        var s1 = new HashSet<long>(l1);\n\
    \        var s2 = new HashSet<long>(l2);\n        s1.IntersectWith(s2);\n    \
    \    var res = new List<long>(s1);\n        res.Sort();\n        return res;",
  "        l1.Sort();\n        l2.Sort();\n        List<long> res = new List<long>();\n\
    \        int i1 = 0;\n        int i2 = 0;\n        while ((i1 < l1.Count) && (i2\
    \ < l2.Count)) {\n            if (l1[i1] == l2[i2]) {\n                res.Add(l1[i1]);\n\
    \                i1++;\n                i2++;\n            } else if (l1[i1] <\
    \ l2[i2]) {\n                i1++;\n            } else {\n                i2++;\n\
    \            }\n        }\n        return res;", "        l1.Sort();\n       \
    \ l2.Sort();\n        List<long> res = new List<long>();\n        int i1 = 0;\n\
    \        int i2 = 0;\n        while ((i1 < l1.Count) && (i2 < l2.Count)) {\n \
    \           if (l1[i1] == l2[i2]) {\n                res.Add(l1[i1]);\n      \
    \          i1++;\n                i2++;\n            } else if (l1[i1] < l2[i2])\
    \ {\n                i1++;\n            } else {\n                i2++;\n    \
    \        }\n        }\n        return res;", "        l1.Sort();\n        l2.Sort();\n\
    \        List<long> res = new List<long>();\n        int i1 = 0;\n        int\
    \ i2 = 0;\n        while ((i1 < l1.Count) && (i2 < l2.Count)) {\n            if\
    \ (l1[i1] == l2[i2]) {\n                res.Add(l1[i1]);\n                i1 +=\
    \ 1;\n                i2 += 1;\n            } else if (l1[i1] < l2[i2]) {\n  \
    \              i1 += 1;\n            } else {\n                i2 += 1;\n    \
    \        }\n        }\n        return res;", "        l1.Sort();\n        l2.Sort();\n\
    \        List<long> l3 = new List<long>();\n        int i = 0;\n        int j\
    \ = 0;\n        while ((i < l1.Count) && (j < l2.Count)) {\n            if (l1[i]\
    \ == l2[j]) {\n                l3.Add(l1[i]);\n                i += 1;\n     \
    \           j += 1;\n            } else if (l1[i] < l2[j]) {\n               \
    \ i += 1;\n            } else {\n                j += 1;\n            }\n    \
    \    }\n        return l3;", "        l1.Sort();\n        l2.Sort();\n       \
    \ List<long> res = new List<long>();\n        int i1 = 0;\n        int i2 = 0;\n\
    \        while (i1 < l1.Count && i2 < l2.Count) {\n            if (l1[i1] == l2[i2])\
    \ {\n                res.Add(l1[i1]);\n                i1++;\n               \
    \ i2++;\n            } else if (l1[i1] < l2[i2]) {\n                i1++;\n  \
    \          } else {\n                i2++;\n            }\n        }\n       \
    \ return res;", "        var l = new List<long>();\n        var s = new HashSet<long>();\n\
    \        foreach (var x in l1) {\n            s.Add(x);\n        }\n        foreach\
    \ (var x in l2) {\n            if (s.Contains(x)) {\n                l.Add(x);\n\
    \            }\n        }\n        l.Sort();\n        return l;", "        var\
    \ l3 = new List<long>();\n        foreach (var i in l1) {\n            if (l2.Contains(i))\
    \ {\n                l3.Add(i);\n            }\n        }\n        l3.Sort();\n\
    \        return l3;", "        l1.Sort();\n        l2.Sort();\n        List<long>\
    \ result = new List<long>();\n        int i1 = 0;\n        int i2 = 0;\n     \
    \   while ((i1 < l1.Count) && (i2 < l2.Count)) {\n            if (l1[i1] == l2[i2])\
    \ {\n                result.Add(l1[i1]);\n                i1 += 1;\n         \
    \       i2 += 1;\n            } else if (l1[i1] < l2[i2]) {\n                i1\
    \ += 1;\n            } else {\n                i2 += 1;\n            }\n     \
    \   }\n        return result;", "        l1.Sort();\n        l2.Sort();\n    \
    \    List<long> res = new List<long>();\n        int i1 = 0;\n        int i2 =\
    \ 0;\n        while ((i1 < l1.Count) && (i2 < l2.Count)) {\n            if (l1[i1]\
    \ == l2[i2]) {\n                res.Add(l1[i1]);\n                i1++;\n    \
    \            i2++;\n            } else if (l1[i1] < l2[i2]) {\n              \
    \  i1++;\n            } else {\n                i2++;\n            }\n       \
    \ }\n        return res;", "        List<long> res = new List<long>();\n     \
    \   l1.Sort();\n        l2.Sort();\n        int i = 0;\n        int j = 0;\n \
    \       while (i < l1.Count && j < l2.Count) {\n            if (l1[i] == l2[j])\
    \ {\n                res.Add(l1[i]);\n                i++;\n                j++;\n\
    \            } else if (l1[i] < l2[j]) {\n                i++;\n            }\
    \ else {\n                j++;\n            }\n        }\n        return res;",
  "        List<long> result = new List<long>();\n        l1.Sort();\n        l2.Sort();\n\
    \        int i = 0;\n        int j = 0;\n        while ((i < l1.Count) && (j <\
    \ l2.Count)) {\n            if (l1[i] == l2[j]) {\n                result.Add(l1[i]);\n\
    \                i += 1;\n                j += 1;\n            } else if (l1[i]\
    \ < l2[j]) {\n                i += 1;\n            } else {\n                j\
    \ += 1;\n            }\n        }\n        return result;", "        List<long>\
    \ res = new List<long>();\n        Dictionary<long, long> d = new Dictionary<long,\
    \ long>();\n        foreach (long i in l1) {\n            if (!d.ContainsKey(i))\
    \ {\n                d[i] = (long)1L;\n            }\n\n        }\n\n        foreach\
    \ (long i in l2) {\n            if (d.ContainsKey(i)) {\n                res.Add(i);\n\
    \            }\n\n        }\n\n        res.Sort();\n        return res;", "  \
    \      l1.Sort();\n        l2.Sort();\n        List<long> result = new List<long>();\n\
    \        int i1 = 0;\n        int i2 = 0;\n        while ((i1 < l1.Count) && (i2\
    \ < l2.Count)) {\n            if (l1[i1] == l2[i2]) {\n                result.Add(l1[i1]);\n\
    \                i1++;\n                i2++;\n            } else if (l1[i1] <\
    \ l2[i2]) {\n                i1++;\n            } else {\n                i2++;\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        l1.Sort();\n        l2.Sort();\n        int i =\
    \ 0;\n        int j = 0;\n        while ((i < l1.Count) && (j < l2.Count)) {\n\
    \            if (l1[i] == l2[j]) {\n                result.Add(l1[i]);\n     \
    \           i += 1;\n                j += 1;\n            } else if (l1[i] < l2[j])\
    \ {\n                i += 1;\n            } else {\n                j += 1;\n\
    \            }\n        }\n        return result;", "        l1.Sort();\n    \
    \    l2.Sort();\n        List<long> result = new List<long>();\n        int i1\
    \ = 0;\n        int i2 = 0;\n        while (i1 < l1.Count && i2 < l2.Count) {\n\
    \            if (l1[i1] == l2[i2]) {\n                result.Add(l1[i1]);\n  \
    \              i1++;\n                i2++;\n            } else if (l1[i1] < l2[i2])\
    \ {\n                i1++;\n            } else {\n                i2++;\n    \
    \        }\n        }\n        return result;", "        l1.Sort();\n        l2.Sort();\n\
    \        List<long> result = new List<long>();\n        int i1 = 0;\n        int\
    \ i2 = 0;\n        while ((i1 < l1.Count) && (i2 < l2.Count)) {\n            if\
    \ (l1[i1] == l2[i2]) {\n                result.Add(l1[i1]);\n                i1++;\n\
    \                i2++;\n            } else if (l1[i1] < l2[i2]) {\n          \
    \      i1++;\n            } else {\n                i2++;\n            }\n   \
    \     }\n        return result;", "        var l = new List<long>();\n       \
    \ var s = new HashSet<long>();\n        foreach (var i in l1) {\n            s.Add(i);\n\
    \        }\n        foreach (var i in l2) {\n            if (s.Contains(i)) {\n\
    \                l.Add(i);\n            }\n        }\n        l.Sort();\n    \
    \    return l;", "        l1.Sort();\n        l2.Sort();\n        List<long> ret\
    \ = new List<long>();\n        int i1 = 0;\n        int i2 = 0;\n        while\
    \ ((i1 < l1.Count) && (i2 < l2.Count)) {\n            if (l1[i1] == l2[i2]) {\n\
    \                ret.Add(l1[i1]);\n                i1++;\n                i2++;\n\
    \            } else if (l1[i1] < l2[i2]) {\n                i1++;\n          \
    \  } else {\n                i2++;\n            }\n        }\n        return ret;",
  "        List<long> result = new List<long>();\n        l1.Sort();\n        l2.Sort();\n\
    \        int i = 0;\n        int j = 0;\n        while ((i < l1.Count) && (j <\
    \ l2.Count)) {\n            if (l1[i] == l2[j]) {\n                result.Add(l1[i]);\n\
    \                i++;\n                j++;\n            } else if (l1[i] < l2[j])\
    \ {\n                i++;\n            } else {\n                j++;\n      \
    \      }\n        }\n        return result;", "        List<long> l3 = new List<long>();\n\
    \        l1.Sort();\n        l2.Sort();\n        int i = 0;\n        int j = 0;\n\
    \        while ((i < l1.Count) && (j < l2.Count)) {\n            if (l1[i] ==\
    \ l2[j]) {\n                l3.Add(l1[i]);\n                i += 1;\n        \
    \        j += 1;\n            } else if (l1[i] < l2[j]) {\n                i +=\
    \ 1;\n            } else {\n                j += 1;\n            }\n        }\n\
    \        return l3;", "        var l3 = new List<long>();\n        var l4 = new\
    \ List<long>();\n        foreach (var i in l1) {\n            if (l2.Contains(i))\
    \ {\n                l3.Add(i);\n            }\n        }\n        foreach (var\
    \ i in l2) {\n            if (l1.Contains(i)) {\n                l4.Add(i);\n\
    \            }\n        }\n        l3.Sort();\n        l4.Sort();\n        var\
    \ l5 = new List<long>();\n        foreach (var i in l3) {\n            if (!l5.Contains(i))\
    \ {\n                l5.Add(i);\n            }\n        }\n        foreach (var\
    \ i in l4) {\n            if (!l5.Contains(i)) {\n                l5.Add(i);\n\
    \            }\n        }\n        return l5;", "        var l = new List<long>();\n\
    \        foreach (var x in l1) {\n            if (l2.Contains(x)) {\n        \
    \        l.Add(x);\n            }\n        }\n        l.Sort();\n        return\
    \ l;", "        l1.Sort();\n        l2.Sort();\n        List<long> res = new List<long>();\n\
    \        int i1 = 0;\n        int i2 = 0;\n        while ((i1 < l1.Count) && (i2\
    \ < l2.Count)) {\n            if (l1[i1] == l2[i2]) {\n                res.Add(l1[i1]);\n\
    \                i1++;\n                i2++;\n            } else if (l1[i1] <\
    \ l2[i2]) {\n                i1++;\n            } else {\n                i2++;\n\
    \            }\n        }\n        return res;", "        l1.Sort();\n       \
    \ l2.Sort();\n        List<long> res = new List<long>();\n        int i1 = 0;\n\
    \        int i2 = 0;\n        while (i1 < l1.Count && i2 < l2.Count) {\n     \
    \       if (l1[i1] == l2[i2]) {\n                res.Add(l1[i1]);\n          \
    \      i1++;\n                i2++;\n            } else if (l1[i1] < l2[i2]) {\n\
    \                i1++;\n            } else {\n                i2++;\n        \
    \    }\n        }\n        return res;", "        var l3 = new List<long>();\n\
    \        foreach (var x in l1) {\n            if (l2.Contains(x)) {\n        \
    \        l3.Add(x);\n            }\n        }\n        l3.Sort();\n        return\
    \ l3;", "        l1.Sort();\n        l2.Sort();\n        List<long> res = new\
    \ List<long>();\n        int i1 = 0;\n        int i2 = 0;\n        while (i1 <\
    \ l1.Count && i2 < l2.Count) {\n            if (l1[i1] == l2[i2]) {\n        \
    \        res.Add(l1[i1]);\n                i1++;\n                i2++;\n    \
    \        } else if (l1[i1] < l2[i2]) {\n                i1++;\n            } else\
    \ {\n                i2++;\n            }\n        }\n        return res;", " \
    \       l1.Sort();\n        l2.Sort();\n        List<long> result = new List<long>();\n\
    \        int i1 = 0;\n        int i2 = 0;\n        while ((i1 < l1.Count) && (i2\
    \ < l2.Count)) {\n            if (l1[i1] == l2[i2]) {\n                result.Add(l1[i1]);\n\
    \                i1++;\n                i2++;\n            } else if (l1[i1] <\
    \ l2[i2]) {\n                i1++;\n            } else {\n                i2++;\n\
    \            }\n        }\n        return result;", "        var l3 = new List<long>();\n\
    \        foreach (var item in l1) {\n            if (l2.Contains(item)) {\n  \
    \              l3.Add(item);\n            }\n        }\n        l3.Sort();\n \
    \       return l3;", "        var s1 = new HashSet<long>(l1);\n        var s2\
    \ = new HashSet<long>(l2);\n        s1.IntersectWith(s2);\n        return new\
    \ List<long>(s1);", "        var l = new List<long>();\n        foreach (var i\
    \ in l1) {\n            if (l2.Contains(i)) {\n                l.Add(i);\n   \
    \         }\n        }\n        l.Sort();\n        return l;", "        var l\
    \ = new List<long>();\n        var s = new HashSet<long>();\n        foreach (var\
    \ x in l1) {\n            s.Add(x);\n        }\n        foreach (var x in l2)\
    \ {\n            if (s.Contains(x)) {\n                l.Add(x);\n           \
    \ }\n        }\n        l.Sort();\n        return l;", "        List<long> result\
    \ = new List<long>();\n        int i1 = 0;\n        int i2 = 0;\n        while\
    \ ((i1 < l1.Count) && (i2 < l2.Count)) {\n            if (l1[i1] == l2[i2]) {\n\
    \                result.Add(l1[i1]);\n                i1 += 1;\n             \
    \   i2 += 1;\n            } else if (l1[i1] < l2[i2]) {\n                i1 +=\
    \ 1;\n            } else {\n                i2 += 1;\n            }\n        }\n\
    \        return result;", "        var l = new List<long>();\n        var s =\
    \ new HashSet<long>();\n        foreach (var x in l1) {\n            s.Add(x);\n\
    \        }\n        foreach (var x in l2) {\n            if (s.Contains(x)) {\n\
    \                l.Add(x);\n            }\n        }\n        l.Sort();\n    \
    \    return l;", "        List<long> result = new List<long>();\n        foreach\
    \ (long i in l1) {\n            if (l2.Contains(i)) {\n                result.Add(i);\n\
    \            }\n        }\n        result.Sort();\n        return result;", " \
    \       l1.Sort();\n        l2.Sort();\n        List<long> result = new List<long>();\n\
    \        int i1 = 0;\n        int i2 = 0;\n        while ((i1 < l1.Count) && (i2\
    \ < l2.Count)) {\n            if (l1[i1] == l2[i2]) {\n                result.Add(l1[i1]);\n\
    \                i1 += 1;\n                i2 += 1;\n            } else if (l1[i1]\
    \ < l2[i2]) {\n                i1 += 1;\n            } else {\n              \
    \  i2 += 1;\n            }\n        }\n        return result;", "        l1.Sort();\n\
    \        l2.Sort();\n        List<long> res = new List<long>();\n        int i1\
    \ = 0;\n        int i2 = 0;\n        while (i1 < l1.Count && i2 < l2.Count) {\n\
    \            if (l1[i1] == l2[i2]) {\n                res.Add(l1[i1]);\n     \
    \           i1++;\n                i2++;\n            } else if (l1[i1] < l2[i2])\
    \ {\n                i1++;\n            } else {\n                i2++;\n    \
    \        }\n        }\n        return res;", "        var s1 = new HashSet<long>(l1);\n\
    \        var s2 = new HashSet<long>(l2);\n        s1.IntersectWith(s2);\n    \
    \    return new List<long>(s1);", "        List<long> result = new List<long>();\n\
    \        l1.Sort();\n        l2.Sort();\n        int i = 0;\n        int j = 0;\n\
    \        while (i < l1.Count && j < l2.Count) {\n            if (l1[i] == l2[j])\
    \ {\n                result.Add(l1[i]);\n                i++;\n              \
    \  j++;\n            } else if (l1[i] < l2[j]) {\n                i++;\n     \
    \       } else {\n                j++;\n            }\n        }\n        return\
    \ result;", "        l1.Sort();\n        l2.Sort();\n        List<long> res =\
    \ new List<long>();\n        int i1 = 0;\n        int i2 = 0;\n        while (i1\
    \ < l1.Count && i2 < l2.Count) {\n            if (l1[i1] == l2[i2]) {\n      \
    \          res.Add(l1[i1]);\n                i1++;\n                i2++;\n  \
    \          } else if (l1[i1] < l2[i2]) {\n                i1++;\n            }\
    \ else {\n                i2++;\n            }\n        }\n        return res;",
  "        var result = new List<long>();\n        foreach (var x in l1) {\n     \
    \       if (l2.Contains(x)) {\n                result.Add(x);\n            }\n\
    \        }\n        result.Sort();\n        return result;", "        l1.Sort();\n\
    \        l2.Sort();\n        var l = new List<long>();\n        var i1 = 0;\n\
    \        var i2 = 0;\n        while ((i1 < l1.Count) && (i2 < l2.Count)) {\n \
    \           if (l1[i1] == l2[i2]) {\n                l.Add(l1[i1]);\n        \
    \        i1 += 1;\n                i2 += 1;\n            } else if (l1[i1] < l2[i2])\
    \ {\n                i1 += 1;\n            } else {\n                i2 += 1;\n\
    \            }\n        }\n        return l;", "        var l = new List<long>();\n\
    \        var s1 = new HashSet<long>(l1);\n        var s2 = new HashSet<long>(l2);\n\
    \        foreach (var x in s1) {\n            if (s2.Contains(x)) {\n        \
    \        l.Add(x);\n            }\n        }\n        l.Sort();\n        return\
    \ l;", "        l1.Sort();\n        l2.Sort();\n        List<long> res = new List<long>();\n\
    \        int i1 = 0;\n        int i2 = 0;\n        while (i1 < l1.Count && i2\
    \ < l2.Count) {\n            if (l1[i1] == l2[i2]) {\n                res.Add(l1[i1]);\n\
    \                i1++;\n                i2++;\n            } else if (l1[i1] <\
    \ l2[i2]) {\n                i1++;\n            } else {\n                i2++;\n\
    \            }\n        }\n        return res;", "        var l3 = new List<long>();\n\
    \        foreach (var i in l1) {\n            if (l2.Contains(i)) {\n        \
    \        l3.Add(i);\n            }\n        }\n        l3.Sort();\n        return\
    \ l3;", "        var l = new List<long>();\n        var h = new HashSet<long>();\n\
    \        foreach (var e in l1) {\n            h.Add(e);\n        }\n        foreach\
    \ (var e in l2) {\n            if (h.Contains(e)) {\n                l.Add(e);\n\
    \            }\n        }\n        l.Sort();\n        return l;", "        List<long>\
    \ l3 = new List<long>();\n        l1.Sort();\n        l2.Sort();\n        int\
    \ i = 0;\n        int j = 0;\n        while ((i < l1.Count) && (j < l2.Count))\
    \ {\n            if (l1[i] == l2[j]) {\n                l3.Add(l1[i]);\n     \
    \           i++;\n                j++;\n            } else if (l1[i] < l2[j])\
    \ {\n                i++;\n            } else {\n                j++;\n      \
    \      }\n        }\n        return l3;", "        List<long> result = new List<long>();\n\
    \        l1.Sort();\n        l2.Sort();\n        int i = 0;\n        int j = 0;\n\
    \        while (i < l1.Count && j < l2.Count) {\n            if (l1[i] == l2[j])\
    \ {\n                result.Add(l1[i]);\n                i++;\n              \
    \  j++;\n            } else if (l1[i] < l2[j]) {\n                i++;\n     \
    \       } else {\n                j++;\n            }\n        }\n        return\
    \ result;", "        l1.Sort();\n        l2.Sort();\n        List<long> res =\
    \ new List<long>();\n        int i1 = 0;\n        int i2 = 0;\n        while ((i1\
    \ < l1.Count) && (i2 < l2.Count)) {\n            if (l1[i1] == l2[i2]) {\n   \
    \             res.Add(l1[i1]);\n                i1++;\n                i2++;\n\
    \            } else if (l1[i1] < l2[i2]) {\n                i1++;\n          \
    \  } else {\n                i2++;\n            }\n        }\n        return res;",
  "        var s1 = new HashSet<long>(l1);\n        var s2 = new HashSet<long>(l2);\n\
    \        s1.IntersectWith(s2);\n        return new List<long>(s1);", "       \
    \ l1.Sort();\n        l2.Sort();\n        var l3 = new List<long>();\n       \
    \ int i = 0;\n        int j = 0;\n        while ((i < l1.Count) && (j < l2.Count))\
    \ {\n            if (l1[i] == l2[j]) {\n                l3.Add(l1[i]);\n     \
    \           i += 1;\n                j += 1;\n            } else if (l1[i] < l2[j])\
    \ {\n                i += 1;\n            } else {\n                j += 1;\n\
    \            }\n        }\n        return l3;", "        l1.Sort();\n        l2.Sort();\n\
    \        var l3 = new List<long>();\n        int i = 0;\n        int j = 0;\n\
    \        while ((i < l1.Count) && (j < l2.Count)) {\n            if (l1[i] ==\
    \ l2[j]) {\n                l3.Add(l1[i]);\n                i++;\n           \
    \     j++;\n            } else if (l1[i] < l2[j]) {\n                i++;\n  \
    \          } else {\n                j++;\n            }\n        }\n        return\
    \ l3;", "        List<long> l3 = new List<long>();\n        l1.Sort();\n     \
    \   l2.Sort();\n        int i = 0;\n        int j = 0;\n        while ((i < l1.Count)\
    \ && (j < l2.Count)) {\n            if (l1[i] == l2[j]) {\n                l3.Add(l1[i]);\n\
    \                i++;\n                j++;\n            } else if (l1[i] < l2[j])\
    \ {\n                i++;\n            } else {\n                j++;\n      \
    \      }\n        }\n        return l3;", "        l1.Sort();\n        l2.Sort();\n\
    \        int i = 0;\n        int j = 0;\n        List<long> res = new List<long>();\n\
    \        while (i < l1.Count && j < l2.Count) {\n            if (l1[i] == l2[j])\
    \ {\n                res.Add(l1[i]);\n                i++;\n                j++;\n\
    \            } else if (l1[i] < l2[j]) {\n                i++;\n            }\
    \ else {\n                j++;\n            }\n        }\n        return res;",
  "        List<long> l3 = new List<long>();\n        l1.Sort();\n        l2.Sort();\n\
    \        int i = 0;\n        int j = 0;\n        while (i < l1.Count && j < l2.Count)\
    \ {\n            if (l1[i] == l2[j]) {\n                l3.Add(l1[i]);\n     \
    \           i++;\n                j++;\n            } else if (l1[i] < l2[j])\
    \ {\n                i++;\n            } else {\n                j++;\n      \
    \      }\n        }\n        return l3;", "        l1.Sort();\n        l2.Sort();\n\
    \        List<long> res = new List<long>();\n        int i1 = 0;\n        int\
    \ i2 = 0;\n        while ((i1 < l1.Count) && (i2 < l2.Count)) {\n            if\
    \ (l1[i1] == l2[i2]) {\n                res.Add(l1[i1]);\n                i1 +=\
    \ 1;\n                i2 += 1;\n            } else if (l1[i1] < l2[i2]) {\n  \
    \              i1 += 1;\n            } else {\n                i2 += 1;\n    \
    \        }\n        }\n        return res;", "        l1.Sort();\n        l2.Sort();\n\
    \        List<long> res = new List<long>();\n        int i1 = 0;\n        int\
    \ i2 = 0;\n        while (i1 < l1.Count && i2 < l2.Count) {\n            if (l1[i1]\
    \ == l2[i2]) {\n                res.Add(l1[i1]);\n                i1++;\n    \
    \            i2++;\n            } else if (l1[i1] < l2[i2]) {\n              \
    \  i1++;\n            } else {\n                i2++;\n            }\n       \
    \ }\n        return res;", "        var l3 = new List<long>();\n        var l4\
    \ = new List<long>();\n        var l5 = new List<long>();\n        foreach (var\
    \ v in l1) {\n            l3.Add(v);\n        }\n        foreach (var v in l2)\
    \ {\n            l4.Add(v);\n        }\n        l3.Sort();\n        l4.Sort();\n\
    \        var i = 0;\n        var j = 0;\n        while (i < l3.Count && j < l4.Count)\
    \ {\n            if (l3[i] == l4[j]) {\n                l5.Add(l3[i]);\n     \
    \           i++;\n                j++;\n            } else if (l3[i] < l4[j])\
    \ {\n                i++;\n            } else {\n                j++;\n      \
    \      }\n        }\n        return l5;", "        List<long> common = new List<long>();\n\
    \        l1.Sort();\n        l2.Sort();\n        int i = 0;\n        int j = 0;\n\
    \        while ((i < l1.Count) && (j < l2.Count)) {\n            if (l1[i] ==\
    \ l2[j]) {\n                common.Add(l1[i]);\n                i += 1;\n    \
    \            j += 1;\n            } else if (l1[i] < l2[j]) {\n              \
    \  i += 1;\n            } else {\n                j += 1;\n            }\n   \
    \     }\n        return common;", "        l1.Sort();\n        l2.Sort();\n  \
    \      var l = new List<long>();\n        var i1 = 0;\n        var i2 = 0;\n \
    \       while ((i1 < l1.Count) && (i2 < l2.Count)) {\n            if (l1[i1] ==\
    \ l2[i2]) {\n                l.Add(l1[i1]);\n                i1 += 1;\n      \
    \          i2 += 1;\n            } else if (l1[i1] < l2[i2]) {\n             \
    \   i1 += 1;\n            } else {\n                i2 += 1;\n            }\n\
    \        }\n        return l;", "        var l = new List<long>();\n        l1.Sort();\n\
    \        l2.Sort();\n        int i1 = 0;\n        int i2 = 0;\n        while (i1\
    \ < l1.Count && i2 < l2.Count) {\n            if (l1[i1] == l2[i2]) {\n      \
    \          l.Add(l1[i1]);\n                i1++;\n                i2++;\n    \
    \        } else if (l1[i1] < l2[i2]) {\n                i1++;\n            } else\
    \ {\n                i2++;\n            }\n        }\n        return l;", "  \
    \      l1.Sort();\n        l2.Sort();\n        List<long> res = new List<long>();\n\
    \        int i1 = 0;\n        int i2 = 0;\n        while ((i1 < l1.Count) && (i2\
    \ < l2.Count)) {\n            if (l1[i1] == l2[i2]) {\n                res.Add(l1[i1]);\n\
    \                i1++;\n                i2++;\n            } else if (l1[i1] <\
    \ l2[i2]) {\n                i1++;\n            } else {\n                i2++;\n\
    \            }\n        }\n        return res;", "        var s1 = new HashSet<long>(l1);\n\
    \        var s2 = new HashSet<long>(l2);\n        s1.IntersectWith(s2);\n    \
    \    return new List<long>(s1);", "        l1.Sort();\n        l2.Sort();\n  \
    \      List<long> result = new List<long>();\n        int i1 = 0;\n        int\
    \ i2 = 0;\n        while (i1 < l1.Count && i2 < l2.Count) {\n            if (l1[i1]\
    \ == l2[i2]) {\n                result.Add(l1[i1]);\n                i1++;\n \
    \               i2++;\n            } else if (l1[i1] < l2[i2]) {\n           \
    \     i1++;\n            } else {\n                i2++;\n            }\n    \
    \    }\n        return result;", "        var l = new List<long>();\n        var\
    \ i1 = 0;\n        var i2 = 0;\n        while ((i1 < l1.Count) && (i2 < l2.Count))\
    \ {\n            if (l1[i1] == l2[i2]) {\n                l.Add(l1[i1]);\n   \
    \             i1 += 1;\n                i2 += 1;\n            } else if (l1[i1]\
    \ < l2[i2]) {\n                i1 += 1;\n            } else {\n              \
    \  i2 += 1;\n            }\n        }\n        return l;", "        var s1 = new\
    \ HashSet<long>(l1);\n        var s2 = new HashSet<long>(l2);\n        s1.IntersectWith(s2);\n\
    \        var res = new List<long>(s1);\n        res.Sort();\n        return res;",
  "        l1.Sort();\n        l2.Sort();\n        List<long> result = new List<long>();\n\
    \        int i1 = 0;\n        int i2 = 0;\n        while ((i1 < l1.Count) && (i2\
    \ < l2.Count)) {\n            if (l1[i1] == l2[i2]) {\n                result.Add(l1[i1]);\n\
    \                i1++;\n                i2++;\n            } else if (l1[i1] <\
    \ l2[i2]) {\n                i1++;\n            } else {\n                i2++;\n\
    \            }\n        }\n        return result;", "        var l3 = new List<long>();\n\
    \        foreach (var e in l1) {\n            if (l2.Contains(e)) {\n        \
    \        l3.Add(e);\n            }\n        }\n        l3.Sort();\n        return\
    \ l3;", "        var s1 = new HashSet<long>(l1);\n        var s2 = new HashSet<long>(l2);\n\
    \        s1.IntersectWith(s2);\n        var l = new List<long>(s1);\n        l.Sort();\n\
    \        return l;", "        var l = new List<long>();\n        foreach (var\
    \ i in l1) {\n            if (l2.Contains(i)) {\n                l.Add(i);\n \
    \           }\n        }\n        l.Sort();\n        return l;", "        l1.Sort();\n\
    \        l2.Sort();\n        List<long> result = new List<long>();\n        int\
    \ i1 = 0;\n        int i2 = 0;\n        while ((i1 < l1.Count) && (i2 < l2.Count))\
    \ {\n            if (l1[i1] == l2[i2]) {\n                result.Add(l1[i1]);\n\
    \                i1 += 1;\n                i2 += 1;\n            } else if (l1[i1]\
    \ < l2[i2]) {\n                i1 += 1;\n            } else {\n              \
    \  i2 += 1;\n            }\n        }\n        return result;", "        List<long>\
    \ res = new List<long>();\n        l1.Sort();\n        l2.Sort();\n        int\
    \ i = 0;\n        int j = 0;\n        while ((i < l1.Count) && (j < l2.Count))\
    \ {\n            if (l1[i] == l2[j]) {\n                res.Add(l1[i]);\n    \
    \            i += 1;\n                j += 1;\n            } else if (l1[i] <\
    \ l2[j]) {\n                i += 1;\n            } else {\n                j +=\
    \ 1;\n            }\n        }\n        return res;", "        List<long> res\
    \ = new List<long>();\n        l1.Sort();\n        l2.Sort();\n        int i =\
    \ 0;\n        int j = 0;\n        while (i < l1.Count && j < l2.Count) {\n   \
    \         if (l1[i] == l2[j]) {\n                res.Add(l1[i]);\n           \
    \     i++;\n                j++;\n            } else if (l1[i] < l2[j]) {\n  \
    \              i++;\n            } else {\n                j++;\n            }\n\
    \        }\n        return res;", "        List<long> l = new List<long>();\n\
    \        l1.Sort();\n        l2.Sort();\n        int i = 0;\n        int j = 0;\n\
    \        while ((i < l1.Count) && (j < l2.Count)) {\n            if (l1[i] ==\
    \ l2[j]) {\n                l.Add(l1[i]);\n                i++;\n            \
    \    j++;\n            } else if (l1[i] < l2[j]) {\n                i++;\n   \
    \         } else {\n                j++;\n            }\n        }\n        return\
    \ l;", "        var l = new List<long>();\n        var i1 = 0;\n        var i2\
    \ = 0;\n        while (i1 < l1.Count && i2 < l2.Count) {\n            var v1 =\
    \ l1[i1];\n            var v2 = l2[i2];\n            if (v1 == v2) {\n       \
    \         l.Add(v1);\n                i1++;\n                i2++;\n         \
    \   } else if (v1 < v2) {\n                i1++;\n            } else {\n     \
    \           i2++;\n            }\n        }\n        return l;", "        l1.Sort();\n\
    \        l2.Sort();\n        List<long> result = new List<long>();\n        int\
    \ i1 = 0;\n        int i2 = 0;\n        while ((i1 < l1.Count) && (i2 < l2.Count))\
    \ {\n            if (l1[i1] == l2[i2]) {\n                result.Add(l1[i1]);\n\
    \                i1++;\n                i2++;\n            } else if (l1[i1] <\
    \ l2[i2]) {\n                i1++;\n            } else {\n                i2++;\n\
    \            }\n        }\n        return result;", "        l1.Sort();\n    \
    \    l2.Sort();\n        List<long> result = new List<long>();\n        int i1\
    \ = 0;\n        int i2 = 0;\n        while (i1 < l1.Count && i2 < l2.Count) {\n\
    \            if (l1[i1] == l2[i2]) {\n                result.Add(l1[i1]);\n  \
    \              i1++;\n                i2++;\n            } else if (l1[i1] < l2[i2])\
    \ {\n                i1++;\n            } else {\n                i2++;\n    \
    \        }\n        }\n        return result;", "        l1.Sort();\n        l2.Sort();\n\
    \        List<long> res = new List<long>();\n        int i1 = 0;\n        int\
    \ i2 = 0;\n        while (i1 < l1.Count && i2 < l2.Count) {\n            if (l1[i1]\
    \ == l2[i2]) {\n                res.Add(l1[i1]);\n                i1++;\n    \
    \            i2++;\n            } else if (l1[i1] < l2[i2]) {\n              \
    \  i1++;\n            } else {\n                i2++;\n            }\n       \
    \ }\n        return res;", "        List<long> l3 = new List<long>();\n      \
    \  l1.Sort();\n        l2.Sort();\n        int i = 0;\n        int j = 0;\n  \
    \      while ((i < l1.Count) && (j < l2.Count)) {\n            if (l1[i] == l2[j])\
    \ {\n                l3.Add(l1[i]);\n                i++;\n                j++;\n\
    \            } else if (l1[i] < l2[j]) {\n                i++;\n            }\
    \ else {\n                j++;\n            }\n        }\n        return l3;",
  "        l1.Sort();\n        l2.Sort();\n        List<long> res = new List<long>();\n\
    \        int i1 = 0;\n        int i2 = 0;\n        while ((i1 < l1.Count) && (i2\
    \ < l2.Count)) {\n            if (l1[i1] == l2[i2]) {\n                res.Add(l1[i1]);\n\
    \                i1++;\n                i2++;\n            } else if (l1[i1] <\
    \ l2[i2]) {\n                i1++;\n            } else {\n                i2++;\n\
    \            }\n        }\n        return res;", "        var l = new List<long>();\n\
    \        var i1 = 0;\n        var i2 = 0;\n        while ((i1 < l1.Count) && (i2\
    \ < l2.Count)) {\n            if (l1[i1] == l2[i2]) {\n                l.Add(l1[i1]);\n\
    \                i1++;\n                i2++;\n            } else if (l1[i1] <\
    \ l2[i2]) {\n                i1++;\n            } else {\n                i2++;\n\
    \            }\n        }\n        return l;", "        var s1 = new HashSet<long>(l1);\n\
    \        var s2 = new HashSet<long>(l2);\n        s1.IntersectWith(s2);\n    \
    \    return new List<long>(s1);", "        var l = new List<long>();\n       \
    \ l1.Sort();\n        l2.Sort();\n        var i1 = 0;\n        var i2 = 0;\n \
    \       while ((i1 < l1.Count) && (i2 < l2.Count)) {\n            if (l1[i1] ==\
    \ l2[i2]) {\n                l.Add(l1[i1]);\n                i1 += 1;\n      \
    \          i2 += 1;\n            } else if (l1[i1] < l2[i2]) {\n             \
    \   i1 += 1;\n            } else {\n                i2 += 1;\n            }\n\
    \        }\n        return l;", "        var l = new List<long>();\n        l1.Sort();\n\
    \        l2.Sort();\n        var i1 = 0;\n        var i2 = 0;\n        while ((i1\
    \ < l1.Count) && (i2 < l2.Count)) {\n            if (l1[i1] == l2[i2]) {\n   \
    \             l.Add(l1[i1]);\n                i1 += 1;\n                i2 +=\
    \ 1;\n            } else if (l1[i1] < l2[i2]) {\n                i1 += 1;\n  \
    \          } else {\n                i2 += 1;\n            }\n        }\n    \
    \    return l;", "        var l3 = new List<long>();\n        var l1s = l1.ToList();\n\
    \        var l2s = l2.ToList();\n        l1s.Sort();\n        l2s.Sort();\n  \
    \      var i1 = 0;\n        var i2 = 0;\n        while ((i1 < l1s.Count) && (i2\
    \ < l2s.Count)) {\n            if (l1s[i1] == l2s[i2]) {\n                l3.Add(l1s[i1]);\n\
    \                i1 += 1;\n                i2 += 1;\n            } else if (l1s[i1]\
    \ < l2s[i2]) {\n                i1 += 1;\n            } else {\n             \
    \   i2 += 1;\n            }\n        }\n        return l3;", "        l1.Sort();\n\
    \        l2.Sort();\n        var l = new List<long>();\n        var i1 = 0;\n\
    \        var i2 = 0;\n        while ((i1 < l1.Count) && (i2 < l2.Count)) {\n \
    \           if (l1[i1] == l2[i2]) {\n                l.Add(l1[i1]);\n        \
    \        i1 += 1;\n                i2 += 1;\n            } else if (l1[i1] < l2[i2])\
    \ {\n                i1 += 1;\n            } else {\n                i2 += 1;\n\
    \            }\n        }\n        return l;", "        var l3 = new List<long>();\n\
    \        foreach (var v in l1) {\n            if (l2.Contains(v)) {\n        \
    \        l3.Add(v);\n            }\n        }\n        l3.Sort();\n        return\
    \ l3;", "        l1.Sort();\n        l2.Sort();\n        int i = 0;\n        int\
    \ j = 0;\n        List<long> res = new List<long>();\n        while (i < l1.Count\
    \ && j < l2.Count) {\n            if (l1[i] == l2[j]) {\n                res.Add(l1[i]);\n\
    \                i++;\n                j++;\n            } else if (l1[i] < l2[j])\
    \ {\n                i++;\n            } else {\n                j++;\n      \
    \      }\n        }\n        return res;", "        List<long> result = new List<long>();\n\
    \        int i1 = 0;\n        int i2 = 0;\n        while ((i1 < l1.Count) && (i2\
    \ < l2.Count)) {\n            if (l1[i1] == l2[i2]) {\n                result.Add(l1[i1]);\n\
    \                i1 += 1;\n                i2 += 1;\n            } else if (l1[i1]\
    \ < l2[i2]) {\n                i1 += 1;\n            } else {\n              \
    \  i2 += 1;\n            }\n        }\n        return result;", "        l1.Sort();\n\
    \        l2.Sort();\n        List<long> res = new List<long>();\n        int i1\
    \ = 0;\n        int i2 = 0;\n        while ((i1 < l1.Count) && (i2 < l2.Count))\
    \ {\n            if (l1[i1] == l2[i2]) {\n                res.Add(l1[i1]);\n \
    \               i1 += 1;\n                i2 += 1;\n            } else if (l1[i1]\
    \ < l2[i2]) {\n                i1 += 1;\n            } else {\n              \
    \  i2 += 1;\n            }\n        }\n        return res;", "        var l =\
    \ new List<long>();\n        foreach (var i in l1) {\n            if (l2.Contains(i))\
    \ {\n                l.Add(i);\n            }\n        }\n        l.Sort();\n\
    \        return l;", "        var l = new List<long>();\n        var i1 = 0;\n\
    \        var i2 = 0;\n        while ((i1 < l1.Count) && (i2 < l2.Count)) {\n \
    \           if (l1[i1] == l2[i2]) {\n                l.Add(l1[i1]);\n        \
    \        i1 += 1;\n                i2 += 1;\n            } else if (l1[i1] < l2[i2])\
    \ {\n                i1 += 1;\n            } else {\n                i2 += 1;\n\
    \            }\n        }\n        return l;", "        List<long> result = new\
    \ List<long>();\n        l1.Sort();\n        l2.Sort();\n        int i = 0;\n\
    \        int j = 0;\n        while ((i < l1.Count) && (j < l2.Count)) {\n    \
    \        if (l1[i] == l2[j]) {\n                result.Add(l1[i]);\n         \
    \       i++;\n                j++;\n            } else if (l1[i] < l2[j]) {\n\
    \                i++;\n            } else {\n                j++;\n          \
    \  }\n        }\n        return result;", "        var l = new List<long>();\n\
    \        var i1 = 0;\n        var i2 = 0;\n        while ((i1 < l1.Count) && (i2\
    \ < l2.Count)) {\n            if (l1[i1] == l2[i2]) {\n                l.Add(l1[i1]);\n\
    \                i1++;\n                i2++;\n            } else if (l1[i1] <\
    \ l2[i2]) {\n                i1++;\n            } else {\n                i2++;\n\
    \            }\n        }\n        return l;", "        l1.Sort();\n        l2.Sort();\n\
    \        List<long> result = new List<long>();\n        int i1 = 0;\n        int\
    \ i2 = 0;\n        while ((i1 < l1.Count) && (i2 < l2.Count)) {\n            if\
    \ (l1[i1] == l2[i2]) {\n                result.Add(l1[i1]);\n                i1\
    \ += 1;\n                i2 += 1;\n            } else if (l1[i1] < l2[i2]) {\n\
    \                i1 += 1;\n            } else {\n                i2 += 1;\n  \
    \          }\n        }\n        return result;", "        l1.Sort();\n      \
    \  l2.Sort();\n        List<long> res = new List<long>();\n        int i1 = 0;\n\
    \        int i2 = 0;\n        while (i1 < l1.Count && i2 < l2.Count) {\n     \
    \       if (l1[i1] == l2[i2]) {\n                res.Add(l1[i1]);\n          \
    \      i1++;\n                i2++;\n            } else if (l1[i1] < l2[i2]) {\n\
    \                i1++;\n            } else {\n                i2++;\n        \
    \    }\n        }\n        return res;", "        List<long> result = new List<long>();\n\
    \        l1.Sort();\n        l2.Sort();\n        int i = 0;\n        int j = 0;\n\
    \        while ((i < l1.Count) && (j < l2.Count)) {\n            if (l1[i] ==\
    \ l2[j]) {\n                result.Add(l1[i]);\n                i += 1;\n    \
    \            j += 1;\n            } else if (l1[i] < l2[j]) {\n              \
    \  i += 1;\n            } else {\n                j += 1;\n            }\n   \
    \     }\n        return result;", "        var s1 = new HashSet<long>(l1);\n \
    \       var s2 = new HashSet<long>(l2);\n        s1.IntersectWith(s2);\n     \
    \   return new List<long>(s1);", "        List<long> result = new List<long>();\n\
    \        int i = 0;\n        int j = 0;\n        while ((i < l1.Count) && (j <\
    \ l2.Count)) {\n            if (l1[i] == l2[j]) {\n                result.Add(l1[i]);\n\
    \                i += 1;\n                j += 1;\n            } else if (l1[i]\
    \ < l2[j]) {\n                i += 1;\n            } else {\n                j\
    \ += 1;\n            }\n        }\n        return result;", "        var s1 =\
    \ new HashSet<long>(l1);\n        var s2 = new HashSet<long>(l2);\n        s1.IntersectWith(s2);\n\
    \        var l = new List<long>(s1);\n        l.Sort();\n        return l;", " \
    \       l1.Sort();\n        l2.Sort();\n        List<long> result = new List<long>();\n\
    \        int i1 = 0;\n        int i2 = 0;\n        while ((i1 < l1.Count) && (i2\
    \ < l2.Count)) {\n            if (l1[i1] == l2[i2]) {\n                result.Add(l1[i1]);\n\
    \                i1 += 1;\n                i2 += 1;\n            } else if (l1[i1]\
    \ < l2[i2]) {\n                i1 += 1;\n            } else {\n              \
    \  i2 += 1;\n            }\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        l1.Sort();\n        l2.Sort();\n       \
    \ int i = 0;\n        int j = 0;\n        while ((i < l1.Count) && (j < l2.Count))\
    \ {\n            if (l1[i] == l2[j]) {\n                result.Add(l1[i]);\n \
    \               i += 1;\n                j += 1;\n            } else if (l1[i]\
    \ < l2[j]) {\n                i += 1;\n            } else {\n                j\
    \ += 1;\n            }\n        }\n        return result;", "        l1.Sort();\n\
    \        l2.Sort();\n        List<long> res = new List<long>();\n        int i1\
    \ = 0;\n        int i2 = 0;\n        while ((i1 < l1.Count) && (i2 < l2.Count))\
    \ {\n            if (l1[i1] == l2[i2]) {\n                res.Add(l1[i1]);\n \
    \               i1 += 1;\n                i2 += 1;\n            } else if (l1[i1]\
    \ < l2[i2]) {\n                i1 += 1;\n            } else {\n              \
    \  i2 += 1;\n            }\n        }\n        return res;", "        l1.Sort();\n\
    \        l2.Sort();\n        List<long> result = new List<long>();\n        int\
    \ i1 = 0;\n        int i2 = 0;\n        while ((i1 < l1.Count) && (i2 < l2.Count))\
    \ {\n            if (l1[i1] == l2[i2]) {\n                result.Add(l1[i1]);\n\
    \                i1 += 1;\n                i2 += 1;\n            } else if (l1[i1]\
    \ < l2[i2]) {\n                i1 += 1;\n            } else {\n              \
    \  i2 += 1;\n            }\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        l1.Sort();\n        l2.Sort();\n       \
    \ int i = 0;\n        int j = 0;\n        while ((i < l1.Count) && (j < l2.Count))\
    \ {\n            if (l1[i] == l2[j]) {\n                result.Add(l1[i]);\n \
    \               i++;\n                j++;\n            } else if (l1[i] < l2[j])\
    \ {\n                i++;\n            } else {\n                j++;\n      \
    \      }\n        }\n        return result;", "        var s1 = new HashSet<long>(l1);\n\
    \        var s2 = new HashSet<long>(l2);\n        s1.IntersectWith(s2);\n    \
    \    var result = new List<long>(s1);\n        result.Sort();\n        return\
    \ result;", "        List<long> res = new List<long>();\n        l1.Sort();\n\
    \        l2.Sort();\n        int i = 0;\n        int j = 0;\n        while ((i\
    \ < l1.Count) && (j < l2.Count)) {\n            if (l1[i] == l2[j]) {\n      \
    \          res.Add(l1[i]);\n                i++;\n                j++;\n     \
    \       } else if (l1[i] < l2[j]) {\n                i++;\n            } else\
    \ {\n                j++;\n            }\n        }\n        return res;", " \
    \       List<long> result = new List<long>();\n        l1.Sort();\n        l2.Sort();\n\
    \        int i = 0;\n        int j = 0;\n        while ((i < l1.Count) && (j <\
    \ l2.Count)) {\n            if (l1[i] == l2[j]) {\n                result.Add(l1[i]);\n\
    \                i++;\n                j++;\n            } else if (l1[i] < l2[j])\
    \ {\n                i++;\n            } else {\n                j++;\n      \
    \      }\n        }\n        return result;", "        var s1 = new HashSet<long>(l1);\n\
    \        var s2 = new HashSet<long>(l2);\n        s1.IntersectWith(s2);\n    \
    \    return new List<long>(s1);", "        l1.Sort();\n        l2.Sort();\n  \
    \      List<long> res = new List<long>();\n        int i1 = 0;\n        int i2\
    \ = 0;\n        while ((i1 < l1.Count) && (i2 < l2.Count)) {\n            if (l1[i1]\
    \ == l2[i2]) {\n                res.Add(l1[i1]);\n                i1 += 1;\n \
    \               i2 += 1;\n            } else if (l1[i1] < l2[i2]) {\n        \
    \        i1 += 1;\n            } else {\n                i2 += 1;\n          \
    \  }\n        }\n        return res;", "        l1.Sort();\n        l2.Sort();\n\
    \        List<long> res = new List<long>();\n        int i1 = 0;\n        int\
    \ i2 = 0;\n        while ((i1 < l1.Count) && (i2 < l2.Count)) {\n            if\
    \ (l1[i1] == l2[i2]) {\n                res.Add(l1[i1]);\n                i1 +=\
    \ 1;\n                i2 += 1;\n            } else if (l1[i1] < l2[i2]) {\n  \
    \              i1 += 1;\n            } else {\n                i2 += 1;\n    \
    \        }\n        }\n        return res;", "        l1.Sort();\n        l2.Sort();\n\
    \        List<long> res = new List<long>();\n        int i1 = 0;\n        int\
    \ i2 = 0;\n        while ((i1 < l1.Count) && (i2 < l2.Count)) {\n            if\
    \ (l1[i1] == l2[i2]) {\n                res.Add(l1[i1]);\n                i1++;\n\
    \                i2++;\n            } else if (l1[i1] < l2[i2]) {\n          \
    \      i1++;\n            } else {\n                i2++;\n            }\n   \
    \     }\n        return res;", "        l1.Sort();\n        l2.Sort();\n     \
    \   List<long> res = new List<long>();\n        int i1 = 0;\n        int i2 =\
    \ 0;\n        while ((i1 < l1.Count) && (i2 < l2.Count)) {\n            if (l1[i1]\
    \ == l2[i2]) {\n                res.Add(l1[i1]);\n                i1 += 1;\n \
    \               i2 += 1;\n            } else if (l1[i1] < l2[i2]) {\n        \
    \        i1 += 1;\n            } else {\n                i2 += 1;\n          \
    \  }\n        }\n        return res;", "        Dictionary<long, long> d = new\
    \ Dictionary<long, long>();\n        foreach (long i in l1) {\n            if\
    \ (!d.ContainsKey(i)) {\n                d[i] = 0L;\n            }\n         \
    \   d[i] += 1L;\n        }\n        foreach (long i in l2) {\n            if (!d.ContainsKey(i))\
    \ {\n                d[i] = 0L;\n            }\n            d[i] += 1L;\n    \
    \    }\n        List<long> res = new List<long>();\n        foreach (long i in\
    \ d.Keys) {\n            if (d[i] > 1L) {\n                res.Add(i);\n     \
    \       }\n        }\n        res.Sort();\n        return res;", "        var\
    \ l3 = new List<long>();\n        foreach (var i in l1) {\n            if (l2.Contains(i))\
    \ {\n                l3.Add(i);\n            }\n        }\n        l3.Sort();\n\
    \        return l3;", "        var s1 = new HashSet<long>(l1);\n        var s2\
    \ = new HashSet<long>(l2);\n        s1.IntersectWith(s2);\n        var l = new\
    \ List<long>(s1);\n        l.Sort();\n        return l;", "        l1.Sort();\n\
    \        l2.Sort();\n        List<long> res = new List<long>();\n        int i1\
    \ = 0;\n        int i2 = 0;\n        while ((i1 < l1.Count) && (i2 < l2.Count))\
    \ {\n            if (l1[i1] == l2[i2]) {\n                res.Add(l1[i1]);\n \
    \               i1++;\n                i2++;\n            } else if (l1[i1] <\
    \ l2[i2]) {\n                i1++;\n            } else {\n                i2++;\n\
    \            }\n        }\n        return res;", "        l1.Sort();\n       \
    \ l2.Sort();\n        List<long> res = new List<long>();\n        int i1 = 0;\n\
    \        int i2 = 0;\n        while ((i1 < l1.Count) && (i2 < l2.Count)) {\n \
    \           if (l1[i1] == l2[i2]) {\n                res.Add(l1[i1]);\n      \
    \          i1++;\n                i2++;\n            } else if (l1[i1] < l2[i2])\
    \ {\n                i1++;\n            } else {\n                i2++;\n    \
    \        }\n        }\n        return res;", "        l1.Sort();\n        l2.Sort();\n\
    \        var l = new List<long>();\n        var i1 = 0;\n        var i2 = 0;\n\
    \        while ((i1 < l1.Count) && (i2 < l2.Count)) {\n            if (l1[i1]\
    \ == l2[i2]) {\n                l.Add(l1[i1]);\n                i1 += 1;\n   \
    \             i2 += 1;\n            } else if (l1[i1] < l2[i2]) {\n          \
    \      i1 += 1;\n            } else {\n                i2 += 1;\n            }\n\
    \        }\n        return l;", "        var l = new List<long>();\n        var\
    \ s = new HashSet<long>();\n        foreach (var e in l1) {\n            s.Add(e);\n\
    \        }\n        foreach (var e in l2) {\n            if (s.Contains(e)) {\n\
    \                l.Add(e);\n            }\n        }\n        l.Sort();\n    \
    \    return l;", "        var s1 = new HashSet<long>(l1);\n        var s2 = new\
    \ HashSet<long>(l2);\n        s1.IntersectWith(s2);\n        return s1.ToList();",
  "        var l = new List<long>();\n        var s = new HashSet<long>();\n     \
    \   foreach (var i in l1) {\n            s.Add(i);\n        }\n        foreach\
    \ (var i in l2) {\n            if (s.Contains(i)) {\n                l.Add(i);\n\
    \            }\n        }\n        l.Sort();\n        return l;", "        List<long>\
    \ res = new List<long>();\n        l1.Sort();\n        l2.Sort();\n        int\
    \ i = 0;\n        int j = 0;\n        while ((i < l1.Count) && (j < l2.Count))\
    \ {\n            if (l1[i] == l2[j]) {\n                res.Add(l1[i]);\n    \
    \            i++;\n                j++;\n            } else if (l1[i] < l2[j])\
    \ {\n                i++;\n            } else {\n                j++;\n      \
    \      }\n        }\n        return res;", "        var s1 = new HashSet<long>(l1);\n\
    \        var s2 = new HashSet<long>(l2);\n        s1.IntersectWith(s2);\n    \
    \    var l = new List<long>(s1);\n        l.Sort();\n        return l;", "   \
    \     l1.Sort();\n        l2.Sort();\n        List<long> l3 = new List<long>();\n\
    \        int i = 0;\n        int j = 0;\n        while ((i < l1.Count) && (j <\
    \ l2.Count)) {\n            if (l1[i] == l2[j]) {\n                l3.Add(l1[i]);\n\
    \                i++;\n                j++;\n            } else if (l1[i] < l2[j])\
    \ {\n                i++;\n            } else {\n                j++;\n      \
    \      }\n        }\n        return l3;", "        l1.Sort();\n        l2.Sort();\n\
    \        List<long> res = new List<long>();\n        int i1 = 0;\n        int\
    \ i2 = 0;\n        while (i1 < l1.Count && i2 < l2.Count) {\n            if (l1[i1]\
    \ == l2[i2]) {\n                res.Add(l1[i1]);\n                i1++;\n    \
    \            i2++;\n            } else if (l1[i1] < l2[i2]) {\n              \
    \  i1++;\n            } else {\n                i2++;\n            }\n       \
    \ }\n        return res;", "        l1.Sort();\n        l2.Sort();\n        List<long>\
    \ res = new List<long>();\n        int i1 = 0;\n        int i2 = 0;\n        while\
    \ ((i1 < l1.Count) && (i2 < l2.Count)) {\n            if (l1[i1] == l2[i2]) {\n\
    \                res.Add(l1[i1]);\n                i1++;\n                i2++;\n\
    \            } else if (l1[i1] < l2[i2]) {\n                i1++;\n          \
    \  } else {\n                i2++;\n            }\n        }\n        return res;",
  "        l1.Sort();\n        l2.Sort();\n        List<long> res = new List<long>();\n\
    \        int i1 = 0;\n        int i2 = 0;\n        while ((i1 < l1.Count) && (i2\
    \ < l2.Count)) {\n            if (l1[i1] == l2[i2]) {\n                res.Add(l1[i1]);\n\
    \                i1++;\n                i2++;\n            } else if (l1[i1] <\
    \ l2[i2]) {\n                i1++;\n            } else {\n                i2++;\n\
    \            }\n        }\n        return res;", "        l1.Sort();\n       \
    \ l2.Sort();\n        List<long> res = new List<long>();\n        int i1 = 0;\n\
    \        int i2 = 0;\n        while (i1 < l1.Count && i2 < l2.Count) {\n     \
    \       if (l1[i1] == l2[i2]) {\n                res.Add(l1[i1]);\n          \
    \      i1++;\n                i2++;\n            } else if (l1[i1] < l2[i2]) {\n\
    \                i1++;\n            } else {\n                i2++;\n        \
    \    }\n        }\n        return res;", "        List<long> result = new List<long>();\n\
    \        l1.Sort();\n        l2.Sort();\n        int i = 0;\n        int j = 0;\n\
    \        while ((i < l1.Count) && (j < l2.Count)) {\n            if (l1[i] ==\
    \ l2[j]) {\n                result.Add(l1[i]);\n                i++;\n       \
    \         j++;\n            } else if (l1[i] < l2[j]) {\n                i++;\n\
    \            } else {\n                j++;\n            }\n        }\n      \
    \  return result;", "        List<long> result = new List<long>();\n        l1.Sort();\n\
    \        l2.Sort();\n        int i = 0;\n        int j = 0;\n        while ((i\
    \ < l1.Count) && (j < l2.Count)) {\n            if (l1[i] == l2[j]) {\n      \
    \          result.Add(l1[i]);\n                i++;\n                j++;\n  \
    \          } else if (l1[i] < l2[j]) {\n                i++;\n            } else\
    \ {\n                j++;\n            }\n        }\n        return result;",
  "        l1.Sort();\n        l2.Sort();\n        List<long> res = new List<long>();\n\
    \        int i1 = 0;\n        int i2 = 0;\n        while (i1 < l1.Count && i2\
    \ < l2.Count) {\n            if (l1[i1] == l2[i2]) {\n                res.Add(l1[i1]);\n\
    \                i1++;\n                i2++;\n            } else if (l1[i1] <\
    \ l2[i2]) {\n                i1++;\n            } else {\n                i2++;\n\
    \            }\n        }\n        return res;", "        l1.Sort();\n       \
    \ l2.Sort();\n        List<long> result = new List<long>();\n        int i1 =\
    \ 0;\n        int i2 = 0;\n        while ((i1 < l1.Count) && (i2 < l2.Count))\
    \ {\n            if (l1[i1] == l2[i2]) {\n                result.Add(l1[i1]);\n\
    \                i1++;\n                i2++;\n            } else if (l1[i1] <\
    \ l2[i2]) {\n                i1++;\n            } else {\n                i2++;\n\
    \            }\n        }\n        return result;", "        l1.Sort();\n    \
    \    l2.Sort();\n        List<long> result = new List<long>();\n        int i1\
    \ = 0;\n        int i2 = 0;\n        while ((i1 < l1.Count) && (i2 < l2.Count))\
    \ {\n            if (l1[i1] == l2[i2]) {\n                result.Add(l1[i1]);\n\
    \                i1++;\n                i2++;\n            } else if (l1[i1] <\
    \ l2[i2]) {\n                i1++;\n            } else {\n                i2++;\n\
    \            }\n        }\n        return result;", "        var l3 = new List<long>();\n\
    \        foreach (var i in l1) {\n            if (l2.Contains(i)) {\n        \
    \        l3.Add(i);\n            }\n        }\n        l3.Sort();\n        return\
    \ l3;", "        l1.Sort();\n        l2.Sort();\n        List<long> result = new\
    \ List<long>();\n        int i1 = 0;\n        int i2 = 0;\n        while ((i1\
    \ < l1.Count) && (i2 < l2.Count)) {\n            if (l1[i1] == l2[i2]) {\n   \
    \             result.Add(l1[i1]);\n                i1 += 1;\n                i2\
    \ += 1;\n            } else if (l1[i1] < l2[i2]) {\n                i1 += 1;\n\
    \            } else {\n                i2 += 1;\n            }\n        }\n  \
    \      return result;", "        l1.Sort();\n        l2.Sort();\n        List<long>\
    \ res = new List<long>();\n        int i1 = 0;\n        int i2 = 0;\n        while\
    \ ((i1 < l1.Count) && (i2 < l2.Count)) {\n            if (l1[i1] == l2[i2]) {\n\
    \                res.Add(l1[i1]);\n                i1++;\n                i2++;\n\
    \            } else if (l1[i1] < l2[i2]) {\n                i1++;\n          \
    \  } else {\n                i2++;\n            }\n        }\n        return res;",
  "        l1.Sort();\n        l2.Sort();\n        var i1 = 0;\n        var i2 = 0;\n\
    \        var res = new List<long>();\n        while (i1 < l1.Count && i2 < l2.Count)\
    \ {\n            if (l1[i1] == l2[i2]) {\n                res.Add(l1[i1]);\n \
    \               i1++;\n                i2++;\n            } else if (l1[i1] <\
    \ l2[i2]) {\n                i1++;\n            } else {\n                i2++;\n\
    \            }\n        }\n        return res;", "        List<long> result =\
    \ new List<long>();\n        l1.Sort();\n        l2.Sort();\n        int i = 0;\n\
    \        int j = 0;\n        while ((i < l1.Count) && (j < l2.Count)) {\n    \
    \        if (l1[i] == l2[j]) {\n                result.Add(l1[i]);\n         \
    \       i++;\n                j++;\n            } else if (l1[i] < l2[j]) {\n\
    \                i++;\n            } else {\n                j++;\n          \
    \  }\n        }\n        return result;", "        l1.Sort();\n        l2.Sort();\n\
    \        List<long> l3 = new List<long>();\n        int i = 0;\n        int j\
    \ = 0;\n        while ((i < l1.Count) && (j < l2.Count)) {\n            if (l1[i]\
    \ == l2[j]) {\n                l3.Add(l1[i]);\n                i++;\n        \
    \        j++;\n            } else if (l1[i] < l2[j]) {\n                i++;\n\
    \            } else {\n                j++;\n            }\n        }\n      \
    \  return l3;", "        l1.Sort();\n        l2.Sort();\n        var l = new List<long>();\n\
    \        var i1 = 0;\n        var i2 = 0;\n        while ((i1 < l1.Count) && (i2\
    \ < l2.Count)) {\n            if (l1[i1] == l2[i2]) {\n                l.Add(l1[i1]);\n\
    \                i1++;\n                i2++;\n            } else if (l1[i1] <\
    \ l2[i2]) {\n                i1++;\n            } else {\n                i2++;\n\
    \            }\n        }\n        return l;", "        l1.Sort();\n        l2.Sort();\n\
    \        List<long> res = new List<long>();\n        int i1 = 0;\n        int\
    \ i2 = 0;\n        while (i1 < l1.Count && i2 < l2.Count) {\n            if (l1[i1]\
    \ == l2[i2]) {\n                res.Add(l1[i1]);\n                i1++;\n    \
    \            i2++;\n            } else if (l1[i1] < l2[i2]) {\n              \
    \  i1++;\n            } else {\n                i2++;\n            }\n       \
    \ }\n        return res;", "        l1.Sort();\n        l2.Sort();\n        List<long>\
    \ result = new List<long>();\n        int i1 = 0;\n        int i2 = 0;\n     \
    \   while ((i1 < l1.Count) && (i2 < l2.Count)) {\n            if (l1[i1] == l2[i2])\
    \ {\n                result.Add(l1[i1]);\n                i1 += 1;\n         \
    \       i2 += 1;\n            } else if (l1[i1] < l2[i2]) {\n                i1\
    \ += 1;\n            } else {\n                i2 += 1;\n            }\n     \
    \   }\n        return result;", "        var result = new List<long>();\n    \
    \    var i1 = 0;\n        var i2 = 0;\n        while (i1 < l1.Count && i2 < l2.Count)\
    \ {\n            var v1 = l1[i1];\n            var v2 = l2[i2];\n            if\
    \ (v1 == v2) {\n                result.Add(v1);\n                i1++;\n     \
    \           i2++;\n            } else if (v1 < v2) {\n                i1++;\n\
    \            } else {\n                i2++;\n            }\n        }\n     \
    \   return result;", "        l1.Sort();\n        l2.Sort();\n        List<long>\
    \ res = new List<long>();\n        int i1 = 0;\n        int i2 = 0;\n        while\
    \ ((i1 < l1.Count) && (i2 < l2.Count)) {\n            if (l1[i1] == l2[i2]) {\n\
    \                res.Add(l1[i1]);\n                i1++;\n                i2++;\n\
    \            } else if (l1[i1] < l2[i2]) {\n                i1++;\n          \
    \  } else {\n                i2++;\n            }\n        }\n        return res;",
  "        List<long> result = new List<long>();\n        l1.Sort();\n        l2.Sort();\n\
    \        int i = 0;\n        int j = 0;\n        while ((i < l1.Count) && (j <\
    \ l2.Count)) {\n            if (l1[i] == l2[j]) {\n                result.Add(l1[i]);\n\
    \                i++;\n                j++;\n            } else if (l1[i] < l2[j])\
    \ {\n                i++;\n            } else {\n                j++;\n      \
    \      }\n        }\n        return result;", "        l1.Sort();\n        l2.Sort();\n\
    \        List<long> result = new List<long>();\n        int i1 = 0;\n        int\
    \ i2 = 0;\n        while ((i1 < l1.Count) && (i2 < l2.Count)) {\n            if\
    \ (l1[i1] == l2[i2]) {\n                result.Add(l1[i1]);\n                i1++;\n\
    \                i2++;\n            } else if (l1[i1] < l2[i2]) {\n          \
    \      i1++;\n            } else {\n                i2++;\n            }\n   \
    \     }\n        return result;", "        var s1 = new HashSet<long>(l1);\n \
    \       var s2 = new HashSet<long>(l2);\n        s1.IntersectWith(s2);\n     \
    \   return s1.ToList();", "        l1.Sort();\n        l2.Sort();\n        List<long>\
    \ res = new List<long>();\n        int i1 = 0;\n        int i2 = 0;\n        while\
    \ ((i1 < l1.Count) && (i2 < l2.Count)) {\n            if (l1[i1] == l2[i2]) {\n\
    \                res.Add(l1[i1]);\n                i1 += 1;\n                i2\
    \ += 1;\n            } else if (l1[i1] < l2[i2]) {\n                i1 += 1;\n\
    \            } else {\n                i2 += 1;\n            }\n        }\n  \
    \      return res;", "        l1.Sort();\n        l2.Sort();\n        List<long>\
    \ result = new List<long>();\n        int i1 = 0;\n        int i2 = 0;\n     \
    \   while ((i1 < l1.Count) && (i2 < l2.Count)) {\n            if (l1[i1] == l2[i2])\
    \ {\n                result.Add(l1[i1]);\n                i1 += 1;\n         \
    \       i2 += 1;\n            } else if (l1[i1] < l2[i2]) {\n                i1\
    \ += 1;\n            } else {\n                i2 += 1;\n            }\n     \
    \   }\n        return result;", "        l1.Sort();\n        l2.Sort();\n    \
    \    List<long> result = new List<long>();\n        int i1 = 0;\n        int i2\
    \ = 0;\n        while ((i1 < l1.Count) && (i2 < l2.Count)) {\n            if (l1[i1]\
    \ == l2[i2]) {\n                result.Add(l1[i1]);\n                i1++;\n \
    \               i2++;\n            } else if (l1[i1] < l2[i2]) {\n           \
    \     i1++;\n            } else {\n                i2++;\n            }\n    \
    \    }\n        return result;", "        var l = new List<long>();\n        var\
    \ s = new HashSet<long>();\n        foreach (var x in l1) {\n            s.Add(x);\n\
    \        }\n        foreach (var x in l2) {\n            if (s.Contains(x)) {\n\
    \                l.Add(x);\n            }\n        }\n        l.Sort();\n    \
    \    return l;", "        l1.Sort();\n        l2.Sort();\n        List<long> res\
    \ = new List<long>();\n        int i1 = 0;\n        int i2 = 0;\n        while\
    \ (i1 < l1.Count && i2 < l2.Count) {\n            if (l1[i1] == l2[i2]) {\n  \
    \              res.Add(l1[i1]);\n                i1++;\n                i2++;\n\
    \            } else if (l1[i1] < l2[i2]) {\n                i1++;\n          \
    \  } else {\n                i2++;\n            }\n        }\n        return res;",
  "        var l3 = new List<long>();\n        l1.Sort();\n        l2.Sort();\n  \
    \      int i = 0;\n        int j = 0;\n        while ((i < l1.Count) && (j < l2.Count))\
    \ {\n            if (l1[i] == l2[j]) {\n                l3.Add(l1[i]);\n     \
    \           i += 1;\n                j += 1;\n            } else if (l1[i] < l2[j])\
    \ {\n                i += 1;\n            } else {\n                j += 1;\n\
    \            }\n        }\n        return l3;", "        List<long> res = new\
    \ List<long>();\n        l1.Sort();\n        l2.Sort();\n        int i = 0;\n\
    \        int j = 0;\n        while (i < l1.Count && j < l2.Count) {\n        \
    \    if (l1[i] == l2[j]) {\n                res.Add(l1[i]);\n                i++;\n\
    \                j++;\n            } else if (l1[i] < l2[j]) {\n             \
    \   i++;\n            } else {\n                j++;\n            }\n        }\n\
    \        return res;", "        List<long> result = new List<long>();\n      \
    \  l1.Sort();\n        l2.Sort();\n        int i = 0;\n        int j = 0;\n  \
    \      while ((i < l1.Count) && (j < l2.Count)) {\n            if (l1[i] == l2[j])\
    \ {\n                result.Add(l1[i]);\n                i++;\n              \
    \  j++;\n            } else if (l1[i] < l2[j]) {\n                i++;\n     \
    \       } else {\n                j++;\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        int i1 = 0;\n\
    \        int i2 = 0;\n        while ((i1 < l1.Count) && (i2 < l2.Count)) {\n \
    \           if (l1[i1] == l2[i2]) {\n                result.Add(l1[i1]);\n   \
    \             i1 += 1;\n                i2 += 1;\n            } else if (l1[i1]\
    \ < l2[i2]) {\n                i1 += 1;\n            } else {\n              \
    \  i2 += 1;\n            }\n        }\n        return result;", "        var l\
    \ = new List<long>();\n        foreach (var e in l1) {\n            if (l2.Contains(e))\
    \ {\n                l.Add(e);\n            }\n        }\n        l.Sort();\n\
    \        return l;", "        var l = new List<long>();\n        l1.Sort();\n\
    \        l2.Sort();\n        int i1 = 0;\n        int i2 = 0;\n        while ((i1\
    \ < l1.Count) && (i2 < l2.Count)) {\n            if (l1[i1] == l2[i2]) {\n   \
    \             l.Add(l1[i1]);\n                i1++;\n                i2++;\n \
    \           } else if (l1[i1] < l2[i2]) {\n                i1++;\n           \
    \ } else {\n                i2++;\n            }\n        }\n        return l;",
  "        l1.Sort();\n        l2.Sort();\n        List<long> res = new List<long>();\n\
    \        int i1 = 0;\n        int i2 = 0;\n        while ((i1 < l1.Count) && (i2\
    \ < l2.Count)) {\n            if (l1[i1] == l2[i2]) {\n                res.Add(l1[i1]);\n\
    \                i1++;\n                i2++;\n            } else if (l1[i1] <\
    \ l2[i2]) {\n                i1++;\n            } else {\n                i2++;\n\
    \            }\n        }\n        return res;", "        var l = new List<long>();\n\
    \        var s = new HashSet<long>();\n        foreach (var x in l1) {\n     \
    \       s.Add(x);\n        }\n        foreach (var x in l2) {\n            if\
    \ (s.Contains(x)) {\n                l.Add(x);\n            }\n        }\n   \
    \     l.Sort();\n        return l;", "        l1.Sort();\n        l2.Sort();\n\
    \        List<long> result = new List<long>();\n        int i1 = 0;\n        int\
    \ i2 = 0;\n        while ((i1 < l1.Count) && (i2 < l2.Count)) {\n            if\
    \ (l1[i1] == l2[i2]) {\n                result.Add(l1[i1]);\n                i1\
    \ += 1;\n                i2 += 1;\n            } else if (l1[i1] < l2[i2]) {\n\
    \                i1 += 1;\n            } else {\n                i2 += 1;\n  \
    \          }\n        }\n        return result;", '        return l1.Intersect(l2).ToList();',
  "        l1.Sort();\n        l2.Sort();\n        var l = new List<long>();\n   \
    \     var i1 = 0;\n        var i2 = 0;\n        while ((i1 < l1.Count) && (i2\
    \ < l2.Count)) {\n            if (l1[i1] == l2[i2]) {\n                l.Add(l1[i1]);\n\
    \                i1 += 1;\n                i2 += 1;\n            } else if (l1[i1]\
    \ < l2[i2]) {\n                i1 += 1;\n            } else {\n              \
    \  i2 += 1;\n            }\n        }\n        return l;", "        l1.Sort();\n\
    \        l2.Sort();\n        List<long> res = new List<long>();\n        int i1\
    \ = 0;\n        int i2 = 0;\n        while ((i1 < l1.Count) && (i2 < l2.Count))\
    \ {\n            if (l1[i1] == l2[i2]) {\n                res.Add(l1[i1]);\n \
    \               i1 += 1;\n                i2 += 1;\n            } else if (l1[i1]\
    \ < l2[i2]) {\n                i1 += 1;\n            } else {\n              \
    \  i2 += 1;\n            }\n        }\n        return res;"]
stop_tokens:
- "\n    }\n"
