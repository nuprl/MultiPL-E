name: HumanEval_58_common
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Return sorted unique common elements for two lists.\n    //\
  \ >>> Common((new List<long>(new long[]{(long)1L, (long)4L, (long)3L, (long)34L,\
  \ (long)653L, (long)2L, (long)5L})), (new List<long>(new long[]{(long)5L, (long)7L,\
  \ (long)1L, (long)5L, (long)9L, (long)653L, (long)121L})))\n    // (new List<long>(new\
  \ long[]{(long)1L, (long)5L, (long)653L}))\n    // >>> Common((new List<long>(new\
  \ long[]{(long)5L, (long)3L, (long)2L, (long)8L})), (new List<long>(new long[]{(long)3L,\
  \ (long)2L})))\n    // (new List<long>(new long[]{(long)2L, (long)3L}))\n    public\
  \ static List<long> Common(List<long> l1, List<long> l2) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Common((new\
  \ List<long>(new long[]{(long)1L, (long)4L, (long)3L, (long)34L, (long)653L, (long)2L,\
  \ (long)5L})), (new List<long>(new long[]{(long)5L, (long)7L, (long)1L, (long)5L,\
  \ (long)9L, (long)653L, (long)121L}))).Equals((new List<long>(new long[]{(long)1L,\
  \ (long)5L, (long)653L}))));\n    Debug.Assert(Common((new List<long>(new long[]{(long)5L,\
  \ (long)3L, (long)2L, (long)8L})), (new List<long>(new long[]{(long)3L, (long)2L}))).Equals((new\
  \ List<long>(new long[]{(long)2L, (long)3L}))));\n    Debug.Assert(Common((new List<long>(new\
  \ long[]{(long)4L, (long)3L, (long)2L, (long)8L})), (new List<long>(new long[]{(long)3L,\
  \ (long)2L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)4L}))));\n\
  \    Debug.Assert(Common((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,\
  \ (long)8L})), (new List<long>())).Equals((new List<long>())));\n    }\n\n}\n"
completions: ["        l1.Sort();\n        l2.Sort();\n        List<long> res = new\
    \ List<long>();\n        int i1 = 0;\n        int i2 = 0;\n        while (i1 <\
    \ l1.Count && i2 < l2.Count) {\n            if (l1[i1] == l2[i2]) {\n        \
    \        res.Add(l1[i1]);\n                i1++;\n                i2++;\n    \
    \        } else if (l1[i1] < l2[i2]) {\n                i1++;\n            } else\
    \ {\n                i2++;\n            }\n        }\n        return res;", " \
    \       l1.Sort();\n        l2.Sort();\n        List<long> res = new List<long>();\n\
    \        int i1 = 0;\n        int i2 = 0;\n        while ((i1 < l1.Count) && (i2\
    \ < l2.Count)) {\n            if (l1[i1] == l2[i2]) {\n                res.Add(l1[i1]);\n\
    \                i1 += 1;\n                i2 += 1;\n            } else if (l1[i1]\
    \ < l2[i2]) {\n                i1 += 1;\n            } else {\n              \
    \  i2 += 1;\n            }\n        }\n        return res;", "        l1.Sort();\n\
    \        l2.Sort();\n        List<long> result = new List<long>();\n        int\
    \ i1 = 0;\n        int i2 = 0;\n        while ((i1 < l1.Count) && (i2 < l2.Count))\
    \ {\n            if (l1[i1] == l2[i2]) {\n                result.Add(l1[i1]);\n\
    \                i1 += 1;\n                i2 += 1;\n            } else if (l1[i1]\
    \ < l2[i2]) {\n                i1 += 1;\n            } else {\n              \
    \  i2 += 1;\n            }\n        }\n        return result;", "        l1.Sort();\n\
    \        l2.Sort();\n        List<long> result = new List<long>();\n        int\
    \ i1 = 0;\n        int i2 = 0;\n        while ((i1 < l1.Count) && (i2 < l2.Count))\
    \ {\n            if (l1[i1] == l2[i2]) {\n                result.Add(l1[i1]);\n\
    \                i1++;\n                i2++;\n            } else if (l1[i1] <\
    \ l2[i2]) {\n                i1++;\n            } else {\n                i2++;\n\
    \            }\n        }\n        return result;", "        l1.Sort();\n    \
    \    l2.Sort();\n        List<long> result = new List<long>();\n        int i1\
    \ = 0;\n        int i2 = 0;\n        while (i1 < l1.Count && i2 < l2.Count) {\n\
    \            if (l1[i1] == l2[i2]) {\n                result.Add(l1[i1]);\n  \
    \              i1++;\n                i2++;\n            } else if (l1[i1] < l2[i2])\
    \ {\n                i1++;\n            } else {\n                i2++;\n    \
    \        }\n        }\n        return result;", "        var l = new List<long>();\n\
    \        l1.Sort();\n        l2.Sort();\n        int i1 = 0;\n        int i2 =\
    \ 0;\n        while (i1 < l1.Count && i2 < l2.Count) {\n            if (l1[i1]\
    \ == l2[i2]) {\n                l.Add(l1[i1]);\n                i1 += 1;\n   \
    \             i2 += 1;\n            } else if (l1[i1] < l2[i2]) {\n          \
    \      i1 += 1;\n            } else {\n                i2 += 1;\n            }\n\
    \        }\n        return l;", "        l1.Sort();\n        l2.Sort();\n    \
    \    List<long> res = new List<long>();\n        int i1 = 0;\n        int i2 =\
    \ 0;\n        while ((i1 < l1.Count) && (i2 < l2.Count)) {\n            if (l1[i1]\
    \ == l2[i2]) {\n                res.Add(l1[i1]);\n                i1++;\n    \
    \            i2++;\n            } else if (l1[i1] < l2[i2]) {\n              \
    \  i1++;\n            } else {\n                i2++;\n            }\n       \
    \ }\n        return res;", "        l1.Sort();\n        l2.Sort();\n        List<long>\
    \ l3 = new List<long>();\n        int i = 0;\n        int j = 0;\n        while\
    \ ((i < l1.Count) && (j < l2.Count)) {\n            if (l1[i] == l2[j]) {\n  \
    \              l3.Add(l1[i]);\n                i++;\n                j++;\n  \
    \          } else if (l1[i] < l2[j]) {\n                i++;\n            } else\
    \ {\n                j++;\n            }\n        }\n        return l3;", "  \
    \      var s1 = new HashSet<long>(l1);\n        var s2 = new HashSet<long>(l2);\n\
    \        s1.IntersectWith(s2);\n        return new List<long>(s1);", "       \
    \ var l3 = new List<long>();\n        l1.Sort();\n        l2.Sort();\n       \
    \ var i = 0;\n        var j = 0;\n        while ((i < l1.Count) && (j < l2.Count))\
    \ {\n            if (l1[i] == l2[j]) {\n                l3.Add(l1[i]);\n     \
    \           i += 1;\n                j += 1;\n            } else if (l1[i] < l2[j])\
    \ {\n                i += 1;\n            } else {\n                j += 1;\n\
    \            }\n        }\n        return l3;", "        l1.Sort();\n        l2.Sort();\n\
    \        List<long> result = new List<long>();\n        int i1 = 0;\n        int\
    \ i2 = 0;\n        while (i1 < l1.Count && i2 < l2.Count) {\n            if (l1[i1]\
    \ == l2[i2]) {\n                result.Add(l1[i1]);\n                i1++;\n \
    \               i2++;\n            } else if (l1[i1] < l2[i2]) {\n           \
    \     i1++;\n            } else {\n                i2++;\n            }\n    \
    \    }\n        return result;", "        var l3 = new List<long>();\n       \
    \ foreach (var v in l1) {\n            if (l2.Contains(v)) {\n               \
    \ l3.Add(v);\n            }\n        }\n        l3.Sort();\n        return l3;",
  "        var l = new List<long>();\n        foreach (var i in l1) {\n          \
    \  if (l2.Contains(i)) {\n                l.Add(i);\n            }\n        }\n\
    \        l.Sort();\n        return l;", "        var l3 = new List<long>();\n\
    \        foreach (var i in l1) {\n            if (l2.Contains(i)) {\n        \
    \        l3.Add(i);\n            }\n        }\n        l3.Sort();\n        return\
    \ l3;", "        l1.Sort();\n        l2.Sort();\n        List<long> result = new\
    \ List<long>();\n        int i1 = 0;\n        int i2 = 0;\n        while ((i1\
    \ < l1.Count) && (i2 < l2.Count)) {\n            if (l1[i1] == l2[i2]) {\n   \
    \             result.Add(l1[i1]);\n                i1 += 1;\n                i2\
    \ += 1;\n            } else if (l1[i1] < l2[i2]) {\n                i1 += 1;\n\
    \            } else {\n                i2 += 1;\n            }\n        }\n  \
    \      return result;", "        l1.Sort();\n        l2.Sort();\n        var l\
    \ = new List<long>();\n        var i1 = 0;\n        var i2 = 0;\n        while\
    \ ((i1 < l1.Count) && (i2 < l2.Count)) {\n            if (l1[i1] == l2[i2]) {\n\
    \                l.Add(l1[i1]);\n                i1++;\n                i2++;\n\
    \            } else if (l1[i1] < l2[i2]) {\n                i1++;\n          \
    \  } else {\n                i2++;\n            }\n        }\n        return l;",
  "        l1.Sort();\n        l2.Sort();\n        List<long> res = new List<long>();\n\
    \        int i1 = 0;\n        int i2 = 0;\n        while ((i1 < l1.Count) && (i2\
    \ < l2.Count)) {\n            if (l1[i1] == l2[i2]) {\n                res.Add(l1[i1]);\n\
    \                i1 += 1;\n                i2 += 1;\n            } else if (l1[i1]\
    \ < l2[i2]) {\n                i1 += 1;\n            } else {\n              \
    \  i2 += 1;\n            }\n        }\n        return res;", "        var l3 =\
    \ new List<long>();\n        foreach (var i in l1) {\n            if (l2.Contains(i))\
    \ {\n                l3.Add(i);\n            }\n        }\n        l3.Sort();\n\
    \        return l3;", "        l1.Sort();\n        l2.Sort();\n        List<long>\
    \ res = new List<long>();\n        int i1 = 0;\n        int i2 = 0;\n        while\
    \ (i1 < l1.Count && i2 < l2.Count) {\n            if (l1[i1] == l2[i2]) {\n  \
    \              res.Add(l1[i1]);\n                i1++;\n                i2++;\n\
    \            } else if (l1[i1] < l2[i2]) {\n                i1++;\n          \
    \  } else {\n                i2++;\n            }\n        }\n        return res;",
  "        l1.Sort();\n        l2.Sort();\n        List<long> res = new List<long>();\n\
    \        int i1 = 0;\n        int i2 = 0;\n        while ((i1 < l1.Count) && (i2\
    \ < l2.Count)) {\n            if (l1[i1] == l2[i2]) {\n                res.Add(l1[i1]);\n\
    \                i1++;\n                i2++;\n            } else if (l1[i1] <\
    \ l2[i2]) {\n                i1++;\n            } else {\n                i2++;\n\
    \            }\n        }\n        return res;"]
stop_tokens:
- "\n    }\n"
