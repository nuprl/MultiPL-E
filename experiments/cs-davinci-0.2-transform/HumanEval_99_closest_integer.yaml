name: HumanEval_99_closest_integer
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Create a function that takes a value (string) representing a\
  \ number\n    // and returns the closest integer to it. If the number is equidistant\n\
  \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
  \ ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n\
  \    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given\
  \ number is equidistant\n    // from two integers, the one you should return is\
  \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
  14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n\
  \    public static long ClosestInteger(string value) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"\
  10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"\
  -15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n\
  \    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n"
completions: ["        // Your code goes here\n        return 0;", "        // Your\
    \ code goes here\n        return 0;", "        // Your code goes here\n      \
    \  return 0;", "        var number = double.Parse(value);\n        var floor =\
    \ Math.Floor(number);\n        var ceil = Math.Ceiling(number);\n        if (number\
    \ - floor < ceil - number) {\n            return (long)floor;\n        } else\
    \ {\n            return (long)ceil;\n        }", "        // Your code goes here\n\
    \        return 0;", "        // Your code goes here.\n        return 0;", " \
    \       // Your code goes here.\n        return 0;", "        // Your code goes\
    \ here.\n        // You may use the built-in round function.\n        // You may\
    \ use the built-in abs function.\n        // You may use the built-in floor function.\n\
    \        // You may use the built-in ceil function.\n        // You may use the\
    \ built-in int function.\n        // You may use the built-in float function.\n\
    \        // You may use the built-in str function.\n        // You may use the\
    \ built-in ord function.\n        // You may use the built-in chr function.\n\
    \        // You may use the built-in len function.\n        // You may use the\
    \ built-in range function.\n        // You may use the built-in min function.\n\
    \        // You may use the built-in max function.\n        // You may use the\
    \ built-in sum function.\n        // You may use the built-in sorted function.\n\
    \        // You may use the built-in reversed function.\n        // You may use\
    \ the built-in enumerate function.\n        // You may use the built-in abs function.\n\
    \        // You may use the built-in all function.\n        // You may use the\
    \ built-in any function.\n        // You may use the built-in bin function.\n\
    \        // You may use the built-in bool function.\n        // You may use the\
    \ built-in bytearray function.\n        // You may use the built-in bytes function.\n\
    \        // You may use the built-in callable function.\n        // You may use\
    \ the built-in chr function.\n        // You may use the built-in classmethod\
    \ function.\n        // You may use the built-in compile function.\n        //\
    \ You may use the built-in complex function.\n        // You may use the built-in\
    \ delattr function.\n        // You may use the built-in dict function.\n    \
    \    // You may use the built-in dir function.\n        // You may use the built-in\
    \ divmod function.\n        // You may use the built-in enumerate function.\n\
    \        // You may use the built-in eval function.\n        // You may use the\
    \ built-in exec function.\n        // You may use the built-in filter function.\n\
    \        // You may use the built-in float", "        // TODO: Implement this\
    \ function\n        return 0;", "        // Your code goes here.\n        return\
    \ 0;", "        // Your code goes here\n        return 0;", "        // Your code\
    \ goes here.\n        return 0;", "        double d = double.Parse(value);\n \
    \       long l = (long)d;\n        if (d - l >= 0.5) {\n            return l +\
    \ 1;\n        } else {\n            return l;\n        }", "        // Your code\
    \ goes here\n        return 0;", '        return (long)Math.Round(double.Parse(value));',
  "        // Your code here\n        return 0;", "        // TODO: Implement this\
    \ function\n        return 0;", "        // Your code goes here\n        return\
    \ 0;", "        // Your code goes here\n        return 0;", "        // Your code\
    \ here\n        return 0;", "        // Your code goes here.\n        return 0;",
  "        var number = decimal.Parse(value);\n        var floor = Math.Floor(number);\n\
    \        var ceil = Math.Ceiling(number);\n        if (number - floor == ceil\
    \ - number) {\n            return (long)Math.Sign(number) * ceil;\n        }\n\
    \        return (long)Math.Round(number);", "        // Your code goes here\n\
    \        return 0;", "        double d = double.Parse(value);\n        if (d <\
    \ 0) {\n            return (long)Math.Ceiling(d);\n        } else {\n        \
    \    return (long)Math.Floor(d);\n        }", "        // >>> ClosestInteger((\"\
    10\"))\n        // (10L)\n        // >>> ClosestInteger((\"15.3\"))\n        //\
    \ (15L)\n        // >>> ClosestInteger((\"15.5\"))\n        // (16L)\n       \
    \ // >>> ClosestInteger((\"-15.5\"))\n        // (-16L)\n        // >>> ClosestInteger((\"\
    -15.6\"))\n        // (-16L)\n        // >>> ClosestInteger((\"-15.4\"))\n   \
    \     // (-15L)\n        // >>> ClosestInteger((\"-15.0\"))\n        // (-15L)\n\
    \        // >>> ClosestInteger((\"-15.1\"))\n        // (-15L)\n        // >>>\
    \ ClosestInteger((\"-15.2\"))\n        // (-15L)\n        // >>> ClosestInteger((\"\
    -15.3\"))\n        // (-15L)\n        // >>> ClosestInteger((\"-15.4\"))\n   \
    \     // (-15L)\n        // >>> ClosestInteger((\"-15.5\"))\n        // (-16L)\n\
    \        // >>> ClosestInteger((\"-15.6\"))\n        // (-16L)\n        // >>>\
    \ ClosestInteger((\"-15.7\"))\n        // (-16L)\n        // >>> ClosestInteger((\"\
    -15.8\"))\n        // (-16L)\n        // >>> ClosestInteger((\"-15.9\"))\n   \
    \     // (-16L)\n        // >>> ClosestInteger((\"-15.0\"))\n        // (-15L)\n\
    \        // >>> ClosestInteger((\"-15.1\"))\n        // (-15L)\n        // >>>\
    \ ClosestInteger((\"-15.2\"))\n        // (-15L)\n        // >>> ClosestInteger((\"\
    -15.3\"))\n        // (-15L)\n        // >>> ClosestInteger((\"-15.4\"))\n   \
    \     // (-15L)\n        // >>> ClosestInteger((\"-15.5\"))\n        // (-16L)\n\
    \        // >>> ClosestInteger((\"-15.6\"))\n        // (-16L)\n        // >>>\
    \ ClosestInteger((\"-", "        // Your code goes here\n        return 0;", " \
    \       // Your code goes here.\n        return 0;", "        // Your code goes\
    \ here\n        return 0;", "        // Your code goes here\n        return 0;",
  "        // Your code goes here\n        return 0;", '        return 0;', "    \
    \    // Your code goes here.\n        // You may use the built-in round() function.\n\
    \        // You may use the built-in int() function.\n        // You may use the\
    \ built-in float() function.\n        // You may use the built-in str() function.\n\
    \        // You may use the built-in abs() function.\n        // You may use the\
    \ built-in len() function.\n        // You may use the built-in range() function.\n\
    \        // You may use the built-in enumerate() function.\n        // You may\
    \ use the built-in min() function.\n        // You may use the built-in max()\
    \ function.\n        // You may use the built-in sum() function.\n        // You\
    \ may use the built-in sorted() function.\n        // You may use the built-in\
    \ reversed() function.\n        // You may use the built-in zip() function.\n\
    \        // You may use the built-in reversed() function.\n        // You may\
    \ use the built-in list() function.\n        // You may use the built-in any()\
    \ function.\n        // You may use the built-in all() function.\n        // You\
    \ may use the built-in map() function.\n        // You may use the built-in filter()\
    \ function.\n        // You may use the built-in reduce() function.\n        //\
    \ You may use the built-in pow() function.\n        // You may use the built-in\
    \ round() function.\n        // You may use the built-in divmod() function.\n\
    \        // You may use the built-in bin() function.\n        // You may use the\
    \ built-in hex() function.\n        // You may use the built-in oct() function.\n\
    \        // You may use the built-in chr() function.\n        // You may use the\
    \ built-in ord() function.\n        // You may use the built-in pow() function.\n\
    \        // You may use the built-in round() function.\n        // You may use\
    \ the built-in divmod() function.\n        // You may use the built-in bin() function.\n\
    \        // You may use the built-in hex() function.\n        // You may use the\
    \ built-in oct() function.\n        // You may use the built-in", '        return
    0;', "        // Your code goes here\n        return 0;", "        // Your code\
    \ goes here.\n        return 0;", "        // Your code goes here.\n        return\
    \ 0;", "        // Your code goes here\n        return 0;", "        // >>> ClosestInteger((\"\
    10\"))\n        // (10L)\n        // >>> ClosestInteger((\"15.3\"))\n        //\
    \ (15L)\n        // >>> ClosestInteger((\"-15.3\"))\n        // (-15L)\n     \
    \   // >>> ClosestInteger((\"14.5\"))\n        // (15L)\n        // >>> ClosestInteger((\"\
    -14.5\"))\n        // (-15L)\n        // >>> ClosestInteger((\"14.6\"))\n    \
    \    // (15L)\n        // >>> ClosestInteger((\"-14.6\"))\n        // (-15L)\n\
    \        // >>> ClosestInteger((\"14.4\"))\n        // (14L)\n        // >>> ClosestInteger((\"\
    -14.4\"))\n        // (-14L)\n        // >>> ClosestInteger((\"14.0\"))\n    \
    \    // (14L)\n        // >>> ClosestInteger((\"-14.0\"))\n        // (-14L)\n\
    \        // >>> ClosestInteger((\"14.1\"))\n        // (14L)\n        // >>> ClosestInteger((\"\
    -14.1\"))\n        // (-14L)\n        // >>> ClosestInteger((\"14.2\"))\n    \
    \    // (14L)\n        // >>> ClosestInteger((\"-14.2\"))\n        // (-14L)\n\
    \        // >>> ClosestInteger((\"14.3\"))\n        // (14L)\n        // >>> ClosestInteger((\"\
    -14.3\"))\n        // (-14L)\n        // >>> ClosestInteger((\"14.4\"))\n    \
    \    // (14L)\n        // >>> ClosestInteger((\"-14.4\"))\n        // (-14L)\n\
    \        // >>> ClosestInteger((\"14.5\"))\n        // (15L)\n        // >>> ClosestInteger((\"\
    -14.5\"))\n        // (-15L)\n        // >>> ClosestInteger((\"14.6\"))\n    \
    \    // (15L)\n        // >>> ClosestInteger((\"-14.6\"))\n        // (-15L)\n\
    \        // >>> ClosestInteger((\"14.7\"))\n        // (15L", '        return
    (long)Math.Round(double.Parse(value));', "        // Your code goes here.\n  \
    \      return 0;", "        // Your code goes here\n        return 0;", "    \
    \    // Your code goes here.\n        return 0;", "        double d = double.Parse(value);\n\
    \        return (long)Math.Round(d);", "        // TODO: Implement this function\n\
    \        return 0;", "        // Your code goes here\n        return 0;", "  \
    \      // Your code here\n        return 0;", "        // Your code goes here\n\
    \        return 0;", "        // TODO: Implement this function\n        return\
    \ 0;", "        // Your code goes here.\n        return 0;", "        // TODO:\
    \ Implement this function\n        return 0;", "        // Your code here\n  \
    \      return 0;", "        // Your code goes here\n        return 0;", "    \
    \    // Your code goes here\n        return 0;", "        // TODO: Implement this\
    \ function\n        return 0;", "        // Your code goes here\n        return\
    \ 0;", "        // Your code goes here\n        return 0;", '        return 0;',
  "        // Your code goes here\n        return 0;", "        // TODO: Implement\
    \ this function\n        // Hint: You can use the following functions:\n     \
    \   // - Convert.ToDouble(value)\n        // - Math.Round(value)\n        // -\
    \ Math.Floor(value)\n        // - Math.Ceiling(value)\n        // - Math.Abs(value)\n\
    \        // - Math.Sign(value)\n        // - Math.Truncate(value)\n        //\
    \ - Math.Round(value, digits)\n        // - Math.Floor(value * Math.Pow(10, digits))\
    \ / Math.Pow(10, digits)\n        // - Math.Ceiling(value * Math.Pow(10, digits))\
    \ / Math.Pow(10, digits)\n        // - Math.Truncate(value * Math.Pow(10, digits))\
    \ / Math.Pow(10, digits)\n        // - Math.Round(value * Math.Pow(10, digits))\
    \ / Math.Pow(10, digits)\n        // - Math.Floor(value * Math.Pow(10, digits\
    \ + 1)) / Math.Pow(10, digits)\n        // - Math.Ceiling(value * Math.Pow(10,\
    \ digits + 1)) / Math.Pow(10, digits)\n        // - Math.Truncate(value * Math.Pow(10,\
    \ digits + 1)) / Math.Pow(10, digits)\n        // - Math.Round(value * Math.Pow(10,\
    \ digits + 1)) / Math.Pow(10, digits)\n        // - Math.Floor(value * Math.Pow(10,\
    \ digits + 2)) / Math.Pow(10, digits)\n        // - Math.Ceiling(value * Math.Pow(10,\
    \ digits + 2)) / Math.Pow(10, digits)\n        // - Math.Truncate(value * Math.Pow(10,\
    \ digits + 2)) / Math.Pow(10, digits)\n        // - Math.Round(value * Math.Pow(10,\
    \ digits + 2)) / Math.Pow(10, digits)\n        // - Math.Floor(value * Math.Pow(10,\
    \ digits + 3)) /", "        // Your code goes here\n        double d = double.Parse(value);\n\
    \        if (d < 0) {\n            return (long)Math.Ceiling(d);\n        } else\
    \ {\n            return (long)Math.Floor(d);\n        }", "        // TODO: Implement\
    \ this function\n        return 0;", "        // Your code goes here\n       \
    \ return 0;", "        // Your code goes here\n        return 0;", "        //\
    \ Your code goes here.\n        return 0;", "        // TODO: Implement this function\n\
    \        return 0;", "        // TODO: Implement me\n        return 0;", "   \
    \     // TODO: Implement this function\n        return 0;", "        // Your code\
    \ goes here\n        double d = double.Parse(value);\n        long l = (long)d;\n\
    \        if (d - l > 0.5) {\n            return l + 1;\n        } else {\n   \
    \         return l;\n        }", "        // Your code goes here\n        return\
    \ 0;", "        // Write your code here\n        return 0;", "        // Your\
    \ code goes here\n        return 0;", "        double d = double.Parse(value);\n\
    \        return (long)Math.Round(d);", "        // Your code goes here.\n    \
    \    return 0;", "        // Your code goes here\n        return 0;", "      \
    \  // Your code goes here\n        double d = double.Parse(value);\n        if\
    \ (d < 0) {\n            return (long)Math.Ceiling(d);\n        } else {\n   \
    \         return (long)Math.Floor(d);\n        }", "        // Your code goes\
    \ here.\n        // You may use the built-in round() function.\n        // You\
    \ may not use any other built-in functions.\n        // You may not use any external\
    \ libraries.\n        // You may not use any other functions.\n        // You\
    \ may not use any other data structures.\n        // You may not use any other\
    \ variables.\n        // You may not use any other types.\n        // You may\
    \ not use any other operators.\n        // You may not use any other control structures.\n\
    \        // You may not use any other statements.\n        // You may not use\
    \ any other expressions.\n        // You may not use any other literals.\n   \
    \     // You may not use any other identifiers.\n        // You may not use any\
    \ other names.\n        // You may not use any other characters.\n        // You\
    \ may not use any other symbols.\n        // You may not use any other whitespace.\n\
    \        // You may not use any other formatting.\n        // You may not use\
    \ any other comments.\n        // You may not use any other code.\n        //\
    \ You may not use any other code.\n        // You may not use any other code.\n\
    \        // You may not use any other code.\n        // You may not use any other\
    \ code.\n        // You may not use any other code.\n        // You may not use\
    \ any other code.\n        // You may not use any other code.\n        // You\
    \ may not use any other code.\n        // You may not use any other code.\n  \
    \      // You may not use any other code.\n        // You may not use any other\
    \ code.\n        // You may not use any other code.\n        // You may not use\
    \ any other code.\n        // You may not use any other code.\n        // You\
    \ may not use any other code.\n        // You may not use any other code.\n  \
    \      // You may not use any other code.\n        // You may not use any other\
    \ code.\n        // You may not use any other code.\n        // You may not use\
    \ any other code.\n        // You may not use any other code.\n        // You\
    \ may not use any other code.\n        // You may not use any other code.\n  \
    \      // You may not use any other code.\n        // You may not use any other\
    \ code", "        // Your code goes here\n        return 0;", "        // Your\
    \ code goes here\n        return 0;", "        // Your code goes here\n      \
    \  return 0;", '        return 0;', "        // Your code goes here.\n       \
    \ return 0;", "        // Your code goes here\n        return 0;", "        //\
    \ TODO: Implement this function\n        return 0;", "        // Your code goes\
    \ here.\n        // You may use the following functions:\n        //  - Math.Round(value)\n\
    \        //  - Math.Floor(value)\n        //  - Math.Ceiling(value)\n        //\
    \  - Convert.ToInt64(value)\n        //  - Convert.ToDouble(value)\n        //\
    \  - Convert.ToDecimal(value)\n        //  - Convert.ToSingle(value)\n       \
    \ //  - Convert.ToInt32(value)\n        //  - Convert.ToInt16(value)\n       \
    \ //  - Convert.ToSByte(value)\n        //  - Convert.ToByte(value)\n        //\
    \  - Convert.ToUInt64(value)\n        //  - Convert.ToUInt32(value)\n        //\
    \  - Convert.ToUInt16(value)\n        //  - Convert.ToChar(value)\n        //\
    \  - Convert.ToBoolean(value)\n        //  - Convert.ToString(value)\n       \
    \ //  - Convert.ToDateTime(value)\n        //  - Convert.ToType(value)\n     \
    \   //  - Convert.ToBase64String(value)\n        //  - Convert.ToBase64CharArray(value)\n\
    \        //  - Convert.ToBase64ByteArray(value)\n        //  - Convert.FromBase64String(value)\n\
    \        //  - Convert.FromBase64CharArray(value)\n        //  - Convert.FromBase64ByteArray(value)\n\
    \        //  - Convert.ToCharArray(value)\n        //  - Convert.ToByteArray(value)\n\
    \        //  - Convert.ToInt64Array(value)\n        //  - Convert.ToInt32Array(value)\n\
    \        //  - Convert.ToInt16Array(value)\n        //  - Convert.ToSByteArray(value)\n\
    \        //  - Convert.ToUInt64Array(value)\n        //  - Convert.ToUInt32Array(value)\n\
    \        //  - Convert.ToUInt16Array(value)\n        //  - Convert.ToDoubleArray(value)\n\
    \        //  - Convert.ToSingleArray(value)\n        //  - Convert.ToDecimalArray(",
  "        // Your code goes here\n        return 0;", "        // Your code goes\
    \ here.\n        return 0;", "        // Your code goes here\n        return 0;",
  "        // Your code goes here.\n        return 0;", "        // TODO: Implement\
    \ this function\n        return 0;", "        // Your code goes here\n       \
    \ return 0;", "        // Your code goes here\n        return 0;", "        //\
    \ TODO: Implement this function\n        return 0;", "        // TODO: Implement\
    \ this function\n        // Hint: You can use the BigInteger class to convert\
    \ the string to a\n        // number and then round it.\n        // Hint: You\
    \ can use the BigInteger.CompareTo method to compare two\n        // numbers.\n\
    \        // Hint: You can use the BigInteger.Parse method to convert a string\n\
    \        // to a number.\n        // Hint: You can use the BigInteger.ToString\
    \ method to convert a\n        // number to a string.\n        // Hint: You can\
    \ use the BigInteger.Abs method to get the absolute\n        // value of a number.\n\
    \        // Hint: You can use the BigInteger.Ceiling method to round a number\n\
    \        // up.\n        // Hint: You can use the BigInteger.Floor method to round\
    \ a number\n        // down.\n        // Hint: You can use the BigInteger.Remainder\
    \ method to get the\n        // remainder of a division.\n        // Hint: You\
    \ can use the BigInteger.Sign method to get the sign of a\n        // number.\n\
    \        // Hint: You can use the BigInteger.Zero constant to get the number\n\
    \        // zero.\n        // Hint: You can use the BigInteger.One constant to\
    \ get the number\n        // one.\n        // Hint: You can use the BigInteger.MinusOne\
    \ constant to get the\n        // number minus one.\n        throw new NotImplementedException();",
  "        // >>> ClosestInteger((\"10\"))\n        // (10L)\n        // >>> ClosestInteger((\"\
    15.3\"))\n        // (15L)\n        // >>> ClosestInteger((\"15.6\"))\n      \
    \  // (16L)\n        // >>> ClosestInteger((\"-15.6\"))\n        // (-16L)\n \
    \       // >>> ClosestInteger((\"-15.3\"))\n        // (-15L)\n        // >>>\
    \ ClosestInteger((\"-15.1\"))\n        // (-15L)\n        // >>> ClosestInteger((\"\
    -15.0\"))\n        // (-15L)\n        // >>> ClosestInteger((\"-15.0\"))\n   \
    \     // (-15L)\n        // >>> ClosestInteger((\"-15.1\"))\n        // (-15L)\n\
    \        // >>> ClosestInteger((\"-15.3\"))\n        // (-15L)\n        // >>>\
    \ ClosestInteger((\"-15.6\"))\n        // (-16L)\n        // >>> ClosestInteger((\"\
    15.6\"))\n        // (16L)\n        // >>> ClosestInteger((\"15.3\"))\n      \
    \  // (15L)\n        // >>> ClosestInteger((\"15.0\"))\n        // (15L)\n   \
    \     // >>> ClosestInteger((\"15.1\"))\n        // (15L)\n        // >>> ClosestInteger((\"\
    15.0\"))\n        // (15L)\n        // >>> ClosestInteger((\"15.1\"))\n      \
    \  // (15L)\n        // >>> ClosestInteger((\"15.3\"))\n        // (15L)\n   \
    \     // >>> ClosestInteger((\"15.6\"))\n        // (16L)\n        // >>> ClosestInteger((\"\
    -15.6\"))\n        // (-16L)\n        // >>> ClosestInteger((\"-15.3\"))\n   \
    \     // (-15L)\n        // >>> ClosestInteger((\"-15.1\"))\n        // (-15L)\n\
    \        // >>> ClosestInteger((\"-15.0\"))\n        // (-15L)\n        // >>>\
    \ ClosestInteger((\"-15.0\"))\n        // (-", "        // Your code goes here.\n\
    \        return 0;", "        // Your code goes here.\n        return 0;", " \
    \       // TODO: Implement this function\n        return 0;", "        // Your\
    \ code goes here\n        return 0;", "        // Your code goes here\n      \
    \  return 0;", '        return 0;', "        // Your code goes here.\n       \
    \ return 0;", "        // Your code goes here\n        return 0;", "        //\
    \ >>> ClosestInteger((\"10\"))\n        // (10L)\n        // >>> ClosestInteger((\"\
    15.3\"))\n        // (15L)\n        // >>> ClosestInteger((\"14.5\"))\n      \
    \  // (15L)\n        // >>> ClosestInteger((\"-14.5\"))\n        // (-15L)\n \
    \       // >>> ClosestInteger((\"-14.6\"))\n        // (-15L)\n        // >>>\
    \ ClosestInteger((\"-14.4\"))\n        // (-14L)\n        // >>> ClosestInteger((\"\
    -14.0\"))\n        // (-14L)\n        // >>> ClosestInteger((\"-14.1\"))\n   \
    \     // (-14L)\n        // >>> ClosestInteger((\"-14.2\"))\n        // (-14L)\n\
    \        // >>> ClosestInteger((\"-14.3\"))\n        // (-14L)\n        // >>>\
    \ ClosestInteger((\"-14.4\"))\n        // (-14L)\n        // >>> ClosestInteger((\"\
    -14.5\"))\n        // (-15L)\n        // >>> ClosestInteger((\"-14.6\"))\n   \
    \     // (-15L)\n        // >>> ClosestInteger((\"-14.7\"))\n        // (-15L)\n\
    \        // >>> ClosestInteger((\"-14.8\"))\n        // (-15L)\n        // >>>\
    \ ClosestInteger((\"-14.9\"))\n        // (-15L)\n        // >>> ClosestInteger((\"\
    -14.0\"))\n        // (-14L)\n        // >>> ClosestInteger((\"-14.1\"))\n   \
    \     // (-14L)\n        // >>> ClosestInteger((\"-14.2\"))\n        // (-14L)\n\
    \        // >>> ClosestInteger((\"-14.3\"))\n        // (-14L)\n        // >>>\
    \ ClosestInteger((\"-14.4\"))\n        // (-14L)\n        // >>> ClosestInteger((\"\
    -14.5\"))\n        // (-15L)\n        // >>> ClosestInteger((\"-14.6\"))\n   \
    \     // (-15L)\n        // >>> ClosestInteger((\"-", "        // Your code goes\
    \ here.\n        return 0;", '        return (long)Math.Round(double.Parse(value));',
  "        var number = double.Parse(value);\n        var floor = Math.Floor(number);\n\
    \        var ceil = Math.Ceiling(number);\n        if (number - floor < ceil -\
    \ number) {\n            return (long)floor;\n        } else {\n            return\
    \ (long)ceil;\n        }", "        // Your code goes here\n        return 0;",
  "        double d = double.Parse(value);\n        long l = (long)d;\n        if\
    \ (d - l >= 0.5) {\n            return l + 1;\n        } else {\n            return\
    \ l;\n        }", "        // Your code goes here.\n        // You may use the\
    \ built-in function Math.Round(value)\n        // to round a value to the nearest\
    \ integer.\n        // You may use the built-in function Math.Abs(value)\n   \
    \     // to get the absolute value of a number.\n        double d = double.Parse(value);\n\
    \        double d1 = Math.Round(d);\n        double d2 = d1 - 1;\n        double\
    \ d3 = d1 + 1;\n        double d1d = Math.Abs(d1 - d);\n        double d2d = Math.Abs(d2\
    \ - d);\n        double d3d = Math.Abs(d3 - d);\n        if (d1d <= d2d && d1d\
    \ <= d3d) {\n            return (long)d1;\n        } else if (d2d <= d1d && d2d\
    \ <= d3d) {\n            return (long)d2;\n        } else {\n            return\
    \ (long)d3;\n        }", "        // Your code goes here\n        return 0;",
  '        return 0;', "        // Your code goes here\n        return 0;", "    \
    \    // Your code goes here\n        return 0;", "        // Your code goes here.\n\
    \        return 0;", "        // Your code goes here\n        return 0;", '        return
    0;', "        // Your code goes here\n        return 0;", "        // Your code\
    \ goes here\n        return 0;", "        // TODO: Implement this function\n \
    \       return 0;", "        // Your code goes here\n        return 0;", "   \
    \     // TODO: Implement this function\n        return 0;", "        // Your code\
    \ goes here\n        return 0;", "        // Your code goes here\n        return\
    \ 0;", "        // Your code goes here.\n        return 0;", "        // Your\
    \ code goes here.\n        return 0;", "        // Convert the string to a decimal\n\
    \        decimal d = decimal.Parse(value);\n        // Round the decimal to the\
    \ nearest integer\n        decimal rounded = Math.Round(d);\n        // Convert\
    \ the rounded decimal to a long\n        long l = (long)rounded;\n        // Return\
    \ the long\n        return l;", "        // TODO: Implement this function\n  \
    \      return 0;", "        // Your code goes here\n        return 0;", "    \
    \    double d = double.Parse(value);\n        long l = (long)d;\n        if (d\
    \ - l >= 0.5) {\n            return l + 1;\n        } else {\n            return\
    \ l;\n        }", "        // TODO: Implement this function\n        return 0;",
  "        // Your code goes here\n        return 0;", "        // Your code goes\
    \ here\n        return 0;", "        // TODO: Implement this function.\n     \
    \   return 0;", "        var number = double.Parse(value);\n        return (long)Math.Round(number,\
    \ MidpointRounding.AwayFromZero);", '        return 0;', '        return (long)Math.Round(double.Parse(value));',
  "        // Your code goes here\n        return 0;", '        return 0;', "    \
    \    // Your code goes here\n        return 0;", "        double d = double.Parse(value);\n\
    \        return (long)Math.Round(d);", "        // TODO: Implement this function\n\
    \        // Hint: You may want to use the BigInteger class.\n        // Hint:\
    \ You may want to use the BigInteger.Parse method.\n        // Hint: You may want\
    \ to use the BigInteger.ToString method.\n        // Hint: You may want to use\
    \ the BigInteger.CompareTo method.\n        // Hint: You may want to use the BigInteger.Abs\
    \ method.\n        // Hint: You may want to use the BigInteger.Add method.\n \
    \       // Hint: You may want to use the BigInteger.Subtract method.\n       \
    \ // Hint: You may want to use the BigInteger.Divide method.\n        // Hint:\
    \ You may want to use the BigInteger.Remainder method.\n        // Hint: You may\
    \ want to use the BigInteger.Negate method.\n        // Hint: You may want to\
    \ use the BigInteger.One method.\n        // Hint: You may want to use the BigInteger.Zero\
    \ method.\n        // Hint: You may want to use the BigInteger.Sign method.\n\
    \        // Hint: You may want to use the BigInteger.IsZero method.\n        //\
    \ Hint: You may want to use the BigInteger.Equals method.\n        // Hint: You\
    \ may want to use the BigInteger.IsEven method.\n        // Hint: You may want\
    \ to use the BigInteger.IsOne method.\n        // Hint: You may want to use the\
    \ BigInteger.IsPowerOfTwo method.\n        // Hint: You may want to use the BigInteger.IsProbablePrime\
    \ method.\n        // Hint: You may want to use the BigInteger.Max method.\n \
    \       // Hint: You may want to use the BigInteger.Min method.\n        // Hint:\
    \ You may want to use the BigInteger.ModPow method.\n        // Hint: You may\
    \ want to use the BigInteger.ModInverse method.\n        // Hint: You may want\
    \ to use the BigInteger.Pow method.\n        // Hint: You may want to use the\
    \ BigInteger.GreatestCommonDivisor method.\n        // Hint: You may want to use\
    \ the BigInteger.LowestSetBit method.\n        // Hint", "        // Your code\
    \ goes here\n        return 0;", "        // TODO: Implement this function\n \
    \       return 0;", "        double d = double.Parse(value);\n        return (long)Math.Round(d);",
  "        // Convert the string to a decimal number\n        decimal number = decimal.Parse(value);\n\
    \        // Round the number to the nearest integer\n        decimal rounded =\
    \ Math.Round(number);\n        // Convert the rounded number to a long\n     \
    \   long result = (long)rounded;\n        // Return the result\n        return\
    \ result;", '        return 0;', '        return 0;', "        // Your code goes\
    \ here.\n        return 0;", "        // Your code goes here.\n        return\
    \ 0;", "        // Your code goes here\n        return 0;", "        double d\
    \ = double.Parse(value);\n        return (long)Math.Round(d);", "        // Your\
    \ code goes here.\n        return 0;", "        // Your code goes here\n     \
    \   return 0;", "        // Your code here\n        return 0;", "        // Your\
    \ code goes here.\n        return 0;", "        // Your code goes here\n     \
    \   return 0;", "        // TODO: Implement this function\n        return 0;",
  "        // Your code goes here\n        return 0;", "        // TODO: Implement\
    \ this function\n        return 0;", "        // Your code goes here\n       \
    \ return 0;", "        // Your code goes here\n        return 0;", "        //\
    \ Your code goes here\n        return 0;", "        // Your code goes here\n \
    \       return 0;", "        // Your code goes here.\n        return 0;", "  \
    \      // Write your code here\n        return 0;", "        // Your code goes\
    \ here\n        return 0;", "        // Your code goes here\n        return 0;",
  '        return 0;', "        // Your code goes here\n        return 0;", "    \
    \    // Your code goes here\n        return 0;", "        // TODO: Implement ClosestInteger\n\
    \        return 0;", "        // Your code goes here.\n        return 0;", " \
    \       // Your code goes here\n        return 0;", "        // Your code goes\
    \ here.\n        return 0;", "        // Your code goes here.\n        return\
    \ 0;", "        // Your code goes here.\n        return 0;", "        // Your\
    \ code goes here\n        return 0;", "        // TODO: Implement this function\n\
    \        return 0;", '        return 0;', "        // TODO: Implement this function\n\
    \        return 0;", "        // Your code goes here\n        double d = double.Parse(value);\n\
    \        long l = (long)d;\n        if (d - l < 0.5) {\n            return l;\n\
    \        } else {\n            return l + 1;\n        }", "        // Your code\
    \ goes here.\n        return 0;", "        // Your code goes here.\n        return\
    \ 0;", "        // Your code goes here\n        return 0;", '        return 0;',
  "        // Your code goes here.\n        return 0;", "        // TODO: Implement\
    \ this function\n        return 0;", "        // Your code goes here.\n      \
    \  return 0;", "        // Your code goes here\n        return 0;", "        //\
    \ Your code goes here\n        return 0;", "        // Your code goes here.\n\
    \        return 0;", "        // Your code goes here\n        return 0;", "  \
    \      // Your code goes here\n        return 0;", "        // Your code goes\
    \ here.\n        return 0;", "        // Your code goes here.\n        return\
    \ 0;", "        // Your code goes here.\n        return 0;", "        // TODO:\
    \ Implement ClosestInteger\n        return 0;", "        // TODO: Implement this\
    \ function\n        return 0;", "        // Your code goes here\n        double\
    \ d = Convert.ToDouble(value);\n        if (d < 0) {\n            return (long)Math.Ceiling(d);\n\
    \        } else {\n            return (long)Math.Floor(d);\n        }", "    \
    \    // TODO: Implement this function\n        return 0;"]
stop_tokens:
- "\n    }\n"
