name: HumanEval_99_closest_integer
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Create a function that takes a value (string) representing a\
  \ number\n    // and returns the closest integer to it. If the number is equidistant\n\
  \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
  \ ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n\
  \    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given\
  \ number is equidistant\n    // from two integers, the one you should return is\
  \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
  14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n\
  \    public static long ClosestInteger(string value) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"\
  10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"\
  -15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n\
  \    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n"
completions: ["        // Your code goes here\n        return 0;", "        // Your\
    \ code goes here\n        return 0;", "        // Your code goes here\n      \
    \  return 0;", "        var number = double.Parse(value);\n        var floor =\
    \ Math.Floor(number);\n        var ceil = Math.Ceiling(number);\n        if (number\
    \ - floor < ceil - number) {\n            return (long)floor;\n        } else\
    \ {\n            return (long)ceil;\n        }", "        // Your code goes here\n\
    \        return 0;", "        // Your code goes here.\n        return 0;", " \
    \       // Your code goes here.\n        return 0;", "        // Your code goes\
    \ here.\n        // You may use the built-in round function.\n        // You may\
    \ use the built-in abs function.\n        // You may use the built-in floor function.\n\
    \        // You may use the built-in ceil function.\n        // You may use the\
    \ built-in int function.\n        // You may use the built-in float function.\n\
    \        // You may use the built-in str function.\n        // You may use the\
    \ built-in ord function.\n        // You may use the built-in chr function.\n\
    \        // You may use the built-in len function.\n        // You may use the\
    \ built-in range function.\n        // You may use the built-in min function.\n\
    \        // You may use the built-in max function.\n        // You may use the\
    \ built-in sum function.\n        // You may use the built-in sorted function.\n\
    \        // You may use the built-in reversed function.\n        // You may use\
    \ the built-in enumerate function.\n        // You may use the built-in abs function.\n\
    \        // You may use the built-in all function.\n        // You may use the\
    \ built-in any function.\n        // You may use the built-in bin function.\n\
    \        // You may use the built-in bool function.\n        // You may use the\
    \ built-in bytearray function.\n        // You may use the built-in bytes function.\n\
    \        // You may use the built-in callable function.\n        // You may use\
    \ the built-in chr function.\n        // You may use the built-in classmethod\
    \ function.\n        // You may use the built-in compile function.\n        //\
    \ You may use the built-in complex function.\n        // You may use the built-in\
    \ delattr function.\n        // You may use the built-in dict function.\n    \
    \    // You may use the built-in dir function.\n        // You may use the built-in\
    \ divmod function.\n        // You may use the built-in enumerate function.\n\
    \        // You may use the built-in eval function.\n        // You may use the\
    \ built-in exec function.\n        // You may use the built-in filter function.\n\
    \        // You may use the built-in float", "        // TODO: Implement this\
    \ function\n        return 0;", "        // Your code goes here.\n        return\
    \ 0;", "        // Your code goes here\n        return 0;", "        // Your code\
    \ goes here.\n        return 0;", "        double d = double.Parse(value);\n \
    \       long l = (long)d;\n        if (d - l >= 0.5) {\n            return l +\
    \ 1;\n        } else {\n            return l;\n        }", "        // Your code\
    \ goes here\n        return 0;", '        return (long)Math.Round(double.Parse(value));',
  "        // Your code here\n        return 0;", "        // TODO: Implement this\
    \ function\n        return 0;", "        // Your code goes here\n        return\
    \ 0;", "        // Your code goes here\n        return 0;", "        // Your code\
    \ here\n        return 0;"]
stop_tokens:
- "\n    }\n"
