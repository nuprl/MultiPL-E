name: HumanEval_47_median
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
  \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n \
  \   // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
  \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public static\
  \ float Median(List<long> l) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
  \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
  \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L, (long)4L,\
  \ (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
  \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
  \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
  \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
  \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
completions: ["        l.Sort();\n        int mid = l.Count / 2;\n        if (l.Count\
    \ % 2 == 1) {\n            return (float)l[mid];\n        }\n        else {\n\
    \            return (float)((l[mid - 1] + l[mid]) / 2.0);\n        }", "     \
    \   l.Sort();\n        if ((l.Count % 2L) == 0L) {\n            return ((float)((l[(l.Count\
    \ / 2L) - 1L] + l[l.Count / 2L])) / 2f);\n        }\n        else {\n        \
    \    return (float)l[l.Count / 2L];\n        }", "        int n = l.Count;\n \
    \       if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n\
    \            return l[0];\n        }\n        if (n % 2 == 0) {\n            return\
    \ (l[n / 2 - 1] + l[n / 2]) / 2.0f;\n        }\n        return l[n / 2];", " \
    \       l.Sort();\n        int n = l.Count;\n        if (n % 2 == 1) {\n     \
    \       return (float)l[n / 2];\n        }\n        else {\n            return\
    \ (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n        }", "        l.Sort();\n    \
    \    int n = l.Count;\n        if (n % 2 == 1) {\n            return (float)l[n\
    \ / 2];\n        }\n        else {\n            return (float)(l[n / 2 - 1] +\
    \ l[n / 2]) / 2;\n        }", "        l.Sort();\n        int n = l.Count;\n \
    \       if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n  \
    \      else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n    \
    \    }", "        l.Sort();\n        if (l.Count % 2 == 1) {\n            return\
    \ (float)l[l.Count / 2];\n        } else {\n            return (float)(l[l.Count\
    \ / 2 - 1] + l[l.Count / 2]) / 2;\n        }", "        l.Sort();\n        int\
    \ n = l.Count;\n        if (n % 2 == 1) {\n            return (float)l[n / 2];\n\
    \        }\n        else {\n            return (float)((l[n / 2 - 1] + l[n / 2])\
    \ / 2.0);\n        }", "        int n = l.Count;\n        if (n == 0) {\n    \
    \        return 0;\n        }\n        l.Sort();\n        if (n % 2 == 1) {\n\
    \            return l[n / 2];\n        }\n        else {\n            return (l[n\
    \ / 2 - 1] + l[n / 2]) / 2.0f;\n        }", "        l.Sort();\n        if (l.Count\
    \ % 2 == 1) {\n            return (float)l[l.Count / 2];\n        } else {\n \
    \           return (float)(l[l.Count / 2 - 1] + l[l.Count / 2]) / 2;\n       \
    \ }", "        l.Sort();\n        int n = l.Count;\n        if (n % 2 == 1) {\n\
    \            return (float)l[n / 2];\n        }\n        else {\n            return\
    \ (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n        }", "        if (l.Count == 0)\
    \ {\n            return 0;\n        }\n        l.Sort();\n        if (l.Count\
    \ % 2 == 1) {\n            return l[l.Count / 2];\n        }\n        else {\n\
    \            return (l[l.Count / 2 - 1] + l[l.Count / 2]) / 2.0f;\n        }",
  "        int n = l.Count;\n        if (n == 0) {\n            return 0;\n      \
    \  }\n        l.Sort();\n        if (n % 2 == 1) {\n            return l[n / 2];\n\
    \        }\n        else {\n            return (l[n / 2 - 1] + l[n / 2]) / 2.0f;\n\
    \        }", "        l.Sort();\n        int n = l.Count;\n        if (n % 2 ==\
    \ 1) {\n            return (float)l[n / 2];\n        }\n        else {\n     \
    \       return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n        }", "        l.Sort();\n\
    \        int mid = l.Count / 2;\n        if (l.Count % 2 == 1) {\n           \
    \ return (float)l[mid];\n        }\n        else {\n            return (float)(l[mid\
    \ - 1] + l[mid]) / 2;\n        }", "        int n = l.Count;\n        if (n ==\
    \ 0) {\n            return 0;\n        }\n        l.Sort();\n        if (n % 2\
    \ == 1) {\n            return l[n / 2];\n        }\n        else {\n         \
    \   return (l[n / 2 - 1] + l[n / 2]) / 2.0f;\n        }", "        int n = l.Count;\n\
    \        if (n == 0) {\n            return 0;\n        }\n        if (n == 1)\
    \ {\n            return l[0];\n        }\n        if (n % 2 == 0) {\n        \
    \    return (l[n / 2 - 1] + l[n / 2]) / 2.0f;\n        }\n        return l[n /\
    \ 2];", "        l.Sort();\n        int n = l.Count;\n        if (n % 2 == 1)\
    \ {\n            return (float)l[n / 2];\n        }\n        else {\n        \
    \    return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n        }", "        l.Sort();\n\
    \        int n = l.Count;\n        if (n % 2 == 1) {\n            return (float)l[n\
    \ / 2];\n        }\n        else {\n            return (float)((l[n / 2 - 1] +\
    \ l[n / 2]) / 2);\n        }", "        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }", "        l.Sort();\n        int n = l.Count;\n        if (n % 2 == 1)\
    \ {\n            return (float)l[n / 2];\n        }\n        else {\n        \
    \    return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n        }", "        l.Sort();\n\
    \        int n = l.Count;\n        if (n % 2 == 1) {\n            return (float)l[n\
    \ / 2];\n        }\n        else {\n            return (float)((l[n / 2 - 1] +\
    \ l[n / 2]) / 2.0);\n        }", "        int n = l.Count;\n        if (n == 0)\
    \ {\n            return 0;\n        }\n        l.Sort();\n        if (n % 2 ==\
    \ 1) {\n            return l[n / 2];\n        }\n        else {\n            return\
    \ (l[n / 2 - 1] + l[n / 2]) / 2.0f;\n        }", "        l.Sort();\n        var\
    \ n = l.Count;\n        if (n % 2 == 1) {\n            return l[n / 2];\n    \
    \    }\n        else {\n            return (l[n / 2 - 1] + l[n / 2]) / 2.0f;\n\
    \        }", "        int n = l.Count;\n        if (n == 0) {\n            return\
    \ 0;\n        }\n        l.Sort();\n        if (n % 2 == 1) {\n            return\
    \ l[n / 2];\n        }\n        else {\n            return (l[n / 2 - 1] + l[n\
    \ / 2]) / 2f;\n        }", "        int n = l.Count;\n        if (n == 0) {\n\
    \            return 0;\n        }\n        l.Sort();\n        if (n % 2 == 1)\
    \ {\n            return l[n / 2];\n        }\n        else {\n            return\
    \ (l[n / 2 - 1] + l[n / 2]) / 2.0f;\n        }", "        l.Sort();\n        int\
    \ mid = l.Count / 2;\n        if (l.Count % 2 == 1) {\n            return (float)l[mid];\n\
    \        }\n        else {\n            return (float)(l[mid - 1] + l[mid]) /\
    \ 2;\n        }", "        if (l.Count == 0) {\n            return 0;\n      \
    \  }\n        l.Sort();\n        if (l.Count % 2 == 1) {\n            return l[l.Count\
    \ / 2];\n        }\n        else {\n            return (l[l.Count / 2 - 1] + l[l.Count\
    \ / 2]) / 2.0f;\n        }", "        l.Sort();\n        int n = l.Count;\n  \
    \      if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n   \
    \     else {\n            return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n \
    \       }", "        l.Sort();\n        int n = l.Count;\n        if (n % 2 ==\
    \ 1) {\n            return (float)l[n / 2];\n        }\n        else {\n     \
    \       return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n        }", "        l.Sort();\n\
    \        int n = l.Count;\n        if (n % 2 == 1) {\n            return (float)l[n\
    \ / 2];\n        }\n        else {\n            return (float)((l[n / 2 - 1] +\
    \ l[n / 2]) / 2);\n        }", "        int n = l.Count;\n        if (n == 0)\
    \ {\n            return 0;\n        }\n        l.Sort();\n        if (n % 2 ==\
    \ 1) {\n            return l[n / 2];\n        }\n        else {\n            return\
    \ (l[n / 2 - 1] + l[n / 2]) / 2.0f;\n        }", "        l.Sort();\n        if\
    \ (l.Count % 2 == 1) {\n            return (float)l[l.Count / 2];\n        } else\
    \ {\n            return (float)((l[l.Count / 2] + l[l.Count / 2 - 1]) / 2.0);\n\
    \        }", "        l.Sort();\n        int n = l.Count;\n        if (n % 2 ==\
    \ 1) {\n            return (float)l[n / 2];\n        }\n        return (float)(l[n\
    \ / 2 - 1] + l[n / 2]) / 2;", "        l.Sort();\n        int n = l.Count;\n \
    \       if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n  \
    \      else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n    \
    \    }", "        int n = l.Count;\n        if (n == 0) {\n            return\
    \ 0;\n        }\n        l.Sort();\n        if (n % 2 == 1) {\n            return\
    \ l[n / 2];\n        }\n        else {\n            return (l[n / 2 - 1] + l[n\
    \ / 2]) / 2.0f;\n        }", "        l.Sort();\n        int n = l.Count;\n  \
    \      if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n   \
    \     else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n     \
    \   }", "        l.Sort();\n        int n = l.Count;\n        if (n % 2 == 1)\
    \ {\n            return (float)l[n / 2];\n        }\n        else {\n        \
    \    return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n        }", "        l.Sort();\n\
    \        int n = l.Count;\n        if (n % 2 == 1) {\n            return (float)l[n\
    \ / 2];\n        }\n        else {\n            return (float)(l[n / 2 - 1] +\
    \ l[n / 2]) / 2;\n        }", "        int n = l.Count;\n        if (n == 0) {\n\
    \            return 0;\n        }\n        l.Sort();\n        if (n % 2 == 1)\
    \ {\n            return l[n / 2];\n        }\n        else {\n            return\
    \ (l[n / 2 - 1] + l[n / 2]) / 2.0f;\n        }", "        l.Sort();\n        int\
    \ n = l.Count;\n        if (n % 2 == 1) {\n            return (float)l[n / 2];\n\
    \        }\n        else {\n            return (float)((l[n / 2 - 1] + l[n / 2])\
    \ / 2.0);\n        }", "        l.Sort();\n        int n = l.Count;\n        if\
    \ (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n        else\
    \ {\n            return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n        }",
  "        l.Sort();\n        int n = l.Count;\n        if (n == 0) {\n          \
    \  return 0;\n        }\n        if (n % 2 == 1) {\n            return l[n / 2];\n\
    \        }\n        else {\n            return (l[n / 2 - 1] + l[n / 2]) / 2.0f;\n\
    \        }", "        l.Sort();\n        int n = l.Count;\n        if (n % 2 ==\
    \ 1) {\n            return (float)l[n / 2];\n        }\n        else {\n     \
    \       return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n        }", "      \
    \  l.Sort();\n        int n = l.Count;\n        if (n % 2 == 1) {\n          \
    \  return (float)l[n / 2];\n        }\n        else {\n            return (float)(l[n\
    \ / 2 - 1] + l[n / 2]) / 2;\n        }", "        int n = l.Count;\n        if\
    \ (n == 0) {\n            return 0.0f;\n        }\n        l.Sort();\n       \
    \ if (n % 2 == 1) {\n            return l[n / 2];\n        }\n        else {\n\
    \            return (l[n / 2 - 1] + l[n / 2]) / 2.0f;\n        }", "        l.Sort();\n\
    \        int n = l.Count;\n        if (n % 2 == 1) {\n            return (float)l[n\
    \ / 2];\n        }\n        else {\n            return (float)((l[n / 2 - 1] +\
    \ l[n / 2]) / 2.0);\n        }", "        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }", "        l.Sort();\n        int n = l.Count;\n        if (n % 2 == 1)\
    \ {\n            return (float)l[n / 2];\n        }\n        else {\n        \
    \    return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n        }", "        l.Sort();\n\
    \        int n = l.Count;\n        if (n % 2 == 1) {\n            return (float)l[n\
    \ / 2];\n        }\n        else {\n            return (float)((l[n / 2 - 1] +\
    \ l[n / 2]) / 2.0);\n        }", "        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n\
    \        }", "        l.Sort();\n        int mid = l.Count / 2;\n        if (l.Count\
    \ % 2 == 1) {\n            return (float)l[mid];\n        }\n        else {\n\
    \            return (float)((l[mid - 1] + l[mid]) / 2.0);\n        }", "     \
    \   l.Sort();\n        int n = l.Count;\n        if (n % 2 == 1) {\n         \
    \   return (float)l[n / 2];\n        }\n        else {\n            return (float)(l[n\
    \ / 2 - 1] + l[n / 2]) / 2;\n        }", "        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }", "        l.Sort();\n        if (l.Count % 2 == 1) {\n            return\
    \ (float)l[l.Count / 2];\n        } else {\n            return (float)(l[l.Count\
    \ / 2 - 1] + l[l.Count / 2]) / 2;\n        }", "        l.Sort();\n        if\
    \ ((l.Count % 2L) == 0L) {\n            return ((float)(l[(l.Count / 2L) - 1L]\
    \ + l[l.Count / 2L]) / 2f);\n        }\n        else {\n            return (float)l[l.Count\
    \ / 2L];\n        }", "        l.Sort();\n        if (l.Count % 2 == 1) {\n  \
    \          return (float)l[l.Count / 2];\n        }\n        else {\n        \
    \    return (float)(l[l.Count / 2 - 1] + l[l.Count / 2]) / 2;\n        }", " \
    \       l.Sort();\n        int n = l.Count;\n        if (n % 2 == 1) {\n     \
    \       return (float)l[n / 2];\n        }\n        else {\n            return\
    \ (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n        }", "        l.Sort();\n    \
    \    int n = l.Count;\n        if (n % 2 == 1) {\n            return (float)l[n\
    \ / 2];\n        }\n        else {\n            return (float)(l[n / 2 - 1] +\
    \ l[n / 2]) / 2;\n        }", "        l.Sort();\n        int n = l.Count;\n \
    \       if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n  \
    \      else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n    \
    \    }", "        l.Sort();\n        int n = l.Count;\n        if (n % 2 == 1)\
    \ {\n            return (float)l[n / 2];\n        }\n        else {\n        \
    \    return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n        }", "        l.Sort();\n\
    \        int n = l.Count;\n        if (n % 2 == 1) {\n            return (float)l[n\
    \ / 2];\n        }\n        else {\n            return (float)(l[n / 2 - 1] +\
    \ l[n / 2]) / 2;\n        }", "        int n = l.Count;\n        if (n == 0) {\n\
    \            return 0;\n        }\n        l.Sort();\n        if (n % 2 == 1)\
    \ {\n            return l[n / 2];\n        }\n        else {\n            return\
    \ (l[n / 2 - 1] + l[n / 2]) / 2.0f;\n        }", "        l.Sort();\n        int\
    \ n = l.Count;\n        if (n % 2 == 1) {\n            return (float)l[n / 2];\n\
    \        }\n        else {\n            return (float)((l[n / 2 - 1] + l[n / 2])\
    \ / 2.0);\n        }", "        l.Sort();\n        int n = l.Count;\n        if\
    \ (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n        else\
    \ {\n            return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n        }",
  "        l.Sort();\n        if (l.Count % 2 == 1) {\n            return (float)l[l.Count\
    \ / 2];\n        }\n        else {\n            return (float)(l[l.Count / 2 -\
    \ 1] + l[l.Count / 2]) / 2;\n        }", "        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n\
    \        }", "        l.Sort();\n        int n = l.Count;\n        if (n % 2 ==\
    \ 1) {\n            return (float)l[n / 2];\n        }\n        else {\n     \
    \       return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n        }", "        l.Sort();\n\
    \        int n = l.Count;\n        if (n % 2 == 1) {\n            return (float)l[n\
    \ / 2];\n        }\n        else {\n            return (float)(l[n / 2 - 1] +\
    \ l[n / 2]) / 2;\n        }", "        l.Sort();\n        if (l.Count % 2 == 1)\
    \ {\n            return (float)l[l.Count / 2];\n        }\n        else {\n  \
    \          return (float)(l[l.Count / 2 - 1] + l[l.Count / 2]) / 2;\n        }",
  "        l.Sort();\n        int n = l.Count;\n        if (n % 2 == 1) {\n      \
    \      return (float)l[n / 2];\n        }\n        else {\n            return\
    \ (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n        }", "        long n = (long)l.Count;\n\
    \        long m = n / 2L;\n        if (n % 2L == 1L) {\n            return (float)l[(int)m];\n\
    \        }\n        else {\n            return ((float)l[(int)m] + (float)l[(int)(m\
    \ - 1L)]) / 2f;\n        }", "        l.Sort();\n        int n = l.Count;\n  \
    \      if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n   \
    \     else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n     \
    \   }", "        int n = l.Count;\n        if (n == 0) {\n            return 0;\n\
    \        }\n        l.Sort();\n        if (n % 2 == 1) {\n            return l[n\
    \ / 2];\n        }\n        else {\n            return (l[n / 2 - 1] + l[n / 2])\
    \ / 2.0f;\n        }", "        l.Sort();\n        int n = l.Count;\n        if\
    \ (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n        else\
    \ {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n        }", " \
    \       l.Sort();\n        int mid = l.Count / 2;\n        if (l.Count % 2 ==\
    \ 1) {\n            return (float)l[mid];\n        }\n        else {\n       \
    \     return (float)(l[mid - 1] + l[mid]) / 2;\n        }", "        l.Sort();\n\
    \        int n = l.Count;\n        if (n % 2 == 1) {\n            return (float)l[n\
    \ / 2];\n        }\n        else {\n            return (float)(l[n / 2 - 1] +\
    \ l[n / 2]) / 2;\n        }", "        l.Sort();\n        int n = l.Count;\n \
    \       if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n  \
    \      else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n    \
    \    }", "        l.Sort();\n        int n = l.Count;\n        if (n % 2 == 1)\
    \ {\n            return (float)l[n / 2];\n        }\n        else {\n        \
    \    return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n        }", "        l.Sort();\n\
    \        int n = l.Count;\n        if (n % 2 == 1) {\n            return (float)l[n\
    \ / 2];\n        }\n        else {\n            return (float)(l[n / 2 - 1] +\
    \ l[n / 2]) / 2;\n        }", "        int n = l.Count;\n        if (n == 0) {\n\
    \            return 0;\n        }\n        l.Sort();\n        if (n % 2 == 1)\
    \ {\n            return l[n / 2];\n        }\n        else {\n            return\
    \ (l[n / 2 - 1] + l[n / 2]) / 2.0f;\n        }", "        l.Sort();\n        int\
    \ n = l.Count;\n        if (n % 2 == 1) {\n            return (float)l[n / 2];\n\
    \        }\n        else {\n            return (float)((l[n / 2 - 1] + l[n / 2])\
    \ / 2.0);\n        }", "        l.Sort();\n        int n = l.Count;\n        if\
    \ (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n        else\
    \ {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n        }", " \
    \       l.Sort();\n        int n = l.Count;\n        if (n % 2 == 1) {\n     \
    \       return (float)l[n / 2];\n        }\n        else {\n            return\
    \ (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n        }", "        l.Sort();\n    \
    \    int n = l.Count;\n        if (n % 2 == 1) {\n            return (float)l[n\
    \ / 2];\n        }\n        else {\n            return (float)(l[n / 2 - 1] +\
    \ l[n / 2]) / 2;\n        }", "        l.Sort();\n        int n = l.Count;\n \
    \       if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n  \
    \      else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n    \
    \    }", "        l.Sort();\n        int n = l.Count;\n        if (n % 2 == 1)\
    \ {\n            return (float)l[n / 2];\n        }\n        else {\n        \
    \    return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n        }", "        l.Sort();\n\
    \        if (l.Count % 2 == 1) {\n            return (float)l[l.Count / 2];\n\
    \        } else {\n            return (float)((l[l.Count / 2] + l[l.Count / 2\
    \ - 1]) / 2);\n        }", "        l.Sort();\n        int n = l.Count;\n    \
    \    if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n     \
    \   else {\n            return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n   \
    \     }", "        l.Sort();\n        int n = l.Count;\n        if (n % 2 == 1)\
    \ {\n            return (float)l[n / 2];\n        }\n        else {\n        \
    \    return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n        }", "        l.Sort();\n\
    \        int n = l.Count;\n        if (n % 2 == 1) {\n            return (float)l[n\
    \ / 2];\n        }\n        else {\n            return (float)(l[n / 2 - 1] +\
    \ l[n / 2]) / 2;\n        }", "        l.Sort();\n        int n = l.Count;\n \
    \       if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n  \
    \      else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n    \
    \    }", "        int n = l.Count;\n        if (n == 0) {\n            return\
    \ 0;\n        }\n        if (n == 1) {\n            return l[0];\n        }\n\
    \        if (n % 2 == 0) {\n            return (l[n / 2 - 1] + l[n / 2]) / 2f;\n\
    \        }\n        return l[n / 2];", "        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }", "        l.Sort();\n        int n = l.Count;\n        if (n % 2 == 1)\
    \ {\n            return (float)l[n / 2];\n        }\n        else {\n        \
    \    return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n        }", "        l.Sort();\n\
    \        int n = l.Count;\n        if (n % 2 == 1) {\n            return (float)l[n\
    \ / 2];\n        }\n        else {\n            return (float)(l[n / 2 - 1] +\
    \ l[n / 2]) / 2;\n        }", "        l.Sort();\n        int n = l.Count;\n \
    \       if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n  \
    \      else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n    \
    \    }", "        l.Sort();\n        int n = l.Count;\n        if (n % 2 == 1)\
    \ {\n            return (float)l[n / 2];\n        }\n        else {\n        \
    \    return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n        }", "        l.Sort();\n\
    \        int n = l.Count;\n        if (n % 2 == 1) {\n            return (float)l[n\
    \ / 2];\n        }\n        else {\n            return (float)(l[n / 2 - 1] +\
    \ l[n / 2]) / 2;\n        }", "        l.Sort();\n        int n = l.Count;\n \
    \       if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n  \
    \      else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n    \
    \    }", "        l.Sort();\n        int n = l.Count;\n        if (n % 2 == 1)\
    \ {\n            return (float)l[n / 2];\n        }\n        else {\n        \
    \    return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n        }", "        int\
    \ n = l.Count;\n        l.Sort();\n        if (n % 2 == 1) {\n            return\
    \ (float)l[n / 2];\n        }\n        else {\n            return (float)((l[n\
    \ / 2 - 1] + l[n / 2]) / 2.0);\n        }", "        l.Sort();\n        int n\
    \ = l.Count;\n        if (n % 2 == 1) {\n            return (float)l[n / 2];\n\
    \        }\n        else {\n            return (float)(l[n / 2 - 1] + l[n / 2])\
    \ / 2;\n        }", "        l.Sort();\n        int n = l.Count;\n        if (n\
    \ % 2 == 1) {\n            return (float)l[n / 2];\n        }\n        else {\n\
    \            return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n        }", " \
    \       l.Sort();\n        if (l.Count % 2 == 1) {\n            return (float)l[l.Count\
    \ / 2];\n        }\n        else {\n            return (float)(l[l.Count / 2 -\
    \ 1] + l[l.Count / 2]) / 2;\n        }", "        l.Sort();\n        if (l.Count\
    \ % 2 == 1) {\n            return (float)l[l.Count / 2];\n        }\n        else\
    \ {\n            return (float)(l[l.Count / 2 - 1] + l[l.Count / 2]) / 2;\n  \
    \      }", "        var s = l.OrderBy((long x) => x).ToList();\n        var n\
    \ = s.Count;\n        if (n % 2 == 1) {\n            return s[n / 2];\n      \
    \  }\n        else {\n            return (s[n / 2 - 1] + s[n / 2]) / 2.0f;\n \
    \       }", "        int n = l.Count;\n        if (n == 0) {\n            return\
    \ 0;\n        }\n        if (n == 1) {\n            return l[0];\n        }\n\
    \        l.Sort();\n        if (n % 2 == 1) {\n            return l[n / 2];\n\
    \        }\n        else {\n            return (l[n / 2 - 1] + l[n / 2]) / 2.0f;\n\
    \        }", "        l.Sort();\n        int n = l.Count;\n        if (n % 2 ==\
    \ 1) {\n            return (float)l[n / 2];\n        }\n        else {\n     \
    \       return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n        }", "        l.Sort();\n\
    \        int n = l.Count;\n        if (n % 2 == 1) {\n            return (float)l[n\
    \ / 2];\n        }\n        else {\n            return (float)(l[n / 2 - 1] +\
    \ l[n / 2]) / 2;\n        }", "        l.Sort();\n        int n = l.Count;\n \
    \       if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n  \
    \      else {\n            return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n\
    \        }", "        l.Sort();\n        int n = l.Count;\n        if (n % 2 ==\
    \ 1) {\n            return (float)l[n / 2];\n        }\n        else {\n     \
    \       return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n        }", "      \
    \  l.Sort();\n        int n = l.Count;\n        if (n % 2 == 1) {\n          \
    \  return (float)l[n / 2];\n        }\n        else {\n            return (float)((l[n\
    \ / 2 - 1] + l[n / 2]) / 2.0);\n        }", "        int n = l.Count;\n      \
    \  if (n == 0) {\n            return 0;\n        }\n        l.Sort();\n      \
    \  if (n % 2 == 1) {\n            return l[n / 2];\n        }\n        else {\n\
    \            return (l[n / 2 - 1] + l[n / 2]) / 2.0f;\n        }", "        int\
    \ n = l.Count;\n        if (n == 0) {\n            return 0;\n        }\n    \
    \    l.Sort();\n        if (n % 2 == 1) {\n            return l[n / 2];\n    \
    \    }\n        else {\n            return (l[n / 2 - 1] + l[n / 2]) / 2.0f;\n\
    \        }", "        l.Sort();\n        int n = l.Count;\n        if (n % 2 ==\
    \ 1) {\n            return (float)l[n / 2];\n        }\n        else {\n     \
    \       return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n        }", "      \
    \  int n = l.Count;\n        if (n == 0) {\n            return 0;\n        }\n\
    \        l.Sort();\n        if (n % 2 == 1) {\n            return l[n / 2];\n\
    \        }\n        else {\n            return (l[n / 2 - 1] + l[n / 2]) / 2.0f;\n\
    \        }", "        l.Sort();\n        int n = l.Count;\n        if (n % 2 ==\
    \ 1) {\n            return (float)l[n / 2];\n        }\n        else {\n     \
    \       return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n        }", "        l.Sort();\n\
    \        int n = l.Count;\n        if (n % 2 == 1) {\n            return (float)l[n\
    \ / 2];\n        }\n        else {\n            return (float)((l[n / 2 - 1] +\
    \ l[n / 2]) / 2.0);\n        }", "        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n\
    \        }", "        l.Sort();\n        int n = l.Count;\n        if (n % 2 ==\
    \ 1) {\n            return (float)l[n / 2];\n        }\n        else {\n     \
    \       return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n        }", "        l.Sort();\n\
    \        int n = l.Count;\n        if (n % 2 == 1) {\n            return (float)l[n\
    \ / 2];\n        }\n        else {\n            return (float)(l[n / 2 - 1] +\
    \ l[n / 2]) / 2;\n        }", "        l.Sort();\n        int n = l.Count;\n \
    \       if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n  \
    \      else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n    \
    \    }", "        l.Sort();\n        int n = l.Count;\n        if (n == 0) {\n\
    \            return 0;\n        }\n        if (n % 2 == 1) {\n            return\
    \ l[n / 2];\n        }\n        else {\n            return (l[n / 2 - 1] + l[n\
    \ / 2]) / 2;\n        }", "        l.Sort();\n        if (l.Count % 2 == 1) {\n\
    \            return (float)l[l.Count / 2];\n        }\n        else {\n      \
    \      return (float)(l[l.Count / 2 - 1] + l[l.Count / 2]) / 2;\n        }", " \
    \       int n = l.Count;\n        if (n == 0) {\n            return 0;\n     \
    \   }\n        l.Sort();\n        if (n % 2 == 1) {\n            return l[n /\
    \ 2];\n        }\n        else {\n            return (l[n / 2 - 1] + l[n / 2])\
    \ / 2.0f;\n        }", "        l.Sort();\n        int n = l.Count;\n        if\
    \ (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n        else\
    \ {\n            return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n        }",
  "        var sorted = l.OrderBy((long x) => x).ToList();\n        var n = sorted.Count;\n\
    \        if (n % 2 == 1) {\n            return sorted[n / 2];\n        }\n   \
    \     else {\n            return (sorted[n / 2 - 1] + sorted[n / 2]) / 2.0f;\n\
    \        }", "        l.Sort();\n        int n = l.Count;\n        if (n % 2 ==\
    \ 1) {\n            return (float)l[n / 2];\n        }\n        else {\n     \
    \       return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n        }", "      \
    \  l.Sort();\n        int n = l.Count;\n        if (n % 2 == 1) {\n          \
    \  return (float)l[n / 2];\n        }\n        else {\n            return (float)(l[n\
    \ / 2 - 1] + l[n / 2]) / 2;\n        }", "        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }", "        l.Sort();\n        int n = l.Count;\n        if (n % 2 == 1)\
    \ {\n            return (float)l[n / 2];\n        }\n        else {\n        \
    \    return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n        }", "        int n\
    \ = l.Count;\n        if (n == 0) {\n            return 0;\n        }\n      \
    \  l.Sort();\n        if (n % 2 == 1) {\n            return l[n / 2];\n      \
    \  }\n        else {\n            return (l[n / 2 - 1] + l[n / 2]) / 2.0f;\n \
    \       }", "        l.Sort();\n        int n = l.Count;\n        if (n % 2 ==\
    \ 1) {\n            return (float)l[n / 2];\n        }\n        else {\n     \
    \       return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n        }", "      \
    \  l.Sort();\n        if (l.Count % 2 == 1) {\n            return (float)l[l.Count\
    \ / 2];\n        }\n        else {\n            return (float)(l[l.Count / 2 -\
    \ 1] + l[l.Count / 2]) / 2;\n        }", "        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n\
    \        }", "        l.Sort();\n        int n = l.Count;\n        if (n % 2 ==\
    \ 1) {\n            return (float)l[n / 2];\n        }\n        else {\n     \
    \       return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n        }", "      \
    \  int n = l.Count;\n        if (n == 0) {\n            return 0;\n        }\n\
    \        l.Sort();\n        if (n % 2 == 1) {\n            return l[n / 2];\n\
    \        }\n        else {\n            return (l[n / 2 - 1] + l[n / 2]) / 2.0f;\n\
    \        }", "        int n = l.Count;\n        if (n == 0) {\n            return\
    \ 0;\n        }\n        l.Sort();\n        if (n % 2 == 1) {\n            return\
    \ l[n / 2];\n        }\n        else {\n            return (l[n / 2 - 1] + l[n\
    \ / 2]) / 2.0f;\n        }", "        l.Sort();\n        int n = l.Count;\n  \
    \      if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n   \
    \     else {\n            return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n \
    \       }", "        l.Sort();\n        var n = l.Count;\n        if (n % 2 ==\
    \ 1) {\n            return l[n / 2];\n        }\n        else {\n            return\
    \ (l[n / 2 - 1] + l[n / 2]) / 2.0f;\n        }", "        int n = l.Count;\n \
    \       if (n == 0) {\n            return 0.0f;\n        }\n        l.Sort();\n\
    \        if (n % 2 == 1) {\n            return l[n / 2];\n        }\n        else\
    \ {\n            return (l[n / 2 - 1] + l[n / 2]) / 2.0f;\n        }", "     \
    \   int n = l.Count;\n        if (n == 0) {\n            return 0;\n        }\n\
    \        l.Sort();\n        if (n % 2 == 1) {\n            return l[n / 2];\n\
    \        }\n        else {\n            return (l[n / 2 - 1] + l[n / 2]) / 2.0f;\n\
    \        }", "        int n = l.Count;\n        l.Sort();\n        if (n % 2 ==\
    \ 1) {\n            return (float)l[n / 2];\n        }\n        else {\n     \
    \       return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n        }", "        l.Sort();\n\
    \        int len = l.Count;\n        if (len % 2 == 1) {\n            return (float)l[len\
    \ / 2];\n        }\n        return (float)((l[len / 2 - 1] + l[len / 2]) / 2.0);",
  "        l.Sort();\n        int i = l.Count / 2;\n        if (l.Count % 2 == 0)\
    \ {\n            return (float)(l[i - 1] + l[i]) / 2;\n        }\n        else\
    \ {\n            return (float)l[i];\n        }", "        l.Sort();\n       \
    \ int mid = l.Count / 2;\n        if (l.Count % 2 == 1) {\n            return\
    \ (float)l[mid];\n        }\n        else {\n            return (float)((l[mid\
    \ - 1] + l[mid]) / 2.0);\n        }", "        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }", "        l.Sort();\n        int n = l.Count;\n        if (n % 2 == 1)\
    \ {\n            return (float)l[n / 2];\n        }\n        else {\n        \
    \    return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n        }", "        l.Sort();\n\
    \        int n = l.Count;\n        if (n % 2 == 1) {\n            return (float)l[n\
    \ / 2];\n        }\n        else {\n            return (float)((l[n / 2 - 1] +\
    \ l[n / 2]) / 2.0);\n        }", "        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n\
    \        }", "        int n = l.Count;\n        if (n == 0) {\n            return\
    \ 0;\n        }\n        l.Sort();\n        if (n % 2 == 1) {\n            return\
    \ l[n / 2];\n        }\n        else {\n            return (l[n / 2 - 1] + l[n\
    \ / 2]) / 2.0f;\n        }", "        l.Sort();\n        if (l.Count % 2 == 1)\
    \ {\n            return (float)l[l.Count / 2];\n        }\n        else {\n  \
    \          return (float)(l[l.Count / 2 - 1] + l[l.Count / 2]) / 2;\n        }",
  "        l.Sort();\n        int n = l.Count;\n        if (n % 2 == 1) {\n      \
    \      return (float)l[n / 2];\n        }\n        else {\n            return\
    \ (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n        }", "        l.Sort();\n\
    \        int n = l.Count;\n        if (n % 2 == 1) {\n            return (float)l[n\
    \ / 2];\n        }\n        else {\n            return (float)(l[n / 2 - 1] +\
    \ l[n / 2]) / 2;\n        }", "        l.Sort();\n        int n = l.Count;\n \
    \       if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n  \
    \      else {\n            return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n\
    \        }", "        l.Sort();\n        int n = l.Count;\n        if (n % 2 ==\
    \ 1) {\n            return (float)l[n / 2];\n        }\n        else {\n     \
    \       return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n        }", "        l.Sort();\n\
    \        var n = l.Count;\n        if (n % 2 == 1) {\n            return l[n /\
    \ 2];\n        }\n        else {\n            return (l[n / 2 - 1] + l[n / 2])\
    \ / 2.0f;\n        }", "        l.Sort();\n        int n = l.Count;\n        if\
    \ (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n        else\
    \ {\n            return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n        }",
  "        l.Sort();\n        int len = l.Count;\n        if (len % 2 == 1) {\n  \
    \          return (float)l[len / 2];\n        }\n        else {\n            return\
    \ (float)(l[len / 2 - 1] + l[len / 2]) / 2;\n        }", "        l.Sort();\n\
    \        int n = l.Count;\n        if (n % 2 == 1) {\n            return (float)l[n\
    \ / 2];\n        }\n        else {\n            return (float)((l[n / 2 - 1] +\
    \ l[n / 2]) / 2.0);\n        }", "        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n\
    \        }", "        l.Sort();\n        if (l.Count % 2 == 1) {\n           \
    \ return (float)l[l.Count / 2];\n        }\n        else {\n            return\
    \ (float)((l[l.Count / 2] + l[l.Count / 2 - 1]) / 2.0);\n        }", "       \
    \ l.Sort();\n        int n = l.Count;\n        if (n % 2 == 1) {\n           \
    \ return (float)l[n / 2];\n        }\n        else {\n            return (float)((l[n\
    \ / 2 - 1] + l[n / 2]) / 2.0);\n        }", "        l.Sort();\n        if (l.Count\
    \ % 2 == 1) {\n            return (float)l[l.Count / 2];\n        }\n        return\
    \ (float)((l[l.Count / 2] + l[l.Count / 2 - 1]) / 2);", "        var s = l.OrderBy((long\
    \ x) => x).ToList();\n        var n = s.Count;\n        if (n % 2 == 1) {\n  \
    \          return s[n / 2];\n        }\n        else {\n            return (s[n\
    \ / 2 - 1] + s[n / 2]) / 2.0f;\n        }", "        l.Sort();\n        int n\
    \ = l.Count;\n        if (n % 2 == 1) {\n            return (float)l[n / 2];\n\
    \        }\n        else {\n            return (float)(l[n / 2 - 1] + l[n / 2])\
    \ / 2;\n        }", "        l.Sort();\n        if (l.Count % 2 == 1) {\n    \
    \        return (float)l[l.Count / 2];\n        }\n        else {\n          \
    \  return (float)(l[l.Count / 2 - 1] + l[l.Count / 2]) / 2;\n        }", "   \
    \     l.Sort();\n        if (l.Count % 2 == 1) {\n            return (float)l[l.Count\
    \ / 2];\n        }\n        else {\n            return (float)((l[l.Count / 2]\
    \ + l[l.Count / 2 - 1]) / 2);\n        }", "        l.Sort();\n        if (l.Count\
    \ % 2 == 1) {\n            return (float)l[l.Count / 2];\n        }\n        return\
    \ (float)((l[l.Count / 2] + l[l.Count / 2 - 1]) / 2);", "        l.Sort();\n \
    \       int n = l.Count;\n        if (n % 2 == 1) {\n            return (float)l[n\
    \ / 2];\n        }\n        else {\n            return (float)(l[n / 2 - 1] +\
    \ l[n / 2]) / 2;\n        }", "        int n = l.Count;\n        if (n == 0) {\n\
    \            return 0;\n        }\n        l.Sort();\n        if (n % 2 == 1)\
    \ {\n            return l[n / 2];\n        }\n        else {\n            return\
    \ (l[n / 2 - 1] + l[n / 2]) / 2.0f;\n        }", "        l.Sort();\n        int\
    \ n = l.Count;\n        if (n % 2 == 1) {\n            return (float)l[n / 2];\n\
    \        }\n        else {\n            return (float)(l[n / 2 - 1] + l[n / 2])\
    \ / 2;\n        }", "        l.Sort();\n        int n = l.Count;\n        if (n\
    \ % 2 == 1) {\n            return (float)l[n / 2];\n        }\n        else {\n\
    \            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n        }", "     \
    \   int n = l.Count;\n        if (n == 0) {\n            return 0;\n        }\n\
    \        l.Sort();\n        if (n % 2 == 1) {\n            return l[n / 2];\n\
    \        }\n        else {\n            return (l[n / 2 - 1] + l[n / 2]) / 2.0f;\n\
    \        }", "        long n = (long)l.Count;\n        if (n == 0L) {\n      \
    \      return 0.0f;\n        }\n\n        l.Sort();\n        if (n % 2L == 1L)\
    \ {\n            return (float)l[(int)((n - 1L) / 2L)];\n        }\n\n       \
    \ return (float)((l[(int)(n / 2L)] + l[(int)((n / 2L) - 1L)]) / 2L);\n", "   \
    \     l.Sort();\n        if (l.Count % 2 == 1) {\n            return (float)l[l.Count\
    \ / 2];\n        }\n        return (float)((l[l.Count / 2] + l[l.Count / 2 - 1])\
    \ / 2.0);", "        l.Sort();\n        int n = l.Count;\n        if (n % 2 ==\
    \ 1) {\n            return (float)l[n / 2];\n        }\n        else {\n     \
    \       return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n        }", "        l.Sort();\n\
    \        int n = l.Count;\n        if (n % 2 == 1) {\n            return (float)l[n\
    \ / 2];\n        }\n        else {\n            return (float)((l[n / 2 - 1] +\
    \ l[n / 2]) / 2.0);\n        }", "        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }", "        l.Sort();\n        int n = l.Count;\n        if (n % 2 == 1)\
    \ {\n            return (float)l[n / 2];\n        }\n        else {\n        \
    \    return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n        }", "        l.Sort();\n\
    \        int n = l.Count;\n        if (n % 2 == 1) {\n            return (float)l[n\
    \ / 2];\n        }\n        else {\n            return (float)(l[n / 2 - 1] +\
    \ l[n / 2]) / 2;\n        }", "        l.Sort();\n        int n = l.Count;\n \
    \       if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n  \
    \      else {\n            return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n\
    \        }", "        l.Sort();\n        if (l.Count % 2 == 1) {\n           \
    \ return (float)l[l.Count / 2];\n        }\n        else {\n            return\
    \ (float)(l[l.Count / 2 - 1] + l[l.Count / 2]) / 2;\n        }", "        int\
    \ n = l.Count;\n        if (n == 0) {\n            return 0;\n        }\n    \
    \    l.Sort();\n        if (n % 2 == 1) {\n            return l[n / 2];\n    \
    \    }\n        else {\n            return (l[n / 2 - 1] + l[n / 2]) / 2.0f;\n\
    \        }", "        int n = l.Count;\n        if (n == 0) {\n            return\
    \ 0;\n        }\n        l.Sort();\n        if (n % 2 == 1) {\n            return\
    \ l[n / 2];\n        }\n        else {\n            return (l[n / 2 - 1] + l[n\
    \ / 2]) / 2.0f;\n        }", "        l.Sort();\n        int n = l.Count;\n  \
    \      if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n   \
    \     else {\n            return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n \
    \       }", "        l.Sort();\n        int n = l.Count;\n        if (n % 2 ==\
    \ 1) {\n            return (float)l[n / 2];\n        }\n        else {\n     \
    \       return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n        }", "        var\
    \ n = l.Count;\n        l.Sort();\n        if (n % 2 == 1) {\n            return\
    \ l[n / 2];\n        }\n        else {\n            return (l[n / 2 - 1] + l[n\
    \ / 2]) / 2.0f;\n        }", "        l.Sort();\n        int n = l.Count;\n  \
    \      if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n   \
    \     else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n     \
    \   }", "        l.Sort();\n        int n = l.Count;\n        if (n % 2 == 1)\
    \ {\n            return (float)l[n / 2];\n        }\n        else {\n        \
    \    return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n        }", "        l.Sort();\n\
    \        int n = l.Count;\n        if (n % 2 == 1) {\n            return (float)l[n\
    \ / 2];\n        }\n        else {\n            return (float)((l[n / 2 - 1] +\
    \ l[n / 2]) / 2.0);\n        }", "        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n\
    \        }", "        l.Sort();\n        int n = l.Count;\n        if (n % 2 ==\
    \ 1) {\n            return (float)l[n / 2];\n        }\n        else {\n     \
    \       return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n        }", "        l.Sort();\n\
    \        int n = l.Count;\n        if (n % 2 == 1) {\n            return (float)l[n\
    \ / 2];\n        }\n        else {\n            return (float)(l[n / 2 - 1] +\
    \ l[n / 2]) / 2;\n        }", "        int n = l.Count;\n        if (n == 0) {\n\
    \            return 0;\n        }\n        l.Sort();\n        if (n % 2 == 1)\
    \ {\n            return l[n / 2];\n        }\n        else {\n            return\
    \ (l[n / 2 - 1] + l[n / 2]) / 2.0f;\n        }", "        l.Sort();\n        int\
    \ n = l.Count;\n        if (n % 2 == 1) {\n            return (float)l[n / 2];\n\
    \        }\n        else {\n            return (float)(l[n / 2 - 1] + l[n / 2])\
    \ / 2;\n        }", "        l.Sort();\n        int n = l.Count;\n        if (n\
    \ % 2 == 1) {\n            return (float)l[n / 2];\n        }\n        else {\n\
    \            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n        }", "     \
    \   int n = l.Count;\n        if (n == 0) {\n            return 0;\n        }\n\
    \        l.Sort();\n        if (n % 2 == 1) {\n            return l[n / 2];\n\
    \        }\n        else {\n            return (l[n / 2 - 1] + l[n / 2]) / 2.0f;\n\
    \        }", "        l.Sort();\n        int i = l.Count / 2;\n        if (l.Count\
    \ % 2 == 0) {\n            return (float)(l[i - 1] + l[i]) / 2;\n        } else\
    \ {\n            return (float)l[i];\n        }"]
stop_tokens:
- "\n    }\n"
