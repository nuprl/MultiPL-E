name: HumanEval_95_check_dict_case
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a dictionary, return True if all keys are strings in lower\
  \ \n    // case or all keys are strings in upper case, else return False.\n    //\
  \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
  \    // >>> CheckDictCase((new Dictionary<string,string>(){{\"a\", \"apple\"}, {\"\
  b\", \"banana\"}}))\n    // (true)\n    // >>> CheckDictCase((new Dictionary<string,string>(){{\"\
  a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))\n    // (false)\n \
  \   // >>> CheckDictCase((new Dictionary<string,string>(){{\"a\", \"apple\"}, {8L,\
  \ \"banana\"}, {\"a\", \"apple\"}}))\n    // (false)\n    // >>> CheckDictCase((new\
  \ Dictionary<string,string>(){{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\"\
  , \"Houston\"}}))\n    // (false)\n    // >>> CheckDictCase((new Dictionary<string,string>(){{\"\
  STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))\n    // (true)\n    public static bool\
  \ CheckDictCase(Dictionary<string,string> dict) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckDictCase((new\
  \ Dictionary<string,string>(){{\"p\", \"pineapple\"}, {\"b\", \"banana\"}})) ==\
  \ (true));\n    Debug.Assert(CheckDictCase((new Dictionary<string,string>(){{\"\
  p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})) == (false));\n\
  \    Debug.Assert(CheckDictCase((new Dictionary<string,string>(){{\"p\", \"pineapple\"\
  }, {\"5\", \"banana\"}, {\"a\", \"apple\"}})) == (false));\n    Debug.Assert(CheckDictCase((new\
  \ Dictionary<string,string>(){{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\"\
  , \"Houston\"}})) == (false));\n    Debug.Assert(CheckDictCase((new Dictionary<string,string>(){{\"\
  STATE\", \"NC\"}, {\"ZIP\", \"12345\"}})) == (true));\n    Debug.Assert(CheckDictCase((new\
  \ Dictionary<string,string>(){{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))\
  \ == (true));\n    Debug.Assert(CheckDictCase((new Dictionary<string,string>()))\
  \ == (false));\n    }\n\n}\n"
completions: ["        // TODO: Implement this function\n        return false;", '        return
    dict.Keys.All(x => x.All(char.IsUpper)) || dict.Keys.All(x => x.All(char.IsLower));',
  '        return dict.Keys.All(k => k.ToUpper() == k) || dict.Keys.All(k => k.ToLower()
    == k);', "        // Your code here\n        return false;", "        bool lower\
    \ = true;\n        bool upper = true;\n        foreach (var item in dict) {\n\
    \            if (item.Key.ToLower() != item.Key) {\n                lower = false;\n\
    \            }\n            if (item.Key.ToUpper() != item.Key) {\n          \
    \      upper = false;\n            }\n        }\n        return lower || upper;",
  "        if (dict.Count == 0) {\n            return false;\n        }\n        bool\
    \ lower = true;\n        bool upper = true;\n        foreach (string key in dict.Keys)\
    \ {\n            if (key.ToLower() != key) {\n                lower = false;\n\
    \            }\n            if (key.ToUpper() != key) {\n                upper\
    \ = false;\n            }\n        }\n        return lower || upper;", "     \
    \   // Your code here\n        return false;", "        // Your code here\n  \
    \      return false;", "        if (dict.Count == 0) return false;\n        bool\
    \ allLower = true;\n        bool allUpper = true;\n        foreach (var kvp in\
    \ dict) {\n            if (kvp.Key.ToLower() != kvp.Key) allLower = false;\n \
    \           if (kvp.Key.ToUpper() != kvp.Key) allUpper = false;\n        }\n \
    \       return allLower || allUpper;", '        return false;', "        if (dict.Count\
    \ == 0) {\n            return false;\n        }\n        bool allLower = true;\n\
    \        bool allUpper = true;\n        foreach (var kvp in dict) {\n        \
    \    if (kvp.Key.ToUpper() != kvp.Key) {\n                allUpper = false;\n\
    \            }\n            if (kvp.Key.ToLower() != kvp.Key) {\n            \
    \    allLower = false;\n            }\n        }\n        return allLower || allUpper;",
  "        // YOUR CODE HERE\n        return false;", "        // Your code here\n\
    \        return false;", '        return dict.Keys.All(x => x.All(y => Char.IsUpper(y)))
    || dict.Keys.All(x => x.All(y => Char.IsLower(y)));', "        // TODO: Implement\
    \ this function\n        return false;", '        return dict.Keys.All(key =>
    key.ToUpper() == key) || dict.Keys.All(key => key.ToLower() == key);', "     \
    \   // TODO: Implement this function\n        return false;", '        return
    dict.Keys.All(x => x.ToUpper() == x) || dict.Keys.All(x => x.ToLower() == x);',
  '        return dict.Keys.All(k => k.ToUpper() == k) || dict.Keys.All(k => k.ToLower()
    == k);', "        if (dict.Count == 0) {\n            return false;\n        }\n\
    \        bool allLower = true;\n        bool allUpper = true;\n        foreach\
    \ (string key in dict.Keys) {\n            if (key.ToUpper() != key) {\n     \
    \           allUpper = false;\n            }\n            if (key.ToLower() !=\
    \ key) {\n                allLower = false;\n            }\n        }\n      \
    \  return allLower || allUpper;"]
stop_tokens:
- "\n    }\n"
