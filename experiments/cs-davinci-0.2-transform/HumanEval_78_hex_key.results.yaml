language: cs
name: HumanEval_78_hex_key
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code here\n    \
    \    return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dbc5ab20bb743babee8821f35a53f4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dbc5ab20bb743babee8821f35a53f4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code here\n    \
    \    return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dbc5ab20bb743babee8821f35a53f4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dbc5ab20bb743babee8821f35a53f4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long count = 0;\n      \
    \  for (int i = 0; i < num.Length; i++) {\n            if (num[i] == '2' || num[i]\
    \ == '3' || num[i] == '5' || num[i] == '7' || num[i] == 'B' || num[i] == 'D')\
    \ {\n                count++;\n            }\n        }\n        return count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // your code here\n    \
    \    return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7a4a60135d414191810d22c55d2376c0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7a4a60135d414191810d22c55d2376c0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long count = 0;\n      \
    \  foreach (char c in num) {\n            if (c == '2' || c == '3' || c == '5'\
    \ || c == '7' || c == 'B' || c == 'D') {\n                count++;\n         \
    \   }\n        }\n        return count;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code here\n    \
    \    return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dbc5ab20bb743babee8821f35a53f4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dbc5ab20bb743babee8821f35a53f4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long count = 0;\n      \
    \  foreach (char c in num) {\n            if (c == '2' || c == '3' || c == '5'\
    \ || c == '7' || c == 'B' || c == 'D') {\n                count++;\n         \
    \   }\n        }\n        return count;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long count = 0;\n      \
    \  for (int i = 0; i < num.Length; i++) {\n            if (num[i] == '2' || num[i]\
    \ == '3' || num[i] == '5' || num[i] == '7' || num[i] == 'B' || num[i] == 'D')\
    \ {\n                count++;\n            }\n        }\n        return count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long count = 0;\n      \
    \  for (int i = 0; i < num.Length; i++) {\n            if (num[i] == '2' || num[i]\
    \ == '3' || num[i] == '5' || num[i] == '7' || num[i] == 'B' || num[i] == 'D')\
    \ {\n                count++;\n            }\n        }\n        return count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long count = 0;\n      \
    \  for (int i = 0; i < num.Length; i++) {\n            if (num[i] == '2' || num[i]\
    \ == '3' || num[i] == '5' || num[i] == '7' || num[i] == 'B' || num[i] == 'D')\
    \ {\n                count++;\n            }\n        }\n        return count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // your code here\n    \
    \    return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7a4a60135d414191810d22c55d2376c0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7a4a60135d414191810d22c55d2376c0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long count = 0;\n      \
    \  for (int i = 0; i < num.Length; i++) {\n            if (num[i] == '2' || num[i]\
    \ == '3' || num[i] == '5' || num[i] == '7' || num[i] == 'B' || num[i] == 'D')\
    \ {\n                count++;\n            }\n        }\n        return count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long count = 0;\n      \
    \  foreach (char c in num) {\n            if (c == '2' || c == '3' || c == '5'\
    \ || c == '7' || c == 'B' || c == 'D') {\n                count++;\n         \
    \   }\n        }\n        return count;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long count = 0;\n      \
    \  foreach (char c in num) {\n            if (c == '2' || c == '3' || c == '5'\
    \ || c == '7' || c == 'B' || c == 'D') {\n                count++;\n         \
    \   }\n        }\n        return count;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long count = 0;\n      \
    \  for (int i = 0; i < num.Length; i++) {\n            if (num[i] == '2' || num[i]\
    \ == '3' || num[i] == '5' || num[i] == '7' || num[i] == 'B' || num[i] == 'D')\
    \ {\n                count++;\n            }\n        }\n        return count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long count = 0;\n      \
    \  char[] hex = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C',\
    \ 'D', 'E', 'F'};\n        List<char> primes = new List<char> {'2', '3', '5',\
    \ '7', 'B', 'D'};\n        foreach (char c in num) {\n            if (primes.Contains(c))\
    \ {\n                count++;\n            }\n        }\n        return count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799229
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        return num.ToCharArray().Count(x\
    \ => \"2357BD\".Contains(x));\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        return num.ToCharArray().Count(c\
    \ => \"2357BD\".Contains(c));\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code here\n    \
    \    return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dbc5ab20bb743babee8821f35a53f4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dbc5ab20bb743babee8821f35a53f4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here.\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c1c1d3a86a3a418a8721f67a89d11cc4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c1c1d3a86a3a418a8721f67a89d11cc4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long count = 0;\n      \
    \  for (int i = 0; i < num.Length; i++) {\n            if (num[i] == '2' || num[i]\
    \ == '3' || num[i] == '5' || num[i] == '7' || num[i] == 'B' || num[i] == 'D')\
    \ {\n                count++;\n            }\n        }\n        return count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long count = 0;\n      \
    \  for (int i = 0; i < num.Length; i++) {\n            if (num[i] == '2' || num[i]\
    \ == '3' || num[i] == '5' || num[i] == '7' || num[i] == 'B' || num[i] == 'D')\
    \ {\n                count++;\n            }\n        }\n        return count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // your code here\n    \
    \    return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7a4a60135d414191810d22c55d2376c0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7a4a60135d414191810d22c55d2376c0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long count = 0;\n      \
    \  for (int i = 0; i < num.Length; i++) {\n            if (num[i] == '2' || num[i]\
    \ == '3' || num[i] == '5' || num[i] == '7' || num[i] == 'B' || num[i] == 'D')\
    \ {\n                count++;\n            }\n        }\n        return count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long count = 0;\n      \
    \  for (int i = 0; i < num.Length; i++) {\n            if (num[i] == '2' || num[i]\
    \ == '3' || num[i] == '5' || num[i] == '7' || num[i] == 'B' || num[i] == 'D')\
    \ {\n                count++;\n            }\n        }\n        return count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        return num.ToCharArray().Count(x\
    \ => \"2357BD\".Contains(x));\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        return num.ToCharArray().Count(c\
    \ => \"2357BD\".Contains(c));\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // your code here\n    \
    \    return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7a4a60135d414191810d22c55d2376c0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7a4a60135d414191810d22c55d2376c0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        return num.ToCharArray().Where(c\
    \ => \"2357BD\".Contains(c)).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799229
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long count = 0;\n      \
    \  for (int i = 0; i < num.Length; i++) {\n            if (num[i] == '2' || num[i]\
    \ == '3' || num[i] == '5' || num[i] == '7' || num[i] == 'B' || num[i] == 'D')\
    \ {\n                count++;\n            }\n        }\n        return count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code here\n    \
    \    return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dbc5ab20bb743babee8821f35a53f4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dbc5ab20bb743babee8821f35a53f4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        return num.ToCharArray().Where(x\
    \ => \"2357BD\".Contains(x)).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        int[] primes = { 2, 3, 5,\
    \ 7, 11, 13 };\n        int[] digits = num.Select(c => Convert.ToInt32(c.ToString(),\
    \ 16)).ToArray();\n        return digits.Count(d => primes.Contains(d));\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799229
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here.\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c1c1d3a86a3a418a8721f67a89d11cc4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c1c1d3a86a3a418a8721f67a89d11cc4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        string hex = \"0123456789ABCDEF\"\
    ;\n        string primes = \"2357BD\";\n        long count = 0;\n        for (int\
    \ i = 0; i < num.Length; i++) {\n            if (primes.Contains(num[i])) {\n\
    \                count++;\n            }\n        }\n        return count;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799229
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code here\n    \
    \    return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dbc5ab20bb743babee8821f35a53f4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dbc5ab20bb743babee8821f35a53f4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // your code here\n    \
    \    return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7a4a60135d414191810d22c55d2376c0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7a4a60135d414191810d22c55d2376c0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code here\n    \
    \    return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dbc5ab20bb743babee8821f35a53f4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dbc5ab20bb743babee8821f35a53f4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long count = 0;\n      \
    \  foreach (char c in num) {\n            if (c == '2' || c == '3' || c == '5'\
    \ || c == '7' || c == 'B' || c == 'D') {\n                count++;\n         \
    \   }\n        }\n        return count;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code here\n    \
    \    return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dbc5ab20bb743babee8821f35a53f4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dbc5ab20bb743babee8821f35a53f4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here.\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c1c1d3a86a3a418a8721f67a89d11cc4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c1c1d3a86a3a418a8721f67a89d11cc4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here.\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c1c1d3a86a3a418a8721f67a89d11cc4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c1c1d3a86a3a418a8721f67a89d11cc4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code here\n    \
    \    return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dbc5ab20bb743babee8821f35a53f4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dbc5ab20bb743babee8821f35a53f4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code here\n    \
    \    return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dbc5ab20bb743babee8821f35a53f4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dbc5ab20bb743babee8821f35a53f4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long count = 0;\n      \
    \  for (int i = 0; i < num.Length; i++) {\n            if (num[i] == '2' || num[i]\
    \ == '3' || num[i] == '5' || num[i] == '7' || num[i] == 'B' || num[i] == 'D')\
    \ {\n                count++;\n            }\n        }\n        return count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code here\n    \
    \    return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dbc5ab20bb743babee8821f35a53f4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dbc5ab20bb743babee8821f35a53f4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here.\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c1c1d3a86a3a418a8721f67a89d11cc4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c1c1d3a86a3a418a8721f67a89d11cc4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long count = 0;\n      \
    \  for (int i = 0; i < num.Length; i++) {\n            if (num[i] == '2' || num[i]\
    \ == '3' || num[i] == '5' || num[i] == '7' || num[i] == 'B' || num[i] == 'D')\
    \ {\n                count++;\n            }\n        }\n        return count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here.\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c1c1d3a86a3a418a8721f67a89d11cc4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c1c1d3a86a3a418a8721f67a89d11cc4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code here\n    \
    \    return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dbc5ab20bb743babee8821f35a53f4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dbc5ab20bb743babee8821f35a53f4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here.\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c1c1d3a86a3a418a8721f67a89d11cc4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c1c1d3a86a3a418a8721f67a89d11cc4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long count = 0;\n      \
    \  foreach (char c in num) {\n            if (c == '2' || c == '3' || c == '5'\
    \ || c == '7' || c == 'B' || c == 'D') {\n                count++;\n         \
    \   }\n        }\n        return count;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        return num.Where(c => \"\
    2357BD\".Contains(c)).Count();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long count = 0;\n      \
    \  foreach (char c in num) {\n            if (c == '2' || c == '3' || c == '5'\
    \ || c == '7' || c == 'B' || c == 'D') {\n                count++;\n         \
    \   }\n        }\n        return count;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long count = 0;\n      \
    \  for (int i = 0; i < num.Length; i++) {\n            if (num[i] == '2' || num[i]\
    \ == '3' || num[i] == '5' || num[i] == '7' || num[i] == 'B' || num[i] == 'D')\
    \ {\n                count++;\n            }\n        }\n        return count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        int[] primes = { 2, 3, 5,\
    \ 7, 11, 13 };\n        int[] hex = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14, 15 };\n        int[] hex_primes = { 2, 3, 5, 7, 11, 13 };\n        int\
    \ count = 0;\n        for (int i = 0; i < num.Length; i++) {\n            for\
    \ (int j = 0; j < hex.Length; j++) {\n                if (num[i] == hex[j]) {\n\
    \                    for (int k = 0; k < hex_primes.Length; k++) {\n         \
    \               if (hex[j] == hex_primes[k]) {\n                            count++;\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n        return count;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a41ad6cded4d401586db7a52edd172b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a41ad6cded4d401586db7a52edd172b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799229
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long count = 0;\n      \
    \  foreach (char c in num) {\n            if (c == '2' || c == '3' || c == '5'\
    \ || c == '7' || c == 'B' || c == 'D') {\n                count++;\n         \
    \   }\n        }\n        return count;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long count = 0;\n      \
    \  for (int i = 0; i < num.Length; i++) {\n            if (num[i] == '2' || num[i]\
    \ == '3' || num[i] == '5' || num[i] == '7' || num[i] == 'B' || num[i] == 'D')\
    \ {\n                count++;\n            }\n        }\n        return count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        return num.ToCharArray().Where(c\
    \ => \"2357BD\".Contains(c)).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799229
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code here\n    \
    \    return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dbc5ab20bb743babee8821f35a53f4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dbc5ab20bb743babee8821f35a53f4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here.\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c1c1d3a86a3a418a8721f67a89d11cc4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c1c1d3a86a3a418a8721f67a89d11cc4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here.\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c1c1d3a86a3a418a8721f67a89d11cc4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c1c1d3a86a3a418a8721f67a89d11cc4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        return num.ToCharArray().Count(c\
    \ => \"2357BD\".Contains(c));\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long count = 0;\n      \
    \  foreach (char c in num) {\n            switch (c) {\n                case '2':\n\
    \                case '3':\n                case '5':\n                case '7':\n\
    \                case 'B':\n                case 'D':\n                    count++;\n\
    \                    break;\n            }\n        }\n        return count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long count = 0;\n      \
    \  foreach (char c in num) {\n            if (c == '2' || c == '3' || c == '5'\
    \ || c == '7' || c == 'B' || c == 'D') {\n                count++;\n         \
    \   }\n        }\n        return count;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code here\n    \
    \    return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dbc5ab20bb743babee8821f35a53f4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dbc5ab20bb743babee8821f35a53f4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        return num.ToCharArray().Count(x\
    \ => \"2357BD\".Contains(x));\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long count = 0;\n      \
    \  for (int i = 0; i < num.Length; i++) {\n            if (num[i] == '2' || num[i]\
    \ == '3' || num[i] == '5' || num[i] == '7' || num[i] == 'B' || num[i] == 'D')\
    \ {\n                count++;\n            }\n        }\n        return count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code here\n    \
    \    return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dbc5ab20bb743babee8821f35a53f4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dbc5ab20bb743babee8821f35a53f4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code here\n    \
    \    return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dbc5ab20bb743babee8821f35a53f4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dbc5ab20bb743babee8821f35a53f4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long count = 0;\n      \
    \  foreach (char c in num) {\n            int i = Convert.ToInt32(c.ToString(),\
    \ 16);\n            if (i == 2 || i == 3 || i == 5 || i == 7 || i == 11 || i ==\
    \ 13) {\n                count++;\n            }\n        }\n        return count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799066
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here.\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c1c1d3a86a3a418a8721f67a89d11cc4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c1c1d3a86a3a418a8721f67a89d11cc4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long count = 0;\n      \
    \  foreach (char c in num) {\n            if (c == '2' || c == '3' || c == '5'\
    \ || c == '7' || c == 'B' || c == 'D') {\n                count++;\n         \
    \   }\n        }\n        return count;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        var primes = new List<int>\
    \ { 2, 3, 5, 7, 11, 13 };\n        var hex = new List<char> { '0', '1', '2', '3',\
    \ '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };\n        var count\
    \ = 0;\n        foreach (var c in num) {\n            if (primes.Contains(hex.IndexOf(c)))\
    \ {\n                count++;\n            }\n        }\n        return count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799229
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code here\n    \
    \    return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dbc5ab20bb743babee8821f35a53f4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dbc5ab20bb743babee8821f35a53f4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        return num.Count(c => \"\
    2357BD\".Contains(c));\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"\
    )) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code here\n    \
    \    return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dbc5ab20bb743babee8821f35a53f4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dbc5ab20bb743babee8821f35a53f4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        var primes = new HashSet<int>()\
    \ { 2, 3, 5, 7, 11, 13 };\n        return num.ToCharArray().Select(c => Convert.ToInt32(c.ToString(),\
    \ 16)).Count(p => primes.Contains(p));\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799229
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num) {\n            int i = Convert.ToInt32(c.ToString(),\
    \ 16);\n            if (i == 2 || i == 3 || i == 5 || i == 7 || i == 11 || i ==\
    \ 13) {\n                result++;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799229
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long count = 0;\n      \
    \  for (int i = 0; i < num.Length; i++) {\n            if (num[i] == '2' || num[i]\
    \ == '3' || num[i] == '5' || num[i] == '7' || num[i] == 'B' || num[i] == 'D')\
    \ {\n                count++;\n            }\n        }\n        return count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long count = 0;\n      \
    \  for (int i = 0; i < num.Length; i++) {\n            if (num[i] == '2' || num[i]\
    \ == '3' || num[i] == '5' || num[i] == '7' || num[i] == 'B' || num[i] == 'D')\
    \ {\n                count++;\n            }\n        }\n        return count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long count = 0;\n      \
    \  foreach (char c in num) {\n            if (c == '2' || c == '3' || c == '5'\
    \ || c == '7' || c == 'B' || c == 'D') {\n                count++;\n         \
    \   }\n        }\n        return count;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long count = 0;\n      \
    \  foreach (char c in num) {\n            if (c == '2' || c == '3' || c == '5'\
    \ || c == '7' || c == 'B' || c == 'D') {\n                count++;\n         \
    \   }\n        }\n        return count;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long count = 0;\n      \
    \  foreach (char c in num) {\n            if (c == '2' || c == '3' || c == '5'\
    \ || c == '7' || c == 'B' || c == 'D') {\n                count++;\n         \
    \   }\n        }\n        return count;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long count = 0;\n      \
    \  foreach (char c in num) {\n            if (c == '2' || c == '3' || c == '5'\
    \ || c == '7' || c == 'B' || c == 'D') {\n                count++;\n         \
    \   }\n        }\n        return count;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code here\n    \
    \    return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dbc5ab20bb743babee8821f35a53f4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dbc5ab20bb743babee8821f35a53f4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        var primes = new HashSet<int>\
    \ { 2, 3, 5, 7, 11, 13 };\n        var hex = new HashSet<char> { '0', '1', '2',\
    \ '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };\n       \
    \ var count = 0;\n        foreach (var c in num) {\n            if (hex.Contains(c)\
    \ && primes.Contains(int.Parse(c.ToString(), System.Globalization.NumberStyles.HexNumber)))\
    \ {\n                count++;\n            }\n        }\n        return count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799229
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code here\n    \
    \    return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dbc5ab20bb743babee8821f35a53f4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dbc5ab20bb743babee8821f35a53f4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long count = 0;\n      \
    \  for (int i = 0; i < num.Length; i++) {\n            if (num[i] == '2' || num[i]\
    \ == '3' || num[i] == '5' || num[i] == '7' || num[i] == 'B' || num[i] == 'D')\
    \ {\n                count++;\n            }\n        }\n        return count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here.\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c1c1d3a86a3a418a8721f67a89d11cc4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c1c1d3a86a3a418a8721f67a89d11cc4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code here\n    \
    \    return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dbc5ab20bb743babee8821f35a53f4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dbc5ab20bb743babee8821f35a53f4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // your code here\n    \
    \    return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7a4a60135d414191810d22c55d2376c0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7a4a60135d414191810d22c55d2376c0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long count = 0;\n      \
    \  for (int i = 0; i < num.Length; i++) {\n            if (num[i] == '2' || num[i]\
    \ == '3' || num[i] == '5' || num[i] == '7' || num[i] == 'B' || num[i] == 'D')\
    \ {\n                count++;\n            }\n        }\n        return count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code here\n    \
    \    return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dbc5ab20bb743babee8821f35a53f4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dbc5ab20bb743babee8821f35a53f4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code here\n    \
    \    return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dbc5ab20bb743babee8821f35a53f4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dbc5ab20bb743babee8821f35a53f4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        return num.Count(c => \"\
    2357BD\".Contains(c));\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"\
    )) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // your code here\n    \
    \    return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7a4a60135d414191810d22c55d2376c0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7a4a60135d414191810d22c55d2376c0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long count = 0;\n      \
    \  for (int i = 0; i < num.Length; i++) {\n            if (num[i] == '2' || num[i]\
    \ == '3' || num[i] == '5' || num[i] == '7' || num[i] == 'B' || num[i] == 'D')\
    \ {\n                count++;\n            }\n        }\n        return count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // your code here\n    \
    \    return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7a4a60135d414191810d22c55d2376c0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7a4a60135d414191810d22c55d2376c0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long count = 0;\n      \
    \  for (int i = 0; i < num.Length; i++) {\n            if (num[i] == '2' || num[i]\
    \ == '3' || num[i] == '5' || num[i] == '7' || num[i] == 'B' || num[i] == 'D')\
    \ {\n                count++;\n            }\n        }\n        return count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long count = 0;\n      \
    \  foreach (char c in num) {\n            if (c == '2' || c == '3' || c == '5'\
    \ || c == '7' || c == 'B' || c == 'D') {\n                count++;\n         \
    \   }\n        }\n        return count;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code here\n    \
    \    return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dbc5ab20bb743babee8821f35a53f4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dbc5ab20bb743babee8821f35a53f4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long count = 0;\n      \
    \  foreach (char c in num) {\n            if (c == '2' || c == '3' || c == '5'\
    \ || c == '7' || c == 'B' || c == 'D') {\n                count++;\n         \
    \   }\n        }\n        return count;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        return num.ToCharArray().Count(c\
    \ => \"2357BD\".Contains(c));\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code here\n    \
    \    return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dbc5ab20bb743babee8821f35a53f4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dbc5ab20bb743babee8821f35a53f4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code here\n    \
    \    return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dbc5ab20bb743babee8821f35a53f4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dbc5ab20bb743babee8821f35a53f4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code here\n    \
    \    return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dbc5ab20bb743babee8821f35a53f4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dbc5ab20bb743babee8821f35a53f4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code here\n    \
    \    return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dbc5ab20bb743babee8821f35a53f4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dbc5ab20bb743babee8821f35a53f4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code here\n    \
    \    return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dbc5ab20bb743babee8821f35a53f4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dbc5ab20bb743babee8821f35a53f4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long count = 0;\n      \
    \  for (int i = 0; i < num.Length; i++) {\n            if (num[i] == '2' || num[i]\
    \ == '3' || num[i] == '5' || num[i] == '7' || num[i] == 'B' || num[i] == 'D')\
    \ {\n                count++;\n            }\n        }\n        return count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long count = 0;\n      \
    \  foreach (char c in num) {\n            if (c == '2' || c == '3' || c == '5'\
    \ || c == '7' || c == 'B' || c == 'D') {\n                count++;\n         \
    \   }\n        }\n        return count;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long count = 0;\n      \
    \  foreach (char c in num) {\n            if (c == '2' || c == '3' || c == '5'\
    \ || c == '7' || c == 'B' || c == 'D') {\n                count++;\n         \
    \   }\n        }\n        return count;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        return num.ToCharArray().Count(c\
    \ => \"2357BD\".Contains(c));\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long count = 0;\n      \
    \  foreach (char c in num) {\n            if (c == '2' || c == '3' || c == '5'\
    \ || c == '7' || c == 'B' || c == 'D') {\n                count++;\n         \
    \   }\n        }\n        return count;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        var hex = new Dictionary<char,\
    \ int>() {\n            {'0', 0}, {'1', 1}, {'2', 2}, {'3', 3}, {'4', 4}, {'5',\
    \ 5}, {'6', 6}, {'7', 7}, {'8', 8}, {'9', 9},\n            {'A', 10}, {'B', 11},\
    \ {'C', 12}, {'D', 13}, {'E', 14}, {'F', 15}\n        };\n        var primes =\
    \ new HashSet<int>() {2, 3, 5, 7, 11, 13};\n        return num.Select(c => hex[c]).Count(x\
    \ => primes.Contains(x));\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"\
    )) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799229
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long count = 0;\n      \
    \  foreach (char c in num) {\n            if (c == '2' || c == '3' || c == '5'\
    \ || c == '7' || c == 'B' || c == 'D') {\n                count++;\n         \
    \   }\n        }\n        return count;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here.\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c1c1d3a86a3a418a8721f67a89d11cc4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c1c1d3a86a3a418a8721f67a89d11cc4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long count = 0;\n      \
    \  foreach (char c in num) {\n            if (c == '2' || c == '3' || c == '5'\
    \ || c == '7' || c == 'B' || c == 'D') {\n                count++;\n         \
    \   }\n        }\n        return count;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        return num.ToCharArray().Select(x\
    \ => Convert.ToInt32(x.ToString(), 16)).Where(x => x == 2 || x == 3 || x == 5\
    \ || x == 7 || x == 11 || x == 13).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799229
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long count = 0;\n      \
    \  foreach (char c in num) {\n            if (c == '2' || c == '3' || c == '5'\
    \ || c == '7' || c == 'B' || c == 'D') {\n                count++;\n         \
    \   }\n        }\n        return count;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code here\n    \
    \    return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dbc5ab20bb743babee8821f35a53f4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dbc5ab20bb743babee8821f35a53f4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code here\n    \
    \    return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dbc5ab20bb743babee8821f35a53f4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dbc5ab20bb743babee8821f35a53f4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code here\n    \
    \    return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dbc5ab20bb743babee8821f35a53f4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dbc5ab20bb743babee8821f35a53f4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        return num.ToCharArray().Count(c\
    \ => \"2357BD\".Contains(c));\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long count = 0;\n      \
    \  for (int i = 0; i < num.Length; i++) {\n            if (num[i] == '2' || num[i]\
    \ == '3' || num[i] == '5' || num[i] == '7' || num[i] == 'B' || num[i] == 'D')\
    \ {\n                count++;\n            }\n        }\n        return count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        var hex = new HashSet<char>()\
    \ { '2', '3', '5', '7', 'B', 'D' };\n        return num.Count(c => hex.Contains(c));\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799229
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        return num.ToCharArray().Count(c\
    \ => \"2357BD\".Contains(c));\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long count = 0;\n      \
    \  foreach (char c in num) {\n            if (c == '2' || c == '3' || c == '5'\
    \ || c == '7' || c == 'B' || c == 'D') {\n                count++;\n         \
    \   }\n        }\n        return count;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // your code here\n    \
    \    return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7a4a60135d414191810d22c55d2376c0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7a4a60135d414191810d22c55d2376c0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        var primes = new HashSet<int>\
    \ { 2, 3, 5, 7, 11, 13 };\n        return num.Select(c => (int)c).Where(c => primes.Contains(c)).Count();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <17aae2041e9447acb9c9190c8bf1f05b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <17aae2041e9447acb9c9190c8bf1f05b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799229
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long count = 0;\n      \
    \  for (int i = 0; i < num.Length; i++) {\n            if (num[i] == '2' || num[i]\
    \ == '3' || num[i] == '5' || num[i] == '7' || num[i] == 'B' || num[i] == 'D')\
    \ {\n                count++;\n            }\n        }\n        return count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long count = 0;\n      \
    \  for (int i = 0; i < num.Length; i++) {\n            if (num[i] == '2' || num[i]\
    \ == '3' || num[i] == '5' || num[i] == '7' || num[i] == 'B' || num[i] == 'D')\
    \ {\n                count++;\n            }\n        }\n        return count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        var primes = new HashSet<int>()\
    \ { 2, 3, 5, 7, 11, 13 };\n        var hex = new HashSet<char>() { '0', '1', '2',\
    \ '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };\n       \
    \ var digits = num.ToCharArray();\n        var count = 0;\n        foreach (var\
    \ digit in digits) {\n            if (hex.Contains(digit) && primes.Contains(int.Parse(digit.ToString(),\
    \ System.Globalization.NumberStyles.HexNumber))) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799229
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here.\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c1c1d3a86a3a418a8721f67a89d11cc4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c1c1d3a86a3a418a8721f67a89d11cc4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long count = 0;\n      \
    \  foreach (char c in num) {\n            if (c == '2' || c == '3' || c == '5'\
    \ || c == '7' || c == 'B' || c == 'D') {\n                count++;\n         \
    \   }\n        }\n        return count;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799065
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        // Your code goes here\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <200acdfbae7c4aeb9124c08e39c8ee35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799065
