name: HumanEval_15_string_sequence
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Return a string containing space-delimited numbers starting\
  \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n  \
  \  // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static string\
  \ StringSequence(long n) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
  0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
  0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
completions: ["        var sb = new StringBuilder();\n        for (long i = 0; i <=\
    \ n; i++) {\n            sb.Append(i);\n            sb.Append(' ');\n        }\n\
    \        return sb.ToString();", '        return string.Join(" ", Enumerable.Range(0,
    (int)n + 1));', "        var sb = new StringBuilder();\n        for (long i =\
    \ 0; i <= n; i++) {\n            sb.Append(i);\n            sb.Append(' ');\n\
    \        }\n        return sb.ToString();", '        return string.Join(" ", Enumerable.Range(0,
    (int)n + 1));', "        var sb = new StringBuilder();\n        for (var i = 0L;\
    \ i <= n; i++) {\n            if (i > 0) {\n                sb.Append(\" \");\n\
    \            }\n            sb.Append(i);\n        }\n        return sb.ToString();",
  "        var sb = new StringBuilder();\n        for (long i = 0; i <= n; i++) {\n\
    \            sb.Append(i);\n            sb.Append(' ');\n        }\n        return\
    \ sb.ToString();", "        var sb = new StringBuilder();\n        for (var i\
    \ = 0L; i <= n; i++) {\n            if (i > 0) {\n                sb.Append(\"\
    \ \");\n            }\n            sb.Append(i);\n        }\n        return sb.ToString();",
  '        return string.Join(" ", Enumerable.Range(0, (int)n + 1));', "        var\
    \ sb = new StringBuilder();\n        for (long i = 0; i <= n; i++) {\n       \
    \     sb.Append(i);\n            sb.Append(' ');\n        }\n        return sb.ToString();",
  '        return string.Join(" ", Enumerable.Range(0, (int)n + 1));', "        var\
    \ sb = new StringBuilder();\n        for (var i = 0L; i <= n; i++) {\n       \
    \     if (i > 0) {\n                sb.Append(\" \");\n            }\n       \
    \     sb.Append(i);\n        }\n        return sb.ToString();", "        var sb\
    \ = new StringBuilder();\n        for (long i = 0; i <= n; i++) {\n          \
    \  sb.Append(i);\n            sb.Append(' ');\n        }\n        return sb.ToString();",
  "        var sb = new StringBuilder();\n        for (long i = 0; i <= n; i++) {\n\
    \            sb.Append(i);\n            sb.Append(' ');\n        }\n        return\
    \ sb.ToString();", "        var sb = new StringBuilder();\n        for (long i\
    \ = 0; i <= n; i++) {\n            sb.Append(i);\n            sb.Append(' ');\n\
    \        }\n        return sb.ToString();", "        string result = \"\";\n \
    \       for (long i = 0; i <= n; i++) {\n            result += i.ToString() +\
    \ \" \";\n        }\n        return result.Trim();", "        var sb = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            sb.Append(i);\n        \
    \    sb.Append(' ');\n        }\n        return sb.ToString();", '        return
    string.Join(" ", Enumerable.Range(0, (int)n + 1));', "        var sb = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            sb.Append(i);\n        \
    \    sb.Append(' ');\n        }\n        return sb.ToString().Trim();", '        return
    string.Join(" ", Enumerable.Range(0, (int)n + 1));', '        return string.Join("
    ", Enumerable.Range(0, (int)n + 1));', "        var sb = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            if (i > 0) {\n         \
    \       sb.Append(\" \");\n            }\n            sb.Append(i);\n        }\n\
    \        return sb.ToString();", "        string s = \"\";\n        for (long\
    \ i = 0; i <= n; i++) {\n            s += i + \" \";\n        }\n        return\
    \ s.Trim();", '        return string.Join(" ", Enumerable.Range(0, (int)n + 1));',
  '        return String.Join(" ", Enumerable.Range(0, (int)n + 1).Select(i => i.ToString()));',
  '        return string.Join(" ", Enumerable.Range(0, (int)n + 1));', "        var\
    \ sb = new StringBuilder();\n        for (long i = 0; i <= n; i++) {\n       \
    \     sb.Append(i);\n            sb.Append(' ');\n        }\n        return sb.ToString().Trim();",
  '        return string.Join(" ", Enumerable.Range(0, (int)n + 1));', "        var\
    \ sb = new StringBuilder();\n        for (long i = 0; i <= n; i++) {\n       \
    \     if (i > 0) {\n                sb.Append(\" \");\n            }\n       \
    \     sb.Append(i);\n        }\n        return sb.ToString();", "        StringBuilder\
    \ sb = new StringBuilder();\n        for (long i = 0; i <= n; i++) {\n       \
    \     sb.Append(i);\n            sb.Append(' ');\n        }\n        return sb.ToString();",
  "        var sb = new StringBuilder();\n        for (var i = 0L; i <= n; i++) {\n\
    \            if (i > 0) {\n                sb.Append(\" \");\n            }\n\
    \            sb.Append(i);\n        }\n        return sb.ToString();", '        return
    string.Join(" ", Enumerable.Range(0, (int)n + 1));', "        var sb = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            if (i > 0) {\n         \
    \       sb.Append(\" \");\n            }\n            sb.Append(i);\n        }\n\
    \        return sb.ToString();", "        string result = \"\";\n        for (long\
    \ i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n       \
    \ }\n        return result.Trim();", '        return string.Join(" ", Enumerable.Range(0,
    (int)n + 1));', '        return String.Join(" ", Enumerable.Range(0, (int)n +
    1).Select(x => x.ToString()));', '        return string.Join(" ", Enumerable.Range(0,
    (int)n + 1));', "        var sb = new StringBuilder();\n        for (long i =\
    \ 0; i <= n; i++) {\n            sb.Append(i);\n            sb.Append(' ');\n\
    \        }\n        return sb.ToString();", "        string s = \"\";\n      \
    \  for (long i = 0; i <= n; i++) {\n            s += i.ToString() + \" \";\n \
    \       }\n        return s.Trim();", "        string result = \"\";\n       \
    \ for (long i = 0; i <= n; i++) {\n            result += i.ToString() + \" \"\
    ;\n        }\n        return result.Trim();", '        return string.Join(" ",
    Enumerable.Range(0, (int)n + 1));', "        var sb = new StringBuilder();\n \
    \       for (var i = 0L; i <= n; i++) {\n            if (i > 0) {\n          \
    \      sb.Append(\" \");\n            }\n            sb.Append(i);\n        }\n\
    \        return sb.ToString();", "        string result = \"\";\n        for (long\
    \ i = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n       \
    \ }\n        return result.Trim();", "        StringBuilder sb = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            sb.Append(i);\n        \
    \    sb.Append(' ');\n        }\n        return sb.ToString();", "        var\
    \ sb = new StringBuilder();\n        for (var i = 0L; i <= n; i++) {\n       \
    \     if (i > 0) {\n                sb.Append(\" \");\n            }\n       \
    \     sb.Append(i);\n        }\n        return sb.ToString();", "        var sb\
    \ = new StringBuilder();\n        for (var i = 0L; i <= n; i++) {\n          \
    \  if (i > 0) {\n                sb.Append(\" \");\n            }\n          \
    \  sb.Append(i);\n        }\n        return sb.ToString();", "        var sb =\
    \ new StringBuilder();\n        for (long i = 0; i <= n; i++) {\n            sb.Append(i);\n\
    \            sb.Append(' ');\n        }\n        return sb.ToString();", "   \
    \     if (n < 0) {\n            throw new ArgumentException(\"n must be non-negative.\"\
    );\n        }\n        return string.Join(\" \", Enumerable.Range(0, (int)n +\
    \ 1));", "        var sb = new StringBuilder();\n        for (long i = 0; i <=\
    \ n; i++) {\n            sb.Append(i);\n            sb.Append(' ');\n        }\n\
    \        return sb.ToString();", '        return string.Join(" ", Enumerable.Range(0,
    (int)n + 1));', "        var result = new StringBuilder();\n        for (long\
    \ i = 0; i <= n; i++) {\n            result.Append(i);\n            result.Append(\"\
    \ \");\n        }\n        return result.ToString();", "        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n        \
    \    sb.Append(i);\n            sb.Append(' ');\n        }\n        return sb.ToString().Trim();",
  '        return string.Join(" ", Enumerable.Range(0, (int)n + 1));', "        var\
    \ sb = new StringBuilder();\n        for (long i = 0; i <= n; i++) {\n       \
    \     sb.Append(i);\n            sb.Append(' ');\n        }\n        return sb.ToString();",
  "        var sb = new StringBuilder();\n        for (var i = 0L; i <= n; i++) {\n\
    \            sb.Append(i);\n            sb.Append(' ');\n        }\n        return\
    \ sb.ToString().Trim();", '        return string.Join(" ", Enumerable.Range(0,
    (int)n + 1));', '        return string.Join(" ", Enumerable.Range(0, (int)n +
    1));', "        var result = new StringBuilder();\n        for (var i = 0L; i\
    \ <= n; i++) {\n            result.Append(i);\n            result.Append(\" \"\
    );\n        }\n        return result.ToString().Trim();", "        string ret\
    \ = \"\";\n        for (long i = 0; i <= n; i++) {\n            ret += i.ToString()\
    \ + \" \";\n        }\n        return ret.Trim();", "        var sb = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            sb.Append(i);\n        \
    \    sb.Append(' ');\n        }\n        return sb.ToString();", "        if (n\
    \ == 0) {\n            return \"0\";\n        }\n        var sb = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            sb.Append(i);\n        \
    \    sb.Append(' ');\n        }\n        sb.Length--;\n        return sb.ToString();",
  "        var sb = new StringBuilder();\n        for (long i = 0; i <= n; i++) {\n\
    \            sb.Append(i);\n            sb.Append(' ');\n        }\n        return\
    \ sb.ToString();", "        var sb = new StringBuilder();\n        for (long i\
    \ = 0; i <= n; i++) {\n            sb.Append(i);\n            sb.Append(' ');\n\
    \        }\n        return sb.ToString();", '        return string.Join(" ", Enumerable.Range(0,
    (int)n + 1));', '        return string.Join(" ", Enumerable.Range(0, (int)n +
    1));', "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n\
    \            result += i.ToString() + \" \";\n        }\n        return result.Trim();",
  '        return string.Join(" ", Enumerable.Range(0, (int)n + 1));', "        if\
    \ (n < 0) {\n            throw new ArgumentException(\"n must be non-negative\"\
    );\n        }\n        var sb = new StringBuilder();\n        for (var i = 0L;\
    \ i <= n; i++) {\n            if (i > 0) {\n                sb.Append(' ');\n\
    \            }\n            sb.Append(i);\n        }\n        return sb.ToString();",
  "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <= n;\
    \ i++) {\n            sb.Append(i);\n            sb.Append(' ');\n        }\n\
    \        return sb.ToString();", "        var sb = new StringBuilder();\n    \
    \    for (var i = 0L; i <= n; i++) {\n            sb.Append(i);\n            sb.Append('\
    \ ');\n        }\n        return sb.ToString().Trim();", "        string result\
    \ = \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString()\
    \ + \" \";\n        }\n        return result.Trim();", "        var sb = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            sb.Append(i);\n        \
    \    sb.Append(' ');\n        }\n        return sb.ToString().Trim();", "    \
    \    var sb = new StringBuilder();\n        for (long i = 0; i <= n; i++) {\n\
    \            sb.Append(i);\n            sb.Append(' ');\n        }\n        return\
    \ sb.ToString().Trim();", "        var sb = new StringBuilder();\n        for\
    \ (var i = 0L; i <= n; i++) {\n            if (i > 0) {\n                sb.Append(\"\
    \ \");\n            }\n            sb.Append(i);\n        }\n        return sb.ToString();",
  '        return String.Join(" ", Enumerable.Range(0, (int)n + 1).Select(x => x.ToString()));',
  "        if (n == 0) {\n            return \"0\";\n        }\n        var sb = new\
    \ StringBuilder();\n        for (long i = 0; i <= n; i++) {\n            sb.Append(i);\n\
    \            sb.Append(' ');\n        }\n        return sb.ToString();", "   \
    \     var sb = new StringBuilder();\n        for (long i = 0; i <= n; i++) {\n\
    \            sb.Append(i);\n            sb.Append(' ');\n        }\n        return\
    \ sb.ToString();", "        var sb = new StringBuilder();\n        for (long i\
    \ = 0; i <= n; i++) {\n            sb.Append(i.ToString());\n            sb.Append('\
    \ ');\n        }\n        return sb.ToString();", "        StringBuilder sb =\
    \ new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            sb.Append(i);\n\
    \            sb.Append(\" \");\n        }\n        return sb.ToString().Trim();",
  "        var sb = new StringBuilder();\n        for (long i = 0; i <= n; i++) {\n\
    \            sb.Append(i);\n            sb.Append(' ');\n        }\n        return\
    \ sb.ToString().Trim();", "        var sb = new StringBuilder();\n        for\
    \ (var i = 0L; i <= n; i++) {\n            if (i > 0) {\n                sb.Append(\"\
    \ \");\n            }\n            sb.Append(i);\n        }\n        return sb.ToString();",
  "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <= n;\
    \ i++) {\n            sb.Append(i);\n            sb.Append(\" \");\n        }\n\
    \        return sb.ToString().Trim();", "        string s = \"\";\n        for\
    \ (long i = 0; i <= n; i++) {\n            s += i.ToString() + \" \";\n      \
    \  }\n        return s.Trim();", "        var sb = new StringBuilder();\n    \
    \    for (var i = 0L; i <= n; i++) {\n            if (i > 0) {\n             \
    \   sb.Append(\" \");\n            }\n            sb.Append(i);\n        }\n \
    \       return sb.ToString();", '        return string.Join(" ", Enumerable.Range(0,
    (int)n + 1));', '        return string.Join(" ", Enumerable.Range(0, (int)n +
    1));', "        var sb = new StringBuilder();\n        for (var i = 0L; i <= n;\
    \ i++) {\n            if (i > 0) {\n                sb.Append(\" \");\n      \
    \      }\n            sb.Append(i);\n        }\n        return sb.ToString();",
  "        string result = \"\";\n        for (long i = 0; i <= n; i++) {\n      \
    \      result += i.ToString() + \" \";\n        }\n        return result.Trim();",
  "        var sb = new StringBuilder();\n        for (var i = 0L; i <= n; i++) {\n\
    \            if (i > 0) {\n                sb.Append(\" \");\n            }\n\
    \            sb.Append(i);\n        }\n        return sb.ToString();", '        return
    string.Join(" ", Enumerable.Range(0, (int)n + 1));', '        return string.Join("
    ", Enumerable.Range(0, (int)n + 1));', "        var sb = new StringBuilder();\n\
    \        for (var i = 0L; i <= n; i++) {\n            if (i > 0) {\n         \
    \       sb.Append(\" \");\n            }\n            sb.Append(i);\n        }\n\
    \        return sb.ToString();", "        var sb = new StringBuilder();\n    \
    \    for (var i = 0L; i <= n; i++) {\n            if (i > 0) {\n             \
    \   sb.Append(\" \");\n            }\n            sb.Append(i);\n        }\n \
    \       return sb.ToString();", '        return string.Join(" ", Enumerable.Range(0,
    (int)n + 1));', "        var sb = new StringBuilder();\n        for (long i =\
    \ 0; i <= n; i++) {\n            sb.Append(i);\n            sb.Append(' ');\n\
    \        }\n        return sb.ToString();", "        var sb = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            sb.Append(i);\n        \
    \    sb.Append(' ');\n        }\n        return sb.ToString().Trim();", "    \
    \    var sb = new StringBuilder();\n        for (long i = 0; i <= n; i++) {\n\
    \            sb.Append(i);\n            sb.Append(' ');\n        }\n        return\
    \ sb.ToString().Trim();", '        return string.Join(" ", Enumerable.Range(0,
    (int)n + 1));', '        return String.Join(" ", Enumerable.Range(0, (int)n +
    1).Select(x => x.ToString()));', '        return string.Join(" ", Enumerable.Range(0,
    (int)n + 1));', '        return string.Join(" ", Enumerable.Range(0, (int)n +
    1));', "        var sb = new StringBuilder();\n        for (var i = 0L; i <= n;\
    \ i++) {\n            if (i > 0) {\n                sb.Append(\" \");\n      \
    \      }\n            sb.Append(i);\n        }\n        return sb.ToString();",
  "        var sb = new StringBuilder();\n        for (var i = 0L; i <= n; i++) {\n\
    \            if (i > 0) sb.Append(' ');\n            sb.Append(i);\n        }\n\
    \        return sb.ToString();", "        if (n < 0) {\n            throw new\
    \ ArgumentException(\"n must be non-negative\");\n        }\n        return string.Join(\"\
    \ \", Enumerable.Range(0, (int)n + 1));", '        return string.Join(" ", Enumerable.Range(0,
    (int)n + 1));', "        var sb = new StringBuilder();\n        for (long i =\
    \ 0; i <= n; i++) {\n            sb.Append(i);\n            sb.Append(' ');\n\
    \        }\n        return sb.ToString().Trim();", "        string s = \"\";\n\
    \        for (long i = 0; i <= n; i++) {\n            s += i.ToString() + \" \"\
    ;\n        }\n        return s.Trim();", "        var sb = new StringBuilder();\n\
    \        for (var i = 0L; i <= n; i++) {\n            sb.Append(i);\n        \
    \    sb.Append(' ');\n        }\n        return sb.ToString().Trim();", "    \
    \    string result = \"\";\n        for (long i = 0; i <= n; i++) {\n        \
    \    result += i.ToString() + \" \";\n        }\n        return result.Trim();",
  "        var sb = new StringBuilder();\n        for (var i = 0L; i <= n; i++) {\n\
    \            sb.Append(i);\n            sb.Append(' ');\n        }\n        return\
    \ sb.ToString().Trim();", "        string result = \"\";\n        for (long i\
    \ = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n\
    \        return result.Trim();", "        var sb = new StringBuilder();\n    \
    \    for (var i = 0L; i <= n; i++) {\n            sb.Append(i);\n            sb.Append('\
    \ ');\n        }\n        return sb.ToString();", '        return string.Join("
    ", Enumerable.Range(0, (int)n + 1));', "        var sb = new StringBuilder();\n\
    \        for (var i = 0L; i <= n; i++) {\n            sb.Append(i);\n        \
    \    sb.Append(' ');\n        }\n        return sb.ToString();", '        return
    string.Join(" ", Enumerable.Range(0, (int)n + 1));', "        string result =\
    \ \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString()\
    \ + \" \";\n        }\n        return result.Trim();", '        return string.Join("
    ", Enumerable.Range(0, (int)n + 1));', '        return string.Join(" ", Enumerable.Range(0,
    (int)n + 1));', "        var sb = new StringBuilder();\n        for (long i =\
    \ 0; i <= n; i++) {\n            sb.Append(i);\n            sb.Append(' ');\n\
    \        }\n        return sb.ToString().Trim();", "        var sb = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            sb.Append(i);\n        \
    \    sb.Append(' ');\n        }\n        return sb.ToString().Trim();", "    \
    \    var sb = new StringBuilder();\n        for (long i = 0; i <= n; i++) {\n\
    \            sb.Append(i);\n            sb.Append(' ');\n        }\n        return\
    \ sb.ToString().Trim();", '        return string.Join(" ", Enumerable.Range(0,
    (int)n + 1));', "        string result = \"\";\n        for (long i = 0; i <=\
    \ n; i++) {\n            result += i.ToString() + \" \";\n        }\n        return\
    \ result.Trim();", "        string s = \"\";\n        for (int i = 0; i <= n;\
    \ i++) {\n            s += i.ToString() + \" \";\n        }\n        return s.Trim();",
  "        var sb = new StringBuilder();\n        for (var i = 0L; i <= n; i++) {\n\
    \            sb.Append(i);\n            sb.Append(' ');\n        }\n        return\
    \ sb.ToString().Trim();", "        string result = \"\";\n        for (long i\
    \ = 0; i <= n; i++) {\n            result += i.ToString() + \" \";\n        }\n\
    \        return result.Trim();", "        var sb = new StringBuilder();\n    \
    \    for (var i = 0L; i <= n; i++) {\n            sb.Append(i);\n            sb.Append('\
    \ ');\n        }\n        return sb.ToString();", "        var sb = new StringBuilder();\n\
    \        for (var i = 0L; i <= n; i++) {\n            sb.Append(i);\n        \
    \    sb.Append(' ');\n        }\n        return sb.ToString().Trim();", "    \
    \    if (n < 0) {\n            throw new ArgumentException(\"n must be non-negative.\"\
    );\n        }\n        return string.Join(\" \", Enumerable.Range(0, (int)n +\
    \ 1));", '        return string.Join(" ", Enumerable.Range(0, (int)n + 1));',
  "        var sb = new StringBuilder();\n        for (long i = 0; i <= n; i++) {\n\
    \            sb.Append(i);\n            sb.Append(' ');\n        }\n        return\
    \ sb.ToString();", '        return string.Join(" ", Enumerable.Range(0, (int)n
    + 1));', "        var sb = new StringBuilder();\n        for (long i = 0; i <=\
    \ n; i++) {\n            sb.Append(i + \" \");\n        }\n        return sb.ToString().Trim();",
  '        return string.Join(" ", Enumerable.Range(0, (int)n + 1));', "        var\
    \ sb = new StringBuilder();\n        for (long i = 0; i <= n; i++) {\n       \
    \     sb.Append(i.ToString());\n            sb.Append(' ');\n        }\n     \
    \   return sb.ToString();", '        return String.Join(" ", Enumerable.Range(0,
    (int)n + 1).Select(x => x.ToString()));', '        return string.Join(" ", Enumerable.Range(0,
    (int)n + 1));', "        var sb = new StringBuilder();\n        for (long i =\
    \ 0; i <= n; i++) {\n            sb.Append(i);\n            sb.Append(' ');\n\
    \        }\n        return sb.ToString();", "        var sb = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            sb.Append(i);\n        \
    \    sb.Append(' ');\n        }\n        return sb.ToString().Trim();", "    \
    \    var sb = new StringBuilder();\n        for (long i = 0; i <= n; i++) {\n\
    \            sb.Append(i);\n            sb.Append(' ');\n        }\n        return\
    \ sb.ToString();", '        return String.Join(" ", Enumerable.Range(0, (int)n
    + 1).Select(x => x.ToString()));', '        return string.Join(" ", Enumerable.Range(0,
    (int)n + 1));', '        return string.Join(" ", Enumerable.Range(0, (int)n +
    1));', '        return string.Join(" ", Enumerable.Range(0, (int)n + 1));', " \
    \       var sb = new StringBuilder();\n        for (var i = 0L; i <= n; i++) {\n\
    \            if (i > 0) {\n                sb.Append(\" \");\n            }\n\
    \            sb.Append(i);\n        }\n        return sb.ToString();", "     \
    \   var sb = new StringBuilder();\n        for (var i = 0L; i <= n; i++) {\n \
    \           if (i > 0) {\n                sb.Append(\" \");\n            }\n \
    \           sb.Append(i);\n        }\n        return sb.ToString();", "      \
    \  var sb = new StringBuilder();\n        for (long i = 0; i <= n; i++) {\n  \
    \          sb.Append(i);\n            sb.Append(' ');\n        }\n        return\
    \ sb.ToString();", '        return string.Join(" ", Enumerable.Range(0, (int)n
    + 1));', '        return string.Join(" ", Enumerable.Range(0, (int)n + 1));',
  '        return string.Join(" ", Enumerable.Range(0, (int)n + 1));', '        return
    string.Join(" ", Enumerable.Range(0, (int)n + 1));', '        return string.Join("
    ", Enumerable.Range(0, (int)n + 1));', '        return string.Join(" ", Enumerable.Range(0,
    (int)n + 1));', '        return string.Join(" ", Enumerable.Range(0, (int)n +
    1));', "        var sb = new StringBuilder();\n        for (long i = 0; i <= n;\
    \ i++) {\n            sb.Append(i);\n            sb.Append(' ');\n        }\n\
    \        return sb.ToString().Trim();", '        return string.Join(" ", Enumerable.Range(0,
    (int)n + 1));', '        return string.Join(" ", Enumerable.Range(0, (int)n +
    1));', "        if (n == 0) {\n            return \"0\";\n        }\n        var\
    \ sb = new StringBuilder();\n        for (long i = 0; i <= n; i++) {\n       \
    \     sb.Append(i);\n            sb.Append(' ');\n        }\n        return sb.ToString();",
  '        return string.Join(" ", Enumerable.Range(0, (int)n + 1));', "        var\
    \ sb = new StringBuilder();\n        for (long i = 0; i <= n; i++) {\n       \
    \     sb.Append(i);\n            sb.Append(' ');\n        }\n        return sb.ToString();",
  '        return string.Join(" ", Enumerable.Range(0, (int)n + 1));', '        return
    String.Join(" ", Enumerable.Range(0, (int)n + 1).Select(x => x.ToString()));',
  "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <= n;\
    \ i++) {\n            sb.Append(i);\n            sb.Append(\" \");\n        }\n\
    \        return sb.ToString().Trim();", "        var sb = new StringBuilder();\n\
    \        for (var i = 0L; i <= n; i++) {\n            sb.Append(i);\n        \
    \    sb.Append(' ');\n        }\n        return sb.ToString();", '        return
    string.Join(" ", Enumerable.Range(0, (int)n + 1));', "        string result =\
    \ \"\";\n        for (long i = 0; i <= n; i++) {\n            result += i.ToString()\
    \ + \" \";\n        }\n        return result.Trim();", '        return string.Join("
    ", Enumerable.Range(0, (int)n + 1));', "        var sb = new StringBuilder();\n\
    \        for (var i = 0L; i <= n; i++) {\n            sb.Append(i);\n        \
    \    sb.Append(' ');\n        }\n        return sb.ToString().Trim();", '        return
    string.Join(" ", Enumerable.Range(0, (int)n + 1));', '        return string.Join("
    ", Enumerable.Range(0, (int)n + 1));', '        return string.Join(" ", Enumerable.Range(0,
    (int)n + 1));', "        string[] result = new string[n + 1];\n        for (int\
    \ i = 0; i <= n; i++) {\n            result[i] = i.ToString();\n        }\n  \
    \      return string.Join(\" \", result);", "        if (n < 0) {\n          \
    \  throw new ArgumentException(\"n must be non-negative\");\n        }\n     \
    \   var sb = new StringBuilder();\n        for (var i = 0L; i <= n; i++) {\n \
    \           if (i > 0) {\n                sb.Append(' ');\n            }\n   \
    \         sb.Append(i);\n        }\n        return sb.ToString();", "        var\
    \ sb = new StringBuilder();\n        for (var i = 0L; i <= n; i++) {\n       \
    \     sb.Append(i);\n            sb.Append(' ');\n        }\n        return sb.ToString().Trim();",
  '        return string.Join(" ", Enumerable.Range(0, (int)n + 1));', '        return
    string.Join(" ", Enumerable.Range(0, (int)n + 1));', "        var result = new\
    \ StringBuilder();\n        for (var i = 0L; i <= n; i++) {\n            result.Append(i.ToString());\n\
    \            result.Append(\" \");\n        }\n        return result.ToString().Trim();",
  '        return string.Join(" ", Enumerable.Range(0, (int)n + 1));', '        return
    string.Join(" ", Enumerable.Range(0, (int)n + 1));', "        var sb = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            sb.Append(i);\n        \
    \    sb.Append(' ');\n        }\n        return sb.ToString().Trim();", "    \
    \    string s = \"\";\n        for (int i = 0; i <= n; i++) {\n            s +=\
    \ i.ToString() + \" \";\n        }\n        return s.Trim();", "        var sb\
    \ = new StringBuilder();\n        for (var i = 0L; i <= n; i++) {\n          \
    \  sb.Append(i);\n            sb.Append(' ');\n        }\n        return sb.ToString().Trim();",
  "        var sb = new StringBuilder();\n        for (long i = 0; i <= n; i++) {\n\
    \            sb.Append(i);\n            sb.Append(' ');\n        }\n        return\
    \ sb.ToString();", "        var sb = new StringBuilder();\n        for (long i\
    \ = 0; i <= n; i++) {\n            sb.Append(i);\n            sb.Append(' ');\n\
    \        }\n        return sb.ToString();", "        string result = \"\";\n \
    \       for (long i = 0; i <= n; i++) {\n            result += i.ToString() +\
    \ \" \";\n        }\n        return result.Trim();", "        if (n == 0) {\n\
    \            return \"0\";\n        }\n        var sb = new StringBuilder();\n\
    \        for (var i = 0L; i <= n; i++) {\n            sb.Append(i);\n        \
    \    sb.Append(' ');\n        }\n        return sb.ToString();", "        var\
    \ sb = new StringBuilder();\n        for (long i = 0; i <= n; i++) {\n       \
    \     sb.Append(i);\n            sb.Append(' ');\n        }\n        return sb.ToString();",
  '        return string.Join(" ", Enumerable.Range(0, (int)n + 1));', "        var\
    \ sb = new StringBuilder();\n        for (long i = 0; i <= n; i++) {\n       \
    \     sb.Append(i);\n            sb.Append(' ');\n        }\n        sb.Length--;\n\
    \        return sb.ToString();", '        return string.Join(" ", Enumerable.Range(0,
    (int)n + 1));', "        StringBuilder sb = new StringBuilder();\n        for\
    \ (int i = 0; i <= n; i++) {\n            sb.Append(i);\n            sb.Append(\"\
    \ \");\n        }\n        return sb.ToString();", "        StringBuilder sb =\
    \ new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            sb.Append(i);\n\
    \            sb.Append(\" \");\n        }\n        return sb.ToString();", '        return
    string.Join(" ", Enumerable.Range(0, (int)n + 1));', "        var sb = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            sb.Append(i);\n        \
    \    sb.Append(' ');\n        }\n        return sb.ToString();", '        return
    string.Join(" ", Enumerable.Range(0, (int)n + 1));', "        var sb = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            sb.Append(i);\n        \
    \    sb.Append(' ');\n        }\n        return sb.ToString();", '        return
    string.Join(" ", Enumerable.Range(0, (int)n + 1));', '        return string.Join("
    ", Enumerable.Range(0, (int)n + 1));', "        var sb = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            sb.Append(i);\n        \
    \    sb.Append(' ');\n        }\n        return sb.ToString().Trim();", "    \
    \    var sb = new StringBuilder();\n        for (var i = 0L; i <= n; i++) {\n\
    \            sb.Append(i);\n            sb.Append(' ');\n        }\n        return\
    \ sb.ToString().Trim();", '        return string.Join(" ", Enumerable.Range(0,
    (int)n + 1));']
stop_tokens:
- "\n    }\n"
