name: HumanEval_68_pluck
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // \"Given an array representing a branch of a tree that has non-negative\
  \ integer nodes\n    // your task is to pluck one of the nodes and return it.\n\
  \    // The plucked node should be the node with the smallest even value.\n    //\
  \ If multiple nodes with the same smallest even value are found return the node\
  \ that has smallest index.\n    // The plucked node should be returned in a list,\
  \ [ smalest_value, its index ],\n    // If there are no even values or the given\
  \ array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new\
  \ long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,\
  \ (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the\
  \ smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n\
  \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
  \    // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n\
  \    // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
  \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
  \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n\
  \    // so we will choose the first zero, which has the smallest index.\n    //\
  \ Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
  \    public static List<long> Pluck(List<long> arr) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
  \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
  \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
  \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new\
  \ List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
  \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
  \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
  \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
  \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
  \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,\
  \ (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n\
  \    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,\
  \ (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
completions: ["        long min = long.MaxValue;\n        long index = -1;\n     \
    \   for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 &&\
    \ arr[i] < min) {\n                min = arr[i];\n                index = i;\n\
    \            }\n        }\n        if (index == -1) {\n            return new\
    \ List<long>();\n        }\n        return new List<long>() { min, index };",
  "        List<long> result = new List<long>();\n        long min = long.MaxValue;\n\
    \        int min_index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                min_index = i;\n            }\n        }\n        if (min_index\
    \ == -1) {\n            return result;\n        }\n        result.Add(min);\n\
    \        result.Add(min_index);\n        return result;", "        // your code\
    \ here\n        return new List<long>();", "        long min = long.MaxValue;\n\
    \        int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n \
    \           if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                minIndex = i;\n            }\n        }\n        if (minIndex\
    \ == -1) {\n            return new List<long>();\n        }\n        return new\
    \ List<long>() { min, minIndex };", "        List<long> result = new List<long>();\n\
    \        long min = long.MaxValue;\n        long minIndex = -1;\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min)\
    \ {\n                min = arr[i];\n                minIndex = i;\n          \
    \  }\n        }\n        if (minIndex != -1) {\n            result.Add(min);\n\
    \            result.Add(minIndex);\n        }\n        return result;", "    \
    \    // Your code goes here\n        return new List<long>();", "        // your\
    \ code here\n        return null;", "        var evens = arr.Where(x => x % 2\
    \ == 0).ToList();\n        if (evens.Count == 0) return new List<long>();\n  \
    \      var min = evens.Min();\n        return new List<long> { min, arr.IndexOf(min)\
    \ };", "        // your code here\n        return new List<long>();", "      \
    \  // Your code goes here\n        return new List<long>();", "        long min\
    \ = Int64.MaxValue;\n        int minIndex = -1;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min) {\n               \
    \ min = arr[i];\n                minIndex = i;\n            }\n        }\n   \
    \     if (minIndex == -1) {\n            return new List<long>();\n        }\n\
    \        return new List<long>() { min, minIndex };", "        var evens = arr.Where(x\
    \ => x % 2 == 0).ToList();\n        if (evens.Count == 0) {\n            return\
    \ new List<long>();\n        }\n        var min = evens.Min();\n        var index\
    \ = arr.IndexOf(min);\n        return new List<long> { min, index };", "     \
    \   // Your code goes here.\n        return new List<long>();", "        // Your\
    \ code goes here.\n        return null;", "        long min = long.MaxValue;\n\
    \        int index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n    \
    \        if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                index = i;\n            }\n        }\n        if (index == -1)\
    \ {\n            return new List<long>();\n        }\n        return new List<long>\
    \ { min, index };", "        long min = Int64.MaxValue;\n        long index =\
    \ -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] %\
    \ 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                index\
    \ = i;\n            }\n        }\n        if (index == -1) {\n            return\
    \ new List<long>();\n        }\n        return new List<long>() { min, index };",
  "        List<long> result = new List<long>();\n        long min = long.MaxValue;\n\
    \        int index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n    \
    \        if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                index = i;\n            }\n        }\n        if (index != -1)\
    \ {\n            result.Add(min);\n            result.Add(index);\n        }\n\
    \        return result;", "        // your code here\n        return new List<long>();",
  "        // Your code goes here.\n        return new List<long>();", "        long\
    \ min = long.MaxValue;\n        int minIndex = -1;\n        for (int i = 0; i\
    \ < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min) {\n  \
    \              min = arr[i];\n                minIndex = i;\n            }\n \
    \       }\n        if (minIndex == -1) {\n            return new List<long>();\n\
    \        }\n        return new List<long>() { min, minIndex };", "        // your\
    \ code here\n        return new List<long>();", "        var evens = arr.Where(x\
    \ => x % 2 == 0).ToList();\n        if (evens.Count == 0) return new List<long>();\n\
    \        var min = evens.Min();\n        return new List<long> { min, arr.IndexOf(min)\
    \ };", "        // Your code goes here\n        return new List<long>();", " \
    \       // your code goes here\n        return new List<long>();", "        long\
    \ min = long.MaxValue;\n        long index = -1;\n        for (long i = 0; i <\
    \ arr.Count; i++) {\n            if (arr[(int)i] % 2 == 0 && arr[(int)i] < min)\
    \ {\n                min = arr[(int)i];\n                index = i;\n        \
    \    }\n        }\n        if (index == -1) {\n            return new List<long>();\n\
    \        }\n        return new List<long>(new long[]{min, index});", "       \
    \ List<long> result = new List<long>();\n        if (arr.Count == 0) {\n     \
    \       return result;\n        }\n        long min = arr[0];\n        long min_index\
    \ = 0;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[(int)i]\
    \ % 2 == 0 && arr[(int)i] < min) {\n                min = arr[(int)i];\n     \
    \           min_index = i;\n            }\n        }\n        if (min % 2 == 0)\
    \ {\n            result.Add(min);\n            result.Add(min_index);\n      \
    \  }\n        return result;", "        // your code here\n        return new\
    \ List<long>();", "        List<long> result = new List<long>();\n        long\
    \ min = long.MaxValue;\n        int index = -1;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min) {\n               \
    \ min = arr[i];\n                index = i;\n            }\n        }\n      \
    \  if (index != -1) {\n            result.Add(min);\n            result.Add(index);\n\
    \        }\n        return result;", "        // Your code goes here.\n      \
    \  return new List<long>();", "        List<long> result = new List<long>();\n\
    \        if (arr.Count == 0) {\n            return result;\n        }\n      \
    \  long min = arr[0];\n        int minIndex = 0;\n        for (int i = 0; i <\
    \ arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min) {\n    \
    \            min = arr[i];\n                minIndex = i;\n            }\n   \
    \     }\n        if (min % 2 == 0) {\n            result.Add(min);\n         \
    \   result.Add(minIndex);\n        }\n        return result;", "        // your\
    \ code goes here\n        return new List<long>();", "        // your code here\n\
    \        return new List<long>();", "        // Your code goes here.\n       \
    \ return new List<long>();", "        var min = arr.Where(x => x % 2 == 0).Min();\n\
    \        var index = arr.IndexOf(min);\n        return new List<long>() { min,\
    \ index };", "        List<long> result = new List<long>();\n        long min\
    \ = long.MaxValue;\n        long index = -1;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min) {\n               \
    \ min = arr[i];\n                index = i;\n            }\n        }\n      \
    \  if (index == -1) {\n            return result;\n        }\n        result.Add(min);\n\
    \        result.Add(index);\n        return result;", "        // your code here\n\
    \        return null;", "        // Your code goes here.\n        return new List<long>();",
  "        List<long> result = new List<long>();\n        long min = Int64.MaxValue;\n\
    \        int index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n    \
    \        if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                index = i;\n            }\n        }\n        if (index == -1)\
    \ {\n            return result;\n        }\n        result.Add(min);\n       \
    \ result.Add(index);\n        return result;", "        var evens = arr.Where(x\
    \ => x % 2 == 0).ToList();\n        if (evens.Count == 0) {\n            return\
    \ new List<long>();\n        }\n        var min = evens.Min();\n        var idx\
    \ = arr.IndexOf(min);\n        return new List<long> { min, idx };", "       \
    \ // your code here\n        return new List<long>();", "        long min = long.MaxValue;\n\
    \        int index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n    \
    \        if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                index = i;\n            }\n        }\n        if (index == -1)\
    \ {\n            return new List<long>();\n        }\n        return new List<long>()\
    \ { min, index };", "        // your code goes here\n        return null;", " \
    \       long min = long.MaxValue;\n        int index = -1;\n        for (int i\
    \ = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min)\
    \ {\n                min = arr[i];\n                index = i;\n            }\n\
    \        }\n        if (index == -1) {\n            return new List<long>();\n\
    \        }\n        return new List<long> { min, index };", "        if (arr.Count\
    \ == 0) {\n            return new List<long>();\n        }\n        long min =\
    \ arr[0];\n        long minIndex = 0;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min) {\n               \
    \ min = arr[i];\n                minIndex = i;\n            }\n        }\n   \
    \     if (min % 2 == 0) {\n            return new List<long> { min, minIndex };\n\
    \        }\n        return new List<long>();", "        long min = long.MaxValue;\n\
    \        int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n \
    \           if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                minIndex = i;\n            }\n        }\n        if (minIndex\
    \ == -1) {\n            return new List<long>();\n        }\n        return new\
    \ List<long>() { min, minIndex };", "        // your code here\n        return\
    \ new List<long>();", "        if (arr.Count == 0) {\n            return new List<long>();\n\
    \        }\n        long min = long.MaxValue;\n        int minIndex = -1;\n  \
    \      for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0\
    \ && arr[i] < min) {\n                min = arr[i];\n                minIndex\
    \ = i;\n            }\n        }\n        if (minIndex == -1) {\n            return\
    \ new List<long>();\n        }\n        return new List<long>() { min, minIndex\
    \ };", "        // your code here\n        return new List<long>();", "      \
    \  long min = long.MaxValue;\n        int minIndex = -1;\n        for (int i =\
    \ 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min) {\n\
    \                min = arr[i];\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex == -1) {\n            return new List<long>();\n\
    \        }\n        return new List<long> { min, minIndex };", "        // your\
    \ code here\n        return new List<long>();", "        // your code here\n \
    \       return null;", "        long min = -1;\n        long minIndex = -1;\n\
    \        for (long i = 0; i < arr.Count; i++) {\n            if (arr[(int)i] %\
    \ 2 == 0) {\n                if (min == -1 || arr[(int)i] < min) {\n         \
    \           min = arr[(int)i];\n                    minIndex = i;\n          \
    \      }\n            }\n        }\n        if (min == -1) {\n            return\
    \ new List<long>();\n        }\n        return new List<long>(new long[]{min,\
    \ minIndex});", "        long min = long.MaxValue;\n        int minIndex = -1;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            long val = arr[i];\n\
    \            if (val % 2 == 0 && val < min) {\n                min = val;\n  \
    \              minIndex = i;\n            }\n        }\n        if (minIndex ==\
    \ -1) {\n            return new List<long>();\n        }\n        return new List<long>()\
    \ { min, minIndex };", "        // your code here\n        return null;", "  \
    \      // Your code goes here.\n        return new List<long>();", "        List<long>\
    \ result = new List<long>();\n        long min = long.MaxValue;\n        int index\
    \ = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n               \
    \ index = i;\n            }\n        }\n        if (index == -1) {\n         \
    \   return result;\n        }\n        result.Add(min);\n        result.Add(index);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     if (arr.Count == 0) {\n            return result;\n        }\n        long\
    \ min = arr[0];\n        int minIndex = 0;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min) {\n               \
    \ min = arr[i];\n                minIndex = i;\n            }\n        }\n   \
    \     if (min % 2 == 0) {\n            result.Add(min);\n            result.Add(minIndex);\n\
    \        }\n        return result;", "        // Your code here\n        return\
    \ new List<long>();", "        // your code here\n        return null;", "   \
    \     var evens = arr.Where(x => x % 2 == 0).ToList();\n        if (evens.Count\
    \ == 0) {\n            return new List<long>();\n        }\n        var min =\
    \ evens.Min();\n        var index = arr.IndexOf(min);\n        return new List<long>\
    \ { min, index };", "        // your code goes here\n        return null;", " \
    \       // your code here\n        return new List<long>();", "        // your\
    \ code here\n        return new List<long>();", "        // Your code here\n \
    \       return null;", "        // Your code goes here.\n        return null;",
  "        // Write your code here\n        return null;", "        // Your code goes\
    \ here.\n        return new List<long>();", "        long min = long.MaxValue;\n\
    \        int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n \
    \           if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                minIndex = i;\n            }\n        }\n        if (minIndex\
    \ == -1) {\n            return new List<long>();\n        }\n        return new\
    \ List<long> { min, minIndex };", "        long min = Int64.MaxValue;\n      \
    \  long index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n         \
    \   if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n  \
    \              index = i;\n            }\n        }\n        if (index == -1)\
    \ {\n            return new List<long>();\n        }\n        return new List<long>()\
    \ { min, index };", "        // Your code goes here.\n        return null;", " \
    \       long min = long.MaxValue;\n        long index = -1;\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min)\
    \ {\n                min = arr[i];\n                index = i;\n            }\n\
    \        }\n        if (index == -1) {\n            return new List<long>();\n\
    \        }\n        return new List<long> { min, index };", "        // Your code\
    \ goes here.\n        return new List<long>();", "        long min = Int64.MaxValue;\n\
    \        int index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n    \
    \        if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                index = i;\n            }\n        }\n        if (index == -1)\
    \ {\n            return new List<long>();\n        }\n        return new List<long>\
    \ { min, index };", "        List<long> result = new List<long>();\n        long\
    \ min = long.MaxValue;\n        int minIndex = -1;\n        for (int i = 0; i\
    \ < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min) {\n  \
    \              min = arr[i];\n                minIndex = i;\n            }\n \
    \       }\n        if (minIndex != -1) {\n            result.Add(min);\n     \
    \       result.Add(minIndex);\n        }\n        return result;", "        //\
    \ your code goes here\n        return new List<long>();", "        // your code\
    \ here\n        return null;", "        // your code here\n        return null;",
  "        // Your code goes here.\n        return null;", "        // your code here\n\
    \        return new List<long>();", "        // Your code goes here.\n       \
    \ return null;", "        // Your code goes here.\n        return null;", "  \
    \      long min = long.MaxValue;\n        int minIndex = -1;\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min)\
    \ {\n                min = arr[i];\n                minIndex = i;\n          \
    \  }\n        }\n        if (minIndex == -1) {\n            return new List<long>();\n\
    \        }\n        return new List<long>() { min, minIndex };", "        // your\
    \ code here\n        return null;", "        // your code here\n        return\
    \ new List<long>();", "        if (arr.Count == 0) {\n            return new List<long>();\n\
    \        }\n        long min = arr[0];\n        int minIndex = 0;\n        for\
    \ (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i]\
    \ < min) {\n                min = arr[i];\n                minIndex = i;\n   \
    \         }\n        }\n        if (min % 2 == 0) {\n            return new List<long>\
    \ { min, minIndex };\n        }\n        return new List<long>();", "        long\
    \ min = Int64.MaxValue;\n        long min_index = -1;\n        for (int i = 0;\
    \ i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min) {\n\
    \                min = arr[i];\n                min_index = i;\n            }\n\
    \        }\n        if (min_index == -1) {\n            return new List<long>();\n\
    \        }\n        return new List<long>() { min, min_index };", "        //\
    \ your code here\n        return new List<long>();", "        // your code goes\
    \ here\n        return new List<long>();", "        long min = long.MaxValue;\n\
    \        int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n \
    \           if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                minIndex = i;\n            }\n        }\n        if (minIndex\
    \ == -1) {\n            return new List<long>();\n        }\n        return new\
    \ List<long>() { min, minIndex };", "        List<long> result = new List<long>();\n\
    \        if (arr.Count == 0) {\n            return result;\n        }\n      \
    \  long min = arr[0];\n        int minIndex = 0;\n        for (int i = 0; i <\
    \ arr.Count; i++) {\n            if (arr[i] < min && arr[i] % 2 == 0) {\n    \
    \            min = arr[i];\n                minIndex = i;\n            }\n   \
    \     }\n        if (min % 2 == 0) {\n            result.Add(min);\n         \
    \   result.Add(minIndex);\n        }\n        return result;", "        // your\
    \ code here\n        return new List<long>();", "        // your code here\n \
    \       return new List<long>();", "        // your code here\n        return\
    \ new List<long>();", "        // your code here\n        return new List<long>();",
  "        var min = arr.Where(x => x % 2 == 0).Min();\n        var index = arr.IndexOf(min);\n\
    \        return new List<long> { min, index };", "        // your code here\n\
    \        return null;", "        // your code here\n        return new List<long>();",
  "        long min = long.MaxValue;\n        long index = -1;\n        for (long\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[(int)i] % 2 == 0 && arr[(int)i]\
    \ < min) {\n                min = arr[(int)i];\n                index = i;\n \
    \           }\n        }\n        if (index == -1) {\n            return new List<long>();\n\
    \        }\n        return new List<long>(new long[]{min, index});", "       \
    \ long min = long.MaxValue;\n        int index = -1;\n        for (int i = 0;\
    \ i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min) {\n\
    \                min = arr[i];\n                index = i;\n            }\n  \
    \      }\n        if (index == -1) {\n            return new List<long>();\n \
    \       }\n        return new List<long>() { min, index };", "        // your\
    \ code here\n        return new List<long>();", "        // Your code goes here.\n\
    \        return new List<long>();", "        // Your code goes here\n        return\
    \ new List<long>();", "        long min = long.MaxValue;\n        int minIndex\
    \ = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n               \
    \ minIndex = i;\n            }\n        }\n        if (minIndex == -1) {\n   \
    \         return new List<long>();\n        }\n        return new List<long>()\
    \ { min, minIndex };", "        long min = long.MaxValue;\n        int minIndex\
    \ = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n               \
    \ minIndex = i;\n            }\n        }\n        if (minIndex == -1) {\n   \
    \         return new List<long>();\n        }\n        return new List<long> {\
    \ min, minIndex };", "        long min = long.MaxValue;\n        int minIndex\
    \ = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n               \
    \ minIndex = i;\n            }\n        }\n        if (minIndex == -1) {\n   \
    \         return new List<long>();\n        }\n        return new List<long>()\
    \ { min, minIndex };", "        // your code goes here\n        return null;",
  "        // your code here\n        return new List<long>();", "        long min\
    \ = long.MaxValue;\n        int minIndex = -1;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min) {\n               \
    \ min = arr[i];\n                minIndex = i;\n            }\n        }\n   \
    \     if (minIndex == -1) {\n            return new List<long>();\n        }\n\
    \        return new List<long> { min, minIndex };", "        // your code here\n\
    \        return new List<long>();", "        // your code here\n        return\
    \ null;", "        List<long> result = new List<long>();\n        long min = Int64.MaxValue;\n\
    \        int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n \
    \           if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                minIndex = i;\n            }\n        }\n        if (minIndex\
    \ != -1) {\n            result.Add(min);\n            result.Add(minIndex);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (arr.Count == 0) {\n            return result;\n        }\n      \
    \  long smallestEven = arr[0];\n        int smallestEvenIndex = 0;\n        bool\
    \ foundEven = false;\n        for (int i = 0; i < arr.Count; i++) {\n        \
    \    if (arr[i] % 2 == 0) {\n                if (!foundEven) {\n             \
    \       smallestEven = arr[i];\n                    smallestEvenIndex = i;\n \
    \                   foundEven = true;\n                } else {\n            \
    \        if (arr[i] < smallestEven) {\n                        smallestEven =\
    \ arr[i];\n                        smallestEvenIndex = i;\n                  \
    \  }\n                }\n            }\n        }\n        if (foundEven) {\n\
    \            result.Add(smallestEven);\n            result.Add(smallestEvenIndex);\n\
    \        }\n        return result;", "        // Your code goes here.\n      \
    \  List<long> result = new List<long>();\n        long min = long.MaxValue;\n\
    \        int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n \
    \           if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                minIndex = i;\n            }\n        }\n        if (minIndex\
    \ == -1) {\n            return result;\n        }\n        result.Add(min);\n\
    \        result.Add(minIndex);\n        return result;", "        // your code\
    \ here\n        return new List<long>();", "        // Your code goes here.\n\
    \        return new List<long>();", "        // your code here\n        return\
    \ new List<long>();", "        long min = long.MaxValue;\n        int minIndex\
    \ = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n               \
    \ minIndex = i;\n            }\n        }\n        if (minIndex == -1) {\n   \
    \         return new List<long>();\n        }\n        return new List<long>()\
    \ { min, minIndex };", "        if (arr.Count == 0) return new List<long>();\n\
    \        long min = arr.Min();\n        if (min % 2 == 0) {\n            return\
    \ new List<long>() { min, arr.IndexOf(min) };\n        }\n        return new List<long>();",
  "        // Your code goes here.\n        return new List<long>();", "        long\
    \ min = long.MaxValue;\n        int minIndex = -1;\n        for (int i = 0; i\
    \ < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min) {\n  \
    \              min = arr[i];\n                minIndex = i;\n            }\n \
    \       }\n        if (minIndex == -1) {\n            return new List<long>();\n\
    \        }\n        return new List<long> { min, minIndex };", "        // Your\
    \ code here\n        return new List<long>();", "        // your code here\n \
    \       return null;", "        long min = long.MaxValue;\n        long index\
    \ = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n               \
    \ index = i;\n            }\n        }\n        if (index == -1) {\n         \
    \   return new List<long>();\n        }\n        return new List<long>() { min,\
    \ index };", "        long min = long.MaxValue;\n        int minIndex = -1;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 ==\
    \ 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex\
    \ = i;\n            }\n        }\n        if (minIndex == -1) {\n            return\
    \ new List<long>();\n        }\n        return new List<long>() { min, minIndex\
    \ };", "        long min = long.MaxValue;\n        long minIndex = -1;\n     \
    \   for (long i = 0; i < arr.Count; i++) {\n            if (arr[(int)i] % 2 ==\
    \ 0 && arr[(int)i] < min) {\n                min = arr[(int)i];\n            \
    \    minIndex = i;\n            }\n        }\n        if (minIndex == -1) {\n\
    \            return new List<long>();\n        }\n        return new List<long>(new\
    \ long[]{min, minIndex});", "        // your code here\n        return null;",
  "        long min = long.MaxValue;\n        int idx = -1;\n        for (int i =\
    \ 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min) {\n\
    \                min = arr[i];\n                idx = i;\n            }\n    \
    \    }\n        if (idx == -1) {\n            return new List<long>();\n     \
    \   }\n        return new List<long>() { min, idx };", "        List<long> result\
    \ = new List<long>();\n        long min = long.MaxValue;\n        int minIndex\
    \ = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n               \
    \ minIndex = i;\n            }\n        }\n        if (minIndex != -1) {\n   \
    \         result.Add(min);\n            result.Add(minIndex);\n        }\n   \
    \     return result;", "        long min = long.MaxValue;\n        int minIndex\
    \ = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n               \
    \ minIndex = i;\n            }\n        }\n        if (minIndex == -1) {\n   \
    \         return new List<long>();\n        }\n        return new List<long>()\
    \ { min, minIndex };", "        List<long> result = new List<long>();\n      \
    \  long min = long.MaxValue;\n        long index = -1;\n        for (int i = 0;\
    \ i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min) {\n\
    \                min = arr[i];\n                index = i;\n            }\n  \
    \      }\n        if (index != -1) {\n            result.Add(min);\n         \
    \   result.Add(index);\n        }\n        return result;", "        long min\
    \ = long.MaxValue;\n        int minIndex = -1;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min) {\n               \
    \ min = arr[i];\n                minIndex = i;\n            }\n        }\n   \
    \     if (minIndex == -1) {\n            return new List<long>();\n        }\n\
    \        return new List<long>() { min, minIndex };", "        // your code here\n\
    \        return new List<long>();", "        if (arr.Count == 0) {\n         \
    \   return new List<long>();\n        }\n        long min = arr[0];\n        int\
    \ minIndex = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if\
    \ (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n       \
    \         minIndex = i;\n            }\n        }\n        if (min % 2 == 0) {\n\
    \            return new List<long>() { min, minIndex };\n        }\n        return\
    \ new List<long>();", "        // your code here\n        return new List<long>();",
  "        long min = Int64.MaxValue;\n        int index = -1;\n        for (int i\
    \ = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min)\
    \ {\n                min = arr[i];\n                index = i;\n            }\n\
    \        }\n        if (index == -1) {\n            return new List<long>();\n\
    \        }\n        return new List<long> { min, index };", "        // your code\
    \ here\n        return null;", "        // your code here\n        return null;",
  "        long min = long.MaxValue;\n        int minIndex = -1;\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min)\
    \ {\n                min = arr[i];\n                minIndex = i;\n          \
    \  }\n        }\n        if (minIndex == -1) {\n            return new List<long>();\n\
    \        }\n        return new List<long> { min, minIndex };", "        // your\
    \ code here\n        return new List<long>();", "        // your code here\n \
    \       return new List<long>();", "        // your code here\n        return\
    \ null;", "        long min = long.MaxValue;\n        int minIndex = -1;\n   \
    \     for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 &&\
    \ arr[i] < min) {\n                min = arr[i];\n                minIndex = i;\n\
    \            }\n        }\n        if (minIndex == -1) {\n            return new\
    \ List<long>();\n        }\n        return new List<long> { min, minIndex };",
  "        // your code goes here\n        return new List<long>();", "        //\
    \ your code here\n        return new List<long>();", "        // Your code here\n\
    \        return null;", "        List<long> result = new List<long>();\n     \
    \   long min = long.MaxValue;\n        int index = -1;\n        for (int i = 0;\
    \ i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min) {\n\
    \                min = arr[i];\n                index = i;\n            }\n  \
    \      }\n        if (index != -1) {\n            result.Add(min);\n         \
    \   result.Add(index);\n        }\n        return result;", "        // your code\
    \ goes here\n        List<long> result = new List<long>();\n        if (arr.Count\
    \ == 0) {\n            return result;\n        }\n        long minEven = long.MaxValue;\n\
    \        int minEvenIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] % 2 == 0 && arr[i] < minEven) {\n                minEven\
    \ = arr[i];\n                minEvenIndex = i;\n            }\n        }\n   \
    \     if (minEvenIndex == -1) {\n            return result;\n        }\n     \
    \   result.Add(minEven);\n        result.Add(minEvenIndex);\n        return result;",
  "        // Your code goes here.\n        return new List<long>();", "        long\
    \ min = long.MaxValue;\n        int index = -1;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min) {\n               \
    \ min = arr[i];\n                index = i;\n            }\n        }\n      \
    \  if (index == -1) {\n            return new List<long>();\n        }\n     \
    \   return new List<long>() { min, index };", "        // your code here\n   \
    \     return new List<long>();", "        long min = long.MaxValue;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if\
    \ (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n       \
    \         minIndex = i;\n            }\n        }\n        if (minIndex == -1)\
    \ {\n            return new List<long>();\n        }\n        return new List<long>()\
    \ { min, minIndex };", "        List<long> result = new List<long>();\n      \
    \  if (arr.Count == 0) {\n            return result;\n        }\n        long\
    \ min = long.MaxValue;\n        long minIndex = -1;\n        for (long i = 0;\
    \ i < arr.Count; i++) {\n            if (arr[(int)i] % 2 == 0 && arr[(int)i] <\
    \ min) {\n                min = arr[(int)i];\n                minIndex = i;\n\
    \            }\n        }\n        if (minIndex == -1) {\n            return result;\n\
    \        }\n        result.Add(min);\n        result.Add(minIndex);\n        return\
    \ result;", "        // your code here\n        return new List<long>();", " \
    \       var evens = arr.Where(x => x % 2 == 0).ToList();\n        if (evens.Count\
    \ == 0) {\n            return new List<long>();\n        }\n        var min =\
    \ evens.Min();\n        var index = arr.IndexOf(min);\n        return new List<long>\
    \ { min, index };", "        // Your code goes here.\n        return null;", " \
    \       // your code here\n        return new List<long>();", "        // Your\
    \ code goes here.\n        // Good luck!\n        return new List<long>();", " \
    \       var evens = arr.Where(x => x % 2 == 0).ToList();\n        if (evens.Count\
    \ == 0) {\n            return new List<long>();\n        }\n        var min =\
    \ evens.Min();\n        var index = arr.IndexOf(min);\n        return new List<long>\
    \ { min, index };", "        // your code goes here\n        List<long> result\
    \ = new List<long>();\n        if (arr.Count == 0) {\n            return result;\n\
    \        }\n        long smallestEven = arr[0];\n        int smallestEvenIndex\
    \ = 0;\n        bool foundEven = false;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0) {\n                if (!foundEven)\
    \ {\n                    smallestEven = arr[i];\n                    smallestEvenIndex\
    \ = i;\n                    foundEven = true;\n                } else {\n    \
    \                if (arr[i] < smallestEven) {\n                        smallestEven\
    \ = arr[i];\n                        smallestEvenIndex = i;\n                \
    \    }\n                }\n            }\n        }\n        if (foundEven) {\n\
    \            result.Add(smallestEven);\n            result.Add(smallestEvenIndex);\n\
    \        }\n        return result;", "        long min = long.MaxValue;\n    \
    \    int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n     \
    \       if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                minIndex = i;\n            }\n        }\n        if (minIndex\
    \ == -1) {\n            return new List<long>();\n        }\n        return new\
    \ List<long> { min, minIndex };", "        // your code here\n        return null;",
  "        // your code here\n        return new List<long>();", "        // Your\
    \ code goes here.\n        // Good luck!\n        List<long> result = new List<long>();\n\
    \        if (arr.Count == 0) {\n            return result;\n        }\n      \
    \  long min = arr[0];\n        int minIndex = 0;\n        bool found = false;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 ==\
    \ 0) {\n                if (!found) {\n                    min = arr[i];\n   \
    \                 minIndex = i;\n                    found = true;\n         \
    \       } else {\n                    if (arr[i] < min) {\n                  \
    \      min = arr[i];\n                        minIndex = i;\n                \
    \    }\n                }\n            }\n        }\n        if (found) {\n  \
    \          result.Add(min);\n            result.Add(minIndex);\n        }\n  \
    \      return result;", "        var min = arr.Where(x => x % 2 == 0).Min();\n\
    \        var index = arr.IndexOf(min);\n        return new List<long>() { min,\
    \ index };", "        // your code goes here\n        return new List<long>();",
  "        // your code here\n        return new List<long>();", "        long min\
    \ = long.MaxValue;\n        int index = -1;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min) {\n               \
    \ min = arr[i];\n                index = i;\n            }\n        }\n      \
    \  if (index == -1) {\n            return new List<long>();\n        }\n     \
    \   return new List<long>() { min, index };", "        // your code here\n   \
    \     return null;", "        // your code goes here\n        return new List<long>();",
  "        // Your code goes here.\n        return new List<long>();", "        long\
    \ min = Int64.MaxValue;\n        long index = -1;\n        for (int i = 0; i <\
    \ arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min) {\n    \
    \            min = arr[i];\n                index = i;\n            }\n      \
    \  }\n        if (index == -1) {\n            return new List<long>();\n     \
    \   }\n        return new List<long>() { min, index };", "        List<long> result\
    \ = new List<long>();\n        if (arr.Count == 0) {\n            return result;\n\
    \        }\n        long min_even = long.MaxValue;\n        long min_even_index\
    \ = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ % 2 == 0 && arr[i] < min_even) {\n                min_even = arr[i];\n     \
    \           min_even_index = i;\n            }\n        }\n        if (min_even_index\
    \ == -1) {\n            return result;\n        }\n        result.Add(min_even);\n\
    \        result.Add(min_even_index);\n        return result;", "        long min\
    \ = long.MaxValue;\n        int minIndex = -1;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min) {\n               \
    \ min = arr[i];\n                minIndex = i;\n            }\n        }\n   \
    \     if (minIndex == -1) {\n            return new List<long>();\n        }\n\
    \        return new List<long>() { min, minIndex };", "        long minEven =\
    \ long.MaxValue;\n        long minEvenIndex = long.MaxValue;\n        for (long\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[(int)i] % 2 == 0 && arr[(int)i]\
    \ < minEven) {\n                minEven = arr[(int)i];\n                minEvenIndex\
    \ = i;\n            }\n        }\n        if (minEven == long.MaxValue) {\n  \
    \          return new List<long>();\n        }\n        return new List<long>(new\
    \ long[]{minEven, minEvenIndex});", "        long min = long.MaxValue;\n     \
    \   int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n      \
    \      if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                minIndex = i;\n            }\n        }\n        if (minIndex\
    \ == -1) {\n            return new List<long>();\n        }\n        return new\
    \ List<long> { min, minIndex };", "        // your code here\n        return null;",
  "        // Your code goes here.\n        // Good luck!\n        List<long> result\
    \ = new List<long>();\n        long min = Int64.MaxValue;\n        int minIndex\
    \ = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n               \
    \ minIndex = i;\n            }\n        }\n        if (minIndex != -1) {\n   \
    \         result.Add(min);\n            result.Add(minIndex);\n        }\n   \
    \     return result;", "        long min = Int64.MaxValue;\n        int index\
    \ = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n               \
    \ index = i;\n            }\n        }\n        if (index == -1) {\n         \
    \   return new List<long>();\n        }\n        return new List<long>() { min,\
    \ index };", "        // your code here\n        return null;", "        // your\
    \ code here\n        return null;", "        // your code goes here\n        return\
    \ new List<long>();", "        // Your code goes here.\n        return null;",
  "        long min = Int64.MaxValue;\n        int index = -1;\n        for (int i\
    \ = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min)\
    \ {\n                min = arr[i];\n                index = i;\n            }\n\
    \        }\n        if (index == -1) {\n            return new List<long>();\n\
    \        }\n        return new List<long> { min, index };", "        // your code\
    \ here\n        return null;", "        // Your code here\n        return arr;",
  "        // Your code goes here.\n        return new List<long>();", "        List<long>\
    \ result = new List<long>();\n        if (arr.Count == 0) {\n            return\
    \ result;\n        }\n        long min = arr[0];\n        int minIndex = 0;\n\
    \        bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] % 2 == 0) {\n                if (!found) {\n         \
    \           min = arr[i];\n                    minIndex = i;\n               \
    \     found = true;\n                } else {\n                    if (arr[i]\
    \ < min) {\n                        min = arr[i];\n                        minIndex\
    \ = i;\n                    }\n                }\n            }\n        }\n \
    \       if (found) {\n            result.Add(min);\n            result.Add(minIndex);\n\
    \        }\n        return result;", "        long minEven = long.MaxValue;\n\
    \        int minEvenIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] % 2 == 0 && arr[i] < minEven) {\n                minEven\
    \ = arr[i];\n                minEvenIndex = i;\n            }\n        }\n   \
    \     if (minEvenIndex == -1) {\n            return new List<long>();\n      \
    \  }\n        return new List<long>() { minEven, minEvenIndex };", "        //\
    \ your code here\n        return new List<long>();", "        // Your code goes\
    \ here\n        return new List<long>();", "        long min = long.MaxValue;\n\
    \        int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n \
    \           if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                minIndex = i;\n            }\n        }\n        if (minIndex\
    \ == -1) {\n            return new List<long>();\n        }\n        return new\
    \ List<long>() { min, minIndex };", "        long min = Int64.MaxValue;\n    \
    \    int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n     \
    \       if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                minIndex = i;\n            }\n        }\n        if (minIndex\
    \ == -1) {\n            return new List<long>();\n        }\n        return new\
    \ List<long>() { min, minIndex };", "        long min = long.MaxValue;\n     \
    \   int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n      \
    \      if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                minIndex = i;\n            }\n        }\n        if (minIndex\
    \ == -1) {\n            return new List<long>();\n        }\n        return new\
    \ List<long> { min, minIndex };", "        // your code here\n        return null;",
  "        List<long> result = new List<long>();\n        long min = Int64.MaxValue;\n\
    \        long index = -1;\n        for (long i = 0; i < arr.Count; i++) {\n  \
    \          if (arr[(int)i] % 2 == 0 && arr[(int)i] < min) {\n                min\
    \ = arr[(int)i];\n                index = i;\n            }\n        }\n     \
    \   if (index != -1) {\n            result.Add(min);\n            result.Add(index);\n\
    \        }\n        return result;", "        // your code here\n        return\
    \ new List<long>();", "        var evens = arr.Where(x => x % 2 == 0).ToList();\n\
    \        if (evens.Count == 0) {\n            return new List<long>();\n     \
    \   }\n        var min = evens.Min();\n        var index = arr.IndexOf(min);\n\
    \        return new List<long> { min, index };", "        // your code here\n\
    \        return new List<long>();", "        // Your code goes here\n        return\
    \ new List<long>();", "        long min = -1;\n        long min_index = -1;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 ==\
    \ 0) {\n                if (min == -1 || arr[i] < min) {\n                   \
    \ min = arr[i];\n                    min_index = i;\n                }\n     \
    \       }\n        }\n        if (min == -1) {\n            return new List<long>();\n\
    \        }\n        return new List<long>() { min, min_index };"]
stop_tokens:
- "\n    }\n"
