language: cs
name: HumanEval_59_largest_prime_factor
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        long i = 2;\n        while (i * i <=\
    \ n) {\n            if (n % i == 0) {\n                largest = i;\n        \
    \        n /= i;\n            } else {\n                i += 1;\n            }\n\
    \        }\n        if (n > 1) {\n            largest = n;\n        }\n      \
    \  return largest;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        for (long i = 2; i * i <= n; i++) {\n\
    \            if (n % i == 0) {\n                largest = i;\n               \
    \ while (n % i == 0) {\n                    n /= i;\n                }\n     \
    \       }\n        }\n        if (n > 1) {\n            largest = n;\n       \
    \ }\n        return largest;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long i = 2;\n        while (i * i <= n) {\n            if (n %\
    \ i == 0) {\n                n /= i;\n            } else {\n                i++;\n\
    \            }\n        }\n        return n;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805529
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long p = 2;\n        while (n % p == 0) {\n            n /= p;\n\
    \        }\n        p = 3;\n        while (n > 1) {\n            while (n % p\
    \ == 0) {\n                n /= p;\n            }\n            p += 2;\n     \
    \   }\n        return p - 2;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805529
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        long d = 2;\n        while (n > 1)\
    \ {\n            while (n % d == 0) {\n                largest = d;\n        \
    \        n /= d;\n            }\n            d += 1;\n        }\n        return\
    \ largest;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805529
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        long i = 2;\n        while (i * i <=\
    \ n) {\n            if (n % i == 0) {\n                largest = i;\n        \
    \        while (n % i == 0) {\n                    n /= i;\n                }\n\
    \            }\n            i += 1;\n        }\n        if (n > 1) {\n       \
    \     largest = n;\n        }\n        return largest;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n\
    \    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        long factor = 2;\n        while (n\
    \ > 1) {\n            if (n % factor == 0) {\n                largest = factor;\n\
    \                n /= factor;\n                while (n % factor == 0) {\n   \
    \                 n /= factor;\n                }\n            }\n           \
    \ factor += 1;\n        }\n        return largest;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n\
    \    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805530
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805529
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        long factor = 2;\n        while (n\
    \ > 1) {\n            if (n % factor == 0) {\n                largest = factor;\n\
    \                while (n % factor == 0) {\n                    n /= factor;\n\
    \                }\n            }\n            factor += 1;\n        }\n     \
    \   return largest;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        long d = 2;\n        while (n > 1)\
    \ {\n            while (n % d == 0) {\n                largest = d;\n        \
    \        n /= d;\n            }\n            d += 1;\n        }\n        return\
    \ largest;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        long factor = 2;\n        while (n\
    \ > 1) {\n            while (n % factor == 0) {\n                n /= factor;\n\
    \                largest = factor;\n            }\n            factor++;\n   \
    \     }\n        return largest;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805529
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        long factor = 2;\n        while (n\
    \ > 1) {\n            while (n % factor == 0) {\n                n /= factor;\n\
    \                largest = factor;\n            }\n            factor += 1;\n\
    \        }\n        return largest;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805603
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        long factor = 2;\n        while (n\
    \ > 1) {\n            while (n % factor == 0) {\n                largest = factor;\n\
    \                n /= factor;\n            }\n            factor++;\n        }\n\
    \        return largest;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805530
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long factor = 2;\n        while (n > 1) {\n            if (n %\
    \ factor == 0) {\n                n /= factor;\n            } else {\n       \
    \         factor++;\n            }\n        }\n        return factor;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805529
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long i = 2;\n        while (i * i <= n) {\n            if (n %\
    \ i == 0) {\n                n /= i;\n            } else {\n                i++;\n\
    \            }\n        }\n        return n;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        long i = 2;\n        while (i * i <=\
    \ n) {\n            if (n % i == 0) {\n                largest = i;\n        \
    \        n /= i;\n            } else {\n                i += 1;\n            }\n\
    \        }\n        if (n > 1) {\n            largest = n;\n        }\n      \
    \  return largest;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805529
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        long i = 2;\n        while (i * i <=\
    \ n) {\n            if (n % i == 0) {\n                largest = i;\n        \
    \        while (n % i == 0) {\n                    n /= i;\n                }\n\
    \            }\n            i += 1;\n        }\n        if (n > 1) {\n       \
    \     largest = n;\n        }\n        return largest;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n\
    \    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long factor = 2;\n        while (n > 1) {\n            if (n %\
    \ factor == 0) {\n                n /= factor;\n            } else {\n       \
    \         factor++;\n            }\n        }\n        return factor;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805529
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long factor = 2;\n        while (n > 1) {\n            if (n %\
    \ factor == 0) {\n                n /= factor;\n            } else {\n       \
    \         factor++;\n            }\n        }\n        return factor;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805529
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long factor = 2;\n        while (n > 1) {\n            if (n %\
    \ factor == 0) {\n                n /= factor;\n            } else {\n       \
    \         factor++;\n            }\n        }\n        return factor;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805529
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        for (long i = 2; i * i <= n; i++) {\n\
    \            if (n % i == 0) {\n                largest = i;\n               \
    \ while (n % i == 0) {\n                    n /= i;\n                }\n     \
    \       }\n        }\n        if (n > 1) {\n            largest = n;\n       \
    \ }\n        return largest;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long p = 2;\n        while (p * p <= n) {\n            if (n %\
    \ p == 0) {\n                n /= p;\n            } else {\n                p++;\n\
    \            }\n        }\n        return n;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805530
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        long factor = 2;\n        while (n\
    \ > 1) {\n            if (n % factor == 0) {\n                largest = factor;\n\
    \                while (n % factor == 0) {\n                    n /= factor;\n\
    \                }\n            }\n            factor += 1;\n        }\n     \
    \   return largest;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805529
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        long factor = 2;\n        while (factor\
    \ * factor <= n) {\n            if (n % factor == 0) {\n                largest\
    \ = factor;\n                n /= factor;\n            } else {\n            \
    \    factor += 1;\n            }\n        }\n        if (n > 1) {\n          \
    \  largest = n;\n        }\n        return largest;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n\
    \    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                while\
    \ (n % i == 0) {\n                    n /= i;\n                }\n           \
    \ }\n        }\n        return largest;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805530
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long factor = 2;\n        while (n > 1) {\n            if (n %\
    \ factor == 0) {\n                n /= factor;\n            } else {\n       \
    \         factor++;\n            }\n        }\n        return factor;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805529
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        long factor = 2;\n        while (n\
    \ > 1) {\n            while (n % factor == 0) {\n                largest = factor;\n\
    \                n /= factor;\n            }\n            factor++;\n        }\n\
    \        return largest;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805530
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        long i = 2;\n        while (i * i <=\
    \ n) {\n            if (n % i == 0) {\n                largest = i;\n        \
    \        n /= i;\n            } else {\n                i += 1;\n            }\n\
    \        }\n        if (n > 1) {\n            largest = n;\n        }\n      \
    \  return largest;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long p = 2;\n        while (n > 1) {\n            if (n % p ==\
    \ 0) {\n                n /= p;\n            } else {\n                p++;\n\
    \            }\n        }\n        return p;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long p = 2;\n        while (n > 1) {\n            if (n % p ==\
    \ 0) {\n                n /= p;\n            } else {\n                p++;\n\
    \            }\n        }\n        return p;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        long sqrt = (long)Math.Sqrt(n);\n \
    \       for (long i = 2; i <= sqrt; i++) {\n            if (n % i == 0) {\n  \
    \              largest = i;\n                while (n % i == 0) {\n          \
    \          n /= i;\n                }\n            }\n        }\n        if (n\
    \ > 1) {\n            largest = n;\n        }\n        return largest;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805603
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805529
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long max = 0;\n        for (long i = 2; i <= n; i++) {\n     \
    \       if (n % i == 0) {\n                max = i;\n                n /= i;\n\
    \                i = 1;\n            }\n        }\n        return max;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805603
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        long i = 2;\n        while (i * i <=\
    \ n) {\n            if (n % i == 0) {\n                largest = i;\n        \
    \        n /= i;\n            } else {\n                i += 1;\n            }\n\
    \        }\n        if (n > 1) {\n            largest = n;\n        }\n      \
    \  return largest;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long p = 2;\n        while (n % p == 0) {\n            n /= p;\n\
    \        }\n        p = 3;\n        while (n > 1) {\n            while (n % p\
    \ == 0) {\n                n /= p;\n            }\n            p += 2;\n     \
    \   }\n        return p - 2;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long factor = 2;\n        while (n > 1) {\n            if (n %\
    \ factor == 0) {\n                n /= factor;\n            } else {\n       \
    \         factor += 1;\n            }\n        }\n        return factor;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805530
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                while\
    \ (n % i == 0) {\n                    n /= i;\n                }\n           \
    \ }\n        }\n        return largest;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        long d = 2;\n        while (n > 1)\
    \ {\n            while (n % d == 0) {\n                largest = d;\n        \
    \        n /= d;\n            }\n            d += 1;\n        }\n        return\
    \ largest;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        long p = 2;\n        while (p * p <=\
    \ n) {\n            if (n % p == 0) {\n                largest = p;\n        \
    \        while (n % p == 0) {\n                    n /= p;\n                }\n\
    \            }\n            p += 1;\n        }\n        if (n > 1) {\n       \
    \     largest = n;\n        }\n        return largest;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n\
    \    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805530
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        for (long i = 2; i * i <= n; i++) {\n\
    \            if (n % i == 0) {\n                largest = i;\n               \
    \ while (n % i == 0) {\n                    n /= i;\n                }\n     \
    \       }\n        }\n        if (n > 1) {\n            largest = n;\n       \
    \ }\n        return largest;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        long factor = 2;\n        while (n\
    \ > 1) {\n            while (n % factor == 0) {\n                largest = factor;\n\
    \                n /= factor;\n            }\n            factor += 1;\n     \
    \   }\n        return largest;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        long i = 2;\n        while (i * i <=\
    \ n) {\n            if (n % i == 0) {\n                largest = i;\n        \
    \        n /= i;\n            } else {\n                i += 1;\n            }\n\
    \        }\n        return Math.Max(largest, n);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n\
    \    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805603
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805529
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                while\
    \ (n % i == 0) {\n                    n /= i;\n                }\n           \
    \ }\n        }\n        return largest;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long factor = 2;\n        while (n > 1) {\n            if (n %\
    \ factor == 0) {\n                n /= factor;\n            } else {\n       \
    \         factor++;\n            }\n        }\n        return factor;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805529
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long d = 2;\n        while (n > 1) {\n            while (n % d\
    \ == 0) {\n                n /= d;\n            }\n            d++;\n        }\n\
    \        return d - 1;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805603
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        long factor = 2;\n        while (n\
    \ > 1) {\n            while (n % factor == 0) {\n                n /= factor;\n\
    \                largest = factor;\n            }\n            factor++;\n   \
    \     }\n        return largest;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805529
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805529
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long factor = 2;\n        while (n > 1) {\n            while (n\
    \ % factor == 0) {\n                n /= factor;\n            }\n            factor++;\n\
    \        }\n        return factor - 1;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805530
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long p = 2;\n        while (n % p == 0) {\n            n /= p;\n\
    \        }\n        p = 3;\n        while (n > 1) {\n            while (n % p\
    \ == 0) {\n                n /= p;\n            }\n            p += 2;\n     \
    \   }\n        return p - 2;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        long i = 2;\n        while (i * i <=\
    \ n) {\n            if (n % i == 0) {\n                largest = i;\n        \
    \        n /= i;\n            } else {\n                i += 1;\n            }\n\
    \        }\n        return Math.Max(largest, n);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n\
    \    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805603
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805529
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long p = 2;\n        while (n > 1) {\n            if (n % p ==\
    \ 0) {\n                n /= p;\n            } else {\n                p++;\n\
    \            }\n        }\n        return p;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        long p = 2;\n        while (n > 1)\
    \ {\n            if (n % p == 0) {\n                largest = p;\n           \
    \     while (n % p == 0) {\n                    n /= p;\n                }\n \
    \           }\n            p++;\n        }\n        return largest;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805603
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        long factor = 2;\n        while (n\
    \ > 1) {\n            if (n % factor == 0) {\n                largest = factor;\n\
    \                while (n % factor == 0) {\n                    n /= factor;\n\
    \                }\n            }\n            factor += 1;\n        }\n     \
    \   return largest;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805603
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        long i = 2;\n        while (i * i <=\
    \ n) {\n            if (n % i == 0) {\n                largest = i;\n        \
    \        n /= i;\n            } else {\n                i += 1;\n            }\n\
    \        }\n        if (n > 1) {\n            largest = n;\n        }\n      \
    \  return largest;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        long i = 2;\n        while (i * i <=\
    \ n) {\n            if (n % i == 0) {\n                largest = i;\n        \
    \        n /= i;\n            } else {\n                i += 1;\n            }\n\
    \        }\n        if (n > 1) {\n            largest = n;\n        }\n      \
    \  return largest;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long p = 2;\n        while (n % p == 0) {\n            n /= p;\n\
    \        }\n        p = 3;\n        while (n > 1) {\n            while (n % p\
    \ == 0) {\n                n /= p;\n            }\n            p += 2;\n     \
    \   }\n        return p - 2;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        long factor = 2;\n        while (n\
    \ > 1) {\n            if (n % factor == 0) {\n                largest = factor;\n\
    \                while (n % factor == 0) {\n                    n /= factor;\n\
    \                }\n            }\n            factor++;\n        }\n        return\
    \ largest;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805603
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long p = 2;\n        while (n > 1) {\n            while (n % p\
    \ == 0) {\n                n /= p;\n            }\n            p++;\n        }\n\
    \        return p - 1;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805603
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        for (long i = 2; i * i <= n; i++) {\n\
    \            if (n % i == 0) {\n                largest = i;\n               \
    \ while (n % i == 0) {\n                    n /= i;\n                }\n     \
    \       }\n        }\n        if (n > 1) {\n            largest = n;\n       \
    \ }\n        return largest;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        long i = 2;\n        while (i * i <=\
    \ n) {\n            if (n % i == 0) {\n                largest = i;\n        \
    \        while (n % i == 0) {\n                    n /= i;\n                }\n\
    \            }\n            i += 1;\n        }\n        if (n > 1) {\n       \
    \     largest = n;\n        }\n        return largest;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n\
    \    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        long d = 2;\n        while (n > 1)\
    \ {\n            while (n % d == 0) {\n                largest = d;\n        \
    \        n /= d;\n            }\n            d += 1;\n        }\n        return\
    \ largest;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805529
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long factor = 2;\n        while (n > 1) {\n            if (n %\
    \ factor == 0) {\n                n /= factor;\n            } else {\n       \
    \         factor++;\n            }\n        }\n        return factor;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805529
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i * i <= n; i++) {\n\
    \            if (n % i == 0) {\n                largest = i;\n               \
    \ while (n % i == 0) {\n                    n /= i;\n                }\n     \
    \       }\n        }\n        if (n > 1) {\n            largest = n;\n       \
    \ }\n        return largest;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805529
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        long factor = 2;\n        while (n\
    \ > 1) {\n            while (n % factor == 0) {\n                largest = factor;\n\
    \                n /= factor;\n            }\n            factor += 1;\n     \
    \   }\n        return largest;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largestFactor = 1;\n        long factor = 2;\n        while\
    \ (n > 1) {\n            if (n % factor == 0) {\n                largestFactor\
    \ = factor;\n                while (n % factor == 0) {\n                    n\
    \ /= factor;\n                }\n            }\n            factor += 1;\n   \
    \     }\n        return largestFactor;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805603
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long factor = 2;\n        while (n > 1) {\n            if (n %\
    \ factor == 0) {\n                n /= factor;\n            } else {\n       \
    \         factor += 1;\n            }\n        }\n        return factor;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805530
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long factor = 2;\n        while (n > 1) {\n            if (n %\
    \ factor == 0) {\n                n /= factor;\n            } else {\n       \
    \         factor++;\n            }\n        }\n        return factor;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805529
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805529
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        long factor = 2;\n        while (n\
    \ > 1) {\n            if (n % factor == 0) {\n                largest = factor;\n\
    \                n /= factor;\n                while (n % factor == 0) {\n   \
    \                 n /= factor;\n                }\n            }\n           \
    \ factor += 1;\n        }\n        return largest;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n\
    \    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805603
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long factor = 2;\n        while (n > 1) {\n            if (n %\
    \ factor == 0) {\n                n /= factor;\n            } else {\n       \
    \         factor++;\n            }\n        }\n        return factor;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805529
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        long i = 2;\n        while (i * i <=\
    \ n) {\n            if (n % i == 0) {\n                largest = i;\n        \
    \        n /= i;\n            } else {\n                i += 1;\n            }\n\
    \        }\n        if (n > 1) {\n            largest = n;\n        }\n      \
    \  return largest;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long i = 2;\n        while (i * i <= n) {\n            if (n %\
    \ i == 0) {\n                n /= i;\n            } else {\n                i++;\n\
    \            }\n        }\n        return n;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805529
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                if (IsPrime(i)) {\n           \
    \         largest = i;\n                }\n                n /= i;\n         \
    \       i = 1;\n            }\n        }\n        return largest;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv1tpptx6.cs(18,21): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659805529
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                n /= i;\n                largest\
    \ = i;\n            }\n        }\n        return largest;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n\
    \    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <372e6eb3c7114b7aa7c1aca65ce94a64>:0 \n"
  stdout: ''
  timestamp: 1659805529
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long factor = 2;\n        while (n > 1) {\n            if (n %\
    \ factor == 0) {\n                n /= factor;\n            } else {\n       \
    \         factor += 1;\n            }\n        }\n        return factor;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805530
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long factor = 2;\n        while (n > 1) {\n            if (n %\
    \ factor == 0) {\n                n /= factor;\n            } else {\n       \
    \         factor++;\n            }\n        }\n        return factor;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805529
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        long i = 2;\n        while (i * i <=\
    \ n) {\n            if (n % i == 0) {\n                largest = i;\n        \
    \        n /= i;\n            } else {\n                i += 1;\n            }\n\
    \        }\n        if (n > 1) {\n            largest = n;\n        }\n      \
    \  return largest;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        long i = 2;\n        while (i * i <=\
    \ n) {\n            if (n % i == 0) {\n                largest = i;\n        \
    \        n /= i;\n            } else {\n                i += 1;\n            }\n\
    \        }\n        return Math.Max(largest, n);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n\
    \    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805603
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805529
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        for (long i = 2; i * i <= n; i++) {\n\
    \            if (n % i == 0) {\n                largest = i;\n               \
    \ while (n % i == 0) {\n                    n /= i;\n                }\n     \
    \       }\n        }\n        if (n > 1) {\n            largest = n;\n       \
    \ }\n        return largest;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        long i = 2;\n        while (i * i <=\
    \ n) {\n            if (n % i == 0) {\n                largest = i;\n        \
    \        n /= i;\n            } else {\n                i += 1;\n            }\n\
    \        }\n        if (n > 1) {\n            largest = n;\n        }\n      \
    \  return largest;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        long factor = 2;\n        while (n\
    \ > 1) {\n            while (n % factor == 0) {\n                largest = factor;\n\
    \                n /= factor;\n            }\n            factor++;\n        }\n\
    \        return largest;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805530
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long factor = 2;\n        while (n > 1) {\n            if (n %\
    \ factor == 0) {\n                n /= factor;\n            } else {\n       \
    \         factor++;\n            }\n        }\n        return factor;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805529
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long factor = 2;\n        while (n > 1) {\n            if (n %\
    \ factor == 0) {\n                n /= factor;\n            } else {\n       \
    \         factor += 1;\n            }\n        }\n        return factor;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805530
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805529
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        long p = 2;\n        while (n > 1)\
    \ {\n            if (n % p == 0) {\n                largest = p;\n           \
    \     n /= p;\n                while (n % p == 0) {\n                    n /=\
    \ p;\n                }\n            }\n            p += 1;\n        }\n     \
    \   return largest;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805603
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long p = 2;\n        while (n % p == 0) {\n            n /= p;\n\
    \        }\n        p = 3;\n        while (n > 1) {\n            while (n % p\
    \ == 0) {\n                n /= p;\n            }\n            p += 2;\n     \
    \   }\n        return p - 2;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long factor = 2;\n        while (n > 1) {\n            if (n %\
    \ factor == 0) {\n                n /= factor;\n            } else {\n       \
    \         factor += 1;\n            }\n        }\n        return factor;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805530
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805529
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        long i = 2;\n        while (i * i <=\
    \ n) {\n            if (n % i == 0) {\n                largest = i;\n        \
    \        n /= i;\n            } else {\n                i += 1;\n            }\n\
    \        }\n        if (n > 1) {\n            largest = n;\n        }\n      \
    \  return largest;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805529
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805529
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long p = 2;\n        while (n % p == 0) {\n            n /= p;\n\
    \        }\n        p = 3;\n        while (n > 1) {\n            while (n % p\
    \ == 0) {\n                n /= p;\n            }\n            p += 2;\n     \
    \   }\n        return p - 2;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long p = 2;\n        while (n > 1) {\n            if (n % p ==\
    \ 0) {\n                n /= p;\n            } else {\n                p++;\n\
    \            }\n        }\n        return p;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        long i = 2;\n        while (i * i <=\
    \ n) {\n            if (n % i == 0) {\n                largest = i;\n        \
    \        n /= i;\n            } else {\n                i += 1;\n            }\n\
    \        }\n        if (n > 1) {\n            largest = n;\n        }\n      \
    \  return largest;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long factor = 2;\n        while (n > 1) {\n            if (n %\
    \ factor == 0) {\n                n /= factor;\n            } else {\n       \
    \         factor++;\n            }\n        }\n        return factor;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805529
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        long factor = 2;\n        while (n\
    \ > 1) {\n            while (n % factor == 0) {\n                largest = factor;\n\
    \                n /= factor;\n            }\n            factor++;\n        }\n\
    \        return largest;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805530
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        long factor = 2;\n        while (n\
    \ > 1) {\n            if (n % factor == 0) {\n                largest = factor;\n\
    \                while (n % factor == 0) {\n                    n /= factor;\n\
    \                }\n            }\n            factor++;\n        }\n        return\
    \ largest;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long p = 2;\n        while (n % p == 0) {\n            n /= p;\n\
    \        }\n        p = 3;\n        while (n > 1) {\n            while (n % p\
    \ == 0) {\n                n /= p;\n            }\n            p += 2;\n     \
    \   }\n        return p - 2;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        long i = 2;\n        while (i * i <=\
    \ n) {\n            if (n % i == 0) {\n                largest = i;\n        \
    \        n /= i;\n            } else {\n                i += 1;\n            }\n\
    \        }\n        if (n > 1) {\n            largest = n;\n        }\n      \
    \  return largest;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        long i = 2;\n        while (i * i <=\
    \ n) {\n            if (n % i == 0) {\n                largest = i;\n        \
    \        n /= i;\n            } else {\n                i += 1;\n            }\n\
    \        }\n        if (n > 1) {\n            largest = n;\n        }\n      \
    \  return largest;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        long factor = 2;\n        while (n\
    \ > 1) {\n            if (n % factor == 0) {\n                largest = factor;\n\
    \                while (n % factor == 0) {\n                    n /= factor;\n\
    \                }\n            }\n            factor += 1;\n        }\n     \
    \   return largest;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long factor = 2;\n        while (n > 1) {\n            if (n %\
    \ factor == 0) {\n                n /= factor;\n            } else {\n       \
    \         factor++;\n            }\n        }\n        return factor;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805529
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        long i = 2;\n        while (i * i <=\
    \ n) {\n            if (n % i == 0) {\n                largest = i;\n        \
    \        n /= i;\n            } else {\n                i += 1;\n            }\n\
    \        }\n        if (n > 1) {\n            largest = n;\n        }\n      \
    \  return largest;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i * i <= n; i++) {\n\
    \            if (n % i == 0) {\n                largest = i;\n               \
    \ while (n % i == 0) {\n                    n /= i;\n                }\n     \
    \       }\n        }\n        if (n > 1) {\n            largest = n;\n       \
    \ }\n        return largest;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805529
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long factor = 2;\n        while (n > 1) {\n            if (n %\
    \ factor == 0) {\n                n /= factor;\n            } else {\n       \
    \         factor++;\n            }\n        }\n        return factor;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805529
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long factor = 2;\n        while (n > 1) {\n            if (n %\
    \ factor == 0) {\n                n /= factor;\n            } else {\n       \
    \         factor++;\n            }\n        }\n        return factor;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805529
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long factor = 2;\n        while (n > 1) {\n            if (n %\
    \ factor == 0) {\n                n /= factor;\n            } else {\n       \
    \         factor++;\n            }\n        }\n        return factor;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805529
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        long p = 2;\n        while (n > 1)\
    \ {\n            if (n % p == 0) {\n                largest = p;\n           \
    \     n /= p;\n                while (n % p == 0) {\n                    n /=\
    \ p;\n                }\n            }\n            p += 1;\n        }\n     \
    \   return largest;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805530
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805529
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long x = 2;\n        while (n % x != 0) {\n            x++;\n\
    \        }\n        if (x == n) {\n            return x;\n        }\n        return\
    \ LargestPrimeFactor(n / x);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805603
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        long i = 2;\n        while (i * i <=\
    \ n) {\n            if (n % i == 0) {\n                largest = i;\n        \
    \        n /= i;\n            } else {\n                i += 1;\n            }\n\
    \        }\n        if (n > largest) {\n            largest = n;\n        }\n\
    \        return largest;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805530
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        long factor = 2;\n        while (n\
    \ > 1) {\n            while (n % factor == 0) {\n                largest = factor;\n\
    \                n /= factor;\n            }\n            factor++;\n        }\n\
    \        return largest;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805530
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                while\
    \ (n % i == 0) {\n                    n /= i;\n                }\n           \
    \ }\n        }\n        return largest;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long p = 2;\n        while (n > 1) {\n            if (n % p ==\
    \ 0) {\n                n /= p;\n            } else {\n                p += 1;\n\
    \            }\n        }\n        return p;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805530
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        for (long i = 2; i * i <= n; i++) {\n\
    \            if (n % i == 0) {\n                largest = i;\n               \
    \ while (n % i == 0) {\n                    n /= i;\n                }\n     \
    \       }\n        }\n        if (n > 1) {\n            largest = n;\n       \
    \ }\n        return largest;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long factor = 2;\n        while (n > 1) {\n            if (n %\
    \ factor == 0) {\n                n /= factor;\n            } else {\n       \
    \         factor++;\n            }\n        }\n        return factor;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805529
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        long p = 2;\n        while (n > 1)\
    \ {\n            if (n % p == 0) {\n                largest = p;\n           \
    \     while (n % p == 0) {\n                    n /= p;\n                }\n \
    \           }\n            p += 1;\n        }\n        return largest;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805530
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long factor = 2;\n        while (n > 1) {\n            if (n %\
    \ factor == 0) {\n                n /= factor;\n            } else {\n       \
    \         factor++;\n            }\n        }\n        return factor;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805529
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long factor = 2;\n        while (n > 1) {\n            if (n %\
    \ factor == 0) {\n                n /= factor;\n            } else {\n       \
    \         factor++;\n            }\n        }\n        return factor;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805529
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        long factor = 2;\n        while (n\
    \ > 1) {\n            while (n % factor == 0) {\n                largest = factor;\n\
    \                n /= factor;\n            }\n            factor += 1;\n     \
    \   }\n        return largest;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        long factor = 2;\n        while (n\
    \ > 1) {\n            if (n % factor == 0) {\n                largest = factor;\n\
    \                n /= factor;\n                while (n % factor == 0) {\n   \
    \                 n /= factor;\n                }\n            }\n           \
    \ factor += 1;\n        }\n        return largest;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n\
    \    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805530
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805529
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i * i <= n; i++) {\n\
    \            if (n % i == 0) {\n                largest = i;\n               \
    \ while (n % i == 0) {\n                    n /= i;\n                }\n     \
    \       }\n        }\n        if (n > 1) {\n            largest = n;\n       \
    \ }\n        return largest;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805529
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i * i <= n; i++) {\n\
    \            if (n % i == 0) {\n                largest = i;\n               \
    \ while (n % i == 0) {\n                    n /= i;\n                }\n     \
    \       }\n        }\n        if (n > 1) {\n            largest = n;\n       \
    \ }\n        return largest;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805529
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        long factor = 2;\n     \
    \   while (n > 1) {\n            if (n % factor == 0) {\n                largestPrimeFactor\
    \ = factor;\n                n /= factor;\n                while (n % factor ==\
    \ 0) {\n                    n /= factor;\n                }\n            }\n \
    \           factor += 1;\n        }\n        return largestPrimeFactor;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805603
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        long i = 2;\n        while (i * i <=\
    \ n) {\n            if (n % i == 0) {\n                largest = i;\n        \
    \        n /= i;\n            } else {\n                i += 1;\n            }\n\
    \        }\n        if (n > 1) {\n            largest = n;\n        }\n      \
    \  return largest;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long factor = 2;\n        while (n > 1) {\n            if (n %\
    \ factor == 0) {\n                n /= factor;\n            } else {\n       \
    \         factor++;\n            }\n        }\n        return factor;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805529
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        long factor = 2;\n        while (n\
    \ > 1) {\n            while (n % factor == 0) {\n                largest = factor;\n\
    \                n /= factor;\n            }\n            factor += 1;\n     \
    \   }\n        return largest;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805530
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long p = 2;\n        while (n % p == 0) {\n            n /= p;\n\
    \        }\n        p = 3;\n        while (n > 1) {\n            while (n % p\
    \ == 0) {\n                n /= p;\n            }\n            p += 2;\n     \
    \   }\n        return p - 2;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long factor = 2;\n        while (n > 1) {\n            if (n %\
    \ factor == 0) {\n                n /= factor;\n            } else {\n       \
    \         factor++;\n            }\n        }\n        return factor;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805529
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        long i = 2;\n        while (i * i <=\
    \ n) {\n            if (n % i == 0) {\n                largest = i;\n        \
    \        n /= i;\n            } else {\n                i += 1;\n            }\n\
    \        }\n        if (n > 1) {\n            largest = n;\n        }\n      \
    \  return largest;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long factor = 2;\n        while (n > 1) {\n            if (n %\
    \ factor == 0) {\n                n /= factor;\n            } else {\n       \
    \         factor++;\n            }\n        }\n        return factor;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805529
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        for (long i = 2; i * i <= n; i++) {\n\
    \            if (n % i == 0) {\n                largest = i;\n               \
    \ while (n % i == 0) {\n                    n /= i;\n                }\n     \
    \       }\n        }\n        if (n > 1) {\n            largest = n;\n       \
    \ }\n        return largest;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long p = 2;\n        while (n % p == 0) {\n            n /= p;\n\
    \        }\n        p = 3;\n        while (n > 1) {\n            while (n % p\
    \ == 0) {\n                n /= p;\n            }\n            p += 2;\n     \
    \   }\n        return p - 2;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805529
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805529
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long factor = 2;\n        while (n > 1) {\n            if (n %\
    \ factor == 0) {\n                n /= factor;\n            } else {\n       \
    \         factor += 1;\n            }\n        }\n        return factor;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805530
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        long factor = 2;\n        while (n\
    \ > 1) {\n            if (n % factor == 0) {\n                largest = factor;\n\
    \                n /= factor;\n                while (n % factor == 0) {\n   \
    \                 n /= factor;\n                }\n            }\n           \
    \ factor++;\n        }\n        return largest;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n\
    \    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805603
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        long factor = 2;\n        while (n\
    \ > 1) {\n            while (n % factor == 0) {\n                largest = factor;\n\
    \                n /= factor;\n            }\n            factor++;\n        }\n\
    \        return largest;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805530
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        long factor = 2;\n        while (n\
    \ > 1) {\n            while (n % factor == 0) {\n                largest = factor;\n\
    \                n /= factor;\n            }\n            factor += 1;\n     \
    \   }\n        return largest;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        long d = 2;\n        while (n > 1)\
    \ {\n            while (n % d == 0) {\n                largest = d;\n        \
    \        n /= d;\n            }\n            d += 1;\n        }\n        return\
    \ largest;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i * i <= n; i++) {\n\
    \            if (n % i == 0) {\n                largest = i;\n               \
    \ while (n % i == 0) {\n                    n /= i;\n                }\n     \
    \       }\n        }\n        if (n > 1) {\n            largest = n;\n       \
    \ }\n        return largest;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805529
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i < n; i++) {\n  \
    \          if (n % i == 0) {\n                if (IsPrime(i)) {\n            \
    \        largest = i;\n                }\n            }\n        }\n        return\
    \ largest;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsmxvu3tz.cs(18,21): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659805603
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        long factor = 2;\n        while (factor\
    \ * factor <= n) {\n            if (n % factor == 0) {\n                largest\
    \ = factor;\n                n /= factor;\n            } else {\n            \
    \    factor += 1;\n            }\n        }\n        if (n > 1) {\n          \
    \  largest = n;\n        }\n        return largest;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n\
    \    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805603
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805529
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long p = 2;\n        while (n % p == 0) {\n            n /= p;\n\
    \        }\n        p = 3;\n        while (n > 1) {\n            while (n % p\
    \ == 0) {\n                n /= p;\n            }\n            p += 2;\n     \
    \   }\n        return p - 2;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long p = 2;\n        while (n % p == 0) {\n            n /= p;\n\
    \        }\n        p = 3;\n        while (n > 1) {\n            while (n % p\
    \ == 0) {\n                n /= p;\n            }\n            p += 2;\n     \
    \   }\n        return p - 2;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        long factor = 2;\n     \
    \   while (n > 1) {\n            while (n % factor == 0) {\n                largestPrimeFactor\
    \ = factor;\n                n /= factor;\n            }\n            factor++;\n\
    \        }\n        return largestPrimeFactor;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n\
    \    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805603
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long factor = 2;\n        while (n > 1) {\n            if (n %\
    \ factor == 0) {\n                n /= factor;\n            } else {\n       \
    \         factor++;\n            }\n        }\n        return factor;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805529
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805529
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        long i = 2;\n        while (i * i <=\
    \ n) {\n            if (n % i == 0) {\n                largest = i;\n        \
    \        n /= i;\n            } else {\n                i += 1;\n            }\n\
    \        }\n        if (n > 1) {\n            largest = n;\n        }\n      \
    \  return largest;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        long factor = 2;\n        while (n\
    \ > 1) {\n            if (n % factor == 0) {\n                largest = factor;\n\
    \                while (n % factor == 0) {\n                    n /= factor;\n\
    \                }\n            }\n            factor += 1;\n        }\n     \
    \   return largest;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long factor = 2;\n        while (n > 1) {\n            if (n %\
    \ factor == 0) {\n                n /= factor;\n            } else {\n       \
    \         factor++;\n            }\n        }\n        return factor;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805529
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long factor = 2;\n        while (n > 1) {\n            if (n %\
    \ factor == 0) {\n                n /= factor;\n            } else {\n       \
    \         factor++;\n            }\n        }\n        return factor;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805529
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        long d = 2;\n        while (n > 1)\
    \ {\n            while (n % d == 0) {\n                largest = d;\n        \
    \        n /= d;\n            }\n            d += 1;\n        }\n        return\
    \ largest;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        long i = 2;\n        while (i * i <=\
    \ n) {\n            if (n % i == 0) {\n                largest = i;\n        \
    \        while (n % i == 0) {\n                    n /= i;\n                }\n\
    \            }\n            i += 1;\n        }\n        if (n > 1) {\n       \
    \     largest = n;\n        }\n        return largest;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n\
    \    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        long factor = 2;\n        while (n\
    \ > 1) {\n            while (n % factor == 0) {\n                largest = factor;\n\
    \                n /= factor;\n            }\n            factor += 1;\n     \
    \   }\n        return largest;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805530
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        long i = 2;\n        while (i * i <=\
    \ n) {\n            if (n % i == 0) {\n                largest = i;\n        \
    \        n /= i;\n            } else {\n                i += 1;\n            }\n\
    \        }\n        if (n > 1) {\n            largest = n;\n        }\n      \
    \  return largest;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        long factor = 2;\n        while (n\
    \ > 1) {\n            if (n % factor == 0) {\n                largest = factor;\n\
    \                while (n % factor == 0) {\n                    n /= factor;\n\
    \                }\n            }\n            factor += 1;\n        }\n     \
    \   return largest;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805603
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long p = 2;\n        while (n > 1) {\n            if (n % p ==\
    \ 0) {\n                n /= p;\n            } else {\n                p++;\n\
    \            }\n        }\n        return p;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        long i = 2;\n        while (i * i <=\
    \ n) {\n            if (n % i == 0) {\n                largest = i;\n        \
    \        n /= i;\n            } else {\n                i += 1;\n            }\n\
    \        }\n        if (n > 1) {\n            largest = n;\n        }\n      \
    \  return largest;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                while\
    \ (n % i == 0) {\n                    n /= i;\n                }\n           \
    \ }\n        }\n        return largest;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805530
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long p = 2;\n        while (n % p == 0) {\n            n /= p;\n\
    \        }\n        p = 3;\n        while (n > 1) {\n            while (n % p\
    \ == 0) {\n                n /= p;\n            }\n            p += 2;\n     \
    \   }\n        return p - 2;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                n /= i;\n                largest\
    \ = i;\n            }\n        }\n        return largest;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n\
    \    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <372e6eb3c7114b7aa7c1aca65ce94a64>:0 \n"
  stdout: ''
  timestamp: 1659805529
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        long factor = 2;\n        while (n\
    \ > 1) {\n            while (n % factor == 0) {\n                largest = factor;\n\
    \                n /= factor;\n            }\n            factor += 1;\n     \
    \   }\n        return largest;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805530
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        long factor = 2;\n        while (n\
    \ > 1) {\n            if (n % factor == 0) {\n                largest = factor;\n\
    \                n /= factor;\n                while (n % factor == 0) {\n   \
    \                 n /= factor;\n                }\n            }\n           \
    \ factor += 1;\n        }\n        return largest;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n\
    \    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805530
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        long i = 2;\n        while (i * i <=\
    \ n) {\n            if (n % i == 0) {\n                largest = i;\n        \
    \        while (n % i == 0) {\n                    n /= i;\n                }\n\
    \            }\n            i += 1;\n        }\n        if (n > 1) {\n       \
    \     largest = n;\n        }\n        return largest;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n\
    \    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        long factor = 2;\n        while (n\
    \ > 1) {\n            while (n % factor == 0) {\n                largest = factor;\n\
    \                n /= factor;\n            }\n            factor += 1;\n     \
    \   }\n        return largest;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        // TODO: Implement me!\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n\
    \    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <136a90aa661b4654b6f18827ea75cadd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <136a90aa661b4654b6f18827ea75cadd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805603
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        long factor = 2;\n        while (n\
    \ > 1) {\n            if (n % factor == 0) {\n                largest = factor;\n\
    \                while (n % factor == 0) {\n                    n /= factor;\n\
    \                }\n            }\n            factor += 1;\n        }\n     \
    \   return largest;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                while\
    \ (n % i == 0) {\n                    n /= i;\n                }\n           \
    \ }\n        }\n        return largest;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805530
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805529
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long i = 2;\n        while (i * i <= n) {\n            if (n %\
    \ i == 0) {\n                n /= i;\n            } else {\n                i++;\n\
    \            }\n        }\n        return n;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        long i = 2;\n        while (i * i <=\
    \ n) {\n            if (n % i == 0) {\n                largest = i;\n        \
    \        n /= i;\n            } else {\n                i += 1;\n            }\n\
    \        }\n        if (n > 1) {\n            largest = n;\n        }\n      \
    \  return largest;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805529
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        long i = 2;\n        while (i * i <=\
    \ n) {\n            if (n % i == 0) {\n                largest = i;\n        \
    \        while (n % i == 0) {\n                    n /= i;\n                }\n\
    \            }\n            i += 1;\n        }\n        if (n > 1) {\n       \
    \     largest = n;\n        }\n        return largest;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n\
    \    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i--;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805530
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        while (n % 2 == 0) {\n            largest\
    \ = 2;\n            n /= 2;\n        }\n        for (long i = 3; i <= n; i +=\
    \ 2) {\n            while (n % i == 0) {\n                largest = i;\n     \
    \           n /= i;\n            }\n        }\n        return largest;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805603
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805529
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        long i = 2;\n        while (i * i <=\
    \ n) {\n            if (n % i == 0) {\n                largest = i;\n        \
    \        n /= i;\n            } else {\n                i += 1;\n            }\n\
    \        }\n        if (n > 1) {\n            largest = n;\n        }\n      \
    \  return largest;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long p = 2;\n        while (n > 1) {\n            if (n % p ==\
    \ 0) {\n                n /= p;\n            } else {\n                p++;\n\
    \            }\n        }\n        return p;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n \
    \           if (n % i == 0) {\n                largest = i;\n                n\
    \ /= i;\n                i = 1;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
    \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805529
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 0;\n        long factor = 2;\n        while (n\
    \ > 1) {\n            while (n % factor == 0) {\n                largest = factor;\n\
    \                n /= factor;\n            }\n            factor++;\n        }\n\
    \        return largest;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805530
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largestFactor = 1;\n        long factor = 2;\n        while\
    \ (n > 1) {\n            while (n % factor == 0) {\n                largestFactor\
    \ = factor;\n                n /= factor;\n            }\n            factor +=\
    \ 1;\n        }\n        return largestFactor;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n\
    \    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
    \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
    \ == (29L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805603
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        for (long i = 2; i * i <= n; i++) {\n\
    \            if (n % i == 0) {\n                largest = i;\n               \
    \ while (n % i == 0) {\n                    n /= i;\n                }\n     \
    \       }\n        }\n        if (n > 1) {\n            largest = n;\n       \
    \ }\n        return largest;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long p = 2;\n        while (n % p == 0) {\n            n /= p;\n\
    \        }\n        p = 3;\n        while (n > 1) {\n            while (n % p\
    \ == 0) {\n                n /= p;\n            }\n            p += 2;\n     \
    \   }\n        return p - 2;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long i = 2;\n        while (i * i <= n) {\n            if (n %\
    \ i == 0) {\n                n /= i;\n            } else {\n                i++;\n\
    \            }\n        }\n        return n;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long factor = 2;\n        while (n > 1) {\n            while (n\
    \ % factor == 0) {\n                n /= factor;\n            }\n            factor++;\n\
    \        }\n        return factor - 1;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805530
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long largest = 1;\n        for (long i = 2; i * i <= n; i++) {\n\
    \            if (n % i == 0) {\n                largest = i;\n               \
    \ while (n % i == 0) {\n                    n /= i;\n                }\n     \
    \       }\n        }\n        if (n > 1) {\n            largest = n;\n       \
    \ }\n        return largest;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n   \
    \ // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long\
    \ n) {\n        long p = 2;\n        while (n % p == 0) {\n            n /= p;\n\
    \        }\n        p = 3;\n        while (n > 1) {\n            while (n % p\
    \ == 0) {\n                n /= p;\n            }\n            p += 2;\n     \
    \   }\n        return p - 2;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(LargestPrimeFactor((15L)) == (5L));\n    Debug.Assert(LargestPrimeFactor((27L))\
    \ == (3L));\n    Debug.Assert(LargestPrimeFactor((63L)) == (7L));\n    Debug.Assert(LargestPrimeFactor((330L))\
    \ == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L)) == (29L));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805528
