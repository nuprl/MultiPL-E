name: HumanEval_43_pairs_sum_to_zero
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n  \
  \  // it returns True if there are two distinct elements in the list that\n    //\
  \ sum to zero, and False otherwise.\n    // >>> PairsSumToZero((new List<long>(new\
  \ long[]{(long)1L, (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>>\
  \ PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n\
  \    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L, (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new\
  \ List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n\
  \    // (true)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L})))\n\
  \    // (false)\n    public static bool PairsSumToZero(List<long> l) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new\
  \ List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n\
  \    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,\
  \ (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new\
  \ long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new\
  \ List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\
  \ == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))\
  \ == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,\
  \ (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new\
  \ List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))\
  \ == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,\
  \ (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new\
  \ List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))\
  \ == (false));\n    }\n\n}\n"
completions: ["        // your code goes here\n        return false;", "        //\
    \ your code here\n        return false;", "        // your code here\n       \
    \ return false;", "        var s = new HashSet<long>();\n        foreach (var\
    \ x in l) {\n            if (s.Contains(-x)) {\n                return true;\n\
    \            }\n            s.Add(x);\n        }\n        return false;", "  \
    \      // your code goes here\n        return false;", "        // your code here\n\
    \        return false;", "        // your code here\n        return false;", " \
    \       // your code here\n        return false;", "        // your code here\n\
    \        return false;", "        // your code goes here\n        return false;",
  "        var seen = new HashSet<long>();\n        foreach (var x in l) {\n     \
    \       if (seen.Contains(-(x))) {\n                return true;\n           \
    \ }\n            seen.Add(x);\n        }\n        return false;", "        var\
    \ s = new HashSet<long>();\n        foreach (var x in l) {\n            if (s.Contains(0L\
    \ - x)) {\n                return true;\n            }\n\n            s.Add(x);\n\
    \        }\n\n        return false;", "        var s = new HashSet<long>();\n\
    \        foreach (var x in l) {\n            if (s.Contains(-x)) {\n         \
    \       return true;\n            }\n            s.Add(x);\n        }\n      \
    \  return false;", "        // your code here\n        return false;", "     \
    \   var s = new HashSet<long>();\n        foreach (var x in l) {\n           \
    \ if (s.Contains(-x)) {\n                return true;\n            }\n       \
    \     s.Add(x);\n        }\n        return false;", "        // your code here\n\
    \        return false;", '        return false;', "        var s = new HashSet<long>();\n\
    \        foreach (var x in l) {\n            if (s.Contains(-x)) {\n         \
    \       return true;\n            }\n            s.Add(x);\n        }\n      \
    \  return false;", "        var h = new HashSet<long>();\n        foreach (var\
    \ x in l) {\n            if (h.Contains(x)) {\n                return true;\n\
    \            }\n            h.Add(-x);\n        }\n        return false;", " \
    \       // your code here\n        return false;", "        // your code here\n\
    \        return false;", "        // your code here\n        return false;", " \
    \       // your code goes here\n        return false;", "        // your code\
    \ goes here\n        return false;", "        var s = new HashSet<long>();\n \
    \       foreach (var x in l) {\n            if (s.Contains(-x)) {\n          \
    \      return true;\n            }\n            s.Add(x);\n        }\n       \
    \ return false;", "        // your code here\n        return false;", "      \
    \  // your code here\n        return false;", "        // Your code here\n   \
    \     return false;", "        // your code goes here\n        return false;",
  "        var s = new HashSet<long>();\n        foreach (var x in l) {\n        \
    \    if (s.Contains(0L - x)) {\n                return true;\n            }\n\
    \            s.Add(x);\n        }\n        return false;", "        // your code\
    \ here\n        return false;", "        // your code goes here\n        return\
    \ false;", '        return false;', "        // Your code here.\n        return\
    \ false;", "        // Your code here.\n        return false;", "        // your\
    \ code here\n        return false;", "        // your code here\n        return\
    \ false;", "        // your code here\n        return false;", "        // your\
    \ code here\n        return false;", "        var s = new HashSet<long>();\n \
    \       foreach (var x in l) {\n            if (s.Contains(-x)) {\n          \
    \      return true;\n            }\n            s.Add(x);\n        }\n       \
    \ return false;", "        if (l.Count == 0) {\n            return false;\n  \
    \      }\n        if (l.Count == 1) {\n            return false;\n        }\n\
    \        if (l.Count == 2) {\n            return l[0] + l[1] == 0;\n        }\n\
    \        var seen = new HashSet<long>();\n        foreach (var x in l) {\n   \
    \         if (seen.Contains(-x)) {\n                return true;\n           \
    \ }\n            seen.Add(x);\n        }\n        return false;", "        //\
    \ your code goes here\n        return false;", "        // your code here\n  \
    \      return false;", '        return false;', "        // your code goes here\n\
    \        return false;", "        // your code here\n        return false;", " \
    \       var h = new HashSet<long>();\n        foreach (var x in l) {\n       \
    \     if (h.Contains(-x)) {\n                return true;\n            }\n   \
    \         h.Add(x);\n        }\n        return false;", "        if (l.Count <\
    \ 2) {\n            return false;\n        }\n        var seen = new HashSet<long>();\n\
    \        foreach (var x in l) {\n            if (seen.Contains(-(x))) {\n    \
    \            return true;\n            }\n            seen.Add(x);\n        }\n\
    \        return false;", "        // your code here\n        return false;", " \
    \       // Your code here\n        return false;", "        // your code here\n\
    \        return false;", "        var s = new HashSet<long>();\n        foreach\
    \ (var x in l) {\n            if (s.Contains(-x)) {\n                return true;\n\
    \            }\n            s.Add(x);\n        }\n        return false;", "  \
    \      bool flag = false;\n        for (int i = 0; i < l.Count; i++) {\n     \
    \       for (int j = i + 1; j < l.Count; j++) {\n                if (l[i] + l[j]\
    \ == 0) {\n                    flag = true;\n                }\n            }\n\
    \        }\n        return flag;", '        return false;', "        var s = new\
    \ HashSet<long>();\n        foreach (var x in l) {\n            if (s.Contains(-x))\
    \ {\n                return true;\n            }\n            s.Add(x);\n    \
    \    }\n        return false;", "        // Your code here\n        return false;",
  "        HashSet<long> s = new HashSet<long>();\n        foreach (long i in l) {\n\
    \            if (s.Contains((long)0L - i)) {\n                return true;\n \
    \           }\n            s.Add(i);\n        }\n        return false;", "   \
    \     // your code here\n        return false;", '        return false;', '        return
    l.Distinct().Any(x => l.Contains(-x));', "        // your code here\n        return\
    \ false;", "        // your code here\n        return false;", "        // Your\
    \ code here.\n        return false;", "        // Your code here\n        return\
    \ false;", "        // your code here\n        return false;", "        var s\
    \ = new HashSet<long>();\n        foreach (var x in l) {\n            if (s.Contains(0L\
    \ - x)) {\n                return true;\n            }\n            s.Add(x);\n\
    \        }\n        return false;", "        for (int i = 0; i < l.Count; i++)\
    \ {\n            for (int j = i + 1; j < l.Count; j++) {\n                if (l[i]\
    \ + l[j] == 0) {\n                    return true;\n                }\n      \
    \      }\n        }\n        return false;", "        var s = new HashSet<long>();\n\
    \        foreach (var x in l) {\n            if (s.Contains(x)) {\n          \
    \      return true;\n            }\n            s.Add(-x);\n        }\n      \
    \  return false;", "        // your code here\n        return false;", "     \
    \   // your code here\n        return false;", "        // your code goes here\n\
    \        return false;", "        var s = new HashSet<long>();\n        foreach\
    \ (var x in l) {\n            if (s.Contains(-x)) {\n                return true;\n\
    \            }\n            s.Add(x);\n        }\n        return false;", "  \
    \      // your code here\n        return false;", "        // your code here\n\
    \        return false;", "        // your code here\n        return false;", " \
    \       // your code here\n        return false;", "        // TODO: Implement\
    \ this function.\n        return false;", "        // your code goes here\n  \
    \      return false;", "        // your code here\n        return false;", " \
    \       // your code here\n        return false;", "        // return true if\
    \ there are two distinct elements in l that sum to zero\n        // return false\
    \ otherwise\n        // your code here\n        return false;", "        // your\
    \ code here\n        return false;", "        // your code here\n        return\
    \ false;", "        var n = l.Count;\n        for (var i = 0; i < n; i++) {\n\
    \            for (var j = i + 1; j < n; j++) {\n                if (l[i] + l[j]\
    \ == 0L) {\n                    return true;\n                }\n            }\n\
    \        }\n        return false;", '        return false;', "        var s =\
    \ new HashSet<long>();\n        foreach (var x in l) {\n            if (s.Contains((long)0L\
    \ - x)) {\n                return true;\n            }\n            s.Add(x);\n\
    \        }\n        return false;", "        // your code here\n        return\
    \ false;", "        var s = new HashSet<long>();\n        foreach (var x in l)\
    \ {\n            if (s.Contains(-x)) {\n                return true;\n       \
    \     }\n            s.Add(x);\n        }\n        return false;", "        //\
    \ Your code here.\n        return false;", "        HashSet<long> seen = new HashSet<long>();\n\
    \        foreach (long x in l) {\n            if (seen.Contains((long)(-x))) {\n\
    \                return true;\n            }\n            seen.Add(x);\n     \
    \   }\n        return false;", "        // your code here\n        return false;",
  "        // replace this line with your code\n        return false;", "        var\
    \ s = new HashSet<long>();\n        foreach (var x in l) {\n            if (s.Contains(-x))\
    \ {\n                return true;\n            }\n            s.Add(x);\n    \
    \    }\n        return false;", "        var s = new HashSet<long>();\n      \
    \  foreach (var v in l) {\n            if (s.Contains(v)) {\n                return\
    \ true;\n            }\n            s.Add(-v);\n        }\n        return false;",
  "        var s = new HashSet<long>();\n        foreach (var x in l) {\n        \
    \    if (s.Contains((long)0L - x)) {\n                return true;\n         \
    \   }\n            s.Add(x);\n        }\n        return false;", "        // your\
    \ code here\n        return false;", "        // your code here\n        return\
    \ false;", "        // your code here\n        return false;", "        long i\
    \ = (long)0L;\n        while (i < (long)l.Count()) {\n            long j = (long)0L;\n\
    \            while (j < (long)l.Count()) {\n                if (i != j && l[(int)i]\
    \ + l[(int)j] == (long)0L) {\n                    return true;\n             \
    \   }\n                j = j + (long)1L;\n            }\n            i = i + (long)1L;\n\
    \        }\n        return false;", "        // your code goes here\n        return\
    \ false;", "        // your code here\n        return false;", '        return
    false;', "        // your code here\n        return false;", "        // your\
    \ code here\n        return false;", "        // Your code here\n        return\
    \ false;", "        // your code here\n        return false;", "        // your\
    \ code here\n        return false;", "        // your code here\n        return\
    \ false;", "        // insert your code here\n        return false;", "      \
    \  // your code here\n        return false;", "        // your code here\n   \
    \     return false;", "        // your code here\n        return false;", "  \
    \      HashSet<long> s = new HashSet<long>();\n        foreach (long x in l) {\n\
    \            if (s.Contains((long)0L - x)) {\n                return true;\n \
    \           }\n\n            s.Add(x);\n        }\n\n        return false;", " \
    \       long x = (long)0L;\n        foreach (var i in l) {\n            x = x\
    \ + i;\n        }\n        if (x == (long)0L) {\n            return true;\n  \
    \      }\n        return false;", "        // your code here\n        return false;",
  "        if (l.Count == 0) {\n            return false;\n        }\n        else\
    \ {\n            if (l.Count == 1) {\n                return false;\n        \
    \    }\n            else {\n                if (l.Count == 2) {\n            \
    \        return l[0] + l[1] == 0;\n                }\n                else {\n\
    \                    if (l.Count == 3) {\n                        return l[0]\
    \ + l[1] == 0 || l[0] + l[2] == 0 || l[1] + l[2] == 0;\n                    }\n\
    \                    else {\n                        if (l.Count == 4) {\n   \
    \                         return l[0] + l[1] == 0 || l[0] + l[2] == 0 || l[0]\
    \ + l[3] == 0 || l[1] + l[2] == 0 || l[1] + l[3] == 0 || l[2] + l[3] == 0;\n \
    \                       }\n                        else {\n                  \
    \          if (l.Count == 5) {\n                                return l[0] +\
    \ l[1] == 0 || l[0] + l[2] == 0 || l[0] + l[3] == 0 || l[0] + l[4] == 0 || l[1]\
    \ + l[2] == 0 || l[1] + l[3] == 0 || l[1] + l[4] == 0 || l[2] + l[3] == 0 || l[2]\
    \ + l[4] == 0 || l[3] + l[4] == 0;\n                            }\n          \
    \                  else {\n                                if (l.Count == 6) {\n\
    \                                    return l[0] + l[1] == 0 || l[0] + l[2] ==\
    \ 0 || l[0] + l[3] == 0 || l[0] + l[4] == 0 || l[0] + l[5] == 0 || l[1] + l[2]\
    \ == 0 || l[1] + l[3] == 0 || l[1] + l[4] == 0 || l[1] + l[5] == 0 || l[2] + l[3]\
    \ == 0 || l", "        var s = new HashSet<long>();\n        foreach (var x in\
    \ l) {\n            if (s.Contains(-x)) {\n                return true;\n    \
    \        }\n            s.Add(x);\n        }\n        return false;", "      \
    \  var set = new HashSet<long>();\n        foreach (var x in l) {\n          \
    \  if (set.Contains(-x)) {\n                return true;\n            }\n    \
    \        set.Add(x);\n        }\n        return false;", "        // input: a\
    \ list of integers\n        // output: true if there are two distinct elements\
    \ in the list that sum to zero, false otherwise\n        //\n        // algorithm:\n\
    \        //   sort the list\n        //   initialize i to 0\n        //   initialize\
    \ j to the last index of the list\n        //   while i < j:\n        //     if\
    \ l[i] + l[j] == 0:\n        //       return true\n        //     if l[i] + l[j]\
    \ < 0:\n        //       increment i\n        //     else:\n        //       decrement\
    \ j\n        //   return false\n        //\n        // complexity:\n        //\
    \   O(n log n) time, O(1) space\n        l.Sort();\n        int i = 0;\n     \
    \   int j = l.Count - 1;\n        while (i < j) {\n            if (l[i] + l[j]\
    \ == 0) {\n                return true;\n            }\n            if (l[i] +\
    \ l[j] < 0) {\n                i++;\n            } else {\n                j--;\n\
    \            }\n        }\n        return false;", "        // your code here\n\
    \        return false;", "        var s = new HashSet<long>();\n        foreach\
    \ (var x in l) {\n            if (s.Contains(x)) {\n                return true;\n\
    \            }\n            s.Add((long)(-x));\n        }\n        return false;",
  "        var s = new HashSet<long>();\n        foreach (var item in l) {\n     \
    \       if (s.Contains(item)) {\n                return true;\n            }\n\
    \            s.Add((long)(-item));\n        }\n        return false;", "     \
    \   bool found = false;\n        for (int i = 0; i < l.Count; i++) {\n       \
    \     for (int j = i + 1; j < l.Count; j++) {\n                if (l[i] + l[j]\
    \ == 0) {\n                    found = true;\n                }\n            }\n\
    \        }\n        return found;", '        return false;', "        var s =\
    \ new HashSet<long>();\n        foreach (var x in l) {\n            if (s.Contains(-x))\
    \ {\n                return true;\n            }\n            s.Add(x);\n    \
    \    }\n        return false;", "        // your code here\n        return false;",
  "        // your code here\n        return false;", "        // your code goes here\n\
    \        return false;", "        // Your code here\n        return false;", " \
    \       // your code here\n        return false;", "        var s = new HashSet<long>();\n\
    \        foreach (var x in l) {\n            if (s.Contains(-x)) {\n         \
    \       return true;\n            }\n            s.Add(x);\n        }\n      \
    \  return false;", "        // Insert your code here.\n        return false;",
  "        if (l.Count < 2) {\n            return false;\n        }\n        l.Sort();\n\
    \        long i = 0L;\n        long j = l.Count - 1L;\n        while (i < j) {\n\
    \            long sum = l[i] + l[j];\n            if (sum == 0L) {\n         \
    \       return true;\n            }\n            else if (sum < 0L) {\n      \
    \          i++;\n            }\n            else {\n                j--;\n   \
    \         }\n        }\n        return false;", "        var s = new HashSet<long>();\n\
    \        foreach (var x in l) {\n            if (s.Contains(-x)) {\n         \
    \       return true;\n            }\n            s.Add(x);\n        }\n      \
    \  return false;", "        // your code here\n        return false;", "     \
    \   // your code here\n        return false;", "        // your code here\n  \
    \      return false;", "        // your code here\n        return false;", " \
    \       // your code goes here\n        return false;", "        // your code\
    \ here\n        return false;", "        var s = new HashSet<long>();\n      \
    \  foreach (var x in l) {\n            if (s.Contains(-x)) {\n               \
    \ return true;\n            }\n            s.Add(x);\n        }\n        return\
    \ false;", "        if (l.Count < 2) {\n            return false;\n        }\n\
    \        HashSet<long> s = new HashSet<long>();\n        foreach (long x in l)\
    \ {\n            if (s.Contains(-x)) {\n                return true;\n       \
    \     }\n            s.Add(x);\n        }\n        return false;", "        if\
    \ (l.Count < 2) {\n            return false;\n        }\n        Dictionary<long,\
    \ bool> seen = new Dictionary<long, bool>();\n        foreach (long x in l) {\n\
    \            if (seen.ContainsKey(x)) {\n                return true;\n      \
    \      }\n            seen[-x] = true;\n        }\n        return false;", " \
    \       var s = new HashSet<long>();\n        foreach (var x in l) {\n       \
    \     if (s.Contains(x)) {\n                return true;\n            }\n    \
    \        s.Add(-x);\n        }\n        return false;", "        var s = new HashSet<long>();\n\
    \        foreach (var x in l) {\n            if (s.Contains(-x)) {\n         \
    \       return true;\n            }\n            s.Add(x);\n        }\n      \
    \  return false;", "        // Your code here.\n        return false;", "    \
    \    var s = new HashSet<long>();\n        foreach (var x in l) {\n          \
    \  if (s.Contains(-x)) {\n                return true;\n            }\n\n    \
    \        s.Add(x);\n        }\n\n        return false;\n", "        // replace\
    \ the following line with your code\n        return false;", "        var seen\
    \ = new HashSet<long>();\n        foreach (var x in l) {\n            if (seen.Contains(-(x)))\
    \ {\n                return true;\n            }\n            seen.Add(x);\n \
    \       }\n        return false;", "        // your code here\n        return\
    \ false;", "        // your code here\n        return false;", "        // your\
    \ code here\n        return false;", "        // your code here\n        return\
    \ false;", "        // your code goes here\n        return false;", "        var\
    \ s = new HashSet<long>();\n        foreach (var x in l) {\n            if (s.Contains(x))\
    \ {\n                return true;\n            }\n            s.Add((long)(-x));\n\
    \        }\n        return false;", "        // your code here\n        return\
    \ false;", "        // your code here\n        return false;", "        // your\
    \ code here\n        return false;", "        // your code here\n        return\
    \ false;", "        // your code here\n        return false;", "        // your\
    \ code goes here\n        return false;", "        // Your code here\n       \
    \ return false;", "        // your code here\n        return false;", "      \
    \  var dict = new Dictionary<long, bool>();\n        foreach (var item in l) {\n\
    \            if (dict.ContainsKey(-item)) {\n                return true;\n  \
    \          }\n            dict[item] = true;\n        }\n        return false;",
  "        var set = new HashSet<long>();\n        foreach (var item in l) {\n   \
    \         if (set.Contains(-item)) {\n                return true;\n         \
    \   }\n            set.Add(item);\n        }\n        return false;", "      \
    \  // Your code here.\n        return false;", "        // your code here\n  \
    \      return false;", "        // YOUR CODE HERE\n        return false;", " \
    \       var s = new HashSet<long>();\n        foreach (var x in l) {\n       \
    \     if (s.Contains(x)) {\n                return true;\n            }\n    \
    \        s.Add(-x);\n        }\n        return false;", "        var s = new HashSet<long>();\n\
    \        foreach (var x in l) {\n            if (s.Contains((long)0L - x)) {\n\
    \                return true;\n            }\n\n            s.Add(x);\n\n    \
    \    }\n\n        return false;\n", "        var s = new HashSet<long>();\n  \
    \      foreach (var x in l) {\n            if (s.Contains(-x)) {\n           \
    \     return true;\n            }\n            s.Add(x);\n        }\n        return\
    \ false;", "        // your code here\n        return false;", "        // your\
    \ code here\n        return false;", "        // your code here\n        return\
    \ false;", "        // your code here\n        return false;", "        // your\
    \ code here\n        return false;", "        // Your code here.\n        return\
    \ false;", "        var s = new HashSet<long>();\n        foreach (var x in l)\
    \ {\n            if (s.Contains(-x)) {\n                return true;\n       \
    \     }\n            s.Add(x);\n        }\n        return false;", "        //\
    \ Replace the following line with your code.\n        return false;", "      \
    \  // your code here\n        return false;", "        // your code here\n   \
    \     return false;", "        var s = new HashSet<long>();\n        foreach (var\
    \ x in l) {\n            if (s.Contains(x)) {\n                return true;\n\
    \            }\n            s.Add((long)(-x));\n        }\n        return false;",
  "        var s = new HashSet<long>();\n        foreach (var x in l) {\n        \
    \    if (s.Contains(-x)) {\n                return true;\n            }\n    \
    \        s.Add(x);\n        }\n        return false;", "        // your code here\n\
    \        return false;", "        // your code here\n        return false;", " \
    \       // your code here\n        return false;", "        // Your code here.\n\
    \        return false;", "        // your code here\n        return false;", " \
    \       // your code here\n        return false;", '        return false;', " \
    \       // your code here\n        return false;", "        // your code here\n\
    \        return false;", '        return false;', "        // your code here\n\
    \        return false;", "        // Your code here\n        return false;", " \
    \       // your code here\n        return false;", "        // your code here\n\
    \        return false;", "        // Your code here\n        return false;", " \
    \       var s = new HashSet<long>();\n        foreach (var x in l) {\n       \
    \     if (s.Contains(x)) {\n                return true;\n            }\n    \
    \        s.Add(-x);\n        }\n        return false;", "        // your code\
    \ here\n        return false;"]
stop_tokens:
- "\n    }\n"
