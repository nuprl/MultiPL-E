name: HumanEval_161_solve
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse\
  \ its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
  \    // If the string contains no letters, reverse the string.\n    // The function\
  \ should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"\
  ))\n    // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"\
  #a@C\"))\n    // (\"#A@c\")\n    public static string Solve(string s) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"\
  AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\"\
  )));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"\
  #a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"\
  #aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"\
  #$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\"\
  )));\n    }\n\n}\n"
completions: ["        // Your code goes here\n        return \"\";", "        if\
    \ (s.Any(char.IsLetter)) {\n            return new string(s.Select(c => char.IsLetter(c)\
    \ ? char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c) : c).ToArray());\n   \
    \     } else {\n            return new string(s.Reverse().ToArray());\n      \
    \  }", "        // Your code goes here\n        return \"\";", "        // Your\
    \ code goes here.\n        return \"\";", "        // Your code goes here.\n \
    \       return \"\";", "        if (s.Any(char.IsLetter)) {\n            return\
    \ new string(s.Select(c => char.IsLetter(c) ? char.IsUpper(c) ? char.ToLower(c)\
    \ : char.ToUpper(c) : c).ToArray());\n        } else {\n            return new\
    \ string(s.Reverse().ToArray());\n        }", "        if (s.Any(char.IsLetter))\
    \ {\n            return new string(s.Select(c => char.IsLetter(c) ? char.IsUpper(c)\
    \ ? char.ToLower(c) : char.ToUpper(c) : c).ToArray());\n        } else {\n   \
    \         return new string(s.Reverse().ToArray());\n        }", "        // Your\
    \ code goes here\n        return \"\";", "        // Your code goes here.\n  \
    \      return \"\";", "        // Your code goes here\n        return \"\";",
  '        return new string(s.Select(c => char.IsLetter(c) ? (char.IsUpper(c) ? char.ToLower(c)
    : char.ToUpper(c)) : c).Reverse().ToArray());', "        var sb = new StringBuilder();\n\
    \        var is_letter = false;\n        for (int i = 0; i < s.Length; i++) {\n\
    \            var c = s[i];\n            if (char.IsLetter(c)) {\n            \
    \    is_letter = true;\n                sb.Append(char.IsUpper(c) ? char.ToLower(c)\
    \ : char.ToUpper(c));\n            } else {\n                sb.Append(c);\n \
    \           }\n        }\n        if (!is_letter) {\n            sb.Reverse();\n\
    \        }\n        return sb.ToString();", "        // Write your code here\n\
    \        return \"\";", "        // Your code goes here.\n        return \"\";",
  "        // Your code goes here\n        return \"\";", "        // Your code goes\
    \ here.\n        return \"\";", "        // Your code goes here\n        return\
    \ \"\";", "        // Your code goes here\n        return \"\";", "        if\
    \ (s.Any(char.IsLetter)) {\n            return new string(s.Select(c => char.IsLetter(c)\
    \ ? char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c) : c).ToArray());\n   \
    \     } else {\n            return new string(s.Reverse().ToArray());\n      \
    \  }", "        // Write your code here\n        return \"\";"]
stop_tokens:
- "\n    }\n"
