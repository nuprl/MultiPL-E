name: HumanEval_161_solve
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse\
  \ its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
  \    // If the string contains no letters, reverse the string.\n    // The function\
  \ should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"\
  ))\n    // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"\
  #a@C\"))\n    // (\"#A@c\")\n    public static string Solve(string s) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"\
  AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\"\
  )));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"\
  #a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"\
  #aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"\
  #$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\"\
  )));\n    }\n\n}\n"
completions: ["        // Your code goes here\n        return \"\";", "        if\
    \ (s.Any(char.IsLetter)) {\n            return new string(s.Select(c => char.IsLetter(c)\
    \ ? char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c) : c).ToArray());\n   \
    \     } else {\n            return new string(s.Reverse().ToArray());\n      \
    \  }", "        // Your code goes here\n        return \"\";", "        // Your\
    \ code goes here.\n        return \"\";", "        // Your code goes here.\n \
    \       return \"\";", "        if (s.Any(char.IsLetter)) {\n            return\
    \ new string(s.Select(c => char.IsLetter(c) ? char.IsUpper(c) ? char.ToLower(c)\
    \ : char.ToUpper(c) : c).ToArray());\n        } else {\n            return new\
    \ string(s.Reverse().ToArray());\n        }", "        if (s.Any(char.IsLetter))\
    \ {\n            return new string(s.Select(c => char.IsLetter(c) ? char.IsUpper(c)\
    \ ? char.ToLower(c) : char.ToUpper(c) : c).ToArray());\n        } else {\n   \
    \         return new string(s.Reverse().ToArray());\n        }", "        // Your\
    \ code goes here\n        return \"\";", "        // Your code goes here.\n  \
    \      return \"\";", "        // Your code goes here\n        return \"\";",
  '        return new string(s.Select(c => char.IsLetter(c) ? (char.IsUpper(c) ? char.ToLower(c)
    : char.ToUpper(c)) : c).Reverse().ToArray());', "        var sb = new StringBuilder();\n\
    \        var is_letter = false;\n        for (int i = 0; i < s.Length; i++) {\n\
    \            var c = s[i];\n            if (char.IsLetter(c)) {\n            \
    \    is_letter = true;\n                sb.Append(char.IsUpper(c) ? char.ToLower(c)\
    \ : char.ToUpper(c));\n            } else {\n                sb.Append(c);\n \
    \           }\n        }\n        if (!is_letter) {\n            sb.Reverse();\n\
    \        }\n        return sb.ToString();", "        // Write your code here\n\
    \        return \"\";", "        // Your code goes here.\n        return \"\";",
  "        // Your code goes here\n        return \"\";", "        // Your code goes\
    \ here.\n        return \"\";", "        // Your code goes here\n        return\
    \ \"\";", "        // Your code goes here\n        return \"\";", "        if\
    \ (s.Any(char.IsLetter)) {\n            return new string(s.Select(c => char.IsLetter(c)\
    \ ? char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c) : c).ToArray());\n   \
    \     } else {\n            return new string(s.Reverse().ToArray());\n      \
    \  }", "        // Write your code here\n        return \"\";", "        // Your\
    \ code goes here\n        return \"\";", "        // Your code here\n        return\
    \ \"\";", "        // your code here\n        return \"\";", "        // Your\
    \ code here\n        return \"\";", "        // Write your code here\n       \
    \ return \"\";", "        // Write your code here\n        return \"\";", "  \
    \      bool hasLetter = false;\n        for (int i = 0; i < s.Length; i++) {\n\
    \            if (char.IsLetter(s[i])) {\n                hasLetter = true;\n \
    \               break;\n            }\n        }\n        if (!hasLetter) {\n\
    \            return new string(s.Reverse().ToArray());\n        }\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < s.Length; i++) {\n  \
    \          if (char.IsLetter(s[i])) {\n                sb.Append(char.IsUpper(s[i])\
    \ ? char.ToLower(s[i]) : char.ToUpper(s[i]));\n            } else {\n        \
    \        sb.Append(s[i]);\n            }\n        }\n        return sb.ToString();",
  '        return new string(s.Reverse().Select(c => char.IsLetter(c) ? (char.IsUpper(c)
    ? char.ToLower(c) : char.ToUpper(c)) : c).ToArray());', "        // Your code\
    \ goes here.\n        return \"\";", "        // Your code goes here\n       \
    \ return \"\";", "        // Your code goes here\n        return \"\";", "   \
    \     // Your code here\n        return \"\";", "        // Your code here\n \
    \       return \"\";", "        // Your code goes here\n        return \"\";",
  "        // Your code goes here\n        return \"\";", "        // Your code here\n\
    \        return \"\";", "        // Your code goes here\n        return \"\";",
  "        // Your code goes here.\n        return \"\";", "        // Your code goes\
    \ here\n        return \"\";", "        // Write your code here\n        return\
    \ \"\";", "        // Your code goes here\n        return \"\";", '        return
    new string(s.Select(c => char.IsLetter(c) ? (char.IsUpper(c) ? char.ToLower(c)
    : char.ToUpper(c)) : c).Reverse().ToArray());', "        // Your code goes here.\n\
    \        return \"\";", "        // Your code goes here.\n        return \"\";",
  "        // Your code goes here\n        return \"\";", "        // Your code goes\
    \ here\n        return \"\";", "        // Your code here\n        return \"\"\
    ;", "        // Your code here\n        return \"\";", "        // Your code goes\
    \ here\n        return \"\";", "        // Write your code here\n        return\
    \ \"\";", "        // Your code goes here.\n        return null;", "        //\
    \ Your code goes here\n        return \"\";", "        // Your code here\n   \
    \     return \"\";", "        // Your code here\n        return \"\";", "    \
    \    string result = \"\";\n        bool has_letter = false;\n        for (int\
    \ i = 0; i < s.Length; i++) {\n            if (Char.IsLetter(s[i])) {\n      \
    \          has_letter = true;\n                result += Char.IsUpper(s[i]) ?\
    \ Char.ToLower(s[i]) : Char.ToUpper(s[i]);\n            } else {\n           \
    \     result += s[i];\n            }\n        }\n        return has_letter ? result\
    \ : new string(result.Reverse().ToArray());", "        // Your code here\n   \
    \     return \"\";", "        // Your code here\n        return \"\";", "    \
    \    // Your code here\n        return \"\";", "        // Write your code here\n\
    \        return \"\";", "        // Write your code here\n        return \"\";",
  "        // Your code here\n        return \"\";", "        // Write your code here\n\
    \        return \"\";", "        // Your code goes here\n        return \"\";",
  "        // Your code here\n        return \"\";", "        // Your code goes here\n\
    \        return \"\";", "        var letters = s.Where(c => char.IsLetter(c)).ToArray();\n\
    \        if (letters.Length == 0) {\n            return new string(s.Reverse().ToArray());\n\
    \        }\n        var result = new char[s.Length];\n        for (int i = 0;\
    \ i < s.Length; i++) {\n            if (char.IsLetter(s[i])) {\n             \
    \   result[i] = char.IsUpper(s[i]) ? char.ToLower(s[i]) : char.ToUpper(s[i]);\n\
    \            } else {\n                result[i] = s[i];\n            }\n    \
    \    }\n        return new string(result);", "        if (s.Any(char.IsLetter))\
    \ {\n            return new string(s.Select(c => char.IsLetter(c) ? char.IsUpper(c)\
    \ ? char.ToLower(c) : char.ToUpper(c) : c).ToArray());\n        } else {\n   \
    \         return new string(s.Reverse().ToArray());\n        }", "        // Your\
    \ code goes here\n        return \"\";", "        // Write your code here\n  \
    \      return \"\";", "        // Write your code here\n        return \"\";",
  "        // Your code here\n        return \"\";", "        // Your code goes here\n\
    \        return \"\";", "        // Your code goes here\n        return \"\";",
  '        return s.Any(char.IsLetter) ? new string(s.Select(c => char.IsLetter(c)
    ? char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c) : c).ToArray()) : new string(s.Reverse().ToArray());',
  "        // Write your code here\n        return \"\";", "        // Your code goes\
    \ here.\n        return \"\";", "        // Write your code here\n        return\
    \ \"\";", "        // Your code goes here.\n        return \"\";", "        //\
    \ Your code goes here.\n        return \"\";", "        // Your code here\n  \
    \      return \"\";", "        // Write your code here\n        return \"\";",
  "        string result = \"\";\n        bool hasLetter = false;\n        for (int\
    \ i = 0; i < s.Length; i++) {\n            if (char.IsLetter(s[i])) {\n      \
    \          hasLetter = true;\n                result += char.IsUpper(s[i]) ? char.ToLower(s[i])\
    \ : char.ToUpper(s[i]);\n            } else {\n                result += s[i];\n\
    \            }\n        }\n        return hasLetter ? result : new string(result.Reverse().ToArray());",
  "        // Your code goes here\n        return \"\";", "        // Your code here\n\
    \        return \"\";", "        // Your code goes here.\n        return \"\";",
  "        // Write your code here\n        return \"\";", "        // Write your\
    \ code here\n        return \"\";", "        // Your code here\n        return\
    \ \"\";", "        // Write your code here\n        return \"\";", "        //\
    \ your code goes here\n        return \"\";", "        // Your code goes here\n\
    \        return \"\";", "        // Your code here\n        return \"\";", " \
    \       // Write your code here.\n        return \"\";", "        // Write your\
    \ code here\n        return \"\";", "        // Your code goes here\n        return\
    \ \"\";", "        // Your code here\n        return \"\";", "        // Your\
    \ code goes here\n        return \"\";", "        // Your code goes here.\n  \
    \      return \"\";", "        // Your code goes here\n        return \"\";",
  "        // Your code goes here\n        return \"\";", "        // Your code here\n\
    \        return \"\";", "        // Your code here\n        return \"\";", " \
    \       // Write your code here\n        return \"\";", "        // Your code\
    \ goes here\n        return \"\";", "        // Your code here\n        return\
    \ \"\";", "        // Your code goes here\n        return \"\";", "        //\
    \ Write your code here\n        return \"\";", "        // Write your code here\n\
    \        return \"\";", "        // Your code here\n        return \"\";", " \
    \       // Write your code here\n        return \"\";", "        // Your code\
    \ goes here\n        return \"\";", "        string result = \"\";\n        bool\
    \ hasLetter = false;\n        for (int i = 0; i < s.Length; i++) {\n         \
    \   if (char.IsLetter(s[i])) {\n                hasLetter = true;\n          \
    \      result += char.IsUpper(s[i]) ? char.ToLower(s[i]) : char.ToUpper(s[i]);\n\
    \            } else {\n                result += s[i];\n            }\n      \
    \  }\n        if (!hasLetter) {\n            result = new string(result.Reverse().ToArray());\n\
    \        }\n        return result;", "        // Your code here\n        return\
    \ \"\";", "        // Write your code here\n        return \"\";", "        //\
    \ Your code goes here\n        return \"\";", "        // Your code goes here.\n\
    \        return \"\";", "        // Your code goes here\n        return \"\";",
  "        // Your code goes here.\n        return \"\";", '        return "";', " \
    \       string res = \"\";\n        bool hasLetter = false;\n        for (int\
    \ i = 0; i < s.Length; i++) {\n            if (char.IsLetter(s[i])) {\n      \
    \          hasLetter = true;\n                res += char.IsUpper(s[i]) ? char.ToLower(s[i])\
    \ : char.ToUpper(s[i]);\n            } else {\n                res += s[i];\n\
    \            }\n        }\n        if (!hasLetter) {\n            res = new string(res.Reverse().ToArray());\n\
    \        }\n        return res;", "        // Your code goes here\n        return\
    \ \"\";", "        // Write your code here\n        return \"\";", "        //\
    \ Your code goes here\n        return \"\";", "        // Write your code here\n\
    \        return \"\";", "        string res = \"\";\n        bool has_letter =\
    \ false;\n        for (int i = 0; i < s.Length; i++) {\n            if (char.IsLetter(s[i]))\
    \ {\n                has_letter = true;\n                res += char.IsUpper(s[i])\
    \ ? char.ToLower(s[i]) : char.ToUpper(s[i]);\n            } else {\n         \
    \       res += s[i];\n            }\n        }\n        return has_letter ? res\
    \ : new string(res.Reverse().ToArray());", "        // Your code goes here.\n\
    \        return \"\";", "        // Write your code here\n        return \"\";",
  "        // Write your code here\n        return \"\";", "        // Your code goes\
    \ here\n        return \"\";", "        // Your code here\n        return \"\"\
    ;", '        return "";', "        // Your code goes here.\n        return \"\"\
    ;", "        if (s.Any(char.IsLetter)) {\n            return new string(s.Select(c\
    \ => char.IsLetter(c) ? char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c) :\
    \ c).ToArray());\n        } else {\n            return new string(s.Reverse().ToArray());\n\
    \        }", "        // Your code goes here\n        return \"\";", "       \
    \ // Your code goes here.\n        return \"\";", "        // Write your code\
    \ here\n        return \"\";", "        if (s.Any(char.IsLetter)) {\n        \
    \    return new string(s.Select(c => char.IsLetter(c) ? char.IsUpper(c) ? char.ToLower(c)\
    \ : char.ToUpper(c) : c).ToArray());\n        } else {\n            return new\
    \ string(s.Reverse().ToArray());\n        }", "        // Your code here\n   \
    \     return \"\";", "        if (s.Any(char.IsLetter)) {\n            return\
    \ new string(s.Select(c => char.IsLetter(c) ? char.IsUpper(c) ? char.ToLower(c)\
    \ : char.ToUpper(c) : c).ToArray());\n        } else {\n            return new\
    \ string(s.Reverse().ToArray());\n        }", "        // Your code goes here\n\
    \        return \"\";", "        // Write your code here\n        return \"\";",
  "        // Write your code here\n        return \"\";", "        // Your code here\n\
    \        return \"\";", "        if (s.Any(char.IsLetter)) {\n            return\
    \ new string(s.Select(c => char.IsLetter(c) ? char.IsUpper(c) ? char.ToLower(c)\
    \ : char.ToUpper(c) : c).ToArray());\n        } else {\n            return new\
    \ string(s.Reverse().ToArray());\n        }", "        // Your code goes here\n\
    \        return \"\";", "        // Write your code here\n        return \"\";",
  "        // Your code here\n        return \"\";", "        // Write your code here\n\
    \        return \"\";", "        if (s.Any(char.IsLetter)) {\n            return\
    \ new string(s.Select(c => char.IsLetter(c) ? char.IsUpper(c) ? char.ToLower(c)\
    \ : char.ToUpper(c) : c).ToArray());\n        } else {\n            return new\
    \ string(s.Reverse().ToArray());\n        }", "        // Your code goes here\n\
    \        return null;", "        var sb = new StringBuilder();\n        bool hasLetter\
    \ = false;\n        foreach (var c in s) {\n            if (char.IsLetter(c))\
    \ {\n                hasLetter = true;\n                sb.Append(char.IsUpper(c)\
    \ ? char.ToLower(c) : char.ToUpper(c));\n            } else {\n              \
    \  sb.Append(c);\n            }\n        }\n        if (!hasLetter) {\n      \
    \      sb.Reverse();\n        }\n        return sb.ToString();", "        var\
    \ letters = s.Where(c => char.IsLetter(c)).ToArray();\n        if (letters.Length\
    \ == 0) {\n            return new string(s.Reverse().ToArray());\n        }\n\
    \        var sb = new StringBuilder();\n        foreach (var c in s) {\n     \
    \       if (char.IsLetter(c)) {\n                sb.Append(char.IsUpper(c) ? char.ToLower(c)\
    \ : char.ToUpper(c));\n            } else {\n                sb.Append(c);\n \
    \           }\n        }\n        return sb.ToString();", "        // Your code\
    \ goes here\n        return \"\";", "        // Your code goes here\n        return\
    \ \"\";", "        if (s.Any(char.IsLetter)) {\n            return new string(s.Select(c\
    \ => char.IsLetter(c) ? char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c) :\
    \ c).ToArray());\n        } else {\n            return new string(s.Reverse().ToArray());\n\
    \        }", "        // Your code goes here.\n        return null;", "      \
    \  // Your code goes here\n        return \"\";", "        // Your code goes here\n\
    \        return \"\";", "        // Write your code here\n        return \"\";",
  "        // Your code here\n        return \"\";", "        // Your code goes here\n\
    \        return \"\";", "        // Write your code here\n        return \"\";",
  "        string result = \"\";\n        bool hasLetter = false;\n        for (int\
    \ i = 0; i < s.Length; i++) {\n            if (char.IsLetter(s[i])) {\n      \
    \          hasLetter = true;\n                result += char.IsUpper(s[i]) ? char.ToLower(s[i])\
    \ : char.ToUpper(s[i]);\n            } else {\n                result += s[i];\n\
    \            }\n        }\n        return hasLetter ? result : new string(result.Reverse().ToArray());",
  "        // Write your code here\n        return \"\";", "        // Your code goes\
    \ here.\n        return \"\";", "        // Your code goes here\n        return\
    \ \"\";", "        // Your code here\n        return \"\";", "        // Write\
    \ your code here\n        return \"\";", "        // Your code goes here.\n  \
    \      return \"\";", "        // Write your code here\n        return \"\";",
  "        // Write your code here\n        return \"\";", "        // Write your\
    \ code here.\n        return \"\";", "        // Your code here\n        return\
    \ \"\";", "        // Your code goes here\n        return \"\";", "        //\
    \ Your code goes here.\n        return \"\";", "        if (s.Any(char.IsLetter))\
    \ {\n            return string.Concat(s.Select(c => char.IsLetter(c) ? char.IsUpper(c)\
    \ ? char.ToLower(c) : char.ToUpper(c) : c));\n        }\n        return new string(s.Reverse().ToArray());",
  "        // Your code here\n        return \"\";", "        // Your code here\n\
    \        return \"\";", '        return "";', "        // Write your code here\n\
    \        return \"\";", "        // Write your code here\n        return \"\";",
  '        return "";', "        // Your code goes here\n        return \"\";", " \
    \       // Write your code here\n        return \"\";", "        // Your code\
    \ here\n        return \"\";", "        if (s.Any(char.IsLetter)) {\n        \
    \    return new string(s.Select(c => char.IsLetter(c) ? char.IsUpper(c) ? char.ToLower(c)\
    \ : char.ToUpper(c) : c).ToArray());\n        } else {\n            return new\
    \ string(s.Reverse().ToArray());\n        }", "        if (s.Any(char.IsLetter))\
    \ {\n            return new string(s.Select(c => char.IsLetter(c) ? char.IsUpper(c)\
    \ ? char.ToLower(c) : char.ToUpper(c) : c).ToArray());\n        } else {\n   \
    \         return new string(s.Reverse().ToArray());\n        }", "        // Write\
    \ your code here\n        return \"\";", "        // Your code here\n        return\
    \ \"\";", "        // Your code here\n        return \"\";", "        // Write\
    \ your code here\n        return \"\";", "        // Your code goes here.\n  \
    \      return \"\";", "        // Your code goes here.\n        return \"\";",
  "        // Your code goes here\n        return \"\";", "        if (s.Any(char.IsLetter))\
    \ {\n            return string.Concat(s.Select(c => char.IsLetter(c) ? char.IsUpper(c)\
    \ ? char.ToLower(c) : char.ToUpper(c) : c));\n        } else {\n            return\
    \ new string(s.Reverse().ToArray());\n        }", "        // Your code here\n\
    \        return \"\";", "        // Your code goes here\n        return \"\";",
  "        // Your code goes here\n        return \"\";", "        // Write your code\
    \ here\n        return \"\";", "        var sb = new StringBuilder();\n      \
    \  var isLetter = false;\n        for (int i = 0; i < s.Length; i++) {\n     \
    \       if (char.IsLetter(s[i])) {\n                isLetter = true;\n       \
    \         sb.Append(char.IsUpper(s[i]) ? char.ToLower(s[i]) : char.ToUpper(s[i]));\n\
    \            } else {\n                sb.Append(s[i]);\n            }\n     \
    \   }\n        return isLetter ? sb.ToString() : new string(sb.ToString().Reverse().ToArray());"]
stop_tokens:
- "\n    }\n"
