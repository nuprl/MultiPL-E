name: HumanEval_117_select_words
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a string s and a natural number n, you have been tasked\
  \ to implement \n    // a function that returns a list of all words from string\
  \ s that contain exactly \n    // n consonants, in order these words appear in the\
  \ string s.\n    // If the string s is empty then the function should return an\
  \ empty list.\n    // Note: you may assume the input string contains only letters\
  \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
  ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>\
  \ SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
  \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
  \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
  Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n\
  \    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"\
  Uncle\"}))\n    public static List<string> SelectWords(string s, long n) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
  Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
  little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
  \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
  simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
  Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
  \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
  \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
  \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
  \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
  f\"}))));\n    }\n\n}\n"
completions: ["        var words = s.Split(' ');\n        var result = new List<string>();\n\
    \        foreach (var word in words) {\n            if (word.Count(c => !IsVowel(c))\
    \ == n) {\n                result.Add(word);\n            }\n        }\n     \
    \   return result;", "        // Your code goes here\n        return null;", " \
    \       List<string> result = new List<string>();\n        string[] words = s.Split('\
    \ ');\n        foreach (string word in words) {\n            if (word.Length ==\
    \ 0) {\n                continue;\n            }\n            int count = 0;\n\
    \            foreach (char c in word) {\n                if (c != 'a' && c !=\
    \ 'e' && c != 'i' && c != 'o' && c != 'u') {\n                    count++;\n \
    \               }\n            }\n            if (count == n) {\n            \
    \    result.Add(word);\n            }\n        }\n        return result;", " \
    \       List<string> result = new List<string>();\n        string[] words = s.Split('\
    \ ');\n        foreach (string word in words) {\n            if (word.Length ==\
    \ n) {\n                result.Add(word);\n            }\n        }\n        return\
    \ result;", "        // TODO: implement this function\n        return null;",
  "        var words = s.Split(' ');\n        var result = new List<string>();\n \
    \       foreach (var word in words) {\n            var count = 0;\n          \
    \  foreach (var c in word) {\n                if (IsConsonant(c)) {\n        \
    \            count++;\n                }\n            }\n            if (count\
    \ == n) {\n                result.Add(word);\n            }\n        }\n     \
    \   return result;", "        List<string> result = new List<string>();\n    \
    \    string[] words = s.Split(' ');\n        foreach (string word in words) {\n\
    \            if (word.Count(c => !IsVowel(c)) == n) {\n                result.Add(word);\n\
    \            }\n        }\n        return result;", "        var words = s.Split('\
    \ ');\n        var result = new List<string>();\n        foreach (var word in\
    \ words) {\n            var count = 0;\n            foreach (var c in word) {\n\
    \                if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u')\
    \ {\n                    count++;\n                }\n            }\n        \
    \    if (count == n) {\n                result.Add(word);\n            }\n   \
    \     }\n        return result;", "        var words = s.Split(' ');\n       \
    \ var result = new List<string>();\n        foreach (var word in words) {\n  \
    \          if (word.Count(c => !IsVowel(c)) == n) {\n                result.Add(word);\n\
    \            }\n        }\n        return result;", "        // TODO: Implement\
    \ this function\n        return null;", "        // TODO: implement this function\n\
    \        return null;", "        List<string> result = new List<string>();\n \
    \       string[] words = s.Split(' ');\n        foreach (string word in words)\
    \ {\n            if (word.Count(c => c != 'a' && c != 'e' && c != 'i' && c !=\
    \ 'o' && c != 'u') == n) {\n                result.Add(word);\n            }\n\
    \        }\n        return result;", "        var words = s.Split(' ');\n    \
    \    var result = new List<string>();\n        foreach (var word in words) {\n\
    \            if (word.Count(c => c != 'a' && c != 'e' && c != 'i' && c != 'o'\
    \ && c != 'u') == n) {\n                result.Add(word);\n            }\n   \
    \     }\n        return result;", "        var result = new List<string>();\n\
    \        var words = s.Split(' ');\n        foreach (var word in words) {\n  \
    \          var consonants = 0;\n            foreach (var c in word) {\n      \
    \          if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n \
    \                   consonants++;\n                }\n            }\n        \
    \    if (consonants == n) {\n                result.Add(word);\n            }\n\
    \        }\n        return result;", "        // TODO: Implement your solution\
    \ here\n        return null;", "        // TODO: Implement this function\n   \
    \     return new List<string>();", "        // TODO: implement this function\n\
    \        return new List<string>();", "        var words = s.Split(' ');\n   \
    \     var result = new List<string>();\n        foreach (var word in words) {\n\
    \            if (word.Count(c => c != 'a' && c != 'e' && c != 'i' && c != 'o'\
    \ && c != 'u') == n) {\n                result.Add(word);\n            }\n   \
    \     }\n        return result;", "        var result = new List<string>();\n\
    \        var words = s.Split(' ');\n        foreach (var word in words) {\n  \
    \          var consonants = 0;\n            foreach (var c in word) {\n      \
    \          if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n \
    \                   consonants++;\n                }\n            }\n        \
    \    if (consonants == n) {\n                result.Add(word);\n            }\n\
    \        }\n        return result;", "        var words = s.Split(' ');\n    \
    \    var result = new List<string>();\n        foreach (var word in words) {\n\
    \            if (word.Count(c => !IsVowel(c)) == n) {\n                result.Add(word);\n\
    \            }\n        }\n        return result;"]
stop_tokens:
- "\n    }\n"
