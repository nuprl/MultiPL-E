name: HumanEval_118_get_closest_vowel
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You are given a word. Your task is to find the closest vowel\
  \ that stands between \n    // two consonants from the right side of the word (case\
  \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return empty\
  \ string if you didn't\n    // find any vowel met the above condition. \n    //\
  \ You may assume that the given string contains English letter only.\n    // Example:\n\
  \    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n    // >>> GetClosestVowel((\"\
  FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"quick\"))\n    // (\"\"\
  )\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n    public static string\
  \ GetClosestVowel(string word) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
  yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
  u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
  eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
  \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
  most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
  \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
  quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
  i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
  Above\")).Equals((\"o\")));\n    }\n\n}\n"
completions: ["        string vowels = \"aeiou\";\n        string result = \"\";\n\
    \        int closest = word.Length;\n        for (int i = word.Length - 1; i >=\
    \ 0; i--) {\n            if (vowels.Contains(word[i])) {\n                if (i\
    \ < closest) {\n                    closest = i;\n                    result =\
    \ word[i].ToString();\n                }\n            } else {\n             \
    \   if (closest != word.Length) {\n                    break;\n              \
    \  }\n            }\n        }\n        return result;", "        // TODO: Implement\
    \ your code here\n        return \"\";", '        return "";', "        // Your\
    \ code goes here\n        return \"\";", "        // TODO: Implement your solution\
    \ here\n        return \"\";", "        // TODO: Implement your solution here\n\
    \        return \"\";", "        // TODO: Implement your solution here\n     \
    \   return \"\";", "        // TODO: Implement your solution here\n        return\
    \ \"\";", "        string vowels = \"aeiou\";\n        int closest = -1;\n   \
    \     for (int i = word.Length - 1; i >= 0; i--) {\n            if (vowels.Contains(word[i]))\
    \ {\n                closest = i;\n                break;\n            }\n   \
    \     }\n        if (closest == -1) {\n            return \"\";\n        }\n \
    \       for (int i = closest - 1; i >= 0; i--) {\n            if (!vowels.Contains(word[i]))\
    \ {\n                return word[closest].ToString();\n            }\n       \
    \ }\n        return \"\";", "        // TODO: Implement this method\n        return\
    \ \"\";", "        // TODO: Implement your solution here\n        return \"\";",
  "        // TODO: Implement your solution here\n        return \"\";", "       \
    \ // TODO: Implement your code here\n        return \"\";", "        // Your code\
    \ goes here\n        return \"\";", "        // TODO: Implement this method\n\
    \        return \"\";", "        // TODO: Implement your solution here\n     \
    \   return \"\";", "        // TODO: Implement your solution here\n        return\
    \ \"\";", "        // TODO: Implement your solution here\n        return \"\";",
  "        // Your code goes here\n        return \"\";", "        // your code here\n\
    \        return \"\";"]
stop_tokens:
- "\n    }\n"
