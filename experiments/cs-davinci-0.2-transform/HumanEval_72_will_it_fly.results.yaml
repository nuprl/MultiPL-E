language: cs
name: HumanEval_72_will_it_fly
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp353gl8jx.cs(25,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code goes here.\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       long sum = 0;\n        for (int i = 0; i < q.Count; i++) {\n         \
    \   sum += q[i];\n        }\n        if (sum > w) {\n            return false;\n\
    \        }\n        for (int i = 0; i < q.Count / 2; i++) {\n            if (q[i]\
    \ != q[q.Count - 1 - i]) {\n                return false;\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       long sum = 0;\n        foreach (long i in q) {\n            sum += i;\n\
    \        }\n        if (sum > w) {\n            return false;\n        }\n   \
    \     int n = q.Count;\n        for (int i = 0; i < n / 2; i++) {\n          \
    \  if (q[i] != q[n - i - 1]) {\n                return false;\n            }\n\
    \        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code goes here.\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       long sum = 0;\n        for (int i = 0; i < q.Count; i++) {\n         \
    \   sum += q[i];\n        }\n        if (sum > w) {\n            return false;\n\
    \        }\n        for (int i = 0; i < q.Count / 2; i++) {\n            if (q[i]\
    \ != q[q.Count - 1 - i]) {\n                return false;\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       long sum = 0;\n        for (int i = 0; i < q.Count; i++) {\n         \
    \   sum += q[i];\n        }\n        if (sum > w) {\n            return false;\n\
    \        }\n        for (int i = 0; i < q.Count / 2; i++) {\n            if (q[i]\
    \ != q[q.Count - 1 - i]) {\n                return false;\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // your code here\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6ac919c7e55c4dc4a68f9109f6edd5c2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6ac919c7e55c4dc4a68f9109f6edd5c2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp353gl8jx.cs(25,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       long sum = 0;\n        for (int i = 0; i < q.Count; i++) {\n         \
    \   sum += q[i];\n        }\n        if (sum > w) {\n            return false;\n\
    \        }\n        for (int i = 0; i < q.Count / 2; i++) {\n            if (q[i]\
    \ != q[q.Count - 1 - i]) {\n                return false;\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code goes here.\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       long sum = 0;\n        for (int i = 0; i < q.Count; i++) {\n         \
    \   sum += q[i];\n        }\n        if (sum > w) {\n            return false;\n\
    \        }\n        for (int i = 0; i < q.Count / 2; i++) {\n            if (q[i]\
    \ != q[q.Count - 1 - i]) {\n                return false;\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code here.\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a42bb78d1fe4b37a75b11f67b177bdf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a42bb78d1fe4b37a75b11f67b177bdf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp353gl8jx.cs(25,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code goes here.\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code goes here.\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp353gl8jx.cs(25,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code here\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9119aebe982249388dbfb81b09d7c956>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9119aebe982249388dbfb81b09d7c956>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       long sum = 0;\n        for (int i = 0; i < q.Count; i++) {\n         \
    \   sum += q[i];\n        }\n        if (sum > w) {\n            return false;\n\
    \        }\n        for (int i = 0; i < q.Count / 2; i++) {\n            if (q[i]\
    \ != q[q.Count - 1 - i]) {\n                return false;\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code goes here.\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       long sum = 0;\n        for (int i = 0; i < q.Count; i++) {\n         \
    \   sum += q[i];\n        }\n        if (sum > w) {\n            return false;\n\
    \        }\n        for (int i = 0; i < q.Count / 2; i++) {\n            if (q[i]\
    \ != q[q.Count - 1 - i]) {\n                return false;\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800510
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp353gl8jx.cs(25,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code here.\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a42bb78d1fe4b37a75b11f67b177bdf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a42bb78d1fe4b37a75b11f67b177bdf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code goes here.\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp353gl8jx.cs(25,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800510
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp353gl8jx.cs(25,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       long sum = 0;\n        foreach (long l in q) {\n            sum += l;\n\
    \        }\n        if (sum > w) {\n            return false;\n        }\n   \
    \     int i = 0;\n        int j = q.Count - 1;\n        while (i < j) {\n    \
    \        if (q[i] != q[j]) {\n                return false;\n            }\n \
    \           i++;\n            j--;\n        }\n        return true;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code here.\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a42bb78d1fe4b37a75b11f67b177bdf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a42bb78d1fe4b37a75b11f67b177bdf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code here.\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a42bb78d1fe4b37a75b11f67b177bdf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a42bb78d1fe4b37a75b11f67b177bdf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code goes here.\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       long sum = 0;\n        for (int i = 0; i < q.Count; i++) {\n         \
    \   sum += q[i];\n        }\n        if (sum > w) {\n            return false;\n\
    \        }\n        for (int i = 0; i < q.Count / 2; i++) {\n            if (q[i]\
    \ != q[q.Count - 1 - i]) {\n                return false;\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // your code here\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6ac919c7e55c4dc4a68f9109f6edd5c2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6ac919c7e55c4dc4a68f9109f6edd5c2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       var sum = q.Sum();\n        if (sum > w) return false;\n        var s\
    \ = q.Select(x => x.ToString()).Aggregate((x, y) => x + y);\n        var r = new\
    \ string(s.Reverse().ToArray());\n        return s == r;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code goes here.\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       long sum = 0;\n        for (int i = 0; i < q.Count; i++) {\n         \
    \   sum += q[i];\n        }\n        if (sum > w) {\n            return false;\n\
    \        }\n        for (int i = 0; i < q.Count / 2; i++) {\n            if (q[i]\
    \ != q[q.Count - 1 - i]) {\n                return false;\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code here.\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a42bb78d1fe4b37a75b11f67b177bdf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a42bb78d1fe4b37a75b11f67b177bdf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       long sum = 0;\n        for (int i = 0; i < q.Count; i++) {\n         \
    \   sum += q[i];\n        }\n        if (sum > w) {\n            return false;\n\
    \        }\n        for (int i = 0; i < q.Count / 2; i++) {\n            if (q[i]\
    \ != q[q.Count - 1 - i]) {\n                return false;\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800510
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp353gl8jx.cs(25,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       long sum = 0;\n        foreach (long i in q) {\n            sum += i;\n\
    \        }\n        if (sum > w) {\n            return false;\n        }\n   \
    \     for (int i = 0; i < q.Count / 2; i++) {\n            if (q[i] != q[q.Count\
    \ - 1 - i]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code goes here.\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       long sum = 0;\n        foreach (long i in q) {\n            sum += i;\n\
    \        }\n        if (sum > w) {\n            return false;\n        }\n   \
    \     int j = 0;\n        int k = q.Count - 1;\n        while (j < k) {\n    \
    \        if (q[j] != q[k]) {\n                return false;\n            }\n \
    \           j++;\n            k--;\n        }\n        return true;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       long sum = 0;\n        foreach (long x in q) {\n            sum += x;\n\
    \        }\n        if (sum > w) {\n            return false;\n        }\n   \
    \     for (int i = 0; i < q.Count / 2; i++) {\n            if (q[i] != q[q.Count\
    \ - 1 - i]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       long sum = 0;\n        for (int i = 0; i < q.Count; i++) {\n         \
    \   sum += q[i];\n        }\n        if (sum > w) {\n            return false;\n\
    \        }\n        for (int i = 0; i < q.Count / 2; i++) {\n            if (q[i]\
    \ != q[q.Count - 1 - i]) {\n                return false;\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       long sum = 0;\n        for (int i = 0; i < q.Count; i++) {\n         \
    \   sum += q[i];\n        }\n        if (sum > w) {\n            return false;\n\
    \        }\n        for (int i = 0; i < q.Count / 2; i++) {\n            if (q[i]\
    \ != q[q.Count - 1 - i]) {\n                return false;\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code here\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9119aebe982249388dbfb81b09d7c956>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9119aebe982249388dbfb81b09d7c956>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       long sum = 0;\n        for (int i = 0; i < q.Count; i++) {\n         \
    \   sum += q[i];\n        }\n        if (sum > w) {\n            return false;\n\
    \        }\n        for (int i = 0; i < q.Count / 2; i++) {\n            if (q[i]\
    \ != q[q.Count - 1 - i]) {\n                return false;\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       long sum = 0;\n        foreach (long x in q) {\n            sum += x;\n\
    \        }\n        if (sum > w) {\n            return false;\n        }\n   \
    \     int i = 0;\n        int j = q.Count - 1;\n        while (i < j) {\n    \
    \        if (q[i] != q[j]) {\n                return false;\n            }\n \
    \           i++;\n            j--;\n        }\n        return true;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       long sum = 0;\n        foreach (long i in q) {\n            sum += i;\n\
    \        }\n        if (sum > w) {\n            return false;\n        }\n   \
    \     List<long> q2 = new List<long>(q);\n        q2.Reverse();\n        if (q.SequenceEqual(q2))\
    \ {\n            return true;\n        }\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       long sum = 0;\n        foreach (long l in q) {\n            sum += l;\n\
    \        }\n        if (sum > w) {\n            return false;\n        }\n   \
    \     for (int i = 0; i < q.Count / 2; i++) {\n            if (q[i] != q[q.Count\
    \ - 1 - i]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       long sum = 0;\n        for (int i = 0; i < q.Count; i++) {\n         \
    \   sum += q[i];\n        }\n        if (sum > w) {\n            return false;\n\
    \        }\n        for (int i = 0; i < q.Count / 2; i++) {\n            if (q[i]\
    \ != q[q.Count - 1 - i]) {\n                return false;\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code here\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9119aebe982249388dbfb81b09d7c956>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9119aebe982249388dbfb81b09d7c956>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code goes here.\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       long sum = 0;\n        foreach (long x in q) {\n            sum += x;\n\
    \        }\n        if (sum > w) {\n            return false;\n        }\n   \
    \     for (int i = 0; i < q.Count / 2; i++) {\n            if (q[i] != q[q.Count\
    \ - 1 - i]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code goes here.\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code here.\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a42bb78d1fe4b37a75b11f67b177bdf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a42bb78d1fe4b37a75b11f67b177bdf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp353gl8jx.cs(25,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code here.\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a42bb78d1fe4b37a75b11f67b177bdf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a42bb78d1fe4b37a75b11f67b177bdf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp353gl8jx.cs(25,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code goes here.\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code here\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9119aebe982249388dbfb81b09d7c956>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9119aebe982249388dbfb81b09d7c956>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code goes here.\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp353gl8jx.cs(25,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code goes here\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <34267a5fa936435d95da33a469980e58>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <34267a5fa936435d95da33a469980e58>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800511
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       long sum = 0;\n        for (int i = 0; i < q.Count; i++) {\n         \
    \   sum += q[i];\n        }\n        if (sum > w) {\n            return false;\n\
    \        }\n        for (int i = 0; i < q.Count / 2; i++) {\n            if (q[i]\
    \ != q[q.Count - 1 - i]) {\n                return false;\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800510
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp353gl8jx.cs(25,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800510
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp353gl8jx.cs(25,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       long sum = 0;\n        for (int i = 0; i < q.Count; i++) {\n         \
    \   sum += q[i];\n        }\n        if (sum > w) {\n            return false;\n\
    \        }\n        for (int i = 0; i < q.Count / 2; i++) {\n            if (q[i]\
    \ != q[q.Count - 1 - i]) {\n                return false;\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       long sum = 0;\n        for (int i = 0; i < q.Count; i++) {\n         \
    \   sum += q[i];\n        }\n        if (sum > w) {\n            return false;\n\
    \        }\n        for (int i = 0; i < q.Count / 2; i++) {\n            if (q[i]\
    \ != q[q.Count - 1 - i]) {\n                return false;\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code goes here.\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp353gl8jx.cs(25,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code here\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9119aebe982249388dbfb81b09d7c956>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9119aebe982249388dbfb81b09d7c956>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code here\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9119aebe982249388dbfb81b09d7c956>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9119aebe982249388dbfb81b09d7c956>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code goes here.\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code goes here\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <34267a5fa936435d95da33a469980e58>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <34267a5fa936435d95da33a469980e58>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800511
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code here.\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a42bb78d1fe4b37a75b11f67b177bdf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a42bb78d1fe4b37a75b11f67b177bdf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code here.\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a42bb78d1fe4b37a75b11f67b177bdf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a42bb78d1fe4b37a75b11f67b177bdf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp353gl8jx.cs(25,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code goes here.\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code goes here.\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code here.\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a42bb78d1fe4b37a75b11f67b177bdf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a42bb78d1fe4b37a75b11f67b177bdf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code goes here.\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp353gl8jx.cs(25,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code goes here.\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code here!\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2f37b47b288b471c848fa3c54ba22a9b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2f37b47b288b471c848fa3c54ba22a9b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       long sum = 0;\n        for (int i = 0; i < q.Count; i++) {\n         \
    \   sum += q[i];\n        }\n        if (sum > w) {\n            return false;\n\
    \        }\n        for (int i = 0; i < q.Count / 2; i++) {\n            if (q[i]\
    \ != q[q.Count - 1 - i]) {\n                return false;\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       long sum = 0;\n        for (int i = 0; i < q.Count; i++) {\n         \
    \   sum += q[i];\n        }\n        if (sum > w) {\n            return false;\n\
    \        }\n        for (int i = 0; i < q.Count / 2; i++) {\n            if (q[i]\
    \ != q[q.Count - 1 - i]) {\n                return false;\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code here.\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a42bb78d1fe4b37a75b11f67b177bdf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a42bb78d1fe4b37a75b11f67b177bdf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       long sum = 0;\n        for (int i = 0; i < q.Count; i++) {\n         \
    \   sum += q[i];\n        }\n        if (sum > w) {\n            return false;\n\
    \        }\n        bool isPalindrome = true;\n        for (int i = 0; i < q.Count\
    \ / 2; i++) {\n            if (q[i] != q[q.Count - 1 - i]) {\n               \
    \ isPalindrome = false;\n                break;\n            }\n        }\n  \
    \      return isPalindrome;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code goes here.\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp353gl8jx.cs(25,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       long sum = 0;\n        for (int i = 0; i < q.Count; i++) {\n         \
    \   sum += q[i];\n        }\n        if (sum > w) {\n            return false;\n\
    \        }\n        for (int i = 0; i < q.Count / 2; i++) {\n            if (q[i]\
    \ != q[q.Count - 1 - i]) {\n                return false;\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code goes here.\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       return (q.Sum() <= w) && (q.SequenceEqual(q.Reverse()));\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp91wdnt4m.cs(25,51): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code here.\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a42bb78d1fe4b37a75b11f67b177bdf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a42bb78d1fe4b37a75b11f67b177bdf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp353gl8jx.cs(25,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       long sum = 0;\n        for (int i = 0; i < q.Count; i++) {\n         \
    \   sum += q[i];\n        }\n        if (sum > w) {\n            return false;\n\
    \        }\n        for (int i = 0; i < q.Count / 2; i++) {\n            if (q[i]\
    \ != q[q.Count - 1 - i]) {\n                return false;\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       long sum = 0;\n        foreach (long i in q) {\n            sum += i;\n\
    \        }\n        if (sum > w) {\n            return false;\n        }\n   \
    \     List<long> q2 = new List<long>(q);\n        q2.Reverse();\n        if (q.SequenceEqual(q2))\
    \ {\n            return true;\n        }\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code here.\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a42bb78d1fe4b37a75b11f67b177bdf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a42bb78d1fe4b37a75b11f67b177bdf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       long sum = 0;\n        for (int i = 0; i < q.Count; i++) {\n         \
    \   sum += q[i];\n        }\n        if (sum > w) {\n            return false;\n\
    \        }\n        int left = 0;\n        int right = q.Count - 1;\n        while\
    \ (left < right) {\n            if (q[left] != q[right]) {\n                return\
    \ false;\n            }\n            left++;\n            right--;\n        }\n\
    \        return true;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L,\
    \ (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})), (5L)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code goes here.\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code goes here.\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code here\n        long sum = 0;\n        for (int i = 0; i <\
    \ q.Count; i++) {\n            sum += q[i];\n        }\n        if (sum > w) {\n\
    \            return false;\n        }\n        for (int i = 0; i < q.Count / 2;\
    \ i++) {\n            if (q[i] != q[q.Count - 1 - i]) {\n                return\
    \ false;\n            }\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code goes here.\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Write your code here\n        // To print results to the standard output\
    \ you can use Console.WriteLine()\n        // Example:\n        // Console.WriteLine(\"\
    Hello world!\");\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9b63598b3dd0493fa41df3700a5ab726>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9b63598b3dd0493fa41df3700a5ab726>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code here\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9119aebe982249388dbfb81b09d7c956>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9119aebe982249388dbfb81b09d7c956>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp353gl8jx.cs(25,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       long sum = 0;\n        for (int i = 0; i < q.Count; i++) {\n         \
    \   sum += q[i];\n        }\n        if (sum > w) {\n            return false;\n\
    \        }\n        for (int i = 0; i < q.Count / 2; i++) {\n            if (q[i]\
    \ != q[q.Count - 1 - i]) {\n                return false;\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       long sum = 0;\n        for (int i = 0; i < q.Count; i++) {\n         \
    \   sum += q[i];\n        }\n        if (sum > w) {\n            return false;\n\
    \        }\n        for (int i = 0; i < q.Count / 2; i++) {\n            if (q[i]\
    \ != q[q.Count - 1 - i]) {\n                return false;\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code here\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9119aebe982249388dbfb81b09d7c956>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9119aebe982249388dbfb81b09d7c956>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp353gl8jx.cs(25,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code here\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9119aebe982249388dbfb81b09d7c956>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9119aebe982249388dbfb81b09d7c956>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       long sum = 0;\n        for (int i = 0; i < q.Count; i++) {\n         \
    \   sum += q[i];\n        }\n        if (sum > w) {\n            return false;\n\
    \        }\n        for (int i = 0; i < q.Count / 2; i++) {\n            if (q[i]\
    \ != q[q.Count - 1 - i]) {\n                return false;\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code here.\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a42bb78d1fe4b37a75b11f67b177bdf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a42bb78d1fe4b37a75b11f67b177bdf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code goes here.\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp353gl8jx.cs(25,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code goes here.\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code goes here.\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp353gl8jx.cs(25,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800510
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp353gl8jx.cs(25,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code goes here\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <34267a5fa936435d95da33a469980e58>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <34267a5fa936435d95da33a469980e58>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800511
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code goes here.\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       long sum = 0;\n        for (int i = 0; i < q.Count; i++) {\n         \
    \   sum += q[i];\n        }\n        if (sum > w) {\n            return false;\n\
    \        }\n        for (int i = 0; i < q.Count / 2; i++) {\n            if (q[i]\
    \ != q[q.Count - 1 - i]) {\n                return false;\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code goes here.\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp353gl8jx.cs(25,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       long sum = 0;\n        foreach (long i in q) {\n            sum += i;\n\
    \        }\n        if (sum > w) {\n            return false;\n        }\n   \
    \     for (int i = 0; i < q.Count / 2; i++) {\n            if (q[i] != q[q.Count\
    \ - 1 - i]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code goes here.\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp353gl8jx.cs(25,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code here\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9119aebe982249388dbfb81b09d7c956>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9119aebe982249388dbfb81b09d7c956>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code goes here.\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Write your code here\n        // To print results to the standard output\
    \ you can use Console.WriteLine()\n        // Example:\n        // Console.WriteLine(\"\
    Hello world!\");\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9b63598b3dd0493fa41df3700a5ab726>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9b63598b3dd0493fa41df3700a5ab726>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code goes here.\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code here.\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a42bb78d1fe4b37a75b11f67b177bdf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a42bb78d1fe4b37a75b11f67b177bdf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code goes here.\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code here\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9119aebe982249388dbfb81b09d7c956>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9119aebe982249388dbfb81b09d7c956>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp353gl8jx.cs(25,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code goes here.\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       if (q.Count == 0) return false;\n        if (q.Count == 1) return true;\n\
    \        if (q.Count == 2) return false;\n        if (q.Count == 3) return true;\n\
    \        if (q.Count == 4) return false;\n        if (q.Count == 5) return true;\n\
    \        if (q.Count == 6) return false;\n        if (q.Count == 7) return true;\n\
    \        if (q.Count == 8) return false;\n        if (q.Count == 9) return true;\n\
    \        if (q.Count == 10) return false;\n        if (q.Count == 11) return true;\n\
    \        if (q.Count == 12) return false;\n        if (q.Count == 13) return true;\n\
    \        if (q.Count == 14) return false;\n        if (q.Count == 15) return true;\n\
    \        if (q.Count == 16) return false;\n        if (q.Count == 17) return true;\n\
    \        if (q.Count == 18) return false;\n        if (q.Count == 19) return true;\n\
    \        if (q.Count == 20) return false;\n        if (q.Count == 21) return true;\n\
    \        if (q.Count == 22) return false;\n        if (q.Count == 23) return true;\n\
    \        if (q.Count == 24) return false;\n        if (q.Count == 25) return true;\n\
    \        if (q.Count == 26) return false;\n        if (q.Count == 27) return true;\n\
    \        if (q.Count == 28) return false;\n        if (q.Count == 29) return true;\n\
    \        if (q.Count == 30) return false;\n        if (q.Count == 31) return true;\n\
    \        if (q.Count == 32) return false;\n        if (q.Count == 33) return true;\n\
    \        if (q.Count == 34) return false;\n        if (q.Count == 35) return true;\n\
    \        if (q.Count == 36) return false;\n        if (q.Count == 37) return true;\n\
    \        if (q.Count == 38) return false;\n        if (q\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4q0jxt81.cs(64,14): error CS1026: ) expected

    /tmp/tmp4q0jxt81.cs(64,14): error CS1525: Invalid expression term ''}''

    /tmp/tmp4q0jxt81.cs(64,14): error CS1002: ; expected

    '
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code goes here.\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code here\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9119aebe982249388dbfb81b09d7c956>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9119aebe982249388dbfb81b09d7c956>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code goes here.\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp353gl8jx.cs(25,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code goes here.\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Write your code here\n        // To print results to the standard output\
    \ you can use Console.WriteLine()\n        // Example:\n        // Console.WriteLine(\"\
    Hello world!\");\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9b63598b3dd0493fa41df3700a5ab726>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9b63598b3dd0493fa41df3700a5ab726>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code goes here.\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code goes here.\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code goes here.\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       long sum = 0;\n        foreach (long i in q) {\n            sum += i;\n\
    \        }\n        if (sum > w) {\n            return false;\n        }\n   \
    \     for (int i = 0; i < q.Count / 2; i++) {\n            if (q[i] != q[q.Count\
    \ - 1 - i]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       long sum = 0;\n        foreach (long i in q) {\n            sum += i;\n\
    \        }\n        if (sum > w) {\n            return false;\n        }\n   \
    \     long[] q2 = q.ToArray();\n        Array.Reverse(q2);\n        for (int i\
    \ = 0; i < q.Count; i++) {\n            if (q[i] != q2[i]) {\n               \
    \ return false;\n            }\n        }\n        return true;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800511
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       long sum = 0;\n        foreach (long i in q) {\n            sum += i;\n\
    \        }\n        if (sum > w) {\n            return false;\n        }\n   \
    \     int i1 = 0;\n        int i2 = q.Count - 1;\n        while (i1 < i2) {\n\
    \            if (q[i1] != q[i2]) {\n                return false;\n          \
    \  }\n            i1++;\n            i2--;\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800511
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Write your code here\n        // To print results to the standard output\
    \ you can use Console.WriteLine()\n        // Example:\n        // Console.WriteLine(\"\
    Hello world!\");\n        long sum = 0;\n        for (int i = 0; i < q.Count;\
    \ i++) {\n            sum += q[i];\n        }\n        if (sum > w) {\n      \
    \      return false;\n        }\n        int j = 0;\n        int k = q.Count -\
    \ 1;\n        while (j < k) {\n            if (q[j] != q[k]) {\n             \
    \   return false;\n            }\n            j++;\n            k--;\n       \
    \ }\n        return true;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L,\
    \ (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})), (5L)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800511
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       long sum = 0;\n        for (int i = 0; i < q.Count; i++) {\n         \
    \   sum += q[i];\n        }\n        if (sum > w) {\n            return false;\n\
    \        }\n        for (int i = 0; i < q.Count / 2; i++) {\n            if (q[i]\
    \ != q[q.Count - 1 - i]) {\n                return false;\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       if (q.Count == 0) {\n            return false;\n        }\n        long\
    \ sum = 0;\n        for (int i = 0; i < q.Count; i++) {\n            sum += q[i];\n\
    \        }\n        if (sum > w) {\n            return false;\n        }\n   \
    \     for (int i = 0; i < q.Count / 2; i++) {\n            if (q[i] != q[q.Count\
    \ - 1 - i]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800511
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp353gl8jx.cs(25,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code here\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9119aebe982249388dbfb81b09d7c956>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9119aebe982249388dbfb81b09d7c956>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       long sum = 0;\n        for (int i = 0; i < q.Count; i++) {\n         \
    \   sum += q[i];\n        }\n        if (sum > w) {\n            return false;\n\
    \        }\n        for (int i = 0; i < q.Count / 2; i++) {\n            if (q[i]\
    \ != q[q.Count - 1 - i]) {\n                return false;\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       long sum = 0;\n        foreach (long i in q) {\n            sum += i;\n\
    \        }\n        if (sum > w) {\n            return false;\n        }\n   \
    \     if (q.Count == 1) {\n            return true;\n        }\n        for (int\
    \ i = 0; i < q.Count / 2; i++) {\n            if (q[i] != q[q.Count - 1 - i])\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800511
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code goes here.\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code here.\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a42bb78d1fe4b37a75b11f67b177bdf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a42bb78d1fe4b37a75b11f67b177bdf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       long sum = 0;\n        for (int i = 0; i < q.Count; i++) {\n         \
    \   sum += q[i];\n        }\n        if (sum > w) {\n            return false;\n\
    \        }\n        for (int i = 0; i < q.Count / 2; i++) {\n            if (q[i]\
    \ != q[q.Count - 1 - i]) {\n                return false;\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code goes here.\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2102cfcdd7af41bb8f6cb76592b696ed>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2102cfcdd7af41bb8f6cb76592b696ed>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800511
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       return false;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L,\
    \ (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})), (5L)) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <421bb94998ed48fea4d16099365a2202>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <421bb94998ed48fea4d16099365a2202>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800511
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code here.\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a42bb78d1fe4b37a75b11f67b177bdf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a42bb78d1fe4b37a75b11f67b177bdf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp353gl8jx.cs(25,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800510
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp353gl8jx.cs(25,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code goes here.\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp353gl8jx.cs(25,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       long sum = 0;\n        foreach (long i in q) {\n            sum += i;\n\
    \        }\n        if (sum > w) {\n            return false;\n        }\n   \
    \     int n = q.Count;\n        for (int i = 0; i < n / 2; i++) {\n          \
    \  if (q[i] != q[n - i - 1]) {\n                return false;\n            }\n\
    \        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code goes here.\n        // You can add additional classes and\
    \ methods.\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ae2707431074de0a15e1e7ff45f105f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ae2707431074de0a15e1e7ff45f105f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800511
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code goes here.\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code here!\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2f37b47b288b471c848fa3c54ba22a9b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2f37b47b288b471c848fa3c54ba22a9b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code goes here.\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       long sum = 0;\n        for (int i = 0; i < q.Count; i++) {\n         \
    \   sum += q[i];\n        }\n        if (sum > w) {\n            return false;\n\
    \        }\n        for (int i = 0; i < q.Count / 2; i++) {\n            if (q[i]\
    \ != q[q.Count - 1 - i]) {\n                return false;\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       long sum = 0;\n        for (int i = 0; i < q.Count; i++) {\n         \
    \   sum += q[i];\n        }\n        if (sum > w) {\n            return false;\n\
    \        }\n        for (int i = 0; i < q.Count / 2; i++) {\n            if (q[i]\
    \ != q[q.Count - 1 - i]) {\n                return false;\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code goes here.\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code goes here.\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       long sum = 0;\n        for (int i = 0; i < q.Count; i++) {\n         \
    \   sum += q[i];\n        }\n        if (sum > w) {\n            return false;\n\
    \        }\n        for (int i = 0; i < q.Count / 2; i++) {\n            if (q[i]\
    \ != q[q.Count - 1 - i]) {\n                return false;\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code goes here.\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       long sum = 0;\n        foreach (long i in q)\n            sum += i;\n\
    \        if (sum > w)\n            return false;\n        for (int i = 0; i <\
    \ q.Count / 2; i++)\n            if (q[i] != q[q.Count - i - 1])\n           \
    \     return false;\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800511
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code here\n        long sum = 0;\n        for (int i = 0; i <\
    \ q.Count; i++) {\n            sum += q[i];\n        }\n        if (sum > w) {\n\
    \            return false;\n        }\n        for (int i = 0; i < q.Count / 2;\
    \ i++) {\n            if (q[i] != q[q.Count - 1 - i]) {\n                return\
    \ false;\n            }\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       return false;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L,\
    \ (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})), (5L)) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <421bb94998ed48fea4d16099365a2202>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <421bb94998ed48fea4d16099365a2202>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800511
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       long sum = 0;\n        for (int i = 0; i < q.Count; i++) {\n         \
    \   sum += q[i];\n        }\n        if (sum > w) {\n            return false;\n\
    \        }\n        for (int i = 0; i < q.Count / 2; i++) {\n            if (q[i]\
    \ != q[q.Count - 1 - i]) {\n                return false;\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code goes here.\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code goes here.\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       long sum = 0;\n        for (int i = 0; i < q.Count; i++) {\n         \
    \   sum += q[i];\n        }\n        if (sum > w) {\n            return false;\n\
    \        }\n        for (int i = 0; i < q.Count / 2; i++) {\n            if (q[i]\
    \ != q[q.Count - 1 - i]) {\n                return false;\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       long sum = 0;\n        for (int i = 0; i < q.Count; i++) {\n         \
    \   sum += q[i];\n        }\n        if (sum > w) {\n            return false;\n\
    \        }\n        for (int i = 0; i < q.Count / 2; i++) {\n            if (q[i]\
    \ != q[q.Count - 1 - i]) {\n                return false;\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800510
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp353gl8jx.cs(25,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800510
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code goes here.\n        // You can add other functions if needed.\n\
    \        // You can add other classes if needed.\n        // You can use the .NET\
    \ Framework 4.5.\n        // You can use the .NET Framework 4.0.\n        // You\
    \ can use the .NET Framework 3.5.\n        // You can use the .NET Framework 3.0.\n\
    \        // You can use the .NET Framework 2.0.\n        // You can use the .NET\
    \ Framework 1.1.\n        // You can use the .NET Framework 1.0.\n        // You\
    \ can use the .NET Framework 1.0.\n        // You can use the .NET Framework 1.0.\n\
    \        // You can use the .NET Framework 1.0.\n        // You can use the .NET\
    \ Framework 1.0.\n        // You can use the .NET Framework 1.0.\n        // You\
    \ can use the .NET Framework 1.0.\n        // You can use the .NET Framework 1.0.\n\
    \        // You can use the .NET Framework 1.0.\n        // You can use the .NET\
    \ Framework 1.0.\n        // You can use the .NET Framework 1.0.\n        // You\
    \ can use the .NET Framework 1.0.\n        // You can use the .NET Framework 1.0.\n\
    \        // You can use the .NET Framework 1.0.\n        // You can use the .NET\
    \ Framework 1.0.\n        // You can use the .NET Framework 1.0.\n        // You\
    \ can use the .NET Framework 1.0.\n        // You can use the .NET Framework 1.0.\n\
    \        // You can use the .NET Framework 1.0.\n        // You can use the .NET\
    \ Framework 1.0.\n        // You can use the .NET Framework 1.0.\n        // You\
    \ can use the .NET Framework 1.0.\n        // You can use the .NET Framework 1.0.\n\
    \        // You can use the .NET Framework 1.0.\n        // You can use the .NET\
    \ Framework 1.0.\n        // You can use the .NET Framework 1.0.\n        // You\
    \ can use the .NET Framework 1.0.\n        // You can use the .NET Framework 1.0.\n\
    \        // You can use\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L,\
    \ (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})), (5L)) == (true));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_inihqam.cs(24,24): error CS0161: ''Problem.WillItFly(List<long>, long)'':
    not all code paths return a value

    '
  timestamp: 1659800511
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code here.\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a42bb78d1fe4b37a75b11f67b177bdf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a42bb78d1fe4b37a75b11f67b177bdf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp353gl8jx.cs(25,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800510
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp353gl8jx.cs(25,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code goes here\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <34267a5fa936435d95da33a469980e58>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <34267a5fa936435d95da33a469980e58>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800511
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code goes here.\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       return q.Sum() <= w && q.SequenceEqual(q.Reverse());\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp353gl8jx.cs(25,48): error CS1503: Argument 2: cannot convert from ''void''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659800510
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       if (q.Count == 0) {\n            return false;\n        }\n        if\
    \ (q.Count == 1) {\n            return true;\n        }\n        if (q.Count ==\
    \ 2) {\n            return false;\n        }\n        if (q.Count == 3) {\n  \
    \          return true;\n        }\n        if (q.Count == 4) {\n            return\
    \ false;\n        }\n        if (q.Count == 5) {\n            return true;\n \
    \       }\n        if (q.Count == 6) {\n            return false;\n        }\n\
    \        if (q.Count == 7) {\n            return true;\n        }\n        if\
    \ (q.Count == 8) {\n            return false;\n        }\n        if (q.Count\
    \ == 9) {\n            return true;\n        }\n        if (q.Count == 10) {\n\
    \            return false;\n        }\n        if (q.Count == 11) {\n        \
    \    return true;\n        }\n        if (q.Count == 12) {\n            return\
    \ false;\n        }\n        if (q.Count == 13) {\n            return true;\n\
    \        }\n        if (q.Count == 14) {\n            return false;\n        }\n\
    \        if (q.Count == 15) {\n            return true;\n        }\n        if\
    \ (q.Count == 16) {\n            return false;\n        }\n        if (q.Count\
    \ == 17) {\n            return true;\n        }\n        if (q.Count == 18) {\n\
    \            return false;\n        }\n        if (q.Count == 19) {\n        \
    \    return true;\n        }\n        if (q.Count == 20) {\n            return\
    \ false;\n        }\n        if (q.Count == 21) {\n            return true;\n\
    \        }\n        if (q.Count == 22) {\n            return false;\n        }\n\
    \        if (q.Count == 23) {\n            return true;\n        }\n        if\
    \ (q.Count == 24) {\n            return false;\n        }\n        if (q.Count\
    \ == 25) {\n            return true;\n        }\n        if (q.Count == 26) {\n\
    \            return false;\n       \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx836_rml.cs(107,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpx836_rml.cs(116,2): error CS1513: } expected

    '
  timestamp: 1659800511
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Write your code here\n        // To print results to the standard output\
    \ you can use Console.WriteLine()\n        // Example:\n        // Console.WriteLine(\"\
    Hello world!\");\n        long sum = 0;\n        foreach (long i in q) {\n   \
    \         sum += i;\n        }\n        if (sum > w) {\n            return false;\n\
    \        }\n        int n = q.Count;\n        for (int i = 0; i < n / 2; i++)\
    \ {\n            if (q[i] != q[n - i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800511
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       long sum = 0;\n        foreach (long i in q) {\n            sum += i;\n\
    \        }\n        if (sum > w) {\n            return false;\n        }\n   \
    \     for (int i = 0; i < q.Count / 2; i++) {\n            if (q[i] != q[q.Count\
    \ - 1 - i]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L)) == (true));\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\
    \ == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)5L})), (5L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code goes here.\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code here.\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a42bb78d1fe4b37a75b11f67b177bdf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a42bb78d1fe4b37a75b11f67b177bdf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       return false;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L,\
    \ (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (6L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})), (5L)) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <421bb94998ed48fea4d16099365a2202>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <421bb94998ed48fea4d16099365a2202>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800511
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that returns True if the object q will\
    \ fly, and False otherwise.\n    // The object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n\
    \    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    \    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})),\
    \ (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})),\
    \ (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and\
    \ it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n \
    \       // Your code goes here.\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)3L})), (9L)) == (true));\n    Debug.Assert(WillItFly((new List<long>(new\
    \ long[]{(long)1L, (long)2L})), (5L)) == (false));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L})), (5L)) == (true));\n    Debug.Assert(WillItFly((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L)) == (false));\n\
    \    Debug.Assert(WillItFly((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (6L)) == (false));\n    Debug.Assert(WillItFly((new List<long>(new long[]{(long)5L})),\
    \ (5L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e653c79a1b74ef0a6f8a9649778206e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800510
