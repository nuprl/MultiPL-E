name: HumanEval_151_double_the_difference
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
  \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
  \    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L, (long)3L,\
  \ (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new List<float>(new\
  \ long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n    // >>> DoubleTheDifference((new\
  \ List<float>(new long[]{(long)9L, (long)-2L})))\n    // (81L)\n    // >>> DoubleTheDifference((new\
  \ List<float>(new long[]{(long)0L})))\n    // (0L)\n    // If the input list is\
  \ empty, return 0.\n    public static long DoubleTheDifference(List<float> lst)\
  \ {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
  \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
  \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
  \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
  \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
  \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
  \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
  \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
  \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
  \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
  \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
  \ == (165L));\n    }\n\n}\n"
completions: ['        return 0;', "        long sum = 0;\n        foreach (float\
    \ f in lst) {\n            if (f > 0 && f % 1 == 0 && f % 2 == 1) {\n        \
    \        sum += (long)f * (long)f;\n            }\n        }\n        return sum\
    \ * 2;", "        long sum = 0;\n        foreach (float x in lst) {\n        \
    \    if (x > 0 && x % 1 == 0 && x % 2 == 1) {\n                sum += (long)x\
    \ * (long)x;\n            }\n        }\n        return sum;", "        long sum\
    \ = 0;\n        foreach (float x in lst) {\n            if (x > 0 && x % 1 ==\
    \ 0 && x % 2 == 1) {\n                sum += (long)x * (long)x;\n            }\n\
    \        }\n        return sum;", "        long sum = 0;\n        foreach (float\
    \ x in lst) {\n            if (x > 0 && x % 1 == 0 && x % 2 == 1) {\n        \
    \        sum += (long)x * (long)x;\n            }\n        }\n        return sum;",
  "        long sum = 0;\n        foreach (var item in lst) {\n            if (item\
    \ > 0 && (int)item == item) {\n                sum += (long)item * (long)item;\n\
    \            }\n        }\n        return sum * 2;", "        long sum = 0;\n\
    \        foreach (float x in lst) {\n            if (x > 0 && x % 1 == 0 && x\
    \ % 2 == 1) {\n                sum += (long)x * (long)x;\n            }\n    \
    \    }\n        return sum;", "        long sum = 0;\n        foreach (float num\
    \ in lst) {\n            if (num % 2 == 1 && num > 0) {\n                sum +=\
    \ (long)Math.Pow(num, 2);\n            }\n        }\n        return sum;", " \
    \       long sum = 0;\n        foreach (float x in lst) {\n            if (x %\
    \ 2 == 1) {\n                sum += (long)x * (long)x;\n            }\n      \
    \  }\n        return sum;", "        long sum = 0;\n        foreach (float x in\
    \ lst) {\n            if (x % 2 == 1) {\n                sum += (long)x * (long)x;\n\
    \            }\n        }\n        return sum;", "        long sum = 0;\n    \
    \    foreach (float x in lst) {\n            if (x % 2 == 1) {\n             \
    \   sum += (long)x * (long)x;\n            }\n        }\n        return sum;",
  "        long sum = 0;\n        foreach (float item in lst) {\n            if (item\
    \ > 0 && item % 1 == 0 && item % 2 == 1) {\n                sum += (long)item\
    \ * (long)item;\n            }\n        }\n        return 2 * sum;", "       \
    \ long sum = 0;\n        foreach (float num in lst) {\n            if (num % 2\
    \ == 1 && num > 0) {\n                sum += (long)num * (long)num;\n        \
    \    }\n        }\n        return sum;", "        long sum = 0;\n        foreach\
    \ (float num in lst) {\n            if (num % 2 == 1) {\n                sum +=\
    \ (long)num * (long)num;\n            }\n        }\n        return sum;", "  \
    \      long sum = 0;\n        foreach (float f in lst) {\n            if (f >\
    \ 0 && (long)f == f) {\n                long i = (long)f;\n                if\
    \ (i % 2 == 1) {\n                    sum += i * i;\n                }\n     \
    \       }\n        }\n        return sum * 2;", "        long sum = 0;\n     \
    \   foreach (float num in lst) {\n            if (num > 0 && num % 1 == 0 && num\
    \ % 2 == 1) {\n                sum += (long)Math.Pow(num, 2);\n            }\n\
    \        }\n        return sum;", "        long sum = 0;\n        for (int i =\
    \ 0; i < lst.Count; i++) {\n            if (lst[i] % 2 == 1) {\n             \
    \   sum += (long)lst[i] * (long)lst[i];\n            }\n        }\n        return\
    \ sum;", "        long sum = 0;\n        foreach (float num in lst) {\n      \
    \      if (num % 2 == 1) {\n                sum += (long)num * (long)num;\n  \
    \          }\n        }\n        return sum;", "        long sum = 0;\n      \
    \  foreach (float num in lst) {\n            if (num % 2 == 1 && num > 0) {\n\
    \                sum += (long)num * (long)num;\n            }\n        }\n   \
    \     return sum;", "        long sum = 0;\n        foreach (float x in lst) {\n\
    \            if (x % 2 == 1) {\n                sum += (long)Math.Pow(x, 2);\n\
    \            }\n        }\n        return sum;"]
stop_tokens:
- "\n    }\n"
