language: cs
name: HumanEval_120_maximum
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        return arr.OrderByDescending(x => x).Take((int)k).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dae6efeb0fd443ada2c29710e92e346e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dae6efeb0fd443ada2c29710e92e346e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k == 0) {\n            return new
    List<long>();\n        }\n        if (k == arr.Count) {\n            return arr;\n
    \       }\n        if (k == 1) {\n            return new List<long>(new long[]{arr.Max()});\n
    \       }\n        List<long> result = new List<long>();\n        long max = arr.Max();\n
    \       result.Add(max);\n        arr.Remove(max);\n        return result.Concat(Maximum(arr,
    k - 1)).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ca472d1fc32d42408b3823a6d40078f8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ca472d1fc32d42408b3823a6d40078f8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    new List<long>();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2db93d317e0f48b39cbf0c7be62f4201>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2db93d317e0f48b39cbf0c7be62f4201>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // TODO: Implement your solution here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <68d5c14a03864603a4b133b818698997>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <68d5c14a03864603a4b133b818698997>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49cbfdecd1714e468c25e7d62b2f16ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49cbfdecd1714e468c25e7d62b2f16ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49cbfdecd1714e468c25e7d62b2f16ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49cbfdecd1714e468c25e7d62b2f16ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49cbfdecd1714e468c25e7d62b2f16ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49cbfdecd1714e468c25e7d62b2f16ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49cbfdecd1714e468c25e7d62b2f16ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49cbfdecd1714e468c25e7d62b2f16ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49cbfdecd1714e468c25e7d62b2f16ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49cbfdecd1714e468c25e7d62b2f16ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        var maxHeap = new MaxHeap(arr);\n        var
    result = new List<long>();\n        for (int i = 0; i < k; i++) {\n            result.Add(maxHeap.Pop());\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpc5csw6lp.cs(25,27): error CS0246: The type or namespace name ''MaxHeap''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        return arr.OrderByDescending(x => x).Take((int)k).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dae6efeb0fd443ada2c29710e92e346e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dae6efeb0fd443ada2c29710e92e346e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    new List<long>();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2db93d317e0f48b39cbf0c7be62f4201>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2db93d317e0f48b39cbf0c7be62f4201>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       if (k == 0) {\n            return result;\n        }\n        if (k ==
    arr.Count) {\n            return arr;\n        }\n        List<long> sorted =
    arr.OrderByDescending(x => x).ToList();\n        for (int i = 0; i < k; i++) {\n
    \           result.Add(sorted[i]);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8308e93baa7a4bf79698a1ae4f29f935>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8308e93baa7a4bf79698a1ae4f29f935>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49cbfdecd1714e468c25e7d62b2f16ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49cbfdecd1714e468c25e7d62b2f16ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       for (int i = 0; i < k; i++) {\n            long max = arr[0];\n            int
    maxIndex = 0;\n            for (int j = 1; j < arr.Count; j++) {\n                if
    (arr[j] > max) {\n                    max = arr[j];\n                    maxIndex
    = j;\n                }\n            }\n            result.Add(max);\n            arr.RemoveAt(maxIndex);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <374d2bd73de04c75999bffd8fe0f4fd6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <374d2bd73de04c75999bffd8fe0f4fd6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    new List<long>();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2db93d317e0f48b39cbf0c7be62f4201>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2db93d317e0f48b39cbf0c7be62f4201>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    new List<long>();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2db93d317e0f48b39cbf0c7be62f4201>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2db93d317e0f48b39cbf0c7be62f4201>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49cbfdecd1714e468c25e7d62b2f16ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49cbfdecd1714e468c25e7d62b2f16ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49cbfdecd1714e468c25e7d62b2f16ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49cbfdecd1714e468c25e7d62b2f16ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code here\n        return new
    List<long>();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f25577ec7b234bf9897843addcac041f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f25577ec7b234bf9897843addcac041f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49cbfdecd1714e468c25e7d62b2f16ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49cbfdecd1714e468c25e7d62b2f16ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code here.\n        return
    new List<long>();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3a1dc8a4a3f47969bb80e9ffcced1e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3a1dc8a4a3f47969bb80e9ffcced1e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here\n        return
    new List<long>();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <095a0b86cab245249b554241cbcf8e4a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <095a0b86cab245249b554241cbcf8e4a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    new List<long>();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2db93d317e0f48b39cbf0c7be62f4201>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2db93d317e0f48b39cbf0c7be62f4201>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // >>> Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L))\n        // (new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))\n        // >>> Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L))\n        // (new List<long>(new
    long[]{(long)4L, (long)4L}))\n        // >>> Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n        //
    (new List<long>(new long[]{(long)2L}))\n        // >>> Maximum((new List<long>(new
    long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})),
    (2L))\n        // (new List<long>(new long[]{(long)2L, (long)2L}))\n        //
    >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L,
    (long)-1L, (long)-2L, (long)1L})), (3L))\n        // (new List<long>(new long[]{(long)2L,
    (long)2L, (long)1L}))\n        // >>> Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (4L))\n        //
    (new List<long>(new long[]{(long)2L, (long)2L, (long)1L, (long)1L}))\n        //
    >>> Maximum((new List<long>(new long[]\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbz1plho4.cs(24,30): error CS0161: ''Problem.Maximum(List<long>, long)'':
    not all code paths return a value

    '
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        var max = new List<long>();\n        for
    (var i = 0; i < k; i++) {\n            max.Add(arr[i]);\n        }\n        max.Sort();\n
    \       for (var i = k; i < arr.Count; i++) {\n            if (arr[i] > max[0])
    {\n                max[0] = arr[i];\n                max.Sort();\n            }\n
    \       }\n        return max;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprsg9zxn8.cs(31,21): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmprsg9zxn8.cs(32,30): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    new List<long>();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2db93d317e0f48b39cbf0c7be62f4201>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2db93d317e0f48b39cbf0c7be62f4201>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        return arr.OrderByDescending(x => x).Take((int)k).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dae6efeb0fd443ada2c29710e92e346e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dae6efeb0fd443ada2c29710e92e346e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49cbfdecd1714e468c25e7d62b2f16ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49cbfdecd1714e468c25e7d62b2f16ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        var result = new List<long>();\n        var
    maxHeap = new MaxHeap(arr);\n        for (int i = 0; i < k; i++) {\n            result.Add(maxHeap.Pop());\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdyipw5_s.cs(26,27): error CS0246: The type or namespace name ''MaxHeap''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    new List<long>();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2db93d317e0f48b39cbf0c7be62f4201>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2db93d317e0f48b39cbf0c7be62f4201>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code here\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <fc4ae9a0e1814c8f954bcc0bf0b0742f>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <fc4ae9a0e1814c8f954bcc0bf0b0742f>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // TODO: Implement your solution here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <68d5c14a03864603a4b133b818698997>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <68d5c14a03864603a4b133b818698997>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        var result = new List<long>();\n        var
    heap = new Heap<long>();\n        foreach (var item in arr) {\n            heap.Insert(item);\n
    \       }\n        for (var i = 0; i < k; i++) {\n            result.Add(heap.ExtractMax());\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl20y3h06.cs(26,24): error CS0246: The type or namespace name ''Heap<>''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    new List<long>();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2db93d317e0f48b39cbf0c7be62f4201>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2db93d317e0f48b39cbf0c7be62f4201>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    new List<long>();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2db93d317e0f48b39cbf0c7be62f4201>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2db93d317e0f48b39cbf0c7be62f4201>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49cbfdecd1714e468c25e7d62b2f16ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49cbfdecd1714e468c25e7d62b2f16ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code here\n        return new
    List<long>();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f25577ec7b234bf9897843addcac041f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f25577ec7b234bf9897843addcac041f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       if (k == 0) {\n            return result;\n        }\n        if (k ==
    arr.Count) {\n            return arr;\n        }\n        List<long> temp = new
    List<long>();\n        for (int i = 0; i < arr.Count; i++) {\n            temp.Add(arr[i]);\n
    \       }\n        for (int i = 0; i < k; i++) {\n            int maxIndex = 0;\n
    \           for (int j = 0; j < temp.Count; j++) {\n                if (temp[j]
    > temp[maxIndex]) {\n                    maxIndex = j;\n                }\n            }\n
    \           result.Add(temp[maxIndex]);\n            temp.RemoveAt(maxIndex);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b74abfa9a5db4943ad7ecc66008e11a3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b74abfa9a5db4943ad7ecc66008e11a3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <9d640feb62014c31af41a26a7b8b48f5>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <9d640feb62014c31af41a26a7b8b48f5>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49cbfdecd1714e468c25e7d62b2f16ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49cbfdecd1714e468c25e7d62b2f16ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    new List<long>();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2db93d317e0f48b39cbf0c7be62f4201>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2db93d317e0f48b39cbf0c7be62f4201>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    new List<long>();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2db93d317e0f48b39cbf0c7be62f4201>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2db93d317e0f48b39cbf0c7be62f4201>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    new List<long>();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2db93d317e0f48b39cbf0c7be62f4201>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2db93d317e0f48b39cbf0c7be62f4201>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Write your code here\n        return
    arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2c6247d1445e4ded91d6d78224882244>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2c6247d1445e4ded91d6d78224882244>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    new List<long>();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2db93d317e0f48b39cbf0c7be62f4201>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2db93d317e0f48b39cbf0c7be62f4201>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        return arr.OrderByDescending(x => x).Take((int)k).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dae6efeb0fd443ada2c29710e92e346e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dae6efeb0fd443ada2c29710e92e346e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    new List<long>();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2db93d317e0f48b39cbf0c7be62f4201>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2db93d317e0f48b39cbf0c7be62f4201>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49cbfdecd1714e468c25e7d62b2f16ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49cbfdecd1714e468c25e7d62b2f16ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        return arr.OrderByDescending(x => x).Take((int)k).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dae6efeb0fd443ada2c29710e92e346e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dae6efeb0fd443ada2c29710e92e346e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        var heap = new Heap<long>();\n        foreach
    (var item in arr) {\n            heap.Insert(item);\n        }\n        var result
    = new List<long>();\n        while (k > 0) {\n            result.Add(heap.Pop());\n
    \           k--;\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe9t50qqf.cs(25,24): error CS0246: The type or namespace name ''Heap<>''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    new List<long>();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2db93d317e0f48b39cbf0c7be62f4201>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2db93d317e0f48b39cbf0c7be62f4201>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49cbfdecd1714e468c25e7d62b2f16ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49cbfdecd1714e468c25e7d62b2f16ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k == 0) {\n            return new
    List<long>();\n        }\n        if (k == arr.Count) {\n            return arr;\n
    \       }\n        List<long> result = new List<long>();\n        for (int i =
    0; i < k; i++) {\n            result.Add(arr[i]);\n        }\n        result.Sort();\n
    \       for (int i = k; i < arr.Count; i++) {\n            if (arr[i] > result[0])
    {\n                result[0] = arr[i];\n                result.Sort();\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzzsjhgod.cs(36,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       if (k == 0) {\n            return result;\n        }\n        if (k ==
    arr.Count) {\n            return arr;\n        }\n        for (int i = 0; i <
    k; i++) {\n            result.Add(arr[i]);\n        }\n        result.Sort();\n
    \       for (int i = k; i < arr.Count; i++) {\n            if (arr[i] > result[0])
    {\n                result.RemoveAt(0);\n                result.Add(arr[i]);\n
    \               result.Sort();\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5l6tqvfe.cs(36,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // >>> Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L))\n        // (new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))\n        // >>> Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L))\n        // (new List<long>(new
    long[]{(long)4L, (long)4L}))\n        // >>> Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n        //
    (new List<long>(new long[]{(long)2L}))\n        // >>> Maximum((new List<long>(new
    long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})),
    (2L))\n        // (new List<long>(new long[]{(long)2L, (long)2L}))\n        //
    >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L,
    (long)-1L, (long)-2L, (long)1L})), (3L))\n        // (new List<long>(new long[]{(long)2L,
    (long)2L, (long)1L}))\n        // >>> Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (4L))\n        //
    (new List<long>(new long[]{(long)2L, (long)2L, (long)1L, (long)1L}))\n        //
    >>> Maximum((new List<long>(new long[]\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbz1plho4.cs(24,30): error CS0161: ''Problem.Maximum(List<long>, long)'':
    not all code paths return a value

    '
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    new List<long>();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2db93d317e0f48b39cbf0c7be62f4201>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2db93d317e0f48b39cbf0c7be62f4201>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    new List<long>();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2db93d317e0f48b39cbf0c7be62f4201>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2db93d317e0f48b39cbf0c7be62f4201>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49cbfdecd1714e468c25e7d62b2f16ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49cbfdecd1714e468c25e7d62b2f16ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49cbfdecd1714e468c25e7d62b2f16ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49cbfdecd1714e468c25e7d62b2f16ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    new List<long>();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2db93d317e0f48b39cbf0c7be62f4201>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2db93d317e0f48b39cbf0c7be62f4201>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // TODO: implement this function\n
    \       return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <39b6192e3c7e4f64acf1c653f64e57eb>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <39b6192e3c7e4f64acf1c653f64e57eb>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code here\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <fc4ae9a0e1814c8f954bcc0bf0b0742f>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <fc4ae9a0e1814c8f954bcc0bf0b0742f>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49cbfdecd1714e468c25e7d62b2f16ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49cbfdecd1714e468c25e7d62b2f16ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    new List<long>();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2db93d317e0f48b39cbf0c7be62f4201>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2db93d317e0f48b39cbf0c7be62f4201>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        var result = new List<long>();\n        var
    heap = new Heap<long>();\n        foreach (var i in arr) {\n            heap.Insert(i);\n
    \       }\n        for (var i = 0; i < k; i++) {\n            result.Add(heap.Remove());\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpm5ej1osu.cs(26,24): error CS0246: The type or namespace name ''Heap<>''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49cbfdecd1714e468c25e7d62b2f16ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49cbfdecd1714e468c25e7d62b2f16ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        return arr.OrderByDescending(x => x).Take((int)k).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dae6efeb0fd443ada2c29710e92e346e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dae6efeb0fd443ada2c29710e92e346e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49cbfdecd1714e468c25e7d62b2f16ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49cbfdecd1714e468c25e7d62b2f16ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49cbfdecd1714e468c25e7d62b2f16ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49cbfdecd1714e468c25e7d62b2f16ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       if (k == 0) {\n            return result;\n        }\n        if (k ==
    arr.Count) {\n            return arr;\n        }\n        long max = arr[0];\n
    \       for (long i = 0; i < k; i++) {\n            max = arr[i];\n            for
    (long j = i; j < arr.Count; j++) {\n                if (arr[j] > max) {\n                    max
    = arr[j];\n                    arr[j] = arr[i];\n                    arr[i] =
    max;\n                }\n            }\n            result.Add(max);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),
    (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzp4sg5ub.cs(34,23): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpzp4sg5ub.cs(36,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpzp4sg5ub.cs(37,31): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpzp4sg5ub.cs(38,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpzp4sg5ub.cs(38,34): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpzp4sg5ub.cs(39,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // TODO: Implement this function\n
    \       return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <965cade16a0b45ba844a3c29a56ad95b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <965cade16a0b45ba844a3c29a56ad95b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793502
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        var result = new List<long>();\n        var
    heap = new Heap<long>();\n        foreach (var item in arr) {\n            heap.Push(item);\n
    \       }\n        for (var i = 0; i < k; i++) {\n            result.Add(heap.Pop());\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpq03rui7e.cs(26,24): error CS0246: The type or namespace name ''Heap<>''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       if (arr.Count == 0) {\n            return result;\n        }\n        if
    (arr.Count == 1) {\n            result.Add(arr[0]);\n            return result;\n
    \       }\n        if (arr.Count == 2) {\n            if (arr[0] > arr[1]) {\n
    \               result.Add(arr[0]);\n                result.Add(arr[1]);\n            }
    else {\n                result.Add(arr[1]);\n                result.Add(arr[0]);\n
    \           }\n            return result;\n        }\n        if (arr.Count ==
    3) {\n            if (arr[0] > arr[1]) {\n                if (arr[1] > arr[2])
    {\n                    result.Add(arr[0]);\n                    result.Add(arr[1]);\n
    \                   result.Add(arr[2]);\n                } else {\n                    if
    (arr[0] > arr[2]) {\n                        result.Add(arr[0]);\n                        result.Add(arr[2]);\n
    \                       result.Add(arr[1]);\n                    } else {\n                        result.Add(arr[2]);\n
    \                       result.Add(arr[0]);\n                        result.Add(arr[1]);\n
    \                   }\n                }\n            } else {\n                if
    (arr[0] > arr[2]) {\n                    result.Add(arr[1]);\n                    result.Add(arr[0]);\n
    \                   result.Add(arr[2]);\n                } else {\n                    if
    (arr[1] > arr[2]) {\n                        result.Add(arr[1]);\n                        result.Add(arr[2]);\n
    \                       result.Add(arr[0]);\n                    } else {\n                        result.Add(arr[2]);\n
    \                       result.Add(arr[1]);\n                        result.Add(arr[0]);\n
    \                   }\n                }\n            }\n            return result;\n
    \       }\n        if (arr.Count == 4) {\n            if (arr[0] > arr[1]) {\n
    \               if (arr[1] > arr[2]) {\n                    if (arr[2] > arr[3])
    {\n                        result.Add(arr\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp92xwwdmk.cs(83,39): error CS1026: ) expected

    /tmp/tmp92xwwdmk.cs(83,39): error CS1002: ; expected

    /tmp/tmp92xwwdmk.cs(85,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp92xwwdmk.cs(99,2): error CS1513: } expected

    '
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       if (k == 0) {\n            return result;\n        }\n        if (k ==
    arr.Count) {\n            return arr;\n        }\n        List<long> sorted =
    arr.OrderByDescending(x => x).ToList();\n        for (int i = 0; i < k; i++) {\n
    \           result.Add(sorted[i]);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8308e93baa7a4bf79698a1ae4f29f935>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8308e93baa7a4bf79698a1ae4f29f935>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here\n        return
    arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f1ac9c74956547029c666bba7b5dd8c5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f1ac9c74956547029c666bba7b5dd8c5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793502
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code here\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <fc4ae9a0e1814c8f954bcc0bf0b0742f>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <fc4ae9a0e1814c8f954bcc0bf0b0742f>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code here\n        return new
    List<long>();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f25577ec7b234bf9897843addcac041f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f25577ec7b234bf9897843addcac041f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       for (long i = 0; i < k; i++) {\n            result.Add(arr[(int)i]);\n
    \       }\n        result.Sort();\n        for (long i = k; i < arr.Count; i++)
    {\n            if (arr[(int)i] > result[0]) {\n                result[0] = arr[(int)i];\n
    \               result.Sort();\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f6df704210fb4c9fae0c5ff4f604e917>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f6df704210fb4c9fae0c5ff4f604e917>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793502
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code here\n        return new
    List<long>();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f25577ec7b234bf9897843addcac041f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f25577ec7b234bf9897843addcac041f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49cbfdecd1714e468c25e7d62b2f16ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49cbfdecd1714e468c25e7d62b2f16ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49cbfdecd1714e468c25e7d62b2f16ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49cbfdecd1714e468c25e7d62b2f16ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        return arr.OrderByDescending(x => x).Take((int)k).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dae6efeb0fd443ada2c29710e92e346e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dae6efeb0fd443ada2c29710e92e346e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code here\n        return arr;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <24e0d209d8734a1a82db28c93485003a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <24e0d209d8734a1a82db28c93485003a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793502
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49cbfdecd1714e468c25e7d62b2f16ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49cbfdecd1714e468c25e7d62b2f16ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       for (long i = 0; i < k; i++) {\n            long max = arr[0];\n            long
    maxIndex = 0;\n            for (long j = 0; j < arr.Count; j++) {\n                if
    (arr[(int)j] > max) {\n                    max = arr[(int)j];\n                    maxIndex
    = j;\n                }\n            }\n            result.Add(max);\n            arr.RemoveAt((int)maxIndex);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ba531655304e4ce79a784bde16d97617>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ba531655304e4ce79a784bde16d97617>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793502
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49cbfdecd1714e468c25e7d62b2f16ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49cbfdecd1714e468c25e7d62b2f16ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49cbfdecd1714e468c25e7d62b2f16ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49cbfdecd1714e468c25e7d62b2f16ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       if (k == 0L) {\n            return result;\n        }\n        if (k ==
    1L) {\n            result.Add(arr.Max());\n            return result;\n        }\n
    \       if (k == arr.Count) {\n            result = arr;\n            result.Sort();\n
    \           return result;\n        }\n        List<long> sorted = arr;\n        sorted.Sort();\n
    \       for (long i = (long)(sorted.Count - k); i < sorted.Count; i++) {\n            result.Add(sorted[(int)i]);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <87f90edb073649979d2d594413a8c276>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <87f90edb073649979d2d594413a8c276>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793502
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    new List<long>();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2db93d317e0f48b39cbf0c7be62f4201>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2db93d317e0f48b39cbf0c7be62f4201>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        var result = new List<long>();\n        var
    pq = new PriorityQueue<long>();\n        foreach (var item in arr) {\n            pq.Enqueue(item);\n
    \       }\n        for (var i = 0; i < k; i++) {\n            result.Add(pq.Dequeue());\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpaco2zpyv.cs(26,22): error CS0246: The type or namespace name ''PriorityQueue<>''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1659793502
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        return arr.OrderByDescending(x => x).Take((int)k).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dae6efeb0fd443ada2c29710e92e346e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dae6efeb0fd443ada2c29710e92e346e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // your code here\n        return arr;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <06ef929cebfd4f4fa28a4a5177c9d9a4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <06ef929cebfd4f4fa28a4a5177c9d9a4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793502
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    new List<long>();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2db93d317e0f48b39cbf0c7be62f4201>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2db93d317e0f48b39cbf0c7be62f4201>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    new List<long>();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2db93d317e0f48b39cbf0c7be62f4201>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2db93d317e0f48b39cbf0c7be62f4201>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // >>> Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L))\n        // (new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))\n        // >>> Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L))\n        // (new List<long>(new
    long[]{(long)4L, (long)4L}))\n        // >>> Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n        //
    (new List<long>(new long[]{(long)2L}))\n        // >>> Maximum((new List<long>(new
    long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})),
    (2L))\n        // (new List<long>(new long[]{(long)2L, (long)2L}))\n        //
    >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L,
    (long)-1L, (long)-2L, (long)1L})), (3L))\n        // (new List<long>(new long[]{(long)2L,
    (long)2L, (long)1L}))\n        // >>> Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (4L))\n        //
    (new List<long>(new long[]{(long)2L, (long)2L, (long)1L, (long)1L}))\n        //
    >>> Maximum((new List<long>(new long[]\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbz1plho4.cs(24,30): error CS0161: ''Problem.Maximum(List<long>, long)'':
    not all code paths return a value

    '
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code here\n        return arr;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <24e0d209d8734a1a82db28c93485003a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <24e0d209d8734a1a82db28c93485003a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793502
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        var res = new List<long>();\n        for
    (int i = 0; i < k; i++) {\n            var max = arr.Max();\n            res.Add(max);\n
    \           arr.Remove(max);\n        }\n        return res;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <80eb30dfe5f4442baa7d96a029252653>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <80eb30dfe5f4442baa7d96a029252653>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793502
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        return arr.OrderByDescending(x => x).Take((int)k).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dae6efeb0fd443ada2c29710e92e346e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dae6efeb0fd443ada2c29710e92e346e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49cbfdecd1714e468c25e7d62b2f16ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49cbfdecd1714e468c25e7d62b2f16ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        return arr.OrderByDescending(x => x).Take((int)k).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dae6efeb0fd443ada2c29710e92e346e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dae6efeb0fd443ada2c29710e92e346e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // The maximum k numbers in arr\n        var
    result = new List<long>();\n        // Write your code here\n        // To debug:
    Console.Error.WriteLine(\"Debug messages...\");\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f39bc2454cfb4a4ca8fa571820825491>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f39bc2454cfb4a4ca8fa571820825491>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793502
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49cbfdecd1714e468c25e7d62b2f16ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49cbfdecd1714e468c25e7d62b2f16ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code here\n        return new
    List<long>();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f25577ec7b234bf9897843addcac041f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f25577ec7b234bf9897843addcac041f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    new List<long>();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2db93d317e0f48b39cbf0c7be62f4201>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2db93d317e0f48b39cbf0c7be62f4201>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        return arr.OrderByDescending(x => x).Take((int)k).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dae6efeb0fd443ada2c29710e92e346e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dae6efeb0fd443ada2c29710e92e346e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49cbfdecd1714e468c25e7d62b2f16ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49cbfdecd1714e468c25e7d62b2f16ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // TODO: Implement this function\n
    \       return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <965cade16a0b45ba844a3c29a56ad95b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <965cade16a0b45ba844a3c29a56ad95b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793502
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    new List<long>();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2db93d317e0f48b39cbf0c7be62f4201>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2db93d317e0f48b39cbf0c7be62f4201>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49cbfdecd1714e468c25e7d62b2f16ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49cbfdecd1714e468c25e7d62b2f16ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // TODO: Implement this function\n
    \       return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <1c39ed083cbe45a6a49c5c0844aebb55>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <1c39ed083cbe45a6a49c5c0844aebb55>:0
    \n"
  stdout: ''
  timestamp: 1659793502
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        if (k == 0) {\n            return new
    List<long>();\n        }\n        if (k == arr.Count) {\n            return arr;\n
    \       }\n        List<long> result = new List<long>();\n        for (int i =
    0; i < k; i++) {\n            result.Add(arr[i]);\n        }\n        result.Sort();\n
    \       for (int i = k; i < arr.Count; i++) {\n            if (arr[i] > result[0])
    {\n                result[0] = arr[i];\n                result.Sort();\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzzsjhgod.cs(36,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       for (int i = 0; i < k; i++) {\n            result.Add(arr[i]);\n        }\n
    \       result.Sort();\n        for (int i = k; i < arr.Count; i++) {\n            if
    (arr[i] > result[0]) {\n                result[0] = arr[i];\n                result.Sort();\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,
    (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,
    (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new
    long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,
    (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new
    List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)5L, (long)15L, (long)0L,
    (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new List<long>(new
    long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L, (long)0L, (long)2L,
    (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new long[]{(long)3L,
    (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L,
    (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new long[]{(long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L})), (2L)).Equals((new
    List<long>(new long[]{(long)-4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-10L, (long)10L})), (2L)).Equals((new List<long>(new
    long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L, (long)-400L, (long)0L})),
    (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkopvntyg.cs(30,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793502
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        return arr.OrderByDescending(x => x).Take((int)k).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dae6efeb0fd443ada2c29710e92e346e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dae6efeb0fd443ada2c29710e92e346e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        return arr.OrderByDescending(x => x).Take((int)k).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dae6efeb0fd443ada2c29710e92e346e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dae6efeb0fd443ada2c29710e92e346e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code here\n        return arr;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <24e0d209d8734a1a82db28c93485003a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <24e0d209d8734a1a82db28c93485003a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793502
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n
    \       for (long i = 0; i < k; i++) {\n            long max = arr[0];\n            long
    maxIndex = 0;\n            for (long j = 0; j < arr.Count; j++) {\n                if
    (arr[(int)j] > max) {\n                    max = arr[(int)j];\n                    maxIndex
    = j;\n                }\n            }\n            result.Add(max);\n            arr.RemoveAt((int)maxIndex);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ba531655304e4ce79a784bde16d97617>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ba531655304e4ce79a784bde16d97617>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793502
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49cbfdecd1714e468c25e7d62b2f16ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49cbfdecd1714e468c25e7d62b2f16ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49cbfdecd1714e468c25e7d62b2f16ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49cbfdecd1714e468c25e7d62b2f16ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // your code here\n        return arr;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <06ef929cebfd4f4fa28a4a5177c9d9a4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <06ef929cebfd4f4fa28a4a5177c9d9a4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793502
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here\n        return
    new List<long>();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <095a0b86cab245249b554241cbcf8e4a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <095a0b86cab245249b554241cbcf8e4a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00034] in <8584a64b08f140cd8b1e31c85f4f0366>:0
    \n"
  stdout: ''
  timestamp: 1659793501
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // >>> Maximum((new List<long>(new
    long[]{(long)-3L, (long)-4L, (long)5L})), (3L))\n        // (new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))\n        // >>> Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L))\n        // (new List<long>(new
    long[]{(long)4L, (long)4L}))\n        // >>> Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n        //
    (new List<long>(new long[]{(long)2L}))\n        // >>> Maximum((new List<long>(new
    long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})),
    (2L))\n        // (new List<long>(new long[]{(long)2L, (long)2L}))\n        //
    >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L,
    (long)-1L, (long)-2L, (long)1L})), (3L))\n        // (new List<long>(new long[]{(long)2L,
    (long)2L, (long)1L}))\n        // >>> Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (4L))\n        //
    (new List<long>(new long[]{(long)2L, (long)2L, (long)1L, (long)1L}))\n        //
    >>> Maximum((new List<long>(new long[]\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),
    (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,
    (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,
    (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,
    (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,
    (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,
    (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L,
    (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbz1plho4.cs(24,30): error CS0161: ''Problem.Maximum(List<long>, long)'':
    not all code paths return a value

    '
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        return arr.OrderByDescending(x => x).Take((int)k).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dae6efeb0fd443ada2c29710e92e346e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dae6efeb0fd443ada2c29710e92e346e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        return arr.OrderByDescending(x => x).Take((int)k).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dae6efeb0fd443ada2c29710e92e346e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dae6efeb0fd443ada2c29710e92e346e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array arr of integers and a positive integer k, return
    a sorted list \n    // of length k with the maximum k numbers in arr.\n    //
    Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,
    (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n
    \   // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,
    (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n
    \   // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,
    (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new
    long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in
    the range of [1, 1000].\n    // 2. The elements in the array will be in the range
    of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>
    Maximum(List<long> arr, long k) {\n        // Your code goes here.\n        return
    arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new
    long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,
    (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new
    List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),
    (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,
    (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),
    (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,
    (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new
    List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new
    List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new
    long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,
    (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,
    (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49cbfdecd1714e468c25e7d62b2f16ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49cbfdecd1714e468c25e7d62b2f16ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659793501
