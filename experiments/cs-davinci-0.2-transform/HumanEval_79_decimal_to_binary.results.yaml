language: cs
name: HumanEval_79_decimal_to_binary
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        var sb\
    \ = new StringBuilder();\n        sb.Append(\"db\");\n        while (decimalNum\
    \ > 0) {\n            sb.Append(decimalNum % 2);\n            decimalNum /= 2;\n\
    \        }\n        sb.Append(\"db\");\n        return new string(sb.ToString().Reverse().ToArray());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <865845a0499e4b2786e596e73b7eadbe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <865845a0499e4b2786e596e73b7eadbe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798230
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2) + binary;\n            decimalNum /= 2;\n        }\n        return \"db\"\
    \ + binary + \"db\";\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d409615197c34fd592bc62dd1fe25cf7>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2).ToString() + binary;\n            decimalNum /= 2;\n        }\n       \
    \ return \"db\" + binary + \"db\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11bfb5b5818249f38ee9c88d1f15f390>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2).ToString() + binary;\n            decimalNum /= 2;\n        }\n       \
    \ return \"db\" + binary + \"db\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11bfb5b5818249f38ee9c88d1f15f390>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2).ToString() + binary;\n            decimalNum /= 2;\n        }\n       \
    \ return \"db\" + binary + \"db\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11bfb5b5818249f38ee9c88d1f15f390>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2).ToString() + binary;\n            decimalNum /= 2;\n        }\n       \
    \ return \"db\" + binary + \"db\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11bfb5b5818249f38ee9c88d1f15f390>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2).ToString() + binary;\n            decimalNum /= 2;\n        }\n       \
    \ return \"db\" + binary + \"db\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11bfb5b5818249f38ee9c88d1f15f390>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2).ToString() + binary;\n            decimalNum /= 2;\n        }\n       \
    \ return \"db\" + binary + \"db\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11bfb5b5818249f38ee9c88d1f15f390>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2).ToString() + binary;\n            decimalNum /= 2;\n        }\n       \
    \ return \"db\" + binary + \"db\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11bfb5b5818249f38ee9c88d1f15f390>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2).ToString() + binary;\n            decimalNum /= 2;\n        }\n       \
    \ return \"db\" + binary + \"db\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11bfb5b5818249f38ee9c88d1f15f390>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2) + binary;\n            decimalNum /= 2;\n        }\n        return \"db\"\
    \ + binary + \"db\";\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d409615197c34fd592bc62dd1fe25cf7>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2) + binary;\n            decimalNum /= 2;\n        }\n        return \"db\"\
    \ + binary + \"db\";\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d409615197c34fd592bc62dd1fe25cf7>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        var binary\
    \ = new StringBuilder();\n        binary.Append(\"db\");\n        while (decimalNum\
    \ > 0) {\n            binary.Append(decimalNum % 2);\n            decimalNum /=\
    \ 2;\n        }\n        binary.Append(\"db\");\n        return binary.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <71499eddc1d34df3872b3aaf62e2025d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <71499eddc1d34df3872b3aaf62e2025d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798230
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2).ToString() + binary;\n            decimalNum /= 2;\n        }\n       \
    \ return \"db\" + binary + \"db\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11bfb5b5818249f38ee9c88d1f15f390>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2).ToString() + binary;\n            decimalNum /= 2;\n        }\n       \
    \ return \"db\" + binary + \"db\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11bfb5b5818249f38ee9c88d1f15f390>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2).ToString() + binary;\n            decimalNum /= 2;\n        }\n       \
    \ return \"db\" + binary + \"db\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11bfb5b5818249f38ee9c88d1f15f390>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2).ToString() + binary;\n            decimalNum /= 2;\n        }\n       \
    \ return \"db\" + binary + \"db\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11bfb5b5818249f38ee9c88d1f15f390>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2).ToString() + binary;\n            decimalNum /= 2;\n        }\n       \
    \ return \"db\" + binary + \"db\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11bfb5b5818249f38ee9c88d1f15f390>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        // Convert\
    \ the decimal number to binary\n        string binary = Convert.ToString(decimalNum,\
    \ 2);\n        // Add the extra characters\n        binary = \"db\" + binary +\
    \ \"db\";\n        return binary;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798230
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = Convert.ToString(decimalNum, 2);\n        return \"db\" + binary +\
    \ \"db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2).ToString() + binary;\n            decimalNum /= 2;\n        }\n       \
    \ return \"db\" + binary + \"db\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11bfb5b5818249f38ee9c88d1f15f390>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2).ToString() + binary;\n            decimalNum /= 2;\n        }\n       \
    \ return \"db\" + binary + \"db\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11bfb5b5818249f38ee9c88d1f15f390>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2) + binary;\n            decimalNum /= 2;\n        }\n        return \"db\"\
    \ + binary + \"db\";\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d409615197c34fd592bc62dd1fe25cf7>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2) + binary;\n            decimalNum /= 2;\n        }\n        return \"db\"\
    \ + binary + \"db\";\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d409615197c34fd592bc62dd1fe25cf7>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        var sb\
    \ = new StringBuilder();\n        sb.Append(\"db\");\n        while (decimalNum\
    \ > 0) {\n            sb.Append(decimalNum % 2);\n            decimalNum /= 2;\n\
    \        }\n        sb.Append(\"db\");\n        return sb.ToString();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2753bcbf2d1441b4a7d4fcabf83ee353>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2753bcbf2d1441b4a7d4fcabf83ee353>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798230
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2) + binary;\n            decimalNum /= 2;\n        }\n        return \"db\"\
    \ + binary + \"db\";\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d409615197c34fd592bc62dd1fe25cf7>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2).ToString() + binary;\n            decimalNum /= 2;\n        }\n       \
    \ return \"db\" + binary + \"db\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11bfb5b5818249f38ee9c88d1f15f390>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2).ToString() + binary;\n            decimalNum /= 2;\n        }\n       \
    \ return \"db\" + binary + \"db\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11bfb5b5818249f38ee9c88d1f15f390>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2) + binary;\n            decimalNum /= 2;\n        }\n        return \"db\"\
    \ + binary + \"db\";\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d409615197c34fd592bc62dd1fe25cf7>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2).ToString() + binary;\n            decimalNum /= 2;\n        }\n       \
    \ return \"db\" + binary + \"db\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11bfb5b5818249f38ee9c88d1f15f390>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2).ToString() + binary;\n            decimalNum /= 2;\n        }\n       \
    \ return \"db\" + binary + \"db\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11bfb5b5818249f38ee9c88d1f15f390>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2).ToString() + binary;\n            decimalNum /= 2;\n        }\n       \
    \ return \"db\" + binary + \"db\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11bfb5b5818249f38ee9c88d1f15f390>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2) + binary;\n            decimalNum /= 2;\n        }\n        return \"db\"\
    \ + binary + \"db\";\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d409615197c34fd592bc62dd1fe25cf7>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2).ToString() + binary;\n            decimalNum /= 2;\n        }\n       \
    \ return \"db\" + binary + \"db\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11bfb5b5818249f38ee9c88d1f15f390>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2) + binary;\n            decimalNum /= 2;\n        }\n        binary = \"\
    db\" + binary + \"db\";\n        return binary;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\"\
    )));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n   \
    \ Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0ddba8777d6e4bb987cbe307856c4c85>:0 \n"
  stdout: ''
  timestamp: 1659798230
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        // Your\
    \ code here\n        return \"\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a8dd449425e14770adaf5cc4c0bd7655>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a8dd449425e14770adaf5cc4c0bd7655>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2).ToString() + binary;\n            decimalNum /= 2;\n        }\n       \
    \ return \"db\" + binary + \"db\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11bfb5b5818249f38ee9c88d1f15f390>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2).ToString() + binary;\n            decimalNum /= 2;\n        }\n       \
    \ return \"db\" + binary + \"db\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11bfb5b5818249f38ee9c88d1f15f390>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2).ToString() + binary;\n            decimalNum /= 2;\n        }\n       \
    \ return \"db\" + binary + \"db\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11bfb5b5818249f38ee9c88d1f15f390>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2) + binary;\n            decimalNum /= 2;\n        }\n        return \"db\"\
    \ + binary + \"db\";\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d409615197c34fd592bc62dd1fe25cf7>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2) + binary;\n            decimalNum /= 2;\n        }\n        return \"db\"\
    \ + binary + \"db\";\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d409615197c34fd592bc62dd1fe25cf7>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2).ToString() + binary;\n            decimalNum /= 2;\n        }\n       \
    \ return \"db\" + binary + \"db\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11bfb5b5818249f38ee9c88d1f15f390>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2).ToString() + binary;\n            decimalNum /= 2;\n        }\n       \
    \ return \"db\" + binary + \"db\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11bfb5b5818249f38ee9c88d1f15f390>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2).ToString() + binary;\n            decimalNum /= 2;\n        }\n       \
    \ return \"db\" + binary + \"db\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11bfb5b5818249f38ee9c88d1f15f390>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2).ToString() + binary;\n            decimalNum /= 2;\n        }\n       \
    \ return \"db\" + binary + \"db\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11bfb5b5818249f38ee9c88d1f15f390>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2).ToString() + binary;\n            decimalNum /= 2;\n        }\n       \
    \ return \"db\" + binary + \"db\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11bfb5b5818249f38ee9c88d1f15f390>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        // Your\
    \ code here\n        return \"\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a8dd449425e14770adaf5cc4c0bd7655>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a8dd449425e14770adaf5cc4c0bd7655>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2).ToString() + binary;\n            decimalNum /= 2;\n        }\n       \
    \ return \"db\" + binary + \"db\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11bfb5b5818249f38ee9c88d1f15f390>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2).ToString() + binary;\n            decimalNum /= 2;\n        }\n       \
    \ return \"db\" + binary + \"db\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11bfb5b5818249f38ee9c88d1f15f390>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2).ToString() + binary;\n            decimalNum /= 2;\n        }\n       \
    \ return \"db\" + binary + \"db\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11bfb5b5818249f38ee9c88d1f15f390>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2).ToString() + binary;\n            decimalNum /= 2;\n        }\n       \
    \ return \"db\" + binary + \"db\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11bfb5b5818249f38ee9c88d1f15f390>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        // Convert\
    \ the number to binary and add the 'db' characters.\n        return \"db\" + Convert.ToString(decimalNum,\
    \ 2) + \"db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798230
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2) + binary;\n            decimalNum /= 2;\n        }\n        return \"db\"\
    \ + binary + \"db\";\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d409615197c34fd592bc62dd1fe25cf7>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2).ToString() + binary;\n            decimalNum /= 2;\n        }\n       \
    \ return \"db\" + binary + \"db\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11bfb5b5818249f38ee9c88d1f15f390>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2).ToString() + binary;\n            decimalNum /= 2;\n        }\n       \
    \ return \"db\" + binary + \"db\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11bfb5b5818249f38ee9c88d1f15f390>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2).ToString() + binary;\n            decimalNum /= 2;\n        }\n       \
    \ return \"db\" + binary + \"db\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11bfb5b5818249f38ee9c88d1f15f390>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2).ToString() + binary;\n            decimalNum /= 2;\n        }\n       \
    \ return \"db\" + binary + \"db\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11bfb5b5818249f38ee9c88d1f15f390>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2).ToString() + binary;\n            decimalNum /= 2;\n        }\n       \
    \ return \"db\" + binary + \"db\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11bfb5b5818249f38ee9c88d1f15f390>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2).ToString() + binary;\n            decimalNum /= 2;\n        }\n       \
    \ return \"db\" + binary + \"db\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11bfb5b5818249f38ee9c88d1f15f390>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2).ToString() + binary;\n            decimalNum /= 2;\n        }\n       \
    \ return \"db\" + binary + \"db\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11bfb5b5818249f38ee9c88d1f15f390>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2).ToString() + binary;\n            decimalNum /= 2;\n        }\n       \
    \ return \"db\" + binary + \"db\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11bfb5b5818249f38ee9c88d1f15f390>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2).ToString() + binary;\n            decimalNum /= 2;\n        }\n       \
    \ return \"db\" + binary + \"db\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11bfb5b5818249f38ee9c88d1f15f390>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        // Convert\
    \ the number to a binary string.\n        string binaryString = Convert.ToString(decimalNum,\
    \ 2);\n        // Add the extra characters.\n        binaryString = \"db\" + binaryString\
    \ + \"db\";\n        return binaryString;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798230
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2).ToString() + binary;\n            decimalNum /= 2;\n        }\n       \
    \ return \"db\" + binary + \"db\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11bfb5b5818249f38ee9c88d1f15f390>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2).ToString() + binary;\n            decimalNum /= 2;\n        }\n       \
    \ return \"db\" + binary + \"db\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11bfb5b5818249f38ee9c88d1f15f390>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2).ToString() + binary;\n            decimalNum /= 2;\n        }\n       \
    \ return \"db\" + binary + \"db\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11bfb5b5818249f38ee9c88d1f15f390>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2).ToString() + binary;\n            decimalNum /= 2;\n        }\n       \
    \ return \"db\" + binary + \"db\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11bfb5b5818249f38ee9c88d1f15f390>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2).ToString() + binary;\n            decimalNum /= 2;\n        }\n       \
    \ return \"db\" + binary + \"db\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11bfb5b5818249f38ee9c88d1f15f390>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2).ToString() + binary;\n            decimalNum /= 2;\n        }\n       \
    \ return \"db\" + binary + \"db\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11bfb5b5818249f38ee9c88d1f15f390>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2).ToString() + binary;\n            decimalNum /= 2;\n        }\n       \
    \ return \"db\" + binary + \"db\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11bfb5b5818249f38ee9c88d1f15f390>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2) + binary;\n            decimalNum /= 2;\n        }\n        return \"db\"\
    \ + binary + \"db\";\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d409615197c34fd592bc62dd1fe25cf7>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = ((decimalNum\
    \ % 2) == 0 ? \"0\" : \"1\") + binary;\n            decimalNum /= 2;\n       \
    \ }\n        return \"db\" + binary + \"db\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6656aea5408646949777ae44c523e3f5>:0 \n"
  stdout: ''
  timestamp: 1659798230
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2).ToString() + binary;\n            decimalNum /= 2;\n        }\n       \
    \ return \"db\" + binary + \"db\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11bfb5b5818249f38ee9c88d1f15f390>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2).ToString() + binary;\n            decimalNum /= 2;\n        }\n       \
    \ return \"db\" + binary + \"db\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11bfb5b5818249f38ee9c88d1f15f390>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2).ToString() + binary;\n            decimalNum /= 2;\n        }\n       \
    \ return \"db\" + binary + \"db\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11bfb5b5818249f38ee9c88d1f15f390>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2).ToString() + binary;\n            decimalNum /= 2;\n        }\n       \
    \ return \"db\" + binary + \"db\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11bfb5b5818249f38ee9c88d1f15f390>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2).ToString() + binary;\n            decimalNum /= 2;\n        }\n       \
    \ return \"db\" + binary + \"db\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11bfb5b5818249f38ee9c88d1f15f390>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2).ToString() + binary;\n            decimalNum /= 2;\n        }\n       \
    \ return \"db\" + binary + \"db\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11bfb5b5818249f38ee9c88d1f15f390>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2) + binary;\n            decimalNum /= 2;\n        }\n        return \"db\"\
    \ + binary + \"db\";\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d409615197c34fd592bc62dd1fe25cf7>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2).ToString() + binary;\n            decimalNum /= 2;\n        }\n       \
    \ return \"db\" + binary + \"db\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11bfb5b5818249f38ee9c88d1f15f390>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2) + binary;\n            decimalNum /= 2;\n        }\n        return \"db\"\
    \ + binary + \"db\";\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d409615197c34fd592bc62dd1fe25cf7>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2) + binary;\n            decimalNum /= 2;\n        }\n        return \"db\"\
    \ + binary + \"db\";\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d409615197c34fd592bc62dd1fe25cf7>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2).ToString() + binary;\n            decimalNum /= 2;\n        }\n       \
    \ return \"db\" + binary + \"db\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11bfb5b5818249f38ee9c88d1f15f390>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2).ToString() + binary;\n            decimalNum /= 2;\n        }\n       \
    \ return \"db\" + binary + \"db\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11bfb5b5818249f38ee9c88d1f15f390>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2).ToString() + binary;\n            decimalNum /= 2;\n        }\n       \
    \ return \"db\" + binary + \"db\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11bfb5b5818249f38ee9c88d1f15f390>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2).ToString() + binary;\n            decimalNum /= 2;\n        }\n       \
    \ return \"db\" + binary + \"db\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11bfb5b5818249f38ee9c88d1f15f390>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2).ToString() + binary;\n            decimalNum /= 2;\n        }\n       \
    \ return \"db\" + binary + \"db\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11bfb5b5818249f38ee9c88d1f15f390>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2) + binary;\n            decimalNum /= 2;\n        }\n        return \"db\"\
    \ + binary + \"db\";\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d409615197c34fd592bc62dd1fe25cf7>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        // Convert\
    \ the decimal number to a binary number.\n        // You can use the built-in\
    \ function bin() to convert a decimal number to a binary number.\n        // The\
    \ function returns a string, but you can convert it to a list of characters.\n\
    \        // The function bin() returns a string with the prefix '0b'.\n      \
    \  // You can remove the prefix using the string method replace().\n        //\
    \ Example:\n        // >>> bin(15)\n        // '0b1111'\n        // >>> bin(15).replace('0b',\
    \ '')\n        // '1111'\n        // >>> list(bin(15).replace('0b', ''))\n   \
    \     // ['1', '1', '1', '1']\n        // >>> list(bin(15).replace('0b', ''))[0]\n\
    \        // '1'\n        // >>> list(bin(15).replace('0b', ''))[0] == '1'\n  \
    \      // True\n        // >>> list(bin(15).replace('0b', ''))[0] == '0'\n   \
    \     // False\n        // >>> list(bin(15).replace('0b', ''))[0] == '0'\n   \
    \     // False\n        // >>> list(bin(15).replace('0b', ''))[0] == '0'\n   \
    \     // False\n        // >>> list(bin(15).replace('0b', ''))[0] == '0'\n   \
    \     // False\n        // >>> list(bin(15).replace('0b', ''))[0] == '0'\n   \
    \     // False\n        // >>> list(bin(15).replace('0b', ''))[0] == '0'\n   \
    \     // False\n        // >>> list(bin(15).replace('0b', ''))[0] == '0'\n   \
    \     // False\n        // >>> list(bin(15).replace('0b', ''))[0] == '0'\n   \
    \     // False\n        // >>> list(bin(15).replace('0b', ''))[0] == '0'\n   \
    \     // False\n        // >>> list(bin(15).replace('0b', ''))[0] == '0'\n   \
    \     // False\n        // >>> list(bin(15).replace('0b', ''))[\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpoybe8ydh.cs(19,26): error CS0161: ''Problem.DecimalToBinary(long)'': not
    all code paths return a value

    '
  timestamp: 1659798230
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2).ToString() + binary;\n            decimalNum /= 2;\n        }\n       \
    \ return \"db\" + binary + \"db\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11bfb5b5818249f38ee9c88d1f15f390>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2).ToString() + binary;\n            decimalNum /= 2;\n        }\n       \
    \ return \"db\" + binary + \"db\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11bfb5b5818249f38ee9c88d1f15f390>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2).ToString() + binary;\n            decimalNum /= 2;\n        }\n       \
    \ return \"db\" + binary + \"db\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11bfb5b5818249f38ee9c88d1f15f390>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        // Your\
    \ code here\n        return \"\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a8dd449425e14770adaf5cc4c0bd7655>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a8dd449425e14770adaf5cc4c0bd7655>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2) + binary;\n            decimalNum /= 2;\n        }\n        return \"db\"\
    \ + binary + \"db\";\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d409615197c34fd592bc62dd1fe25cf7>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2) + binary;\n            decimalNum /= 2;\n        }\n        return \"db\"\
    \ + binary + \"db\";\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d409615197c34fd592bc62dd1fe25cf7>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2) + binary;\n            decimalNum /= 2;\n        }\n        return \"db\"\
    \ + binary + \"db\";\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d409615197c34fd592bc62dd1fe25cf7>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2).ToString() + binary;\n            decimalNum /= 2;\n        }\n       \
    \ return \"db\" + binary + \"db\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11bfb5b5818249f38ee9c88d1f15f390>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2).ToString() + binary;\n            decimalNum /= 2;\n        }\n       \
    \ return \"db\" + binary + \"db\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11bfb5b5818249f38ee9c88d1f15f390>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2).ToString() + binary;\n            decimalNum /= 2;\n        }\n       \
    \ return \"db\" + binary + \"db\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11bfb5b5818249f38ee9c88d1f15f390>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ bin = \"\";\n        while (decimalNum > 0) {\n            bin = (decimalNum\
    \ % 2).ToString() + bin;\n            decimalNum /= 2;\n        }\n        return\
    \ \"db\" + bin + \"db\";\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <27b7beaa8c4940ee8b042ac16ff6d03c>:0 \n"
  stdout: ''
  timestamp: 1659798230
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2).ToString() + binary;\n            decimalNum /= 2;\n        }\n       \
    \ return \"db\" + binary + \"db\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11bfb5b5818249f38ee9c88d1f15f390>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2) + binary;\n            decimalNum /= 2;\n        }\n        return \"db\"\
    \ + binary + \"db\";\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d409615197c34fd592bc62dd1fe25cf7>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ result = \"db\";\n        while (decimalNum > 0) {\n            result += decimalNum\
    \ % 2;\n            decimalNum /= 2;\n        }\n        return result + \"db\"\
    ;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0e03800df6d947a78d83ab6875594892>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0e03800df6d947a78d83ab6875594892>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798230
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        var binary\
    \ = Convert.ToString(decimalNum, 2);\n        return \"db\" + binary + \"db\"\
    ;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798230
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2).ToString() + binary;\n            decimalNum /= 2;\n        }\n       \
    \ return \"db\" + binary + \"db\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11bfb5b5818249f38ee9c88d1f15f390>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = Convert.ToString(decimalNum, 2);\n        return \"db\" + binary +\
    \ \"db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2) + binary;\n            decimalNum /= 2;\n        }\n        return \"db\"\
    \ + binary + \"db\";\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d409615197c34fd592bc62dd1fe25cf7>:0 \n"
  stdout: ''
  timestamp: 1659798155
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n\
    \    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\"\
    )\n    public static string DecimalToBinary(long decimalNum) {\n        string\
    \ binary = \"\";\n        while (decimalNum > 0) {\n            binary = (decimalNum\
    \ % 2).ToString() + binary;\n            decimalNum /= 2;\n        }\n       \
    \ return \"db\" + binary + \"db\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11bfb5b5818249f38ee9c88d1f15f390>:0 \n"
  stdout: ''
  timestamp: 1659798155
