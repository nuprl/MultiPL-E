name: HumanEval_122_add_elements
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n\
  \    // the sum of the elements with at most two digits from the first k elements\
  \ of arr.\n    // Example:\n    // >>> AddElements((new List<long>(new long[]{(long)111L,\
  \ (long)21L, (long)3L, (long)4000L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L})),\
  \ (4L))\n    // (24L)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n   \
  \ // 2. 1 <= k <= len(arr)\n    public static long AddElements(List<long> arr, long\
  \ k) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(AddElements((new\
  \ List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)41L, (long)57L, (long)76L,\
  \ (long)87L, (long)88L, (long)99L})), (3L)) == (-4L));\n    Debug.Assert(AddElements((new\
  \ List<long>(new long[]{(long)111L, (long)121L, (long)3L, (long)4000L, (long)5L,\
  \ (long)6L})), (2L)) == (0L));\n    Debug.Assert(AddElements((new List<long>(new\
  \ long[]{(long)11L, (long)21L, (long)3L, (long)90L, (long)5L, (long)6L, (long)7L,\
  \ (long)8L, (long)9L})), (4L)) == (125L));\n    Debug.Assert(AddElements((new List<long>(new\
  \ long[]{(long)111L, (long)21L, (long)3L, (long)4000L, (long)5L, (long)6L, (long)7L,\
  \ (long)8L, (long)9L})), (4L)) == (24L));\n    Debug.Assert(AddElements((new List<long>(new\
  \ long[]{(long)1L})), (1L)) == (1L));\n    }\n\n}\n"
completions: ["        long sum = 0;\n        for (int i = 0; i < k; i++) {\n    \
    \        if (arr[i] < 100) {\n                sum += arr[i];\n            }\n\
    \        }\n        return sum;", "        long sum = 0;\n        for (int i =\
    \ 0; i < k; i++) {\n            if (arr[i] < 100) {\n                sum += arr[i];\n\
    \            }\n        }\n        return sum;", "        long sum = 0;\n    \
    \    for (int i = 0; i < k; i++) {\n            if (arr[i] < 100) {\n        \
    \        sum += arr[i];\n            }\n        }\n        return sum;", "   \
    \     long ret = 0;\n        for (long i = 0; i < k; i++) {\n            if (arr[(int)i]\
    \ < 100) {\n                ret += arr[(int)i];\n            }\n        }\n  \
    \      return ret;", "        long sum = 0;\n        for (int i = 0; i < k; i++)\
    \ {\n            if (arr[i] < 100) {\n                sum += arr[i];\n       \
    \     }\n        }\n        return sum;", "        long sum = 0;\n        for\
    \ (int i = 0; i < k; i++) {\n            if (arr[i] < 100) {\n               \
    \ sum += arr[i];\n            }\n        }\n        return sum;", "        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr[i] < 100)\
    \ {\n                sum += arr[i];\n            }\n        }\n        return\
    \ sum;", "        long sum = 0;\n        for (int i = 0; i < k; i++) {\n     \
    \       if (arr[i] < 100) {\n                sum += arr[i];\n            }\n \
    \       }\n        return sum;", "        long sum = 0;\n        for (int i =\
    \ 0; i < k; i++) {\n            long num = arr[i];\n            if (num < 100)\
    \ {\n                sum += num;\n            }\n        }\n        return sum;",
  "        long sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr[i]\
    \ < 100) {\n                sum += arr[i];\n            }\n        }\n       \
    \ return sum;", "        long sum = 0;\n        for (int i = 0; i < k; i++) {\n\
    \            if (arr[i] < 100) {\n                sum += arr[i];\n           \
    \ }\n        }\n        return sum;", "        long sum = 0;\n        for (long\
    \ i = 0; i < k; i++) {\n            if (arr[(int)i] < 100) {\n               \
    \ sum += arr[(int)i];\n            }\n        }\n        return sum;", "     \
    \   long sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr[i]\
    \ < 100) {\n                sum += arr[i];\n            }\n        }\n       \
    \ return sum;", "        long sum = 0;\n        for (int i = 0; i < k; i++) {\n\
    \            if (arr[i] < 100) {\n                sum += arr[i];\n           \
    \ }\n        }\n        return sum;", "        long sum = 0;\n        for (long\
    \ i = 0; i < k; i++) {\n            if (arr[(int)i] < 100) {\n               \
    \ sum += arr[(int)i];\n            }\n        }\n        return sum;", "     \
    \   long sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr[i]\
    \ < 100) {\n                sum += arr[i];\n            }\n        }\n       \
    \ return sum;", "        long sum = 0;\n        for (int i = 0; i < k; i++) {\n\
    \            if (arr[i] < 100) {\n                sum += arr[i];\n           \
    \ }\n        }\n        return sum;", '        return arr.Take((int)k).Where(x
    => x < 100).Sum();', "        long sum = 0;\n        for (long i = 0; i < k; i++)\
    \ {\n            if (arr[(int)i] < 100) {\n                sum += arr[(int)i];\n\
    \            }\n        }\n        return sum;", "        long sum = 0;\n    \
    \    for (long i = 0; i < k; i++) {\n            if (arr[(int)i] < 100) {\n  \
    \              sum += arr[(int)i];\n            }\n        }\n        return sum;"]
stop_tokens:
- "\n    }\n"
