language: cs
name: HumanEval_8_sum_product
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        return Tuple.Create(numbers.Sum(),
    numbers.Aggregate(1L, (a, b) => a * b));\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,
    (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n
    \   Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,
    105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,
    10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long num in numbers) {\n            sum
    += num;\n            product *= num;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        return Tuple.Create(numbers.Sum(),
    numbers.Aggregate(1L, (a, b) => a * b));\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,
    (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n
    \   Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,
    105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,
    10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        return Tuple.Create(numbers.Sum(),
    numbers.Aggregate((long)1, (a, b) => a * b));\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,
    (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n
    \   Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,
    105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,
    10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        // Implement
    this function\n        long sum = 0;\n        long product = 1;\n        foreach
    (long num in numbers) {\n            sum += num;\n            product *= num;\n
    \       }\n        return Tuple.Create(sum, product);\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,
    (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n
    \   Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,
    105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,
    10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804019
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long n in numbers) {\n            sum
    += n;\n            product *= n;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        if (numbers.Count
    == 0) {\n            return Tuple.Create(0L, 1L);\n        }\n        long sum
    = 0;\n        long product = 1;\n        foreach (long number in numbers) {\n
    \           sum += number;\n            product *= number;\n        }\n        return
    Tuple.Create(sum, product);\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n
    \   Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804019
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long num in numbers) {\n            sum
    += num;\n            product *= num;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long n in numbers) {\n            sum
    += n;\n            product *= n;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        return Tuple.Create(numbers.Sum(),
    numbers.Aggregate((x, y) => x * y));\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,
    (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n
    \   Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,
    105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,
    10L))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.Aggregate[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source, System.Func`3[T1,T2,TResult] func) [0x00030] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem.SumProduct (System.Collections.Generic.List`1[T] numbers) [0x00007]
    in <16ecf8259b96437a9b1b542bbff7589a>:0 \n  at Problem.Main (System.String[] args)
    [0x00006] in <16ecf8259b96437a9b1b542bbff7589a>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Aggregate[TSource]
    (System.Collections.Generic.IEnumerable`1[T] source, System.Func`3[T1,T2,TResult]
    func) [0x00030] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.SumProduct
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <16ecf8259b96437a9b1b542bbff7589a>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <16ecf8259b96437a9b1b542bbff7589a>:0
    \n"
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long num in numbers) {\n            sum
    += num;\n            product *= num;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        return Tuple.Create(numbers.Sum(),
    numbers.Aggregate((long)1, (acc, x) => acc * x));\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,
    (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n
    \   Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,
    105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,
    10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long n in numbers) {\n            sum
    += n;\n            product *= n;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long n in numbers) {\n            sum
    += n;\n            product *= n;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long num in numbers) {\n            sum
    += num;\n            product *= num;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long num in numbers) {\n            sum
    += num;\n            product *= num;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long n in numbers) {\n            sum
    += n;\n            product *= n;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        return Tuple.Create(numbers.Sum(),
    numbers.Aggregate(1L, (acc, x) => acc * x));\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,
    (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n
    \   Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,
    105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,
    10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804019
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        for (int i = 0; i < numbers.Count; i++)
    {\n            sum += numbers[i];\n            product *= numbers[i];\n        }\n
    \       return Tuple.Create(sum, product);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,
    (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n
    \   Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,
    105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,
    10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long n in numbers) {\n            sum
    += n;\n            product *= n;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long n in numbers) {\n            sum
    += n;\n            product *= n;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long num in numbers) {\n            sum
    += num;\n            product *= num;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long n in numbers) {\n            sum
    += n;\n            product *= n;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long i in numbers) {\n            sum
    += i;\n            product *= i;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long num in numbers) {\n            sum
    += num;\n            product *= num;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long n in numbers) {\n            sum
    += n;\n            product *= n;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        return Tuple.Create(numbers.Sum(),
    numbers.Aggregate((long)1, (a, b) => a * b));\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,
    (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n
    \   Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,
    105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,
    10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long n in numbers) {\n            sum
    += n;\n            product *= n;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        return Tuple.Create(numbers.Sum(),
    numbers.Aggregate(1L, (a, b) => a * b));\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,
    (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n
    \   Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,
    105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,
    10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long i in numbers) {\n            sum
    += i;\n            product *= i;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long num in numbers) {\n            sum
    += num;\n            product *= num;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long n in numbers) {\n            sum
    += n;\n            product *= n;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        return Tuple.Create(numbers.Sum(),
    numbers.Aggregate(1L, (a, b) => a * b));\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,
    (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n
    \   Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,
    105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,
    10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long num in numbers) {\n            sum
    += num;\n            product *= num;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        // TODO: Implement
    this function\n        return Tuple.Create(0L, 1L);\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,
    (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n
    \   Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,
    105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,
    10L))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <158ee7660e664dbc909ed3288994edea>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <158ee7660e664dbc909ed3288994edea>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804019
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long n in numbers) {\n            sum
    += n;\n            product *= n;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        return Tuple.Create(numbers.Sum(),
    numbers.Aggregate((long)1, (a, b) => a * b));\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,
    (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n
    \   Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,
    105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,
    10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        // your code
    here\n        return Tuple.Create(0L, 1L);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,
    (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n
    \   Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,
    105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,
    10L))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d5c347ef0cb64f53ab301e4cb95880e9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d5c347ef0cb64f53ab301e4cb95880e9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659804019
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        return Tuple.Create(numbers.Sum(),
    numbers.Aggregate(1L, (a, b) => a * b));\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,
    (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n
    \   Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,
    105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,
    10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long num in numbers) {\n            sum
    += num;\n            product *= num;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        return Tuple.Create(numbers.Sum(),
    numbers.Aggregate((long)1, (acc, x) => acc * x));\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,
    (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n
    \   Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,
    105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,
    10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long n in numbers) {\n            sum
    += n;\n            product *= n;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long n in numbers) {\n            sum
    += n;\n            product *= n;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long num in numbers) {\n            sum
    += num;\n            product *= num;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long num in numbers) {\n            sum
    += num;\n            product *= num;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long num in numbers) {\n            sum
    += num;\n            product *= num;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long n in numbers) {\n            sum
    += n;\n            product *= n;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long n in numbers) {\n            sum
    += n;\n            product *= n;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        return Tuple.Create(numbers.Sum(),
    numbers.Aggregate((long)1, (x, y) => x * y));\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,
    (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n
    \   Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,
    105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,
    10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        return Tuple.Create(numbers.Sum(),
    numbers.Aggregate((x, y) => x * y));\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,
    (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n
    \   Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,
    105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,
    10L))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.Aggregate[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source, System.Func`3[T1,T2,TResult] func) [0x00030] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem.SumProduct (System.Collections.Generic.List`1[T] numbers) [0x00007]
    in <16ecf8259b96437a9b1b542bbff7589a>:0 \n  at Problem.Main (System.String[] args)
    [0x00006] in <16ecf8259b96437a9b1b542bbff7589a>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Aggregate[TSource]
    (System.Collections.Generic.IEnumerable`1[T] source, System.Func`3[T1,T2,TResult]
    func) [0x00030] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.SumProduct
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <16ecf8259b96437a9b1b542bbff7589a>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <16ecf8259b96437a9b1b542bbff7589a>:0
    \n"
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        return Tuple.Create(numbers.Sum(),
    numbers.Aggregate((long)1, (x, y) => x * y));\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,
    (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n
    \   Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,
    105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,
    10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long n in numbers) {\n            sum
    += n;\n            product *= n;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        return Tuple.Create(numbers.Sum(),
    numbers.Aggregate((a, b) => a * b));\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,
    (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n
    \   Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,
    105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,
    10L))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.Aggregate[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source, System.Func`3[T1,T2,TResult] func) [0x00030] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem.SumProduct (System.Collections.Generic.List`1[T] numbers) [0x00007]
    in <2b13ffb99d3b4407a40f601a89c725b5>:0 \n  at Problem.Main (System.String[] args)
    [0x00006] in <2b13ffb99d3b4407a40f601a89c725b5>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Aggregate[TSource]
    (System.Collections.Generic.IEnumerable`1[T] source, System.Func`3[T1,T2,TResult]
    func) [0x00030] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.SumProduct
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <2b13ffb99d3b4407a40f601a89c725b5>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <2b13ffb99d3b4407a40f601a89c725b5>:0
    \n"
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        return Tuple.Create(numbers.Sum(),
    numbers.Aggregate(1L, (a, b) => a * b));\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,
    (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n
    \   Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,
    105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,
    10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long num in numbers) {\n            sum
    += num;\n            product *= num;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        return Tuple.Create(numbers.Sum(),
    numbers.Aggregate(1L, (a, b) => a * b));\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,
    (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n
    \   Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,
    105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,
    10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        return Tuple.Create(numbers.Sum(),
    numbers.Aggregate((long)1, (a, b) => a * b));\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,
    (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n
    \   Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,
    105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,
    10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long num in numbers) {\n            sum
    += num;\n            product *= num;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        return Tuple.Create(numbers.Sum(),
    numbers.Aggregate((long)1, (a, b) => a * b));\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,
    (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n
    \   Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,
    105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,
    10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        return Tuple.Create(numbers.Sum(),
    numbers.Aggregate((a, b) => a * b));\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,
    (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n
    \   Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,
    105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,
    10L))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.Aggregate[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source, System.Func`3[T1,T2,TResult] func) [0x00030] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem.SumProduct (System.Collections.Generic.List`1[T] numbers) [0x00007]
    in <2b13ffb99d3b4407a40f601a89c725b5>:0 \n  at Problem.Main (System.String[] args)
    [0x00006] in <2b13ffb99d3b4407a40f601a89c725b5>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Aggregate[TSource]
    (System.Collections.Generic.IEnumerable`1[T] source, System.Func`3[T1,T2,TResult]
    func) [0x00030] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.SumProduct
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <2b13ffb99d3b4407a40f601a89c725b5>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <2b13ffb99d3b4407a40f601a89c725b5>:0
    \n"
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (var n in numbers) {\n            sum
    += n;\n            product *= n;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659804019
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long i in numbers) {\n            sum
    += i;\n            product *= i;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        return Tuple.Create(numbers.Sum(),
    numbers.Aggregate((long)1, (a, b) => a * b));\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,
    (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n
    \   Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,
    105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,
    10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        return Tuple.Create(numbers.Sum(),
    numbers.Aggregate((long)1, (acc, x) => acc * x));\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,
    (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n
    \   Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,
    105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,
    10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long num in numbers) {\n            sum
    += num;\n            product *= num;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long number in numbers) {\n            sum
    += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long num in numbers) {\n            sum
    += num;\n            product *= num;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // For a given list of integers, return a tuple consisting of a
    sum and a product of all the integers in a list.\n    // Empty sum should be equal
    to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n
    \   // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public
    static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum =
    0;\n        long product = 1;\n        foreach (long n in numbers) {\n            sum
    += n;\n            product *= n;\n        }\n        return Tuple.Create(sum,
    product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new
    List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,
    1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,
    0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,
    (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new
    List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803951
