name: HumanEval_20_find_closest_elements
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // From a supplied list of numbers (of length at least two) select\
  \ and return two that are the closest to each\n    // other and return them in order\
  \ (smaller number, larger number).\n    // >>> FindClosestElements((new List<float>(new\
  \ float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f})))\n\
  \    // (Tuple.Create(2.0f, 2.2f))\n    // >>> FindClosestElements((new List<float>(new\
  \ float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f})))\n\
  \    // (Tuple.Create(2.0f, 2.0f))\n    public static Tuple<float, float> FindClosestElements(List<float>\
  \ numbers) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindClosestElements((new\
  \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f,\
  \ (float)2.2f}))).Equals((Tuple.Create(3.9f, 4.0f))));\n    Debug.Assert(FindClosestElements((new\
  \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f}))).Equals((Tuple.Create(5.0f,\
  \ 5.9f))));\n    Debug.Assert(FindClosestElements((new List<float>(new float[]{(float)1.0f,\
  \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f}))).Equals((Tuple.Create(2.0f,\
  \ 2.2f))));\n    Debug.Assert(FindClosestElements((new List<float>(new float[]{(float)1.0f,\
  \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f}))).Equals((Tuple.Create(2.0f,\
  \ 2.0f))));\n    Debug.Assert(FindClosestElements((new List<float>(new float[]{(float)1.1f,\
  \ (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f}))).Equals((Tuple.Create(2.2f,\
  \ 3.1f))));\n    }\n\n}\n"
completions: ["        float closest = float.MaxValue;\n        float closest_a =\
    \ 0;\n        float closest_b = 0;\n        for (int i = 0; i < numbers.Count;\
    \ i++) {\n            for (int j = i + 1; j < numbers.Count; j++) {\n        \
    \        float diff = Math.Abs(numbers[i] - numbers[j]);\n                if (diff\
    \ < closest) {\n                    closest = diff;\n                    closest_a\
    \ = numbers[i];\n                    closest_b = numbers[j];\n               \
    \ }\n            }\n        }\n        return Tuple.Create(closest_a, closest_b);",
  "        float closest = float.MaxValue;\n        float first = 0;\n        float\
    \ second = 0;\n        for (int i = 0; i < numbers.Count; i++) {\n           \
    \ for (int j = i + 1; j < numbers.Count; j++) {\n                float diff =\
    \ Math.Abs(numbers[i] - numbers[j]);\n                if (diff < closest) {\n\
    \                    closest = diff;\n                    first = numbers[i];\n\
    \                    second = numbers[j];\n                }\n            }\n\
    \        }\n        return Tuple.Create(first, second);", "        float minDiff\
    \ = float.MaxValue;\n        float minDiff1 = 0;\n        float minDiff2 = 0;\n\
    \        for (int i = 0; i < numbers.Count; i++) {\n            for (int j = i\
    \ + 1; j < numbers.Count; j++) {\n                float diff = Math.Abs(numbers[i]\
    \ - numbers[j]);\n                if (diff < minDiff) {\n                    minDiff\
    \ = diff;\n                    minDiff1 = numbers[i];\n                    minDiff2\
    \ = numbers[j];\n                }\n            }\n        }\n        return Tuple.Create(minDiff1,\
    \ minDiff2);", "        float closest = float.MaxValue;\n        float closest1\
    \ = 0;\n        float closest2 = 0;\n        for (int i = 0; i < numbers.Count;\
    \ i++) {\n            for (int j = i + 1; j < numbers.Count; j++) {\n        \
    \        float diff = Math.Abs(numbers[i] - numbers[j]);\n                if (diff\
    \ < closest) {\n                    closest = diff;\n                    closest1\
    \ = numbers[i];\n                    closest2 = numbers[j];\n                }\n\
    \            }\n        }\n        if (closest1 > closest2) {\n            float\
    \ tmp = closest1;\n            closest1 = closest2;\n            closest2 = tmp;\n\
    \        }\n        return Tuple.Create(closest1, closest2);", "        float\
    \ minDiff = float.MaxValue;\n        float minDiff1 = float.MaxValue;\n      \
    \  float minDiff2 = float.MaxValue;\n        for (int i = 0; i < numbers.Count;\
    \ i++) {\n            for (int j = i + 1; j < numbers.Count; j++) {\n        \
    \        float diff = Math.Abs(numbers[i] - numbers[j]);\n                if (diff\
    \ < minDiff) {\n                    minDiff = diff;\n                    minDiff1\
    \ = numbers[i];\n                    minDiff2 = numbers[j];\n                }\n\
    \            }\n        }\n        return Tuple.Create(minDiff1, minDiff2);",
  "        float closest = float.MaxValue;\n        float closest_a = 0;\n       \
    \ float closest_b = 0;\n        for (int i = 0; i < numbers.Count; i++) {\n  \
    \          for (int j = i + 1; j < numbers.Count; j++) {\n                float\
    \ a = numbers[i];\n                float b = numbers[j];\n                float\
    \ diff = Math.Abs(a - b);\n                if (diff < closest) {\n           \
    \         closest = diff;\n                    closest_a = a;\n              \
    \      closest_b = b;\n                }\n            }\n        }\n        return\
    \ Tuple.Create(closest_a, closest_b);", "        float minDiff = float.MaxValue;\n\
    \        float minDiffSmaller = 0;\n        float minDiffLarger = 0;\n       \
    \ for (int i = 0; i < numbers.Count; i++) {\n            for (int j = i + 1; j\
    \ < numbers.Count; j++) {\n                float diff = Math.Abs(numbers[i] -\
    \ numbers[j]);\n                if (diff < minDiff) {\n                    minDiff\
    \ = diff;\n                    minDiffSmaller = numbers[i];\n                \
    \    minDiffLarger = numbers[j];\n                }\n            }\n        }\n\
    \        if (minDiffSmaller > minDiffLarger) {\n            float temp = minDiffSmaller;\n\
    \            minDiffSmaller = minDiffLarger;\n            minDiffLarger = temp;\n\
    \        }\n        return Tuple.Create(minDiffSmaller, minDiffLarger);", "  \
    \      float minDiff = float.MaxValue;\n        float minA = 0;\n        float\
    \ minB = 0;\n        for (int i = 0; i < numbers.Count; i++) {\n            for\
    \ (int j = i + 1; j < numbers.Count; j++) {\n                float diff = Math.Abs(numbers[i]\
    \ - numbers[j]);\n                if (diff < minDiff) {\n                    minDiff\
    \ = diff;\n                    minA = numbers[i];\n                    minB =\
    \ numbers[j];\n                }\n            }\n        }\n        return Tuple.Create(minA,\
    \ minB);", "        float minDiff = float.MaxValue;\n        float minDiffFirst\
    \ = 0;\n        float minDiffSecond = 0;\n        for (int i = 0; i < numbers.Count;\
    \ i++) {\n            for (int j = i + 1; j < numbers.Count; j++) {\n        \
    \        float diff = Math.Abs(numbers[i] - numbers[j]);\n                if (diff\
    \ < minDiff) {\n                    minDiff = diff;\n                    minDiffFirst\
    \ = numbers[i];\n                    minDiffSecond = numbers[j];\n           \
    \     }\n            }\n        }\n        return Tuple.Create(minDiffFirst, minDiffSecond);",
  "        // TODO: Implement this function.\n        return null;", "        float\
    \ minDiff = float.MaxValue;\n        float minSmaller = 0;\n        float minLarger\
    \ = 0;\n        for (int i = 0; i < numbers.Count; i++) {\n            for (int\
    \ j = i + 1; j < numbers.Count; j++) {\n                float diff = Math.Abs(numbers[i]\
    \ - numbers[j]);\n                if (diff < minDiff) {\n                    minDiff\
    \ = diff;\n                    minSmaller = Math.Min(numbers[i], numbers[j]);\n\
    \                    minLarger = Math.Max(numbers[i], numbers[j]);\n         \
    \       }\n            }\n        }\n        return Tuple.Create(minSmaller, minLarger);",
  "        float minDiff = float.MaxValue;\n        Tuple<float, float> closest =\
    \ null;\n        for (int i = 0; i < numbers.Count - 1; i++) {\n            for\
    \ (int j = i + 1; j < numbers.Count; j++) {\n                float diff = Math.Abs(numbers[i]\
    \ - numbers[j]);\n                if (diff < minDiff) {\n                    minDiff\
    \ = diff;\n                    closest = Tuple.Create(numbers[i], numbers[j]);\n\
    \                }\n            }\n        }\n        return closest;", "    \
    \    float smallestDifference = float.MaxValue;\n        Tuple<float, float> closestElements\
    \ = null;\n        for (int i = 0; i < numbers.Count; i++) {\n            for\
    \ (int j = i + 1; j < numbers.Count; j++) {\n                float difference\
    \ = Math.Abs(numbers[i] - numbers[j]);\n                if (difference < smallestDifference)\
    \ {\n                    smallestDifference = difference;\n                  \
    \  closestElements = Tuple.Create(numbers[i], numbers[j]);\n                }\n\
    \            }\n        }\n        return closestElements;", "        float min\
    \ = float.MaxValue;\n        float min1 = 0;\n        float min2 = 0;\n      \
    \  for (int i = 0; i < numbers.Count; i++) {\n            for (int j = i + 1;\
    \ j < numbers.Count; j++) {\n                float diff = Math.Abs(numbers[i]\
    \ - numbers[j]);\n                if (diff < min) {\n                    min =\
    \ diff;\n                    min1 = numbers[i];\n                    min2 = numbers[j];\n\
    \                }\n            }\n        }\n        return Tuple.Create(min1,\
    \ min2);", "        float closest = float.MaxValue;\n        float closest1 =\
    \ 0;\n        float closest2 = 0;\n        for (int i = 0; i < numbers.Count;\
    \ i++) {\n            for (int j = i + 1; j < numbers.Count; j++) {\n        \
    \        float diff = Math.Abs(numbers[i] - numbers[j]);\n                if (diff\
    \ < closest) {\n                    closest = diff;\n                    closest1\
    \ = numbers[i];\n                    closest2 = numbers[j];\n                }\n\
    \            }\n        }\n        return Tuple.Create(closest1, closest2);",
  "        float minDiff = float.MaxValue;\n        float minA = 0;\n        float\
    \ minB = 0;\n        for (int i = 0; i < numbers.Count; i++) {\n            for\
    \ (int j = i + 1; j < numbers.Count; j++) {\n                float diff = Math.Abs(numbers[i]\
    \ - numbers[j]);\n                if (diff < minDiff) {\n                    minDiff\
    \ = diff;\n                    minA = numbers[i];\n                    minB =\
    \ numbers[j];\n                }\n            }\n        }\n        return Tuple.Create(minA,\
    \ minB);", "        float minDiff = float.MaxValue;\n        float min1 = 0;\n\
    \        float min2 = 0;\n        for (int i = 0; i < numbers.Count; i++) {\n\
    \            for (int j = i + 1; j < numbers.Count; j++) {\n                float\
    \ diff = Math.Abs(numbers[i] - numbers[j]);\n                if (diff < minDiff)\
    \ {\n                    minDiff = diff;\n                    min1 = numbers[i];\n\
    \                    min2 = numbers[j];\n                }\n            }\n  \
    \      }\n        return Tuple.Create(min1, min2);", "        float minDiff =\
    \ float.MaxValue;\n        float minDiff1 = 0;\n        float minDiff2 = 0;\n\
    \        for (int i = 0; i < numbers.Count; i++) {\n            for (int j = i\
    \ + 1; j < numbers.Count; j++) {\n                float diff = Math.Abs(numbers[i]\
    \ - numbers[j]);\n                if (diff < minDiff) {\n                    minDiff\
    \ = diff;\n                    minDiff1 = numbers[i];\n                    minDiff2\
    \ = numbers[j];\n                }\n            }\n        }\n        return Tuple.Create(minDiff1,\
    \ minDiff2);", "        float minDiff = float.MaxValue;\n        float minA =\
    \ 0;\n        float minB = 0;\n        for (int i = 0; i < numbers.Count; i++)\
    \ {\n            for (int j = i + 1; j < numbers.Count; j++) {\n             \
    \   float diff = Math.Abs(numbers[i] - numbers[j]);\n                if (diff\
    \ < minDiff) {\n                    minDiff = diff;\n                    minA\
    \ = numbers[i];\n                    minB = numbers[j];\n                }\n \
    \           }\n        }\n        return Tuple.Create(minA, minB);", "       \
    \ float minDistance = float.MaxValue;\n        float minA = float.MaxValue;\n\
    \        float minB = float.MaxValue;\n        for (int i = 0; i < numbers.Count;\
    \ i++) {\n            for (int j = i + 1; j < numbers.Count; j++) {\n        \
    \        float distance = Math.Abs(numbers[i] - numbers[j]);\n               \
    \ if (distance < minDistance) {\n                    minDistance = distance;\n\
    \                    minA = numbers[i];\n                    minB = numbers[j];\n\
    \                }\n            }\n        }\n        return Tuple.Create(minA,\
    \ minB);"]
stop_tokens:
- "\n    }\n"
