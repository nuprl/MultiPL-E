language: cs
name: HumanEval_68_pluck
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       long index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                index
    = i;\n            }\n        }\n        if (index == -1) {\n            return
    new List<long>();\n        }\n        return new List<long>() { min, index };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f24b70686b514016a6ef670f16d73f0c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f24b70686b514016a6ef670f16d73f0c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        List<long> result
    = new List<long>();\n        long min = long.MaxValue;\n        int min_index
    = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] %
    2 == 0 && arr[i] < min) {\n                min = arr[i];\n                min_index
    = i;\n            }\n        }\n        if (min_index == -1) {\n            return
    result;\n        }\n        result.Add(min);\n        result.Add(min_index);\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,
    (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new long[]{(long)0L, (long)3L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)4L, (long)8L,
    (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L, (long)7L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <36efe0b5a35d49a8ac528a7c1c97ffe5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <36efe0b5a35d49a8ac528a7c1c97ffe5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex == -1) {\n            return
    new List<long>();\n        }\n        return new List<long>() { min, minIndex
    };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1edea5c573bd401fbfd6ac2b4aad3cbb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1edea5c573bd401fbfd6ac2b4aad3cbb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        List<long> result
    = new List<long>();\n        long min = long.MaxValue;\n        long minIndex
    = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] %
    2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex != -1) {\n            result.Add(min);\n
    \           result.Add(minIndex);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <add51950b2a84a3fb8e97f41d9fa2055>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <add51950b2a84a3fb8e97f41d9fa2055>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9efbef18578f4bcd9a410d5bbcd1883c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9efbef18578f4bcd9a410d5bbcd1883c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <21ddaed2e4ae44b58a51eaea1669fa66>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <21ddaed2e4ae44b58a51eaea1669fa66>:0
    \n"
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        var evens = arr.Where(x
    => x % 2 == 0).ToList();\n        if (evens.Count == 0) return new List<long>();\n
    \       var min = evens.Min();\n        return new List<long> { min, arr.IndexOf(min)
    };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eb5d0a6d23124fbbadd8b1a48d6a6d3a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eb5d0a6d23124fbbadd8b1a48d6a6d3a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9efbef18578f4bcd9a410d5bbcd1883c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9efbef18578f4bcd9a410d5bbcd1883c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = Int64.MaxValue;\n
    \       int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex == -1) {\n            return
    new List<long>();\n        }\n        return new List<long>() { min, minIndex
    };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <22549b32af3f4a12a2ba50bdfc49a7b5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <22549b32af3f4a12a2ba50bdfc49a7b5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        var evens = arr.Where(x
    => x % 2 == 0).ToList();\n        if (evens.Count == 0) {\n            return
    new List<long>();\n        }\n        var min = evens.Min();\n        var index
    = arr.IndexOf(min);\n        return new List<long> { min, index };\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <44648e81bcd74ad2a07252ddaa89efb1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <44648e81bcd74ad2a07252ddaa89efb1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bd24af3038e8438a86a2bb31054ba64c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bd24af3038e8438a86a2bb31054ba64c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,
    (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new long[]{(long)0L, (long)3L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)4L, (long)8L,
    (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L, (long)7L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <7841d9228da043b4a63e6d98e042e2b2>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <7841d9228da043b4a63e6d98e042e2b2>:0
    \n"
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       int index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                index
    = i;\n            }\n        }\n        if (index == -1) {\n            return
    new List<long>();\n        }\n        return new List<long> { min, index };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b7513424773e4a96bf77ada3a73df59e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b7513424773e4a96bf77ada3a73df59e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = Int64.MaxValue;\n
    \       long index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                index
    = i;\n            }\n        }\n        if (index == -1) {\n            return
    new List<long>();\n        }\n        return new List<long>() { min, index };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a065f76cea0342fab56fd634da4b2b25>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a065f76cea0342fab56fd634da4b2b25>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        List<long> result
    = new List<long>();\n        long min = long.MaxValue;\n        int index = -1;\n
    \       for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0
    && arr[i] < min) {\n                min = arr[i];\n                index = i;\n
    \           }\n        }\n        if (index != -1) {\n            result.Add(min);\n
    \           result.Add(index);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <aa6303201a004bbe8648a4eeb109b133>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <aa6303201a004bbe8648a4eeb109b133>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bd24af3038e8438a86a2bb31054ba64c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bd24af3038e8438a86a2bb31054ba64c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex == -1) {\n            return
    new List<long>();\n        }\n        return new List<long>() { min, minIndex
    };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1edea5c573bd401fbfd6ac2b4aad3cbb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1edea5c573bd401fbfd6ac2b4aad3cbb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        var evens = arr.Where(x
    => x % 2 == 0).ToList();\n        if (evens.Count == 0) return new List<long>();\n
    \       var min = evens.Min();\n        return new List<long> { min, arr.IndexOf(min)
    };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eb5d0a6d23124fbbadd8b1a48d6a6d3a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eb5d0a6d23124fbbadd8b1a48d6a6d3a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9efbef18578f4bcd9a410d5bbcd1883c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9efbef18578f4bcd9a410d5bbcd1883c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d2faa9ecf1844f66a78b9c4b60f0c65c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d2faa9ecf1844f66a78b9c4b60f0c65c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       long index = -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if
    (arr[(int)i] % 2 == 0 && arr[(int)i] < min) {\n                min = arr[(int)i];\n
    \               index = i;\n            }\n        }\n        if (index == -1)
    {\n            return new List<long>();\n        }\n        return new List<long>(new
    long[]{min, index});\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <05e52bc614a742c39adf92ec567bd698>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <05e52bc614a742c39adf92ec567bd698>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        List<long> result
    = new List<long>();\n        if (arr.Count == 0) {\n            return result;\n
    \       }\n        long min = arr[0];\n        long min_index = 0;\n        for
    (long i = 0; i < arr.Count; i++) {\n            if (arr[(int)i] % 2 == 0 && arr[(int)i]
    < min) {\n                min = arr[(int)i];\n                min_index = i;\n
    \           }\n        }\n        if (min % 2 == 0) {\n            result.Add(min);\n
    \           result.Add(min_index);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <58da577fa20d41409dd905b9143940c7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <58da577fa20d41409dd905b9143940c7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        List<long> result
    = new List<long>();\n        long min = long.MaxValue;\n        int index = -1;\n
    \       for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0
    && arr[i] < min) {\n                min = arr[i];\n                index = i;\n
    \           }\n        }\n        if (index != -1) {\n            result.Add(min);\n
    \           result.Add(index);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <aa6303201a004bbe8648a4eeb109b133>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <aa6303201a004bbe8648a4eeb109b133>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bd24af3038e8438a86a2bb31054ba64c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bd24af3038e8438a86a2bb31054ba64c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        List<long> result
    = new List<long>();\n        if (arr.Count == 0) {\n            return result;\n
    \       }\n        long min = arr[0];\n        int minIndex = 0;\n        for
    (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] <
    min) {\n                min = arr[i];\n                minIndex = i;\n            }\n
    \       }\n        if (min % 2 == 0) {\n            result.Add(min);\n            result.Add(minIndex);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <777d6bdc33794090af68876a8874d5bb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <777d6bdc33794090af68876a8874d5bb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d2faa9ecf1844f66a78b9c4b60f0c65c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d2faa9ecf1844f66a78b9c4b60f0c65c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bd24af3038e8438a86a2bb31054ba64c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bd24af3038e8438a86a2bb31054ba64c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        var min = arr.Where(x
    => x % 2 == 0).Min();\n        var index = arr.IndexOf(min);\n        return new
    List<long>() { min, index };\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,
    (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new long[]{(long)0L, (long)3L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)4L, (long)8L,
    (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L, (long)7L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8dd5ddb42719464a87730f084bc717a2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8dd5ddb42719464a87730f084bc717a2>:0
    \n\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.Min (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.Pluck
    (System.Collections.Generic.List`1[T] arr) [0x00026] in <8dd5ddb42719464a87730f084bc717a2>:0
    \n  at Prob"
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        List<long> result
    = new List<long>();\n        long min = long.MaxValue;\n        long index = -1;\n
    \       for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0
    && arr[i] < min) {\n                min = arr[i];\n                index = i;\n
    \           }\n        }\n        if (index == -1) {\n            return result;\n
    \       }\n        result.Add(min);\n        result.Add(index);\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3d4014e0ed554f84b49006244020355e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3d4014e0ed554f84b49006244020355e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <21ddaed2e4ae44b58a51eaea1669fa66>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <21ddaed2e4ae44b58a51eaea1669fa66>:0
    \n"
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bd24af3038e8438a86a2bb31054ba64c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bd24af3038e8438a86a2bb31054ba64c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        List<long> result
    = new List<long>();\n        long min = Int64.MaxValue;\n        int index = -1;\n
    \       for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0
    && arr[i] < min) {\n                min = arr[i];\n                index = i;\n
    \           }\n        }\n        if (index == -1) {\n            return result;\n
    \       }\n        result.Add(min);\n        result.Add(index);\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6a88e948970943f1b7798eef9958530b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6a88e948970943f1b7798eef9958530b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        var evens = arr.Where(x
    => x % 2 == 0).ToList();\n        if (evens.Count == 0) {\n            return
    new List<long>();\n        }\n        var min = evens.Min();\n        var idx
    = arr.IndexOf(min);\n        return new List<long> { min, idx };\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <06576e84007c4e20833b03e6f5647710>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <06576e84007c4e20833b03e6f5647710>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       int index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                index
    = i;\n            }\n        }\n        if (index == -1) {\n            return
    new List<long>();\n        }\n        return new List<long>() { min, index };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <00baa2c128e540a0909356efc0178c69>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <00baa2c128e540a0909356efc0178c69>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798585
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code goes
    here\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,
    (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new long[]{(long)0L, (long)3L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)4L, (long)8L,
    (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L, (long)7L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <ea40eba163d742a08e6478691b40e260>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <ea40eba163d742a08e6478691b40e260>:0
    \n"
  stdout: ''
  timestamp: 1659798585
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       int index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                index
    = i;\n            }\n        }\n        if (index == -1) {\n            return
    new List<long>();\n        }\n        return new List<long> { min, index };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b7513424773e4a96bf77ada3a73df59e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b7513424773e4a96bf77ada3a73df59e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        if (arr.Count ==
    0) {\n            return new List<long>();\n        }\n        long min = arr[0];\n
    \       long minIndex = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (min % 2 == 0) {\n            return
    new List<long> { min, minIndex };\n        }\n        return new List<long>();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d85efc538e244dd2b818509fa984da3d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d85efc538e244dd2b818509fa984da3d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798585
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex == -1) {\n            return
    new List<long>();\n        }\n        return new List<long>() { min, minIndex
    };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1edea5c573bd401fbfd6ac2b4aad3cbb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1edea5c573bd401fbfd6ac2b4aad3cbb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        if (arr.Count ==
    0) {\n            return new List<long>();\n        }\n        long min = long.MaxValue;\n
    \       int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex == -1) {\n            return
    new List<long>();\n        }\n        return new List<long>() { min, minIndex
    };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e5280b62155445848f4c8f9df5473b74>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e5280b62155445848f4c8f9df5473b74>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798585
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex == -1) {\n            return
    new List<long>();\n        }\n        return new List<long> { min, minIndex };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2d08716f395f4af3b36864d531b96de9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2d08716f395f4af3b36864d531b96de9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798585
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <21ddaed2e4ae44b58a51eaea1669fa66>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <21ddaed2e4ae44b58a51eaea1669fa66>:0
    \n"
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = -1;\n
    \       long minIndex = -1;\n        for (long i = 0; i < arr.Count; i++) {\n
    \           if (arr[(int)i] % 2 == 0) {\n                if (min == -1 || arr[(int)i]
    < min) {\n                    min = arr[(int)i];\n                    minIndex
    = i;\n                }\n            }\n        }\n        if (min == -1) {\n
    \           return new List<long>();\n        }\n        return new List<long>(new
    long[]{min, minIndex});\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,
    (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new long[]{(long)0L, (long)3L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)4L, (long)8L,
    (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L, (long)7L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b678d7690b64cc0b46a1dd6f616713a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b678d7690b64cc0b46a1dd6f616713a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798585
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            long
    val = arr[i];\n            if (val % 2 == 0 && val < min) {\n                min
    = val;\n                minIndex = i;\n            }\n        }\n        if (minIndex
    == -1) {\n            return new List<long>();\n        }\n        return new
    List<long>() { min, minIndex };\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,
    (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new long[]{(long)0L, (long)3L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)4L, (long)8L,
    (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L, (long)7L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <623a017e104a49d8bed0baba45eb6fb9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <623a017e104a49d8bed0baba45eb6fb9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798585
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <21ddaed2e4ae44b58a51eaea1669fa66>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <21ddaed2e4ae44b58a51eaea1669fa66>:0
    \n"
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bd24af3038e8438a86a2bb31054ba64c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bd24af3038e8438a86a2bb31054ba64c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        List<long> result
    = new List<long>();\n        long min = long.MaxValue;\n        int index = -1;\n
    \       for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0
    && arr[i] < min) {\n                min = arr[i];\n                index = i;\n
    \           }\n        }\n        if (index == -1) {\n            return result;\n
    \       }\n        result.Add(min);\n        result.Add(index);\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16cfef96d8644ced81da6e6967b44287>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16cfef96d8644ced81da6e6967b44287>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798586
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        List<long> result
    = new List<long>();\n        if (arr.Count == 0) {\n            return result;\n
    \       }\n        long min = arr[0];\n        int minIndex = 0;\n        for
    (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] <
    min) {\n                min = arr[i];\n                minIndex = i;\n            }\n
    \       }\n        if (min % 2 == 0) {\n            result.Add(min);\n            result.Add(minIndex);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <777d6bdc33794090af68876a8874d5bb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <777d6bdc33794090af68876a8874d5bb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <41e65ecbcce043028ae374b85ee08812>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <41e65ecbcce043028ae374b85ee08812>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798585
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <21ddaed2e4ae44b58a51eaea1669fa66>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <21ddaed2e4ae44b58a51eaea1669fa66>:0
    \n"
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        var evens = arr.Where(x
    => x % 2 == 0).ToList();\n        if (evens.Count == 0) {\n            return
    new List<long>();\n        }\n        var min = evens.Min();\n        var index
    = arr.IndexOf(min);\n        return new List<long> { min, index };\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <44648e81bcd74ad2a07252ddaa89efb1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <44648e81bcd74ad2a07252ddaa89efb1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code goes
    here\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,
    (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new long[]{(long)0L, (long)3L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)4L, (long)8L,
    (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L, (long)7L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <ea40eba163d742a08e6478691b40e260>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <ea40eba163d742a08e6478691b40e260>:0
    \n"
  stdout: ''
  timestamp: 1659798585
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code here\n
    \       return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <c329686ac7c6460aa3d96d919f82bd0a>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <c329686ac7c6460aa3d96d919f82bd0a>:0
    \n"
  stdout: ''
  timestamp: 1659798585
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,
    (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new long[]{(long)0L, (long)3L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)4L, (long)8L,
    (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L, (long)7L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <7841d9228da043b4a63e6d98e042e2b2>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <7841d9228da043b4a63e6d98e042e2b2>:0
    \n"
  stdout: ''
  timestamp: 1659798584
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Write your code
    here\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,
    (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new long[]{(long)0L, (long)3L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)4L, (long)8L,
    (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L, (long)7L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <6e9d87dfc5f546a2be3108d857d5499f>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <6e9d87dfc5f546a2be3108d857d5499f>:0
    \n"
  stdout: ''
  timestamp: 1659798585
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bd24af3038e8438a86a2bb31054ba64c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bd24af3038e8438a86a2bb31054ba64c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex == -1) {\n            return
    new List<long>();\n        }\n        return new List<long> { min, minIndex };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2d08716f395f4af3b36864d531b96de9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2d08716f395f4af3b36864d531b96de9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798585
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = Int64.MaxValue;\n
    \       long index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                index
    = i;\n            }\n        }\n        if (index == -1) {\n            return
    new List<long>();\n        }\n        return new List<long>() { min, index };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a065f76cea0342fab56fd634da4b2b25>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a065f76cea0342fab56fd634da4b2b25>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,
    (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new long[]{(long)0L, (long)3L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)4L, (long)8L,
    (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L, (long)7L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <7841d9228da043b4a63e6d98e042e2b2>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <7841d9228da043b4a63e6d98e042e2b2>:0
    \n"
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       long index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                index
    = i;\n            }\n        }\n        if (index == -1) {\n            return
    new List<long>();\n        }\n        return new List<long> { min, index };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <91e6e7a1b1014effa5a0808f567b82ae>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <91e6e7a1b1014effa5a0808f567b82ae>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798585
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bd24af3038e8438a86a2bb31054ba64c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bd24af3038e8438a86a2bb31054ba64c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = Int64.MaxValue;\n
    \       int index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                index
    = i;\n            }\n        }\n        if (index == -1) {\n            return
    new List<long>();\n        }\n        return new List<long> { min, index };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e3fab39c7b0845588eac423ed78fd0c4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e3fab39c7b0845588eac423ed78fd0c4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798585
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        List<long> result
    = new List<long>();\n        long min = long.MaxValue;\n        int minIndex =
    -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2
    == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex != -1) {\n            result.Add(min);\n
    \           result.Add(minIndex);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <19b1222e852f46d8b2f4dab85682d57a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <19b1222e852f46d8b2f4dab85682d57a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798585
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d2faa9ecf1844f66a78b9c4b60f0c65c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d2faa9ecf1844f66a78b9c4b60f0c65c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <21ddaed2e4ae44b58a51eaea1669fa66>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <21ddaed2e4ae44b58a51eaea1669fa66>:0
    \n"
  stdout: ''
  timestamp: 1659798584
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <21ddaed2e4ae44b58a51eaea1669fa66>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <21ddaed2e4ae44b58a51eaea1669fa66>:0
    \n"
  stdout: ''
  timestamp: 1659798584
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,
    (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new long[]{(long)0L, (long)3L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)4L, (long)8L,
    (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L, (long)7L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <7841d9228da043b4a63e6d98e042e2b2>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <7841d9228da043b4a63e6d98e042e2b2>:0
    \n"
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,
    (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new long[]{(long)0L, (long)3L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)4L, (long)8L,
    (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L, (long)7L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <7841d9228da043b4a63e6d98e042e2b2>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <7841d9228da043b4a63e6d98e042e2b2>:0
    \n"
  stdout: ''
  timestamp: 1659798584
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,
    (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new long[]{(long)0L, (long)3L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)4L, (long)8L,
    (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L, (long)7L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <7841d9228da043b4a63e6d98e042e2b2>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <7841d9228da043b4a63e6d98e042e2b2>:0
    \n"
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex == -1) {\n            return
    new List<long>();\n        }\n        return new List<long>() { min, minIndex
    };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1edea5c573bd401fbfd6ac2b4aad3cbb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1edea5c573bd401fbfd6ac2b4aad3cbb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <21ddaed2e4ae44b58a51eaea1669fa66>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <21ddaed2e4ae44b58a51eaea1669fa66>:0
    \n"
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        if (arr.Count ==
    0) {\n            return new List<long>();\n        }\n        long min = arr[0];\n
    \       int minIndex = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (min % 2 == 0) {\n            return
    new List<long> { min, minIndex };\n        }\n        return new List<long>();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bdad6df8b78243d09a6c4aef2e9828e4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bdad6df8b78243d09a6c4aef2e9828e4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798586
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = Int64.MaxValue;\n
    \       long min_index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n
    \           if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n
    \               min_index = i;\n            }\n        }\n        if (min_index
    == -1) {\n            return new List<long>();\n        }\n        return new
    List<long>() { min, min_index };\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <01e9a33b073d49c6ba336215304593dd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <01e9a33b073d49c6ba336215304593dd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798585
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d2faa9ecf1844f66a78b9c4b60f0c65c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d2faa9ecf1844f66a78b9c4b60f0c65c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex == -1) {\n            return
    new List<long>();\n        }\n        return new List<long>() { min, minIndex
    };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1edea5c573bd401fbfd6ac2b4aad3cbb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1edea5c573bd401fbfd6ac2b4aad3cbb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        List<long> result
    = new List<long>();\n        if (arr.Count == 0) {\n            return result;\n
    \       }\n        long min = arr[0];\n        int minIndex = 0;\n        for
    (int i = 0; i < arr.Count; i++) {\n            if (arr[i] < min && arr[i] % 2
    == 0) {\n                min = arr[i];\n                minIndex = i;\n            }\n
    \       }\n        if (min % 2 == 0) {\n            result.Add(min);\n            result.Add(minIndex);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <189ac154ab844127ac6c95f0dbc9c6bc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <189ac154ab844127ac6c95f0dbc9c6bc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798585
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        var min = arr.Where(x
    => x % 2 == 0).Min();\n        var index = arr.IndexOf(min);\n        return new
    List<long> { min, index };\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,
    (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new long[]{(long)0L, (long)3L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)4L, (long)8L,
    (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L, (long)7L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1b70c90b0ef2457bb67174d089251fdd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1b70c90b0ef2457bb67174d089251fdd>:0
    \n\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.Min (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.Pluck
    (System.Collections.Generic.List`1[T] arr) [0x00026] in <1b70c90b0ef2457bb67174d089251fdd>:0
    \n  at Prob"
  stdout: ''
  timestamp: 1659798585
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <21ddaed2e4ae44b58a51eaea1669fa66>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <21ddaed2e4ae44b58a51eaea1669fa66>:0
    \n"
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       long index = -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if
    (arr[(int)i] % 2 == 0 && arr[(int)i] < min) {\n                min = arr[(int)i];\n
    \               index = i;\n            }\n        }\n        if (index == -1)
    {\n            return new List<long>();\n        }\n        return new List<long>(new
    long[]{min, index});\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <05e52bc614a742c39adf92ec567bd698>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <05e52bc614a742c39adf92ec567bd698>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       int index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                index
    = i;\n            }\n        }\n        if (index == -1) {\n            return
    new List<long>();\n        }\n        return new List<long>() { min, index };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <00baa2c128e540a0909356efc0178c69>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <00baa2c128e540a0909356efc0178c69>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798585
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bd24af3038e8438a86a2bb31054ba64c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bd24af3038e8438a86a2bb31054ba64c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9efbef18578f4bcd9a410d5bbcd1883c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9efbef18578f4bcd9a410d5bbcd1883c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex == -1) {\n            return
    new List<long>();\n        }\n        return new List<long>() { min, minIndex
    };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1edea5c573bd401fbfd6ac2b4aad3cbb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1edea5c573bd401fbfd6ac2b4aad3cbb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex == -1) {\n            return
    new List<long>();\n        }\n        return new List<long> { min, minIndex };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2d08716f395f4af3b36864d531b96de9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2d08716f395f4af3b36864d531b96de9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798585
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex == -1) {\n            return
    new List<long>();\n        }\n        return new List<long>() { min, minIndex
    };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1edea5c573bd401fbfd6ac2b4aad3cbb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1edea5c573bd401fbfd6ac2b4aad3cbb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code goes
    here\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,
    (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new long[]{(long)0L, (long)3L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)4L, (long)8L,
    (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L, (long)7L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <ea40eba163d742a08e6478691b40e260>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <ea40eba163d742a08e6478691b40e260>:0
    \n"
  stdout: ''
  timestamp: 1659798585
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex == -1) {\n            return
    new List<long>();\n        }\n        return new List<long> { min, minIndex };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2d08716f395f4af3b36864d531b96de9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2d08716f395f4af3b36864d531b96de9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798585
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <21ddaed2e4ae44b58a51eaea1669fa66>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <21ddaed2e4ae44b58a51eaea1669fa66>:0
    \n"
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        List<long> result
    = new List<long>();\n        long min = Int64.MaxValue;\n        int minIndex
    = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] %
    2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex != -1) {\n            result.Add(min);\n
    \           result.Add(minIndex);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <96e54ffe165c42d4a2487c74f4f98691>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <96e54ffe165c42d4a2487c74f4f98691>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798585
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        List<long> result
    = new List<long>();\n        if (arr.Count == 0) {\n            return result;\n
    \       }\n        long smallestEven = arr[0];\n        int smallestEvenIndex
    = 0;\n        bool foundEven = false;\n        for (int i = 0; i < arr.Count;
    i++) {\n            if (arr[i] % 2 == 0) {\n                if (!foundEven) {\n
    \                   smallestEven = arr[i];\n                    smallestEvenIndex
    = i;\n                    foundEven = true;\n                } else {\n                    if
    (arr[i] < smallestEven) {\n                        smallestEven = arr[i];\n                        smallestEvenIndex
    = i;\n                    }\n                }\n            }\n        }\n        if
    (foundEven) {\n            result.Add(smallestEven);\n            result.Add(smallestEvenIndex);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <68fdc028b6674def867de294d131c4bb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <68fdc028b6674def867de294d131c4bb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798585
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        List<long> result = new List<long>();\n        long min = long.MaxValue;\n
    \       int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex == -1) {\n            return
    result;\n        }\n        result.Add(min);\n        result.Add(minIndex);\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,
    (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new long[]{(long)0L, (long)3L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)4L, (long)8L,
    (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L, (long)7L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9035d5f688b24abd851f84e909c088a4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9035d5f688b24abd851f84e909c088a4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798585
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bd24af3038e8438a86a2bb31054ba64c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bd24af3038e8438a86a2bb31054ba64c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex == -1) {\n            return
    new List<long>();\n        }\n        return new List<long>() { min, minIndex
    };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1edea5c573bd401fbfd6ac2b4aad3cbb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1edea5c573bd401fbfd6ac2b4aad3cbb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        if (arr.Count ==
    0) return new List<long>();\n        long min = arr.Min();\n        if (min %
    2 == 0) {\n            return new List<long>() { min, arr.IndexOf(min) };\n        }\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f09bdda6deb645d0ae7907b11cf373df>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f09bdda6deb645d0ae7907b11cf373df>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798585
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bd24af3038e8438a86a2bb31054ba64c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bd24af3038e8438a86a2bb31054ba64c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex == -1) {\n            return
    new List<long>();\n        }\n        return new List<long> { min, minIndex };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2d08716f395f4af3b36864d531b96de9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2d08716f395f4af3b36864d531b96de9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798585
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <41e65ecbcce043028ae374b85ee08812>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <41e65ecbcce043028ae374b85ee08812>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798585
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <21ddaed2e4ae44b58a51eaea1669fa66>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <21ddaed2e4ae44b58a51eaea1669fa66>:0
    \n"
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       long index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                index
    = i;\n            }\n        }\n        if (index == -1) {\n            return
    new List<long>();\n        }\n        return new List<long>() { min, index };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f24b70686b514016a6ef670f16d73f0c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f24b70686b514016a6ef670f16d73f0c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex == -1) {\n            return
    new List<long>();\n        }\n        return new List<long>() { min, minIndex
    };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1edea5c573bd401fbfd6ac2b4aad3cbb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1edea5c573bd401fbfd6ac2b4aad3cbb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       long minIndex = -1;\n        for (long i = 0; i < arr.Count; i++) {\n
    \           if (arr[(int)i] % 2 == 0 && arr[(int)i] < min) {\n                min
    = arr[(int)i];\n                minIndex = i;\n            }\n        }\n        if
    (minIndex == -1) {\n            return new List<long>();\n        }\n        return
    new List<long>(new long[]{min, minIndex});\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3037c350350447008baa60cac47025ab>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3037c350350447008baa60cac47025ab>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798585
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <21ddaed2e4ae44b58a51eaea1669fa66>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <21ddaed2e4ae44b58a51eaea1669fa66>:0
    \n"
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       int idx = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                idx
    = i;\n            }\n        }\n        if (idx == -1) {\n            return new
    List<long>();\n        }\n        return new List<long>() { min, idx };\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9a75aec4582e47ea8f6d75ed514d71ed>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9a75aec4582e47ea8f6d75ed514d71ed>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798586
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        List<long> result
    = new List<long>();\n        long min = long.MaxValue;\n        int minIndex =
    -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2
    == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex != -1) {\n            result.Add(min);\n
    \           result.Add(minIndex);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <19b1222e852f46d8b2f4dab85682d57a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <19b1222e852f46d8b2f4dab85682d57a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798585
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex == -1) {\n            return
    new List<long>();\n        }\n        return new List<long>() { min, minIndex
    };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1edea5c573bd401fbfd6ac2b4aad3cbb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1edea5c573bd401fbfd6ac2b4aad3cbb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        List<long> result
    = new List<long>();\n        long min = long.MaxValue;\n        long index = -1;\n
    \       for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0
    && arr[i] < min) {\n                min = arr[i];\n                index = i;\n
    \           }\n        }\n        if (index != -1) {\n            result.Add(min);\n
    \           result.Add(index);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8aacdd6b56674765a4de1ccae2ada3df>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8aacdd6b56674765a4de1ccae2ada3df>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798586
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex == -1) {\n            return
    new List<long>();\n        }\n        return new List<long>() { min, minIndex
    };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1edea5c573bd401fbfd6ac2b4aad3cbb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1edea5c573bd401fbfd6ac2b4aad3cbb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        if (arr.Count ==
    0) {\n            return new List<long>();\n        }\n        long min = arr[0];\n
    \       int minIndex = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (min % 2 == 0) {\n            return
    new List<long>() { min, minIndex };\n        }\n        return new List<long>();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <05399344a316447cb4221659488373f8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <05399344a316447cb4221659488373f8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798586
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = Int64.MaxValue;\n
    \       int index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                index
    = i;\n            }\n        }\n        if (index == -1) {\n            return
    new List<long>();\n        }\n        return new List<long> { min, index };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e3fab39c7b0845588eac423ed78fd0c4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e3fab39c7b0845588eac423ed78fd0c4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798585
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <21ddaed2e4ae44b58a51eaea1669fa66>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <21ddaed2e4ae44b58a51eaea1669fa66>:0
    \n"
  stdout: ''
  timestamp: 1659798584
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <21ddaed2e4ae44b58a51eaea1669fa66>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <21ddaed2e4ae44b58a51eaea1669fa66>:0
    \n"
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex == -1) {\n            return
    new List<long>();\n        }\n        return new List<long> { min, minIndex };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2d08716f395f4af3b36864d531b96de9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2d08716f395f4af3b36864d531b96de9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798585
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <21ddaed2e4ae44b58a51eaea1669fa66>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <21ddaed2e4ae44b58a51eaea1669fa66>:0
    \n"
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex == -1) {\n            return
    new List<long>();\n        }\n        return new List<long> { min, minIndex };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2d08716f395f4af3b36864d531b96de9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2d08716f395f4af3b36864d531b96de9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798585
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d2faa9ecf1844f66a78b9c4b60f0c65c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d2faa9ecf1844f66a78b9c4b60f0c65c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code here\n
    \       return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <c329686ac7c6460aa3d96d919f82bd0a>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <c329686ac7c6460aa3d96d919f82bd0a>:0
    \n"
  stdout: ''
  timestamp: 1659798585
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        List<long> result
    = new List<long>();\n        long min = long.MaxValue;\n        int index = -1;\n
    \       for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0
    && arr[i] < min) {\n                min = arr[i];\n                index = i;\n
    \           }\n        }\n        if (index != -1) {\n            result.Add(min);\n
    \           result.Add(index);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <aa6303201a004bbe8648a4eeb109b133>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <aa6303201a004bbe8648a4eeb109b133>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code goes
    here\n        List<long> result = new List<long>();\n        if (arr.Count ==
    0) {\n            return result;\n        }\n        long minEven = long.MaxValue;\n
    \       int minEvenIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n
    \           if (arr[i] % 2 == 0 && arr[i] < minEven) {\n                minEven
    = arr[i];\n                minEvenIndex = i;\n            }\n        }\n        if
    (minEvenIndex == -1) {\n            return result;\n        }\n        result.Add(minEven);\n
    \       result.Add(minEvenIndex);\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <17e7ac6aa604426096841bb23854d360>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <17e7ac6aa604426096841bb23854d360>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798586
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bd24af3038e8438a86a2bb31054ba64c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bd24af3038e8438a86a2bb31054ba64c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       int index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                index
    = i;\n            }\n        }\n        if (index == -1) {\n            return
    new List<long>();\n        }\n        return new List<long>() { min, index };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <00baa2c128e540a0909356efc0178c69>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <00baa2c128e540a0909356efc0178c69>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798585
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex == -1) {\n            return
    new List<long>();\n        }\n        return new List<long>() { min, minIndex
    };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1edea5c573bd401fbfd6ac2b4aad3cbb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1edea5c573bd401fbfd6ac2b4aad3cbb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        List<long> result
    = new List<long>();\n        if (arr.Count == 0) {\n            return result;\n
    \       }\n        long min = long.MaxValue;\n        long minIndex = -1;\n        for
    (long i = 0; i < arr.Count; i++) {\n            if (arr[(int)i] % 2 == 0 && arr[(int)i]
    < min) {\n                min = arr[(int)i];\n                minIndex = i;\n
    \           }\n        }\n        if (minIndex == -1) {\n            return result;\n
    \       }\n        result.Add(min);\n        result.Add(minIndex);\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <98465739fc0b40f1b1b3e2fbacd96c3e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <98465739fc0b40f1b1b3e2fbacd96c3e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798586
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        var evens = arr.Where(x
    => x % 2 == 0).ToList();\n        if (evens.Count == 0) {\n            return
    new List<long>();\n        }\n        var min = evens.Min();\n        var index
    = arr.IndexOf(min);\n        return new List<long> { min, index };\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <44648e81bcd74ad2a07252ddaa89efb1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <44648e81bcd74ad2a07252ddaa89efb1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,
    (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new long[]{(long)0L, (long)3L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)4L, (long)8L,
    (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L, (long)7L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <7841d9228da043b4a63e6d98e042e2b2>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <7841d9228da043b4a63e6d98e042e2b2>:0
    \n"
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        // Good luck!\n        return new List<long>();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9b714ad8ba5943c3be49c00dfa646c44>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9b714ad8ba5943c3be49c00dfa646c44>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798586
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        var evens = arr.Where(x
    => x % 2 == 0).ToList();\n        if (evens.Count == 0) {\n            return
    new List<long>();\n        }\n        var min = evens.Min();\n        var index
    = arr.IndexOf(min);\n        return new List<long> { min, index };\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <44648e81bcd74ad2a07252ddaa89efb1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <44648e81bcd74ad2a07252ddaa89efb1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code goes
    here\n        List<long> result = new List<long>();\n        if (arr.Count ==
    0) {\n            return result;\n        }\n        long smallestEven = arr[0];\n
    \       int smallestEvenIndex = 0;\n        bool foundEven = false;\n        for
    (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n                if
    (!foundEven) {\n                    smallestEven = arr[i];\n                    smallestEvenIndex
    = i;\n                    foundEven = true;\n                } else {\n                    if
    (arr[i] < smallestEven) {\n                        smallestEven = arr[i];\n                        smallestEvenIndex
    = i;\n                    }\n                }\n            }\n        }\n        if
    (foundEven) {\n            result.Add(smallestEven);\n            result.Add(smallestEvenIndex);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7c4ada6e6f464ace8df837a9b8dabfdb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7c4ada6e6f464ace8df837a9b8dabfdb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798586
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex == -1) {\n            return
    new List<long>();\n        }\n        return new List<long> { min, minIndex };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2d08716f395f4af3b36864d531b96de9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2d08716f395f4af3b36864d531b96de9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798585
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <21ddaed2e4ae44b58a51eaea1669fa66>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <21ddaed2e4ae44b58a51eaea1669fa66>:0
    \n"
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        // Good luck!\n        List<long> result = new List<long>();\n
    \       if (arr.Count == 0) {\n            return result;\n        }\n        long
    min = arr[0];\n        int minIndex = 0;\n        bool found = false;\n        for
    (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n                if
    (!found) {\n                    min = arr[i];\n                    minIndex =
    i;\n                    found = true;\n                } else {\n                    if
    (arr[i] < min) {\n                        min = arr[i];\n                        minIndex
    = i;\n                    }\n                }\n            }\n        }\n        if
    (found) {\n            result.Add(min);\n            result.Add(minIndex);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,
    (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new long[]{(long)0L, (long)3L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)4L, (long)8L,
    (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L, (long)7L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d300073e297e4b73890c23c21c98e3b5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d300073e297e4b73890c23c21c98e3b5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798587
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        var min = arr.Where(x
    => x % 2 == 0).Min();\n        var index = arr.IndexOf(min);\n        return new
    List<long>() { min, index };\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,
    (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new long[]{(long)0L, (long)3L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)4L, (long)8L,
    (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L, (long)7L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8dd5ddb42719464a87730f084bc717a2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8dd5ddb42719464a87730f084bc717a2>:0
    \n\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.Min (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.Pluck
    (System.Collections.Generic.List`1[T] arr) [0x00026] in <8dd5ddb42719464a87730f084bc717a2>:0
    \n  at Prob"
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d2faa9ecf1844f66a78b9c4b60f0c65c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d2faa9ecf1844f66a78b9c4b60f0c65c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       int index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                index
    = i;\n            }\n        }\n        if (index == -1) {\n            return
    new List<long>();\n        }\n        return new List<long>() { min, index };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <00baa2c128e540a0909356efc0178c69>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <00baa2c128e540a0909356efc0178c69>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798585
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <21ddaed2e4ae44b58a51eaea1669fa66>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <21ddaed2e4ae44b58a51eaea1669fa66>:0
    \n"
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d2faa9ecf1844f66a78b9c4b60f0c65c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d2faa9ecf1844f66a78b9c4b60f0c65c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bd24af3038e8438a86a2bb31054ba64c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bd24af3038e8438a86a2bb31054ba64c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = Int64.MaxValue;\n
    \       long index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                index
    = i;\n            }\n        }\n        if (index == -1) {\n            return
    new List<long>();\n        }\n        return new List<long>() { min, index };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a065f76cea0342fab56fd634da4b2b25>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a065f76cea0342fab56fd634da4b2b25>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        List<long> result
    = new List<long>();\n        if (arr.Count == 0) {\n            return result;\n
    \       }\n        long min_even = long.MaxValue;\n        long min_even_index
    = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] %
    2 == 0 && arr[i] < min_even) {\n                min_even = arr[i];\n                min_even_index
    = i;\n            }\n        }\n        if (min_even_index == -1) {\n            return
    result;\n        }\n        result.Add(min_even);\n        result.Add(min_even_index);\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,
    (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new long[]{(long)0L, (long)3L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)4L, (long)8L,
    (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L, (long)7L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a671ad4ed95e476b87c1d5b16089fa70>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a671ad4ed95e476b87c1d5b16089fa70>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798586
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex == -1) {\n            return
    new List<long>();\n        }\n        return new List<long>() { min, minIndex
    };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1edea5c573bd401fbfd6ac2b4aad3cbb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1edea5c573bd401fbfd6ac2b4aad3cbb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long minEven = long.MaxValue;\n
    \       long minEvenIndex = long.MaxValue;\n        for (long i = 0; i < arr.Count;
    i++) {\n            if (arr[(int)i] % 2 == 0 && arr[(int)i] < minEven) {\n                minEven
    = arr[(int)i];\n                minEvenIndex = i;\n            }\n        }\n
    \       if (minEven == long.MaxValue) {\n            return new List<long>();\n
    \       }\n        return new List<long>(new long[]{minEven, minEvenIndex});\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0825058b48c44a339ab69ca7072f8444>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0825058b48c44a339ab69ca7072f8444>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798586
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex == -1) {\n            return
    new List<long>();\n        }\n        return new List<long> { min, minIndex };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2d08716f395f4af3b36864d531b96de9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2d08716f395f4af3b36864d531b96de9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798585
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <21ddaed2e4ae44b58a51eaea1669fa66>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <21ddaed2e4ae44b58a51eaea1669fa66>:0
    \n"
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        // Good luck!\n        List<long> result = new List<long>();\n
    \       long min = Int64.MaxValue;\n        int minIndex = -1;\n        for (int
    i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min)
    {\n                min = arr[i];\n                minIndex = i;\n            }\n
    \       }\n        if (minIndex != -1) {\n            result.Add(min);\n            result.Add(minIndex);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4c1ceff6cef43f4a54b5d4ab4769f85>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4c1ceff6cef43f4a54b5d4ab4769f85>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798586
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = Int64.MaxValue;\n
    \       int index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                index
    = i;\n            }\n        }\n        if (index == -1) {\n            return
    new List<long>();\n        }\n        return new List<long>() { min, index };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c8a0207f7bf541699dd7ede0ca0f28f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c8a0207f7bf541699dd7ede0ca0f28f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798586
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <21ddaed2e4ae44b58a51eaea1669fa66>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <21ddaed2e4ae44b58a51eaea1669fa66>:0
    \n"
  stdout: ''
  timestamp: 1659798584
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <21ddaed2e4ae44b58a51eaea1669fa66>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <21ddaed2e4ae44b58a51eaea1669fa66>:0
    \n"
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d2faa9ecf1844f66a78b9c4b60f0c65c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d2faa9ecf1844f66a78b9c4b60f0c65c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,
    (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new long[]{(long)0L, (long)3L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)4L, (long)8L,
    (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L, (long)7L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <7841d9228da043b4a63e6d98e042e2b2>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <7841d9228da043b4a63e6d98e042e2b2>:0
    \n"
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = Int64.MaxValue;\n
    \       int index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                index
    = i;\n            }\n        }\n        if (index == -1) {\n            return
    new List<long>();\n        }\n        return new List<long> { min, index };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e3fab39c7b0845588eac423ed78fd0c4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e3fab39c7b0845588eac423ed78fd0c4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798585
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <21ddaed2e4ae44b58a51eaea1669fa66>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <21ddaed2e4ae44b58a51eaea1669fa66>:0
    \n"
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code here\n
    \       return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e9ff27cf6a345f9a4d8d630a0f60b48>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e9ff27cf6a345f9a4d8d630a0f60b48>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798586
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bd24af3038e8438a86a2bb31054ba64c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bd24af3038e8438a86a2bb31054ba64c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        List<long> result
    = new List<long>();\n        if (arr.Count == 0) {\n            return result;\n
    \       }\n        long min = arr[0];\n        int minIndex = 0;\n        bool
    found = false;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0) {\n                if (!found) {\n                    min =
    arr[i];\n                    minIndex = i;\n                    found = true;\n
    \               } else {\n                    if (arr[i] < min) {\n                        min
    = arr[i];\n                        minIndex = i;\n                    }\n                }\n
    \           }\n        }\n        if (found) {\n            result.Add(min);\n
    \           result.Add(minIndex);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7adbd2d758984ee4aae3749dbb9fd78e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7adbd2d758984ee4aae3749dbb9fd78e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798587
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long minEven = long.MaxValue;\n
    \       int minEvenIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n
    \           if (arr[i] % 2 == 0 && arr[i] < minEven) {\n                minEven
    = arr[i];\n                minEvenIndex = i;\n            }\n        }\n        if
    (minEvenIndex == -1) {\n            return new List<long>();\n        }\n        return
    new List<long>() { minEven, minEvenIndex };\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <83963d0e9f4e47e58579e1d76798f88c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <83963d0e9f4e47e58579e1d76798f88c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798587
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9efbef18578f4bcd9a410d5bbcd1883c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9efbef18578f4bcd9a410d5bbcd1883c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex == -1) {\n            return
    new List<long>();\n        }\n        return new List<long>() { min, minIndex
    };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1edea5c573bd401fbfd6ac2b4aad3cbb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1edea5c573bd401fbfd6ac2b4aad3cbb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = Int64.MaxValue;\n
    \       int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex == -1) {\n            return
    new List<long>();\n        }\n        return new List<long>() { min, minIndex
    };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <22549b32af3f4a12a2ba50bdfc49a7b5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <22549b32af3f4a12a2ba50bdfc49a7b5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex == -1) {\n            return
    new List<long>();\n        }\n        return new List<long> { min, minIndex };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2d08716f395f4af3b36864d531b96de9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2d08716f395f4af3b36864d531b96de9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798585
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <21ddaed2e4ae44b58a51eaea1669fa66>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <21ddaed2e4ae44b58a51eaea1669fa66>:0
    \n"
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        List<long> result
    = new List<long>();\n        long min = Int64.MaxValue;\n        long index =
    -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[(int)i]
    % 2 == 0 && arr[(int)i] < min) {\n                min = arr[(int)i];\n                index
    = i;\n            }\n        }\n        if (index != -1) {\n            result.Add(min);\n
    \           result.Add(index);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <231d5af982e240909abbe1cba27dcf95>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <231d5af982e240909abbe1cba27dcf95>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798586
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        var evens = arr.Where(x
    => x % 2 == 0).ToList();\n        if (evens.Count == 0) {\n            return
    new List<long>();\n        }\n        var min = evens.Min();\n        var index
    = arr.IndexOf(min);\n        return new List<long> { min, index };\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <44648e81bcd74ad2a07252ddaa89efb1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <44648e81bcd74ad2a07252ddaa89efb1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2365af76bc2640fd84a4b1e6076b418b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9efbef18578f4bcd9a410d5bbcd1883c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9efbef18578f4bcd9a410d5bbcd1883c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798584
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = -1;\n
    \       long min_index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n
    \           if (arr[i] % 2 == 0) {\n                if (min == -1 || arr[i] <
    min) {\n                    min = arr[i];\n                    min_index = i;\n
    \               }\n            }\n        }\n        if (min == -1) {\n            return
    new List<long>();\n        }\n        return new List<long>() { min, min_index
    };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <325532ce46d8486491a80f31c37a5aeb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <325532ce46d8486491a80f31c37a5aeb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798587
