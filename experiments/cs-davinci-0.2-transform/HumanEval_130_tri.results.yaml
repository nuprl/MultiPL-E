language: cs
name: HumanEval_130_tri
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        for (long i = 0;
    i <= n; i++) {\n            result.Add(Tri(i));\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpll60q6j0.cs(28,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       if (n == 0) {\n            return result;\n        }\n        result.Add(3);\n
    \       if (n == 1) {\n            return result;\n        }\n        result.Add(2);\n
    \       if (n == 2) {\n            return result;\n        }\n        for (int
    i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1
    + i / 2);\n            } else {\n                result.Add(result[i - 1] + result[i
    - 2] + result[i + 1]);\n            }\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x0008f] in <a3da1019b9594b12a50e381c322639dd>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <a3da1019b9594b12a50e381c322639dd>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x0008f]
    in <a3da1019b9594b12a50e381c322639dd>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <a3da1019b9594b12a50e381c322639dd>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        // Your code goes here.\n        return null;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0001e] in <5f3cbc4f56204d9383a447e499a20022>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0001e] in <5f3cbc4f56204d9383a447e499a20022>:0
    \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (long i = 3; i <=
    n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[(int)i - 1] + result[(int)i
    - 2] + result[(int)i + 1]);\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x0005c] in <dfb4feb452f0440194a0304ffdfea0ec>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <dfb4feb452f0440194a0304ffdfea0ec>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x0005c]
    in <dfb4feb452f0440194a0304ffdfea0ec>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <dfb4feb452f0440194a0304ffdfea0ec>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       if (n == 0) {\n            return result;\n        }\n        result.Add(3);\n
    \       if (n == 1) {\n            return result;\n        }\n        result.Add(2);\n
    \       if (n == 2) {\n            return result;\n        }\n        for (long
    i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1
    + i / 2);\n            } else {\n                result.Add(result[(int)i - 1]
    + result[(int)i - 2] + result[(int)i + 1]);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00095] in <7decf756dae540a1b4bc8e643f900502>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <7decf756dae540a1b4bc8e643f900502>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00095]
    in <7decf756dae540a1b4bc8e643f900502>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <7decf756dae540a1b4bc8e643f900502>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var res = new List<long>();\n        res.Add(1);\n        res.Add(3);\n
    \       res.Add(2);\n        for (int i = 3; i <= n; i++) {\n            if (i
    % 2 == 0) {\n                res.Add(1 + i / 2);\n            } else {\n                res.Add(res[i
    - 1] + res[i - 2] + res[i + 1]);\n            }\n        }\n        return res;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <a8826d66922d4b3a8f7d7def6ede4195>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <a8826d66922d4b3a8f7d7def6ede4195>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <a8826d66922d4b3a8f7d7def6ede4195>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <a8826d66922d4b3a8f7d7def6ede4195>:0 \n"
  stdout: ''
  timestamp: 1659794556
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        for (long i = 0;
    i <= n; i++) {\n            result.Add(Tri(i));\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpll60q6j0.cs(28,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            return result;\n        }\n        result.Add(1);\n        if
    (n == 1) {\n            return result;\n        }\n        result.Add(3);\n        if
    (n == 2) {\n            return result;\n        }\n        result.Add(2);\n        if
    (n == 3) {\n            return result;\n        }\n        for (int i = 3; i <
    n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <edc397e7e4e94be787a8ea5e642978b6>:0
    \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of
    range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x0009f] in <edc397e7e4e94be787a8ea5e642978b6>:0 \n  at Problem.Main (System.String[]
    args) [0x00029] in <edc397e7e4e94be787a8ea5e642978b6>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x0009f]
    in <edc397e7e4e94be787a8ea5e642978b6>:0 \n  at Problem.Main (System.String[] args)
    [0x00029] in <edc397e7e4e94be787a8ea5e642978b6>:0 \n"
  stdout: ''
  timestamp: 1659794556
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (long i = 3; i <=
    n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[(int)i - 1] + result[(int)i
    - 2] + result[(int)i + 1]);\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x0005c] in <dfb4feb452f0440194a0304ffdfea0ec>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <dfb4feb452f0440194a0304ffdfea0ec>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x0005c]
    in <dfb4feb452f0440194a0304ffdfea0ec>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <dfb4feb452f0440194a0304ffdfea0ec>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       if (n == 0) {\n            return result;\n        }\n        result.Add(3);\n
    \       if (n == 1) {\n            return result;\n        }\n        result.Add(2);\n
    \       for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1
    + i / 2);\n            } else {\n                result.Add(result[i - 1] + result[i
    - 2] + result[i + 1]);\n            }\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x0007c] in <68a331b5b7b846e281c932196fe89feb>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <68a331b5b7b846e281c932196fe89feb>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x0007c]
    in <68a331b5b7b846e281c932196fe89feb>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <68a331b5b7b846e281c932196fe89feb>:0 \n"
  stdout: ''
  timestamp: 1659794556
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        for (long i = 0;
    i <= n; i++) {\n            result.Add(Tri(i));\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpll60q6j0.cs(28,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       if (n == 0) return result;\n        result.Add(3);\n        if (n == 1)
    return result;\n        result.Add(2);\n        if (n == 2) return result;\n        for
    (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1
    + i / 2);\n            } else {\n                result.Add(result[i - 1] + result[i
    - 2] + result[i + 1]);\n            }\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x0008c] in <feb0cbf773214a8d96aacd0a401a7c19>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <feb0cbf773214a8d96aacd0a401a7c19>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x0008c]
    in <feb0cbf773214a8d96aacd0a401a7c19>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <feb0cbf773214a8d96aacd0a401a7c19>:0 \n"
  stdout: ''
  timestamp: 1659794556
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        // Your code goes here.\n        return null;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0001e] in <5f3cbc4f56204d9383a447e499a20022>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0001e] in <5f3cbc4f56204d9383a447e499a20022>:0
    \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var res = new List<long>();\n        res.Add(1);\n        res.Add(3);\n
    \       res.Add(2);\n        for (int i = 3; i <= n; i++) {\n            if (i
    % 2 == 0) {\n                res.Add(1 + i / 2);\n            } else {\n                res.Add(res[i
    - 1] + res[i - 2] + res[i + 1]);\n            }\n        }\n        return res;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <a8826d66922d4b3a8f7d7def6ede4195>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <a8826d66922d4b3a8f7d7def6ede4195>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <a8826d66922d4b3a8f7d7def6ede4195>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <a8826d66922d4b3a8f7d7def6ede4195>:0 \n"
  stdout: ''
  timestamp: 1659794556
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> list = new List<long>();\n        list.Add(1);\n
    \       list.Add(3);\n        list.Add(2);\n        for (int i = 3; i <= n; i++)
    {\n            if (i % 2 == 0) {\n                list.Add(1 + i / 2);\n            }
    else {\n                list.Add(list[i - 1] + list[i - 2] + list[i + 1]);\n            }\n
    \       }\n        return list;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <ee9d28307d7840838ae0d4d077ee084b>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <ee9d28307d7840838ae0d4d077ee084b>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <ee9d28307d7840838ae0d4d077ee084b>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <ee9d28307d7840838ae0d4d077ee084b>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        for (int
    i = 0; i <= n; i++) {\n            result.Add(tri(i));\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmph4hdroid.cs(28,24): error CS0103: The name ''tri'' does not exist in the
    current context

    '
  timestamp: 1659794556
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        for (long i = 0;
    i <= n; i++) {\n            result.Add(Tri(i));\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpll60q6j0.cs(28,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        // Your code goes here.\n        return null;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0001e] in <5f3cbc4f56204d9383a447e499a20022>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0001e] in <5f3cbc4f56204d9383a447e499a20022>:0
    \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        // Your code goes here\n        return null;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0001e] in <98f649c9ab55400dadefcdb6b0cadf02>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0001e] in <98f649c9ab55400dadefcdb6b0cadf02>:0
    \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var ans = new List<long>();\n        ans.Add(1);\n        ans.Add(3);\n
    \       ans.Add(2);\n        for (long i = 3; i <= n; i++) {\n            if (i
    % 2 == 0) {\n                ans.Add(1 + i / 2);\n            } else {\n                ans.Add(ans[(int)i
    - 1] + ans[(int)i - 2] + ans[(int)i + 1]);\n            }\n        }\n        return
    ans;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x0005c] in <e2aa59a31a13402fae2144b997b3f376>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <e2aa59a31a13402fae2144b997b3f376>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x0005c]
    in <e2aa59a31a13402fae2144b997b3f376>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <e2aa59a31a13402fae2144b997b3f376>:0 \n"
  stdout: ''
  timestamp: 1659794556
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        for (long
    i = 0; i <= n; i++) {\n            result.Add(tri(i));\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6lov41pl.cs(28,24): error CS0103: The name ''tri'' does not exist in the
    current context

    '
  timestamp: 1659794556
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        for (int i = 0;
    i <= n; i++) {\n            result.Add(tri(i));\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbv1150gw.cs(28,24): error CS0103: The name ''tri'' does not exist in the
    current context

    '
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       if (n == 0) {\n            return result;\n        }\n        result.Add(3);\n
    \       if (n == 1) {\n            return result;\n        }\n        result.Add(2);\n
    \       if (n == 2) {\n            return result;\n        }\n        for (int
    i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1
    + i / 2);\n            } else {\n                result.Add(result[i - 1] + result[i
    - 2] + result[i + 1]);\n            }\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x0008f] in <a3da1019b9594b12a50e381c322639dd>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <a3da1019b9594b12a50e381c322639dd>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x0008f]
    in <a3da1019b9594b12a50e381c322639dd>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <a3da1019b9594b12a50e381c322639dd>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       if (n == 0) {\n            return result;\n        }\n        result.Add(3);\n
    \       if (n == 1) {\n            return result;\n        }\n        result.Add(2);\n
    \       if (n == 2) {\n            return result;\n        }\n        for (long
    i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1
    + i / 2);\n            } else {\n                result.Add(result[(int)i - 1]
    + result[(int)i - 2] + result[(int)i + 1]);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00095] in <7decf756dae540a1b4bc8e643f900502>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <7decf756dae540a1b4bc8e643f900502>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00095]
    in <7decf756dae540a1b4bc8e643f900502>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <7decf756dae540a1b4bc8e643f900502>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        long a = 1;\n        long
    b = 3;\n        long c = 2;\n        for (int i = 3; i <= n; i++) {\n            long
    d = 0;\n            if (i % 2 == 0) {\n                d = 1 + i / 2;\n            }
    else {\n                d = a + b + c;\n            }\n            result.Add(d);\n
    \           a = b;\n            b = c;\n            c = d;\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <25ef25e3be82408cb526ab783322c897>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <25ef25e3be82408cb526ab783322c897>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794410
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        for (long i = 0;
    i <= n; i++) {\n            result.Add(tri(i));\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb0to3yoq.cs(28,24): error CS0103: The name ''tri'' does not exist in the
    current context

    '
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        // Your code goes here.\n        return null;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0001e] in <5f3cbc4f56204d9383a447e499a20022>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0001e] in <5f3cbc4f56204d9383a447e499a20022>:0
    \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> res = new List<long>();\n        for (long i
    = 0; i <= n; i++) {\n            if (i == 0) {\n                res.Add(1);\n
    \           } else if (i == 1) {\n                res.Add(3);\n            } else
    if (i == 2) {\n                res.Add(2);\n            } else if (i % 2 == 0)
    {\n                res.Add(1 + i / 2);\n            } else {\n                res.Add(res[(int)i
    - 1] + res[(int)i - 2] + res[(int)i + 1]);\n            }\n        }\n        return
    res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x0008a] in <3695e0504aea4a068481961c9030fe8d>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <3695e0504aea4a068481961c9030fe8d>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x0008a]
    in <3695e0504aea4a068481961c9030fe8d>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <3695e0504aea4a068481961c9030fe8d>:0 \n"
  stdout: ''
  timestamp: 1659794556
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       if (n == 0) {\n            return result;\n        }\n        result.Add(3);\n
    \       if (n == 1) {\n            return result;\n        }\n        result.Add(2);\n
    \       if (n == 2) {\n            return result;\n        }\n        for (int
    i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1
    + i / 2);\n            } else {\n                result.Add(result[i - 1] + result[i
    - 2] + result[i + 1]);\n            }\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x0008f] in <a3da1019b9594b12a50e381c322639dd>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <a3da1019b9594b12a50e381c322639dd>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x0008f]
    in <a3da1019b9594b12a50e381c322639dd>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <a3da1019b9594b12a50e381c322639dd>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        for (int i = 0;
    i <= n; i++) {\n            result.Add(tri(i));\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbv1150gw.cs(28,24): error CS0103: The name ''tri'' does not exist in the
    current context

    '
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var res = new List<long>();\n        for (int i = 0; i
    <= n; i++) {\n            res.Add(tri(i));\n        }\n        return res;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpw8w4fmpx.cs(28,21): error CS0103: The name ''tri'' does not exist in the
    current context

    '
  timestamp: 1659794410
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        long a =
    1;\n        long b = 3;\n        long c = 2;\n        result.Add(a);\n        result.Add(b);\n
    \       result.Add(c);\n        for (int i = 3; i <= n; i++) {\n            if
    (i % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n
    \               result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00063] in <ba52fac31d524aa1aaf474c56e8fff33>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <ba52fac31d524aa1aaf474c56e8fff33>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00063]
    in <ba52fac31d524aa1aaf474c56e8fff33>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <ba52fac31d524aa1aaf474c56e8fff33>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> res = new List<long>();\n        res.Add(1);\n
    \       res.Add(3);\n        res.Add(2);\n        for (int i = 3; i <= n; i++)
    {\n            if (i % 2 == 0) {\n                res.Add(1 + i / 2);\n            }
    else {\n                res.Add(res[i - 1] + res[i - 2] + res[i + 1]);\n            }\n
    \       }\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <4aa45dc1d867442fa4d9d6abef465857>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <4aa45dc1d867442fa4d9d6abef465857>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <4aa45dc1d867442fa4d9d6abef465857>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <4aa45dc1d867442fa4d9d6abef465857>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> res = new List<long>();\n        res.Add(1);\n
    \       if (n == 0) return res;\n        res.Add(3);\n        if (n == 1) return
    res;\n        res.Add(2);\n        if (n == 2) return res;\n        for (int i
    = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                res.Add(1
    + i / 2);\n            } else {\n                res.Add(res[i - 1] + res[i -
    2] + res[i + 1]);\n            }\n        }\n        return res;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x0008c] in <ad8a42111c1a45f092e5381d6380b313>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <ad8a42111c1a45f092e5381d6380b313>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x0008c]
    in <ad8a42111c1a45f092e5381d6380b313>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <ad8a42111c1a45f092e5381d6380b313>:0 \n"
  stdout: ''
  timestamp: 1659794410
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       if (n == 0) {\n            return result;\n        }\n        result.Add(3);\n
    \       if (n == 1) {\n            return result;\n        }\n        result.Add(2);\n
    \       if (n == 2) {\n            return result;\n        }\n        for (int
    i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1
    + i / 2);\n            } else {\n                result.Add(result[i - 1] + result[i
    - 2] + result[i + 1]);\n            }\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x0008f] in <a3da1019b9594b12a50e381c322639dd>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <a3da1019b9594b12a50e381c322639dd>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x0008f]
    in <a3da1019b9594b12a50e381c322639dd>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <a3da1019b9594b12a50e381c322639dd>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            return result;\n        }\n        result.Add(1);\n        if
    (n == 1) {\n            return result;\n        }\n        result.Add(3);\n        if
    (n == 2) {\n            return result;\n        }\n        result.Add(2);\n        if
    (n == 3) {\n            return result;\n        }\n        for (long i = 4; i
    <= n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i
    / 2);\n            } else {\n                result.Add(result[(int)i - 1] + result[(int)i
    - 2] + result[(int)i - 3]);\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2d6a1a70096748dba47687dee90d28ad>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2d6a1a70096748dba47687dee90d28ad>:0
    \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of
    range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00091] in <2d6a1a"
  stdout: ''
  timestamp: 1659794556
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        for (long
    i = 1; i <= n + 1; i++) {\n            result.Add(TriRec(i));\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo865rpe9.cs(28,24): error CS0103: The name ''TriRec'' does not exist in
    the current context

    '
  timestamp: 1659794556
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> res = new List<long>();\n        res.Add(1);\n
    \       res.Add(3);\n        res.Add(2);\n        for (int i = 3; i <= n; i++)
    {\n            if (i % 2 == 0) {\n                res.Add(1 + i / 2);\n            }
    else {\n                res.Add(res[i - 1] + res[i - 2] + res[i + 1]);\n            }\n
    \       }\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <4aa45dc1d867442fa4d9d6abef465857>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <4aa45dc1d867442fa4d9d6abef465857>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <4aa45dc1d867442fa4d9d6abef465857>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <4aa45dc1d867442fa4d9d6abef465857>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            result.Add(1);\n            return result;\n        }\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x0006f] in <592e04a84aa54c468d6cddf327533ca4>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <592e04a84aa54c468d6cddf327533ca4>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x0006f]
    in <592e04a84aa54c468d6cddf327533ca4>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <592e04a84aa54c468d6cddf327533ca4>:0 \n"
  stdout: ''
  timestamp: 1659794556
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        for (int
    i = 0; i <= n; i++) {\n            result.Add(tri(i));\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmph4hdroid.cs(28,24): error CS0103: The name ''tri'' does not exist in the
    current context

    '
  timestamp: 1659794556
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var list = new List<long>();\n        for (int i = 0; i
    <= n; i++) {\n            list.Add(Tri(i));\n        }\n        return list;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwtf87scg.cs(28,22): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794556
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        // Your code goes here\n        return null;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0001e] in <98f649c9ab55400dadefcdb6b0cadf02>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0001e] in <98f649c9ab55400dadefcdb6b0cadf02>:0
    \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> list = new List<long>();\n        list.Add(1);\n
    \       list.Add(3);\n        list.Add(2);\n        for (int i = 3; i <= n; i++)
    {\n            if (i % 2 == 0) {\n                list.Add(1 + i / 2);\n            }
    else {\n                list.Add(list[i - 1] + list[i - 2] + list[i + 1]);\n            }\n
    \       }\n        return list;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <ee9d28307d7840838ae0d4d077ee084b>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <ee9d28307d7840838ae0d4d077ee084b>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <ee9d28307d7840838ae0d4d077ee084b>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <ee9d28307d7840838ae0d4d077ee084b>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> list = new List<long>();\n        list.Add(1);\n
    \       list.Add(3);\n        list.Add(2);\n        for (int i = 3; i <= n; i++)
    {\n            if (i % 2 == 0) {\n                list.Add(1 + i / 2);\n            }
    else {\n                list.Add(list[i - 1] + list[i - 2] + list[i + 1]);\n            }\n
    \       }\n        return list;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <ee9d28307d7840838ae0d4d077ee084b>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <ee9d28307d7840838ae0d4d077ee084b>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <ee9d28307d7840838ae0d4d077ee084b>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <ee9d28307d7840838ae0d4d077ee084b>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        long a = 1, b =
    3, c = 2;\n        result.Add(a);\n        result.Add(b);\n        result.Add(c);\n
    \       for (int i = 3; i <= n; i++) {\n            long d = 0;\n            if
    (i % 2 == 0) {\n                d = 1 + i / 2;\n            } else {\n                d
    = a + b + c;\n            }\n            result.Add(d);\n            a = b;\n
    \           b = c;\n            c = d;\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eccbec1f43e74f95b495783ee9802439>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eccbec1f43e74f95b495783ee9802439>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794556
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       if (n == 0) {\n            return result;\n        }\n        result.Add(3);\n
    \       if (n == 1) {\n            return result;\n        }\n        result.Add(2);\n
    \       if (n == 2) {\n            return result;\n        }\n        for (int
    i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1
    + i / 2);\n            } else {\n                result.Add(result[i - 1] + result[i
    - 2] + result[i + 1]);\n            }\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x0008f] in <a3da1019b9594b12a50e381c322639dd>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <a3da1019b9594b12a50e381c322639dd>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x0008f]
    in <a3da1019b9594b12a50e381c322639dd>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <a3da1019b9594b12a50e381c322639dd>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       if (n == 0) {\n            return result;\n        }\n        result.Add(3);\n
    \       if (n == 1) {\n            return result;\n        }\n        result.Add(2);\n
    \       if (n == 2) {\n            return result;\n        }\n        for (int
    i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1
    + i / 2);\n            } else {\n                result.Add(result[i - 1] + result[i
    - 2] + result[i + 1]);\n            }\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x0008f] in <a3da1019b9594b12a50e381c322639dd>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <a3da1019b9594b12a50e381c322639dd>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x0008f]
    in <a3da1019b9594b12a50e381c322639dd>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <a3da1019b9594b12a50e381c322639dd>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        for (int i = 0;
    i <= n; i++) {\n            result.Add(tri(i));\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbv1150gw.cs(28,24): error CS0103: The name ''tri'' does not exist in the
    current context

    '
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        for (long i = 0;
    i <= n; i++) {\n            result.Add(tri(i));\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb0to3yoq.cs(28,24): error CS0103: The name ''tri'' does not exist in the
    current context

    '
  timestamp: 1659794409
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        // Your code here\n        return new List<long>();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5dc81f262b624dac99043cb3419e1d5d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5dc81f262b624dac99043cb3419e1d5d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794556
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        result.Add(1);\n
    \       if (n == 0) return result;\n        result.Add(3);\n        if (n == 1)
    return result;\n        result.Add(2);\n        if (n == 2) return result;\n        for
    (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1
    + i / 2);\n            } else {\n                result.Add(result[i - 1] + result[i
    - 2] + result[i + 1]);\n            }\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x0008c] in <bb30ef155d474d5a97b81cf9f121955d>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <bb30ef155d474d5a97b81cf9f121955d>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x0008c]
    in <bb30ef155d474d5a97b81cf9f121955d>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <bb30ef155d474d5a97b81cf9f121955d>:0 \n"
  stdout: ''
  timestamp: 1659794556
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       if (n == 0) {\n            return result;\n        }\n        result.Add(3);\n
    \       if (n == 1) {\n            return result;\n        }\n        result.Add(2);\n
    \       if (n == 2) {\n            return result;\n        }\n        for (long
    i = 3; i <= n; i++) {\n            long next = 0;\n            if (i % 2 == 0)
    {\n                next = 1 + i / 2;\n            } else {\n                next
    = result[(int)(i - 1)] + result[(int)(i - 2)] + result[(int)(i + 1)];\n            }\n
    \           result.Add(next);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00095] in <9a27ef8d5f7b418da15ca3fe6e58ea7e>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <9a27ef8d5f7b418da15ca3fe6e58ea7e>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00095]
    in <9a27ef8d5f7b418da15ca3fe6e58ea7e>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <9a27ef8d5f7b418da15ca3fe6e58ea7e>:0 \n"
  stdout: ''
  timestamp: 1659794556
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var res = new List<long>();\n        res.Add(1);\n        res.Add(3);\n
    \       res.Add(2);\n        for (int i = 3; i <= n; i++) {\n            if (i
    % 2 == 0) {\n                res.Add(1 + i / 2);\n            } else {\n                res.Add(res[i
    - 1] + res[i - 2] + res[i + 1]);\n            }\n        }\n        return res;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <a8826d66922d4b3a8f7d7def6ede4195>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <a8826d66922d4b3a8f7d7def6ede4195>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <a8826d66922d4b3a8f7d7def6ede4195>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <a8826d66922d4b3a8f7d7def6ede4195>:0 \n"
  stdout: ''
  timestamp: 1659794556
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        // Your code goes here.\n        return null;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0001e] in <5f3cbc4f56204d9383a447e499a20022>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0001e] in <5f3cbc4f56204d9383a447e499a20022>:0
    \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        for (int i = 0;
    i <= n; i++) {\n            result.Add(Tri(i));\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjd08juvo.cs(28,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        for (long i = 0;
    i <= n; i++) {\n            result.Add(Tri(i));\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpll60q6j0.cs(28,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        for (int
    i = 0; i <= n; i++) {\n            result.Add(tri(i));\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmph4hdroid.cs(28,24): error CS0103: The name ''tri'' does not exist in the
    current context

    '
  timestamp: 1659794556
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        for (long i = 0;
    i <= n; i++) {\n            result.Add(Tri(i));\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpll60q6j0.cs(28,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        for (int
    i = 0; i <= n; i++) {\n            result.Add(TriRec(i));\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6pfugnpl.cs(28,24): error CS0103: The name ''TriRec'' does not exist in
    the current context

    '
  timestamp: 1659794410
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       if (n > 0) {\n            result.Add(3);\n            if (n > 1) {\n                result.Add(2);\n
    \               for (int i = 3; i <= n; i++) {\n                    if (i % 2
    == 0) {\n                        result.Add(1 + i / 2);\n                    }
    else {\n                        result.Add(result[i - 1] + result[i - 2] + result[i
    + 1]);\n                    }\n                }\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x0006c] in <fd3135b9423442a7bdd9e1975df39981>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <fd3135b9423442a7bdd9e1975df39981>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x0006c]
    in <fd3135b9423442a7bdd9e1975df39981>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <fd3135b9423442a7bdd9e1975df39981>:0 \n"
  stdout: ''
  timestamp: 1659794556
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> res = new List<long>();\n        if (n == 0)
    {\n            res.Add(1);\n            return res;\n        }\n        if (n
    == 1) {\n            res.Add(1);\n            res.Add(3);\n            return
    res;\n        }\n        res.Add(1);\n        res.Add(3);\n        res.Add(2);\n
    \       for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                res.Add(1
    + i / 2);\n            } else {\n                res.Add(res[i - 1] + res[i -
    2] + res[i + 1]);\n            }\n        }\n        return res;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x0009a] in <dd7a2052c91942269033bd1340be9698>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <dd7a2052c91942269033bd1340be9698>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x0009a]
    in <dd7a2052c91942269033bd1340be9698>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <dd7a2052c91942269033bd1340be9698>:0 \n"
  stdout: ''
  timestamp: 1659794556
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        for (int i = 0;
    i <= n; i++) {\n            result.Add(TriRec(i));\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwazk170j.cs(28,24): error CS0103: The name ''TriRec'' does not exist in
    the current context

    '
  timestamp: 1659794556
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> res = new List<long>();\n        res.Add(1);\n
    \       res.Add(3);\n        res.Add(2);\n        for (int i = 3; i <= n; i++)
    {\n            if (i % 2 == 0) {\n                res.Add(1 + i / 2);\n            }
    else {\n                res.Add(res[i - 1] + res[i - 2] + res[i + 1]);\n            }\n
    \       }\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <4aa45dc1d867442fa4d9d6abef465857>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <4aa45dc1d867442fa4d9d6abef465857>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <4aa45dc1d867442fa4d9d6abef465857>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <4aa45dc1d867442fa4d9d6abef465857>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        result.Add(8);\n        for
    (int i = 4; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1
    + i / 2);\n            } else {\n                result.Add(result[i - 1] + result[i
    - 2] + result[i + 1]);\n            }\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <edf00a5fbfc0427bab174cb053406aeb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <edf00a5fbfc0427bab174cb053406aeb>:0
    \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of
    range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x0005f] in <edf00a"
  stdout: ''
  timestamp: 1659794556
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        for (long
    i = 0; i <= n; i++) {\n            result.Add(tri(i));\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6lov41pl.cs(28,24): error CS0103: The name ''tri'' does not exist in the
    current context

    '
  timestamp: 1659794556
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        for (long
    i = 0; i <= n; i++) {\n            result.Add(tri(i));\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6lov41pl.cs(28,24): error CS0103: The name ''tri'' does not exist in the
    current context

    '
  timestamp: 1659794556
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        long a =
    1;\n        long b = 3;\n        long c = 2;\n        result.Add(a);\n        result.Add(b);\n
    \       result.Add(c);\n        for (int i = 3; i <= n; i++) {\n            if
    (i % 2 == 0) {\n                a = 1 + i / 2;\n            } else {\n                a
    = b + c + result[i + 1];\n            }\n            result.Add(a);\n            b
    = c;\n            c = a;\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00048] in <e66dc9bfc5624a568f55abb8838ef07c>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <e66dc9bfc5624a568f55abb8838ef07c>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00048]
    in <e66dc9bfc5624a568f55abb8838ef07c>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <e66dc9bfc5624a568f55abb8838ef07c>:0 \n"
  stdout: ''
  timestamp: 1659794556
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       if (n == 0) {\n            return result;\n        }\n        result.Add(3);\n
    \       if (n == 1) {\n            return result;\n        }\n        result.Add(2);\n
    \       if (n == 2) {\n            return result;\n        }\n        for (int
    i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1
    + i / 2);\n            } else {\n                result.Add(result[i - 1] + result[i
    - 2] + result[i + 1]);\n            }\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x0008f] in <a3da1019b9594b12a50e381c322639dd>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <a3da1019b9594b12a50e381c322639dd>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x0008f]
    in <a3da1019b9594b12a50e381c322639dd>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <a3da1019b9594b12a50e381c322639dd>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> list = new List<long>();\n        list.Add(1);\n
    \       list.Add(3);\n        list.Add(2);\n        for (int i = 3; i <= n; i++)
    {\n            if (i % 2 == 0) {\n                list.Add(1 + i / 2);\n            }
    else {\n                list.Add(list[i - 1] + list[i - 2] + list[i + 1]);\n            }\n
    \       }\n        return list;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <ee9d28307d7840838ae0d4d077ee084b>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <ee9d28307d7840838ae0d4d077ee084b>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <ee9d28307d7840838ae0d4d077ee084b>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <ee9d28307d7840838ae0d4d077ee084b>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (long i = 3; i <=
    n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[(int)i - 1] + result[(int)i
    - 2] + result[(int)i + 1]);\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x0005c] in <dfb4feb452f0440194a0304ffdfea0ec>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <dfb4feb452f0440194a0304ffdfea0ec>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x0005c]
    in <dfb4feb452f0440194a0304ffdfea0ec>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <dfb4feb452f0440194a0304ffdfea0ec>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        for (int i = 0;
    i <= n; i++) {\n            result.Add(Tri(i));\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjd08juvo.cs(28,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        // Your code goes here\n        return new List<long>();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8b1d3965b64948de8114d65be06f43a8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8b1d3965b64948de8114d65be06f43a8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794410
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (long i = 3; i <=
    n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[(int)i - 1] + result[(int)i
    - 2] + result[(int)i + 1]);\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x0005c] in <7b22c08098674620a3bec71960c4799b>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <7b22c08098674620a3bec71960c4799b>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x0005c]
    in <7b22c08098674620a3bec71960c4799b>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <7b22c08098674620a3bec71960c4799b>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> res = new List<long>();\n        res.Add(1);\n
    \       res.Add(3);\n        res.Add(2);\n        for (int i = 3; i <= n; i++)
    {\n            if (i % 2 == 0) {\n                res.Add(1 + i / 2);\n            }
    else {\n                res.Add(res[i - 1] + res[i - 2] + res[i + 1]);\n            }\n
    \       }\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <4aa45dc1d867442fa4d9d6abef465857>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <4aa45dc1d867442fa4d9d6abef465857>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <4aa45dc1d867442fa4d9d6abef465857>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <4aa45dc1d867442fa4d9d6abef465857>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            result.Add(result[i - 1] + result[i - 2] + result[i - 3]);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f2ff63317ca94c5b8291aedc98688305>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f2ff63317ca94c5b8291aedc98688305>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794410
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        long a = 1, b =
    3, c = 2;\n        result.Add(a);\n        result.Add(b);\n        result.Add(c);\n
    \       for (int i = 3; i <= n; i++) {\n            long d = 0;\n            if
    (i % 2 == 0) {\n                d = 1 + i / 2;\n            } else {\n                d
    = a + b + c;\n            }\n            result.Add(d);\n            a = b;\n
    \           b = c;\n            c = d;\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eccbec1f43e74f95b495783ee9802439>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eccbec1f43e74f95b495783ee9802439>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794556
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        long a =
    1;\n        long b = 3;\n        long c = 2;\n        long d = 0;\n        result.Add(a);\n
    \       result.Add(b);\n        result.Add(c);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                d = 1 + i / 2;\n            }
    else {\n                d = a + b + c;\n            }\n            a = b;\n            b
    = c;\n            c = d;\n            result.Add(d);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d2859861b8ba4c058d2e813ec1cf0279>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d2859861b8ba4c058d2e813ec1cf0279>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> res = new List<long>();\n        res.Add(1);\n
    \       res.Add(3);\n        res.Add(2);\n        for (int i = 3; i <= n; i++)
    {\n            if (i % 2 == 0) {\n                res.Add(1 + i / 2);\n            }
    else {\n                res.Add(res[i - 1] + res[i - 2] + res[i + 1]);\n            }\n
    \       }\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <4aa45dc1d867442fa4d9d6abef465857>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <4aa45dc1d867442fa4d9d6abef465857>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <4aa45dc1d867442fa4d9d6abef465857>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <4aa45dc1d867442fa4d9d6abef465857>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> res = new List<long>();\n        if (n == 0)
    {\n            res.Add(1);\n            return res;\n        }\n        if (n
    == 1) {\n            res.Add(1);\n            res.Add(3);\n            return
    res;\n        }\n        if (n == 2) {\n            res.Add(1);\n            res.Add(3);\n
    \           res.Add(2);\n            return res;\n        }\n        res.Add(1);\n
    \       res.Add(3);\n        res.Add(2);\n        for (int i = 3; i <= n; i++)
    {\n            if (i % 2 == 0) {\n                res.Add(1 + i / 2);\n            }
    else {\n                res.Add(res[i - 1] + res[i - 2] + res[i + 1]);\n            }\n
    \       }\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x000c8] in <13f30870230646a1ba282543be650e39>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <13f30870230646a1ba282543be650e39>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x000c8]
    in <13f30870230646a1ba282543be650e39>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <13f30870230646a1ba282543be650e39>:0 \n"
  stdout: ''
  timestamp: 1659794556
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var res = new List<long>();\n        res.Add(1);\n        res.Add(3);\n
    \       res.Add(2);\n        for (int i = 3; i <= n; i++) {\n            if (i
    % 2 == 0) {\n                res.Add(1 + i / 2);\n            } else {\n                res.Add(res[i
    - 1] + res[i - 2] + res[i + 1]);\n            }\n        }\n        return res;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <a8826d66922d4b3a8f7d7def6ede4195>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <a8826d66922d4b3a8f7d7def6ede4195>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <a8826d66922d4b3a8f7d7def6ede4195>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <a8826d66922d4b3a8f7d7def6ede4195>:0 \n"
  stdout: ''
  timestamp: 1659794556
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var res = new List<long>();\n        res.Add(1);\n        res.Add(3);\n
    \       res.Add(2);\n        for (int i = 3; i <= n; i++) {\n            if (i
    % 2 == 0) {\n                res.Add(1 + i / 2);\n            } else {\n                res.Add(res[i
    - 1] + res[i - 2] + res[i + 1]);\n            }\n        }\n        return res;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <a8826d66922d4b3a8f7d7def6ede4195>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <a8826d66922d4b3a8f7d7def6ede4195>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <a8826d66922d4b3a8f7d7def6ede4195>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <a8826d66922d4b3a8f7d7def6ede4195>:0 \n"
  stdout: ''
  timestamp: 1659794556
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var res = new List<long>();\n        for (long i = 0; i
    <= n; i++) {\n            res.Add(Tri(i));\n        }\n        return res;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmu2tmz1b.cs(28,21): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794556
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        for (long i = 0;
    i <= n; i++) {\n            result.Add(tri(i));\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb0to3yoq.cs(28,24): error CS0103: The name ''tri'' does not exist in the
    current context

    '
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       if (n == 0) {\n            return result;\n        }\n        result.Add(3);\n
    \       if (n == 1) {\n            return result;\n        }\n        result.Add(2);\n
    \       if (n == 2) {\n            return result;\n        }\n        for (long
    i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1
    + i / 2);\n            } else {\n                result.Add(result[(int)i - 1]
    + result[(int)i - 2] + result[(int)i + 1]);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00095] in <7decf756dae540a1b4bc8e643f900502>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <7decf756dae540a1b4bc8e643f900502>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00095]
    in <7decf756dae540a1b4bc8e643f900502>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <7decf756dae540a1b4bc8e643f900502>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        for (long i = 0;
    i <= n; i++) {\n            result.Add(Tri(i));\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpll60q6j0.cs(28,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> res = new List<long>();\n        res.Add(1);\n
    \       res.Add(3);\n        res.Add(2);\n        for (int i = 3; i <= n; i++)
    {\n            if (i % 2 == 0) {\n                res.Add(1 + i / 2);\n            }
    else {\n                res.Add(res[i - 1] + res[i - 2] + res[i + 1]);\n            }\n
    \       }\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <4aa45dc1d867442fa4d9d6abef465857>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <4aa45dc1d867442fa4d9d6abef465857>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <4aa45dc1d867442fa4d9d6abef465857>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <4aa45dc1d867442fa4d9d6abef465857>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> res = new List<long>();\n        res.Add(1);\n
    \       res.Add(3);\n        res.Add(2);\n        for (int i = 3; i <= n; i++)
    {\n            if (i % 2 == 0) {\n                res.Add(1 + i / 2);\n            }
    else {\n                res.Add(res[i - 1] + res[i - 2] + res[i + 1]);\n            }\n
    \       }\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <4aa45dc1d867442fa4d9d6abef465857>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <4aa45dc1d867442fa4d9d6abef465857>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <4aa45dc1d867442fa4d9d6abef465857>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <4aa45dc1d867442fa4d9d6abef465857>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        for (int i = 0;
    i <= n; i++) {\n            result.Add(Tri(i));\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjd08juvo.cs(28,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794409
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        long a =
    1;\n        long b = 3;\n        long c = 2;\n        long d = 0;\n        result.Add(a);\n
    \       result.Add(b);\n        result.Add(c);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                d = 1 + i / 2;\n            }
    else {\n                d = a + b + c;\n            }\n            a = b;\n            b
    = c;\n            c = d;\n            result.Add(d);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d2859861b8ba4c058d2e813ec1cf0279>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d2859861b8ba4c058d2e813ec1cf0279>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        for (long i = 0;
    i <= n; i++) {\n            result.Add(Tri(i));\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpll60q6j0.cs(28,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        for (long i = 0;
    i <= n; i++) {\n            result.Add(Tri(i));\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpll60q6j0.cs(28,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        for (int
    i = 0; i <= n; i++) {\n            result.Add(tri(i));\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmph4hdroid.cs(28,24): error CS0103: The name ''tri'' does not exist in the
    current context

    '
  timestamp: 1659794556
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> res = new List<long>();\n        res.Add(1);\n
    \       res.Add(3);\n        res.Add(2);\n        for (int i = 3; i <= n; i++)
    {\n            if (i % 2 == 0) {\n                res.Add(1 + i / 2);\n            }
    else {\n                res.Add(res[i - 1] + res[i - 2] + res[i + 1]);\n            }\n
    \       }\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <4aa45dc1d867442fa4d9d6abef465857>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <4aa45dc1d867442fa4d9d6abef465857>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <4aa45dc1d867442fa4d9d6abef465857>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <4aa45dc1d867442fa4d9d6abef465857>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        long a = 1;\n        long
    b = 3;\n        long c = 2;\n        result.Add(a);\n        result.Add(b);\n
    \       result.Add(c);\n        for (int i = 3; i <= n; i++) {\n            if
    (i % 2 == 0) {\n                var d = 1 + i / 2;\n                result.Add(d);\n
    \           } else {\n                var d = a + b + c;\n                result.Add(d);\n
    \               a = b;\n                b = c;\n                c = d;\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0db711b022e04a4789e2000028b83d7e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0db711b022e04a4789e2000028b83d7e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794557
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0001e] in <04b59fe06f184e21bd0c7157838a0aff>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0001e] in <04b59fe06f184e21bd0c7157838a0aff>:0
    \n"
  stdout: ''
  timestamp: 1659794410
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        if (n ==
    0) {\n            return result;\n        }\n        result.Add(1);\n        if
    (n == 1) {\n            return result;\n        }\n        result.Add(3);\n        if
    (n == 2) {\n            return result;\n        }\n        result.Add(2);\n        if
    (n == 3) {\n            return result;\n        }\n        for (int i = 4; i <=
    n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i - 4]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <090d89665a6944cbbdea06676ba45beb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <090d89665a6944cbbdea06676ba45beb>:0
    \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of
    range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x0008d] in <090d89"
  stdout: ''
  timestamp: 1659794411
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        for (int
    i = 0; i <= n; i++) {\n            result.Add(tri(i));\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmph4hdroid.cs(28,24): error CS0103: The name ''tri'' does not exist in the
    current context

    '
  timestamp: 1659794556
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        for (int
    i = 0; i <= n; i++) {\n            result.Add(tri(i));\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmph4hdroid.cs(28,24): error CS0103: The name ''tri'' does not exist in the
    current context

    '
  timestamp: 1659794556
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        for (int i = 2; i <= n; i++) {\n            if
    (i % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n
    \               result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x0004d] in <964ccac04ca342aea857c2a53894e6d5>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <964ccac04ca342aea857c2a53894e6d5>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x0004d]
    in <964ccac04ca342aea857c2a53894e6d5>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <964ccac04ca342aea857c2a53894e6d5>:0 \n"
  stdout: ''
  timestamp: 1659794557
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        for (int i = 0;
    i <= n; i++) {\n            result.Add(tri(i));\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbv1150gw.cs(28,24): error CS0103: The name ''tri'' does not exist in the
    current context

    '
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        for (long i = 0;
    i <= n; i++) {\n            result.Add(TriRec(i));\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpedlad0wz.cs(28,24): error CS0103: The name ''TriRec'' does not exist in
    the current context

    '
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        for (long i = 0;
    i <= n; i++) {\n            result.Add(Tri(i));\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpll60q6j0.cs(28,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var res = new List<long>();\n        res.Add(1);\n        res.Add(3);\n
    \       res.Add(2);\n        for (int i = 3; i <= n; i++) {\n            if (i
    % 2 == 0) {\n                res.Add(1 + i / 2);\n            } else {\n                res.Add(res[i
    - 1] + res[i - 2] + res[i + 1]);\n            }\n        }\n        return res;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <a8826d66922d4b3a8f7d7def6ede4195>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <a8826d66922d4b3a8f7d7def6ede4195>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <a8826d66922d4b3a8f7d7def6ede4195>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <a8826d66922d4b3a8f7d7def6ede4195>:0 \n"
  stdout: ''
  timestamp: 1659794556
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        for (long i = 0;
    i <= n; i++) {\n            result.Add(Tri(i));\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpll60q6j0.cs(28,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        for (int
    i = 0; i <= n; i++) {\n            result.Add(tri(i));\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmph4hdroid.cs(28,24): error CS0103: The name ''tri'' does not exist in the
    current context

    '
  timestamp: 1659794556
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> list = new List<long>();\n        list.Add(1);\n
    \       list.Add(3);\n        list.Add(2);\n        for (int i = 3; i <= n; i++)
    {\n            if (i % 2 == 0) {\n                list.Add(1 + i / 2);\n            }
    else {\n                list.Add(list[i - 1] + list[i - 2] + list[i + 1]);\n            }\n
    \       }\n        return list;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n
    \   Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,
    (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,
    (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n
    \   Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n
    \   Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <ee9d28307d7840838ae0d4d077ee084b>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <ee9d28307d7840838ae0d4d077ee084b>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <ee9d28307d7840838ae0d4d077ee084b>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <ee9d28307d7840838ae0d4d077ee084b>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        long a =
    1;\n        long b = 3;\n        long c = 2;\n        long d = 0;\n        result.Add(a);\n
    \       result.Add(b);\n        result.Add(c);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                d = 1 + i / 2;\n            }
    else {\n                d = a + b + c;\n            }\n            a = b;\n            b
    = c;\n            c = d;\n            result.Add(d);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d2859861b8ba4c058d2e813ec1cf0279>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d2859861b8ba4c058d2e813ec1cf0279>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (long i = 3; i <=
    n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[(int)i - 1] + result[(int)i
    - 2] + result[(int)i + 1]);\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x0005c] in <dfb4feb452f0440194a0304ffdfea0ec>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <dfb4feb452f0440194a0304ffdfea0ec>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x0005c]
    in <dfb4feb452f0440194a0304ffdfea0ec>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <dfb4feb452f0440194a0304ffdfea0ec>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (long i = 3; i <=
    n; i++) {\n            long x = result[(int)i - 1] + result[(int)i - 2] + result[(int)i
    - 3];\n            result.Add(x);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <aa4cc8603812425ca900af3cf3e68a0f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <aa4cc8603812425ca900af3cf3e68a0f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794557
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        for (int i = 0;
    i <= n; i++) {\n            result.Add(tri(i));\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbv1150gw.cs(28,24): error CS0103: The name ''tri'' does not exist in the
    current context

    '
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by
    mathematicians in \n    // the last couple centuries. However, what people don't
    know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n
    \   // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n
    - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)
    = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n
    \   // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,
    you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci
    sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>
    Tri(long n) {\n        var result = new List<long>();\n        result.Add(1);\n
    \       result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n;
    i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]
    + result[i + 1]);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n
    \   Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,
    (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n
    \   Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n
    \   Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n
    \   Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,
    (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,
    (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new
    List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new
    long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64
    n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be
    non-negative and less than the size of the collection.\nParameter name: index\n
    \ at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri (System.Int64 n) [0x00056]
    in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n"
  stdout: ''
  timestamp: 1659794409
