name: HumanEval_17_parse_music
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Input to this function is a string representing musical notes\
  \ in a special ASCII format.\n    // Your task is to parse this string and return\
  \ list of integers corresponding to how many beats does each\n    // not last.\n\
  \    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
  \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    //\
  \ >>> ParseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (new List<long>(new\
  \ long[]{(long)4L, (long)2L, (long)1L, (long)2L, (long)2L, (long)1L, (long)1L, (long)1L,\
  \ (long)1L, (long)4L, (long)4L}))\n    public static List<long> ParseMusic(string\
  \ music_string) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ParseMusic((\"\
  \")).Equals((new List<long>())));\n    Debug.Assert(ParseMusic((\"o o o o\")).Equals((new\
  \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(ParseMusic((\"\
  .| .| .| .|\")).Equals((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
  \ (long)1L}))));\n    Debug.Assert(ParseMusic((\"o| o| .| .| o o o o\")).Equals((new\
  \ List<long>(new long[]{(long)2L, (long)2L, (long)1L, (long)1L, (long)4L, (long)4L,\
  \ (long)4L, (long)4L}))));\n    Debug.Assert(ParseMusic((\"o| .| o| .| o o| o o|\"\
  )).Equals((new List<long>(new long[]{(long)2L, (long)1L, (long)2L, (long)1L, (long)4L,\
  \ (long)2L, (long)4L, (long)2L}))));\n    }\n\n}\n"
completions: ["        List<long> result = new List<long>();\n        int i = 0;\n\
    \        while (i < music_string.Length) {\n            if (music_string[i] ==\
    \ 'o') {\n                if (i + 1 < music_string.Length && music_string[i +\
    \ 1] == '|') {\n                    result.Add(2);\n                    i += 2;\n\
    \                } else {\n                    result.Add(4);\n              \
    \      i += 1;\n                }\n            } else {\n                result.Add(1);\n\
    \                i += 2;\n            }\n        }\n        return result;", " \
    \       var result = new List<long>();\n        var beats = new List<long>();\n\
    \        var beat = 0L;\n        var notes = music_string.Split(new char[] { '\
    \ ' });\n        foreach (var note in notes) {\n            if (note == \"o\"\
    ) {\n                beat += 4;\n            } else if (note == \"o|\") {\n  \
    \              beat += 2;\n            } else if (note == \".|\") {\n        \
    \        beat += 1;\n            }\n            beats.Add(beat);\n        }\n\
    \        var last_beat = beats[beats.Count - 1];\n        for (var i = 0; i <\
    \ beats.Count; i++) {\n            var current_beat = beats[i];\n            if\
    \ (i == 0) {\n                result.Add(current_beat);\n            } else {\n\
    \                var previous_beat = beats[i - 1];\n                result.Add(current_beat\
    \ - previous_beat);\n            }\n        }\n        return result;", "    \
    \    List<long> result = new List<long>();\n        int i = 0;\n        while\
    \ (i < music_string.Length) {\n            if (music_string[i] == 'o') {\n   \
    \             if (i + 1 < music_string.Length && music_string[i + 1] == '|') {\n\
    \                    result.Add(2);\n                    i += 2;\n           \
    \     } else {\n                    result.Add(4);\n                    i += 1;\n\
    \                }\n            } else {\n                result.Add(1);\n   \
    \             i += 2;\n            }\n        }\n        return result;", "  \
    \      List<long> result = new List<long>();\n        foreach (var c in music_string)\
    \ {\n            if (c == 'o') {\n                result.Add(4);\n           \
    \ } else if (c == '|') {\n                result[result.Count - 1] /= 2;\n   \
    \         }\n        }\n        return result;", "        var result = new List<long>();\n\
    \        var current_note = \"\";\n        foreach (var c in music_string) {\n\
    \            if (c == ' ') {\n                if (current_note == \"o\") {\n \
    \                   result.Add(4);\n                } else if (current_note ==\
    \ \"o|\") {\n                    result.Add(2);\n                } else if (current_note\
    \ == \".|\") {\n                    result.Add(1);\n                }\n      \
    \          current_note = \"\";\n            } else {\n                current_note\
    \ += c;\n            }\n        }\n        if (current_note == \"o\") {\n    \
    \        result.Add(4);\n        } else if (current_note == \"o|\") {\n      \
    \      result.Add(2);\n        } else if (current_note == \".|\") {\n        \
    \    result.Add(1);\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        // Your code goes here\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (var c in music_string)\
    \ {\n            if (c == 'o') {\n                result.Add(4);\n           \
    \ } else if (c == '|') {\n                result[result.Count - 1] /= 2;\n   \
    \         }\n        }\n        return result;", "        var result = new List<long>();\n\
    \        var beats = new List<long>();\n        var beat = 0L;\n        foreach\
    \ (var c in music_string) {\n            if (c == 'o') {\n                beat\
    \ += 4;\n            } else if (c == '|') {\n                beats.Add(beat);\n\
    \                beat = 0;\n            } else if (c == '.') {\n             \
    \   beat += 1;\n            }\n        }\n        beats.Add(beat);\n        return\
    \ beats;", "        List<long> result = new List<long>();\n        foreach (var\
    \ note in music_string.Split(' ')) {\n            switch (note) {\n          \
    \      case \"o\":\n                    result.Add(4);\n                    break;\n\
    \                case \"o|\":\n                    result.Add(2);\n          \
    \          break;\n                case \".|\":\n                    result.Add(1);\n\
    \                    break;\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        var notes = music_string.Split('\
    \ ');\n        foreach (var note in notes) {\n            if (note == \"o\") {\n\
    \                result.Add(4);\n            } else if (note == \"o|\") {\n  \
    \              result.Add(2);\n            } else if (note == \".|\") {\n    \
    \            result.Add(1);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (var note in music_string.Split('\
    \ ')) {\n            if (note == \"o\") {\n                result.Add(4);\n  \
    \          } else if (note == \"o|\") {\n                result.Add(2);\n    \
    \        } else if (note == \".|\") {\n                result.Add(1);\n      \
    \      }\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        // TODO: Implement this function\n        return result;",
  "        // Your code goes here\n        return new List<long>();", "        List<long>\
    \ result = new List<long>();\n        long beats = 0;\n        for (int i = 0;\
    \ i < music_string.Length; i++) {\n            if (music_string[i] == 'o') {\n\
    \                if (i + 1 < music_string.Length && music_string[i + 1] == '|')\
    \ {\n                    beats = 2;\n                    i++;\n              \
    \  }\n                else {\n                    beats = 4;\n               \
    \ }\n            }\n            else if (music_string[i] == '.') {\n         \
    \       beats = 1;\n            }\n            else if (music_string[i] == '|')\
    \ {\n                continue;\n            }\n            result.Add(beats);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long beats = 0;\n        for (int i = 0; i < music_string.Length; i++)\
    \ {\n            if (music_string[i] == 'o') {\n                beats = 4L;\n\
    \            }\n            else if (music_string[i] == '|') {\n             \
    \   beats = beats / 2L;\n            }\n            else if (music_string[i] ==\
    \ '.') {\n                result.Add(beats);\n                beats = 0L;\n  \
    \          }\n        }\n        return result;", "        List<long> result =\
    \ new List<long>();\n        int i = 0;\n        while (i < music_string.Length)\
    \ {\n            if (music_string[i] == 'o') {\n                if (i + 1 < music_string.Length\
    \ && music_string[i + 1] == '|') {\n                    result.Add(2);\n     \
    \               i += 2;\n                } else {\n                    result.Add(4);\n\
    \                    i += 1;\n                }\n            } else {\n      \
    \          result.Add(1);\n                i += 2;\n            }\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     for (int i = 0; i < music_string.Length; i++) {\n            if (music_string[i]\
    \ == 'o') {\n                result.Add(4);\n            }\n            else if\
    \ (music_string[i] == '.') {\n                result.Add(1);\n            }\n\
    \            else if (music_string[i] == '|') {\n                result.Add(2);\n\
    \            }\n        }\n        return result;", "        var result = new\
    \ List<long>();\n        var beats = new Dictionary<char, long>();\n        beats['o']\
    \ = 4;\n        beats['|'] = 2;\n        beats['.'] = 1;\n        var current_beat\
    \ = 0L;\n        foreach (var c in music_string) {\n            if (beats.ContainsKey(c))\
    \ {\n                current_beat += beats[c];\n            } else {\n       \
    \         result.Add(current_beat);\n                current_beat = 0;\n     \
    \       }\n        }\n        result.Add(current_beat);\n        return result;",
  "        List<long> result = new List<long>();\n        // TODO: Implement your\
    \ solution here\n        return result;", "        List<long> result = new List<long>();\n\
    \        int i = 0;\n        while (i < music_string.Length) {\n            if\
    \ (music_string[i] == 'o') {\n                if (i + 1 < music_string.Length\
    \ && music_string[i + 1] == '|') {\n                    result.Add(2);\n     \
    \               i += 2;\n                } else {\n                    result.Add(4);\n\
    \                    i += 1;\n                }\n            } else {\n      \
    \          result.Add(1);\n                i += 2;\n            }\n        }\n\
    \        return result;"]
stop_tokens:
- "\n    }\n"
