language: cs
name: HumanEval_48_is_palindrome
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int n = text.Length;\n        for (int i = 0; i < n / 2; i++) {\n        \
    \    if (text[i] != text[n - i - 1]) {\n                return false;\n      \
    \      }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n\
    \    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"\
    xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int len = text.Length;\n        for (int i = 0; i < len / 2; i++) {\n    \
    \        if (text[i] != text[len - i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n \
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int n = text.Length;\n        for (int i = 0; i < n / 2; i++) {\n        \
    \    if (text[i] != text[n - i - 1]) {\n                return false;\n      \
    \      }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n\
    \    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"\
    xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int len = text.Length;\n        for (int i = 0; i < len / 2; i++) {\n    \
    \        if (text[i] != text[len - i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n \
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int length = text.Length;\n        for (int i = 0; i < length / 2; i++) {\n\
    \            if (text[i] != text[length - i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n \
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int n = text.Length;\n        for (int i = 0; i < n / 2; i++) {\n        \
    \    if (text[i] != text[n - i - 1]) {\n                return false;\n      \
    \      }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n\
    \    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"\
    xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int len = text.Length;\n        for (int i = 0; i < len / 2; i++) {\n    \
    \        if (text[i] != text[len - i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n \
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int len = text.Length;\n        for (int i = 0; i < len / 2; i++) {\n    \
    \        if (text[i] != text[len - i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n \
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int n = text.Length;\n        for (int i = 0; i < n / 2; i++) {\n        \
    \    if (text[i] != text[n - i - 1]) {\n                return false;\n      \
    \      }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n\
    \    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"\
    xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int len = text.Length;\n        for (int i = 0; i < len / 2; i++) {\n    \
    \        if (text[i] != text[len - i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n \
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int n = text.Length;\n        for (int i = 0; i < n / 2; i++) {\n        \
    \    if (text[i] != text[n - i - 1]) {\n                return false;\n      \
    \      }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n\
    \    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"\
    xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int n = text.Length;\n        for (int i = 0; i < n / 2; i++) {\n        \
    \    if (text[i] != text[n - i - 1]) {\n                return false;\n      \
    \      }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n\
    \    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"\
    xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int length = text.Length;\n        for (int i = 0; i < length / 2; i++) {\n\
    \            if (text[i] != text[length - i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n \
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   if (text.Length == 0) {\n            return true;\n        }\n        int\
    \ i = 0;\n        int j = text.Length - 1;\n        while (i < j) {\n        \
    \    if (text[i] != text[j]) {\n                return false;\n            }\n\
    \            i += 1;\n            j -= 1;\n        }\n        return true;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794600
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int len = text.Length;\n        for (int i = 0; i < len / 2; i++) {\n    \
    \        if (text[i] != text[len - i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n \
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int i = 0;\n        int j = text.Length - 1;\n        while (i < j) {\n  \
    \          if (text[i] != text[j]) {\n                return false;\n        \
    \    }\n            i += 1;\n            j -= 1;\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int n = text.Length;\n        for (int i = 0; i < n / 2; i++) {\n        \
    \    if (text[i] != text[n - i - 1]) {\n                return false;\n      \
    \      }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n\
    \    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"\
    xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int n = text.Length;\n        for (int i = 0; i < n / 2; i++) {\n        \
    \    if (text[i] != text[n - i - 1]) {\n                return false;\n      \
    \      }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n\
    \    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"\
    xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int i = 0;\n        int j = text.Length - 1;\n        while (i < j) {\n  \
    \          if (text[i] != text[j]) {\n                return false;\n        \
    \    }\n            i += 1;\n            j -= 1;\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int len = text.Length;\n        for (int i = 0; i < len / 2; i++) {\n    \
    \        if (text[i] != text[len - i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n \
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int len = text.Length;\n        for (int i = 0; i < len / 2; i++) {\n    \
    \        if (text[i] != text[len - i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n \
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int len = text.Length;\n        for (int i = 0; i < len / 2; i++) {\n    \
    \        if (text[i] != text[len - i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n \
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int len = text.Length;\n        for (int i = 0; i < len / 2; i++) {\n    \
    \        if (text[i] != text[len - i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n \
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int n = text.Length;\n        for (int i = 0; i < n / 2; i++) {\n        \
    \    if (text[i] != text[n - i - 1]) {\n                return false;\n      \
    \      }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n\
    \    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"\
    xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int n = text.Length;\n        for (int i = 0; i < n / 2; i++) {\n        \
    \    if (text[i] != text[n - i - 1]) {\n                return false;\n      \
    \      }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n\
    \    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"\
    xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int length = text.Length;\n        for (int i = 0; i < length / 2; i++) {\n\
    \            if (text[i] != text[length - i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n \
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int length = text.Length;\n        for (int i = 0; i < length / 2; i++) {\n\
    \            if (text[i] != text[length - i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n \
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   if (text.Length == 0) {\n            return true;\n        }\n        int\
    \ i = 0;\n        int j = text.Length - 1;\n        while (i < j) {\n        \
    \    if (text[i] != text[j]) {\n                return false;\n            }\n\
    \            i += 1;\n            j -= 1;\n        }\n        return true;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794600
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int i = 0;\n        int j = text.Length - 1;\n        while (i < j) {\n  \
    \          if (text[i] != text[j]) {\n                return false;\n        \
    \    }\n            i++;\n            j--;\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int length = text.Length;\n        for (int i = 0; i < length / 2; i++) {\n\
    \            if (text[i] != text[length - i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n \
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int len = text.Length;\n        for (int i = 0; i < len / 2; i++) {\n    \
    \        if (text[i] != text[len - i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n \
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int length = text.Length;\n        for (int i = 0; i < length / 2; i++) {\n\
    \            if (text[i] != text[length - i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n \
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int length = text.Length;\n        for (int i = 0; i < length / 2; i++) {\n\
    \            if (text[i] != text[length - i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n \
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int len = text.Length;\n        for (int i = 0; i < len / 2; i++) {\n    \
    \        if (text[i] != text[len - i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n \
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int n = text.Length;\n        for (int i = 0; i < n / 2; i++) {\n        \
    \    if (text[i] != text[n - i - 1]) {\n                return false;\n      \
    \      }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n\
    \    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"\
    xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int i = 0;\n        int j = text.Length - 1;\n        while (i < j) {\n  \
    \          if (text[i] != text[j]) {\n                return false;\n        \
    \    }\n            i++;\n            j--;\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int n = text.Length;\n        for (int i = 0; i < n / 2; i++) {\n        \
    \    if (text[i] != text[n - i - 1]) {\n                return false;\n      \
    \      }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n\
    \    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"\
    xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int len = text.Length;\n        for (int i = 0; i < len / 2; i++) {\n    \
    \        if (text[i] != text[len - i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n \
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int len = text.Length;\n        for (int i = 0; i < len / 2; i++) {\n    \
    \        if (text[i] != text[len - i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n \
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int n = text.Length;\n        for (int i = 0; i < n / 2; i++) {\n        \
    \    if (text[i] != text[n - i - 1]) {\n                return false;\n      \
    \      }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n\
    \    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"\
    xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int len = text.Length;\n        for (int i = 0; i < len / 2; i++) {\n    \
    \        if (text[i] != text[len - i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n \
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int length = text.Length;\n        for (int i = 0; i < length / 2; i++) {\n\
    \            if (text[i] != text[length - i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n \
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int len = text.Length;\n        for (int i = 0; i < len / 2; i++) {\n    \
    \        if (text[i] != text[len - i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n \
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int n = text.Length;\n        for (int i = 0; i < n / 2; i++) {\n        \
    \    if (text[i] != text[n - i - 1]) {\n                return false;\n      \
    \      }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n\
    \    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"\
    xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int length = text.Length;\n        for (int i = 0; i < length / 2; i++) {\n\
    \            if (text[i] != text[length - i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n \
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int len = text.Length;\n        for (int i = 0; i < len / 2; i++) {\n    \
    \        if (text[i] != text[len - i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n \
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int n = text.Length;\n        for (int i = 0; i < n / 2; i++) {\n        \
    \    if (text[i] != text[n - i - 1]) {\n                return false;\n      \
    \      }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n\
    \    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"\
    xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int n = text.Length;\n        for (int i = 0; i < n / 2; i++) {\n        \
    \    if (text[i] != text[n - i - 1]) {\n                return false;\n      \
    \      }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n\
    \    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"\
    xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int half = text.Length / 2;\n        for (int i = 0; i < half; i++) {\n  \
    \          if (text[i] != text[text.Length - i - 1]) {\n                return\
    \ false;\n            }\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n\
    \    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794600
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int i = 0;\n        int j = text.Length - 1;\n        while (i < j) {\n  \
    \          if (text[i] != text[j]) {\n                return false;\n        \
    \    }\n            i++;\n            j--;\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int length = text.Length;\n        for (int i = 0; i < length / 2; i++) {\n\
    \            if (text[i] != text[length - i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n \
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int n = text.Length;\n        for (int i = 0; i < n / 2; i++) {\n        \
    \    if (text[i] != text[n - i - 1]) {\n                return false;\n      \
    \      }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n\
    \    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"\
    xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int n = text.Length;\n        for (int i = 0; i < n / 2; i++) {\n        \
    \    if (text[i] != text[n - i - 1]) {\n                return false;\n      \
    \      }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n\
    \    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"\
    xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int len = text.Length;\n        for (int i = 0; i < len / 2; i++) {\n    \
    \        if (text[i] != text[len - i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n \
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int length = text.Length;\n        for (int i = 0; i < length / 2; i++) {\n\
    \            if (text[i] != text[length - i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n \
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int n = text.Length;\n        for (int i = 0; i < n / 2; i++) {\n        \
    \    if (text[i] != text[n - i - 1]) {\n                return false;\n      \
    \      }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n\
    \    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"\
    xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int length = text.Length;\n        for (int i = 0; i < length / 2; i++) {\n\
    \            if (text[i] != text[length - i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n \
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int length = text.Length;\n        for (int i = 0; i < length / 2; i++) {\n\
    \            if (text[i] != text[length - i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n \
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int n = text.Length;\n        for (int i = 0; i < n / 2; i++) {\n        \
    \    if (text[i] != text[n - i - 1]) {\n                return false;\n      \
    \      }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n\
    \    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"\
    xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int length = text.Length;\n        for (int i = 0; i < length / 2; i++) {\n\
    \            if (text[i] != text[length - i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n \
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int i = 0;\n        int j = text.Length - 1;\n        while (i < j) {\n  \
    \          if (text[i] != text[j]) {\n                return false;\n        \
    \    }\n            i++;\n            j--;\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int length = text.Length;\n        for (int i = 0; i < length / 2; i++) {\n\
    \            if (text[i] != text[length - i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n \
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int length = text.Length;\n        for (int i = 0; i < length / 2; i++) {\n\
    \            if (text[i] != text[length - i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n \
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int n = text.Length;\n        for (int i = 0; i < n / 2; i++) {\n        \
    \    if (text[i] != text[n - i - 1]) {\n                return false;\n      \
    \      }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n\
    \    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"\
    xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int length = text.Length;\n        for (int i = 0; i < length / 2; i++) {\n\
    \            if (text[i] != text[length - i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n \
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int len = text.Length;\n        for (int i = 0; i < len / 2; i++) {\n    \
    \        if (text[i] != text[len - i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n \
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int n = text.Length;\n        for (int i = 0; i < n / 2; i++) {\n        \
    \    if (text[i] != text[n - i - 1]) {\n                return false;\n      \
    \      }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n\
    \    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"\
    xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int len = text.Length;\n        for (int i = 0; i < len / 2; i++) {\n    \
    \        if (text[i] != text[len - i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n \
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int n = text.Length;\n        for (int i = 0; i < n / 2; i++) {\n        \
    \    if (text[i] != text[n - i - 1]) {\n                return false;\n      \
    \      }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n\
    \    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"\
    xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int len = text.Length;\n        for (int i = 0; i < len / 2; i++) {\n    \
    \        if (text[i] != text[len - i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n \
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int n = text.Length;\n        for (int i = 0; i < n / 2; i++) {\n        \
    \    if (text[i] != text[n - i - 1]) {\n                return false;\n      \
    \      }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n\
    \    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"\
    xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int len = text.Length;\n        for (int i = 0; i < len / 2; i++) {\n    \
    \        if (text[i] != text[len - i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n \
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int n = text.Length;\n        for (int i = 0; i < n / 2; i++) {\n        \
    \    if (text[i] != text[n - i - 1]) {\n                return false;\n      \
    \      }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n\
    \    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"\
    xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int n = text.Length;\n        for (int i = 0; i < n / 2; i++) {\n        \
    \    if (text[i] != text[n - i - 1]) {\n                return false;\n      \
    \      }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n\
    \    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"\
    xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int length = text.Length;\n        for (int i = 0; i < length / 2; i++) {\n\
    \            if (text[i] != text[length - i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n \
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int n = text.Length;\n        for (int i = 0; i < n / 2; i++) {\n        \
    \    if (text[i] != text[n - i - 1]) {\n                return false;\n      \
    \      }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n\
    \    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"\
    xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int i = 0;\n        int j = text.Length - 1;\n        while (i < j) {\n  \
    \          if (text[i] != text[j]) {\n                return false;\n        \
    \    }\n            i++;\n            j--;\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int len = text.Length;\n        for (int i = 0; i < len / 2; i++) {\n    \
    \        if (text[i] != text[len - i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n \
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int n = text.Length;\n        for (int i = 0; i < n / 2; i++) {\n        \
    \    if (text[i] != text[n - i - 1]) {\n                return false;\n      \
    \      }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n\
    \    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"\
    xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int length = text.Length;\n        for (int i = 0; i < length / 2; i++) {\n\
    \            if (text[i] != text[length - i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n \
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int n = text.Length;\n        for (int i = 0; i < n / 2; i++) {\n        \
    \    if (text[i] != text[n - i - 1]) {\n                return false;\n      \
    \      }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n\
    \    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"\
    xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int n = text.Length;\n        for (int i = 0; i < n / 2; i++) {\n        \
    \    if (text[i] != text[n - i - 1]) {\n                return false;\n      \
    \      }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n\
    \    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"\
    xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int n = text.Length;\n        for (int i = 0; i < n / 2; i++) {\n        \
    \    if (text[i] != text[n - i - 1]) {\n                return false;\n      \
    \      }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n\
    \    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"\
    xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int n = text.Length;\n        for (int i = 0; i < n / 2; i++) {\n        \
    \    if (text[i] != text[n - i - 1]) {\n                return false;\n      \
    \      }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n\
    \    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"\
    xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int length = text.Length;\n        for (int i = 0; i < length / 2; i++) {\n\
    \            if (text[i] != text[length - i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n \
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int length = text.Length;\n        for (int i = 0; i < length / 2; i++) {\n\
    \            if (text[i] != text[length - i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n \
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int len = text.Length;\n        for (int i = 0; i < len / 2; i++) {\n    \
    \        if (text[i] != text[len - i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n \
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int len = text.Length;\n        for (int i = 0; i < len / 2; i++) {\n    \
    \        if (text[i] != text[len - i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n \
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int n = text.Length;\n        for (int i = 0; i < n / 2; i++) {\n        \
    \    if (text[i] != text[n - i - 1]) {\n                return false;\n      \
    \      }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n\
    \    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"\
    xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int len = text.Length;\n        for (int i = 0; i < len / 2; i++) {\n    \
    \        if (text[i] != text[len - i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n \
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int n = text.Length;\n        for (int i = 0; i < n / 2; i++) {\n        \
    \    if (text[i] != text[n - i - 1]) {\n                return false;\n      \
    \      }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n\
    \    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"\
    xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int n = text.Length;\n        for (int i = 0; i < n / 2; i++) {\n        \
    \    if (text[i] != text[n - i - 1]) {\n                return false;\n      \
    \      }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n\
    \    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"\
    xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int length = text.Length;\n        for (int i = 0; i < length / 2; i++) {\n\
    \            if (text[i] != text[length - i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n \
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int len = text.Length;\n        for (int i = 0; i < len / 2; i++) {\n    \
    \        if (text[i] != text[len - i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n \
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int i = 0;\n        int j = text.Length - 1;\n        while (i < j) {\n  \
    \          if (text[i] != text[j]) {\n                return false;\n        \
    \    }\n            i++;\n            j--;\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int length = text.Length;\n        for (int i = 0; i < length / 2; i++) {\n\
    \            if (text[i] != text[length - i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n \
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int len = text.Length;\n        for (int i = 0; i < len / 2; i++) {\n    \
    \        if (text[i] != text[len - i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n \
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int n = text.Length;\n        for (int i = 0; i < n / 2; i++) {\n        \
    \    if (text[i] != text[n - i - 1]) {\n                return false;\n      \
    \      }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n\
    \    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"\
    xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int length = text.Length;\n        for (int i = 0; i < length / 2; i++) {\n\
    \            if (text[i] != text[length - i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n \
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int length = text.Length;\n        for (int i = 0; i < length / 2; i++) {\n\
    \            if (text[i] != text[length - i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n \
    \   Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int n = text.Length;\n        for (int i = 0; i < n / 2; i++) {\n        \
    \    if (text[i] != text[n - i - 1]) {\n                return false;\n      \
    \      }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n\
    \    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"\
    xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int n = text.Length;\n        for (int i = 0; i < n / 2; i++) {\n        \
    \    if (text[i] != text[n - i - 1]) {\n                return false;\n      \
    \      }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n\
    \    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"\
    xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int n = text.Length;\n        for (int i = 0; i < n / 2; i++) {\n        \
    \    if (text[i] != text[n - i - 1]) {\n                return false;\n      \
    \      }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n\
    \    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"\
    xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int n = text.Length;\n        for (int i = 0; i < n / 2; i++) {\n        \
    \    if (text[i] != text[n - i - 1]) {\n                return false;\n      \
    \      }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n\
    \    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"\
    xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int n = text.Length;\n        for (int i = 0; i < n / 2; i++) {\n        \
    \    if (text[i] != text[n - i - 1]) {\n                return false;\n      \
    \      }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n\
    \    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"\
    xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int i = 0;\n        int j = text.Length - 1;\n        while (i < j) {\n  \
    \          if (text[i] != text[j]) {\n                return false;\n        \
    \    }\n            i++;\n            j--;\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int n = text.Length;\n        for (int i = 0; i < n / 2; i++) {\n        \
    \    if (text[i] != text[n - i - 1]) {\n                return false;\n      \
    \      }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n\
    \    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"\
    xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int n = text.Length;\n        for (int i = 0; i < n / 2; i++) {\n        \
    \    if (text[i] != text[n - i - 1]) {\n                return false;\n      \
    \      }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsPalindrome((\"\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"aaaaa\")) == (true));\n\
    \    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n    Debug.Assert(IsPalindrome((\"\
    xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"xywyz\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   int i = 0;\n        int j = text.Length - 1;\n        while (i < j) {\n  \
    \          if (text[i] != text[j]) {\n                return false;\n        \
    \    }\n            i += 1;\n            j -= 1;\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
    \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    //\
    \ >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"\
    ))\n    // (false)\n    public static bool IsPalindrome(string text) {\n     \
    \   for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] != text[text.Length\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
    \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
    \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
    xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794545
