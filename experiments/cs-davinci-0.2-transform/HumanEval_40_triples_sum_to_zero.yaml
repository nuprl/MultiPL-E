name: HumanEval_40_triples_sum_to_zero
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // triples_sum_to_zero takes a list of integers as an input.\n\
  \    // it returns True if there are three distinct elements in the list that\n\
  \    // sum to zero, and False otherwise.\n    // >>> TriplesSumToZero((new List<long>(new\
  \ long[]{(long)1L, (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>>\
  \ TriplesSumToZero((new List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n\
  \    // (true)\n    // >>> TriplesSumToZero((new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L, (long)7L})))\n    // (false)\n    // >>> TriplesSumToZero((new\
  \ List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)9L, (long)7L})))\n\
  \    // (true)\n    // >>> TriplesSumToZero((new List<long>(new long[]{(long)1L})))\n\
  \    // (false)\n    public static bool TriplesSumToZero(List<long> l) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(TriplesSumToZero((new\
  \ List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n\
  \    Debug.Assert(TriplesSumToZero((new List<long>(new long[]{(long)1L, (long)3L,\
  \ (long)5L, (long)-1L}))) == (false));\n    Debug.Assert(TriplesSumToZero((new List<long>(new\
  \ long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (true));\n    Debug.Assert(TriplesSumToZero((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n\
  \    Debug.Assert(TriplesSumToZero((new List<long>(new long[]{(long)1L, (long)2L,\
  \ (long)5L, (long)7L}))) == (false));\n    Debug.Assert(TriplesSumToZero((new List<long>(new\
  \ long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)9L, (long)7L}))) == (true));\n\
  \    Debug.Assert(TriplesSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n\
  \    Debug.Assert(TriplesSumToZero((new List<long>(new long[]{(long)1L, (long)3L,\
  \ (long)5L, (long)-100L}))) == (false));\n    Debug.Assert(TriplesSumToZero((new\
  \ List<long>(new long[]{(long)100L, (long)3L, (long)5L, (long)-100L}))) == (false));\n\
  \    }\n\n}\n"
completions: ["        if (l.Count < 3) {\n            return false;\n        }\n\
    \        else {\n            for (int i = 0; i < l.Count; i++) {\n           \
    \     for (int j = i + 1; j < l.Count; j++) {\n                    for (int k\
    \ = j + 1; k < l.Count; k++) {\n                        if (l[i] + l[j] + l[k]\
    \ == 0) {\n                            return true;\n                        }\n\
    \                    }\n                }\n            }\n            return false;\n\
    \        }", "        // your code here\n        return false;", "        // your\
    \ code here\n        return false;", "        // your code here\n        return\
    \ false;", "        long len = (long)l.Count;\n        long i = (long)0L;\n  \
    \      while ((i < len))\n        {\n            long j = (long)i + (long)1L;\n\
    \            while ((j < len))\n            {\n                long k = (long)j\
    \ + (long)1L;\n                while ((k < len))\n                {\n        \
    \            if (((l[(int)i] + l[(int)j]) + l[(int)k]) == (long)0L)\n        \
    \            {\n                        return true;\n                    }\n\n\
    \                    k = k + (long)1L;\n\n                }\n\n\n            \
    \    j = j + (long)1L;\n\n            }\n\n\n            i = i + (long)1L;\n\n\
    \        }\n\n\n        return false;\n", "        // your code here\n       \
    \ return false;", "        // your code here\n        return false;", "      \
    \  // your code here\n        return false;", "        // your code here\n   \
    \     return false;", "        if (l.Count < 3) {\n            return false;\n\
    \        }\n        for (int i = 0; i < l.Count; i++) {\n            for (int\
    \ j = i + 1; j < l.Count; j++) {\n                for (int k = j + 1; k < l.Count;\
    \ k++) {\n                    if (l[i] + l[j] + l[k] == 0) {\n               \
    \         return true;\n                    }\n                }\n           \
    \ }\n        }\n        return false;", "        if (l.Count < 3) {\n        \
    \    return false;\n        }\n        for (int i = 0; i < l.Count; i++) {\n \
    \           for (int j = i + 1; j < l.Count; j++) {\n                for (int\
    \ k = j + 1; k < l.Count; k++) {\n                    if (l[i] + l[j] + l[k] ==\
    \ 0) {\n                        return true;\n                    }\n        \
    \        }\n            }\n        }\n        return false;", "        // your\
    \ code here\n        return false;", "        // your code here\n        return\
    \ false;", "        var n = l.Count;\n        var i = 0;\n        while (i < n)\
    \ {\n            var j = i + 1;\n            while (j < n) {\n               \
    \ var k = j + 1;\n                while (k < n) {\n                    if (l[i]\
    \ + l[j] + l[k] == 0L) {\n                        return true;\n             \
    \       }\n                    k = k + 1;\n                }\n               \
    \ j = j + 1;\n            }\n            i = i + 1;\n        }\n        return\
    \ false;", "        // your code here\n        return false;", "        if (l.Count\
    \ < 3) {\n            return false;\n        }\n        for (int i = 0; i < l.Count;\
    \ i++) {\n            for (int j = i + 1; j < l.Count; j++) {\n              \
    \  for (int k = j + 1; k < l.Count; k++) {\n                    if (l[i] + l[j]\
    \ + l[k] == 0) {\n                        return true;\n                    }\n\
    \                }\n            }\n        }\n        return false;", "      \
    \  // your code here\n        return false;", "        // YOUR CODE HERE\n   \
    \     return false;", "        // your code here\n        return false;", "  \
    \      // your code here\n        return false;", "        var s = new HashSet<long>();\n\
    \        foreach (var x in l) {\n            if (s.Contains(-x)) {\n         \
    \       return true;\n            }\n            s.Add(x);\n        }\n      \
    \  return false;", "        // your code here\n        return false;", "     \
    \   long i = (long)0L;\n        for (i = (long)0L; i < (long)l.Count; i++) {\n\
    \            long j = (long)0L;\n            for (j = (long)0L; j < (long)l.Count;\
    \ j++) {\n                long k = (long)0L;\n                for (k = (long)0L;\
    \ k < (long)l.Count; k++) {\n                    if (i != j && j != k && i !=\
    \ k) {\n                        if (l[(int)i] + l[(int)j] + l[(int)k] == (long)0L)\
    \ {\n                            return true;\n                        }\n   \
    \                 }\n                }\n            }\n        }\n        return\
    \ false;", "        if (l.Count < 3) {\n            return false;\n        }\n\
    \        for (long i = 0; i < l.Count; i++) {\n            for (long j = i + 1;\
    \ j < l.Count; j++) {\n                for (long k = j + 1; k < l.Count; k++)\
    \ {\n                    if (l[(int)i] + l[(int)j] + l[(int)k] == 0) {\n     \
    \                   return true;\n                    }\n                }\n \
    \           }\n        }\n        return false;", "        if (l.Count < 3) {\n\
    \            return false;\n        }\n        l.Sort();\n        for (int i =\
    \ 0; i < l.Count; i++) {\n            int j = i + 1;\n            int k = l.Count\
    \ - 1;\n            while (j < k) {\n                int sum = l[i] + l[j] + l[k];\n\
    \                if (sum == 0) {\n                    return true;\n         \
    \       }\n                if (sum > 0) {\n                    k--;\n        \
    \        } else {\n                    j++;\n                }\n            }\n\
    \        }\n        return false;", "        // your code here\n        return\
    \ false;", "        for (int i = 0; i < l.Count; i++) {\n            for (int\
    \ j = i + 1; j < l.Count; j++) {\n                for (int k = j + 1; k < l.Count;\
    \ k++) {\n                    if (l[i] + l[j] + l[k] == 0) {\n               \
    \         return true;\n                    }\n                }\n           \
    \ }\n        }\n        return false;", "        // your code here\n        return\
    \ false;", "        // your code here\n        return false;", "        // your\
    \ code here\n        return false;", "        if (l.Count < 3) {\n           \
    \ return false;\n        }\n        l.Sort();\n        for (long i = 0; i < l.Count;\
    \ i++) {\n            for (long j = i + 1; j < l.Count; j++) {\n             \
    \   long sum = l[(int)i] + l[(int)j];\n                long k = j + 1;\n     \
    \           while (k < l.Count && l[(int)k] < 0 - sum) {\n                   \
    \ k = k + 1;\n                }\n                if (k < l.Count && l[(int)k]\
    \ == 0 - sum) {\n                    return true;\n                }\n       \
    \     }\n        }\n        return false;", "        if (l.Count < 3) {\n    \
    \        return false;\n        }\n        for (int i = 0; i < l.Count; i++) {\n\
    \            for (int j = i + 1; j < l.Count; j++) {\n                for (int\
    \ k = j + 1; k < l.Count; k++) {\n                    if (l[i] + l[j] + l[k] ==\
    \ 0) {\n                        return true;\n                    }\n        \
    \        }\n            }\n        }\n        return false;", "        // your\
    \ code here\n        return false;", "        if (l.Count < 3) {\n           \
    \ return false;\n        }\n        l.Sort();\n        for (int i = 0; i < l.Count\
    \ - 2; i++) {\n            int j = i + 1;\n            int k = l.Count - 1;\n\
    \            while (j < k) {\n                long sum = l[i] + l[j] + l[k];\n\
    \                if (sum == 0) {\n                    return true;\n         \
    \       }\n                else if (sum < 0) {\n                    j++;\n   \
    \             }\n                else {\n                    k--;\n          \
    \      }\n            }\n        }\n        return false;", "        // your code\
    \ here\n        return false;", "        // your code here\n        return false;",
  "        // your code here\n        return false;", "        // your code here\n\
    \        return false;", "        // your code here\n        return false;", " \
    \       if (l.Count < 3) {\n            return false;\n        }\n        for\
    \ (int i = 0; i < l.Count; i++) {\n            for (int j = i + 1; j < l.Count;\
    \ j++) {\n                for (int k = j + 1; k < l.Count; k++) {\n          \
    \          if (l[i] + l[j] + l[k] == 0) {\n                        return true;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ false;", "        // your code here\n        return false;", "        // your\
    \ code here\n        return false;", "        // your code here\n        return\
    \ false;", "        // your code here\n        return false;", "        // your\
    \ code here\n        return false;", "        // your code here\n        return\
    \ false;", "        if (((l.Count) < (3L))) {\n            return false;\n   \
    \     }\n        else {\n            var h = new Dictionary<long, bool>();\n \
    \           foreach (var x in l) {\n                if (((h.ContainsKey(x)) &&\
    \ (h[x]))) {\n                    return true;\n                }\n          \
    \      else {\n                    h[x] = true;\n                }\n         \
    \   }\n            var s = new HashSet<long>();\n            foreach (var x in\
    \ l) {\n                foreach (var y in l) {\n                    if (((x) !=\
    \ (y))) {\n                        var z = (0L) - (x) - (y);\n               \
    \         if (((h.ContainsKey(z)) && (!(s.Contains(((((x) << (32L)) | (y)) <<\
    \ (32L)) | (z)))))) {\n                            s.Add(((((x) << (32L)) | (y))\
    \ << (32L)) | (z));\n                            return true;\n              \
    \          }\n                    }\n                }\n            }\n      \
    \      return false;\n        }", "        if (l.Count < 3) {\n            return\
    \ false;\n        }\n        l.Sort();\n        for (int i = 0; i < l.Count; i++)\
    \ {\n            int j = i + 1;\n            int k = l.Count - 1;\n          \
    \  while (j < k) {\n                if (l[i] + l[j] + l[k] == 0) {\n         \
    \           return true;\n                }\n                else if (l[i] + l[j]\
    \ + l[k] < 0) {\n                    j++;\n                }\n               \
    \ else {\n                    k--;\n                }\n            }\n       \
    \ }\n        return false;", "        // YOUR CODE HERE\n        return false;",
  "        // your code here\n        return false;", "        // your code here\n\
    \        return false;", "        // Your code here\n        return false;", " \
    \       // your code here\n        return false;", "        // your code here\n\
    \        return false;", "        // your code here\n        return false;", " \
    \       // your code here\n        return false;", "        // your code here\n\
    \        return false;", "        // your code here\n        return false;", " \
    \       // your code here\n        return false;", "        // your code here\n\
    \        return false;", "        // your code here\n        return false;", " \
    \       // your code here\n        return false;", "        bool result = false;\n\
    \        for (int i = 0; i < l.Count; i++) {\n            for (int j = i + 1;\
    \ j < l.Count; j++) {\n                for (int k = j + 1; k < l.Count; k++) {\n\
    \                    if (l[i] + l[j] + l[k] == 0) {\n                        result\
    \ = true;\n                    }\n                }\n            }\n        }\n\
    \        return result;", "        if (l.Count < 3) {\n            return false;\n\
    \        }\n        for (int i = 0; i < l.Count; i++) {\n            for (int\
    \ j = i + 1; j < l.Count; j++) {\n                for (int k = j + 1; k < l.Count;\
    \ k++) {\n                    if (l[i] + l[j] + l[k] == 0) {\n               \
    \         return true;\n                    }\n                }\n           \
    \ }\n        }\n        return false;", "        // your code here\n        return\
    \ false;", "        // your code here\n        return false;", "        bool result\
    \ = false;\n        long x = 0L;\n        long y = 0L;\n        long z = 0L;\n\
    \        long i = 0L;\n        long j = 0L;\n        long k = 0L;\n        long\
    \ len = (long)l.Count;\n        for (i = 0L; i < len; i++) {\n            x =\
    \ l[(int)i];\n            for (j = i + 1L; j < len; j++) {\n                y\
    \ = l[(int)j];\n                for (k = j + 1L; k < len; k++) {\n           \
    \         z = l[(int)k];\n                    if ((x + y + z) == 0L) {\n     \
    \                   result = true;\n                        break;\n         \
    \           }\n                }\n            }\n        }\n        return result;",
  "        if (l.Count < 3) {\n            return false;\n        }\n        var s\
    \ = new HashSet<long>();\n        foreach (var x in l) {\n            s.Add(x);\n\
    \        }\n        foreach (var x in l) {\n            foreach (var y in l) {\n\
    \                if (x != y) {\n                    if (s.Contains(-(x + y)))\
    \ {\n                        return true;\n                    }\n           \
    \     }\n            }\n        }\n        return false;", "        // your code\
    \ here\n        return false;", "        // your code here\n        return false;",
  "        // your code here\n        return false;", "        // your code here\n\
    \        return false;", "        // your code here\n        return false;", " \
    \       if (l.Count < 3) {\n            return false;\n        }\n        else\
    \ {\n            for (int i = 0; i < l.Count; i++) {\n                for (int\
    \ j = i + 1; j < l.Count; j++) {\n                    for (int k = j + 1; k <\
    \ l.Count; k++) {\n                        if (l[i] + l[j] + l[k] == 0) {\n  \
    \                          return true;\n                        }\n         \
    \           }\n                }\n            }\n            return false;\n \
    \       }", "        // your code here\n        return false;", "        // your\
    \ code here\n        return false;", "        // your code here\n        return\
    \ false;", "        if (l.Count < 3) {\n            return false;\n        }\n\
    \        l.Sort();\n        for (long i = 0; i < l.Count; i++) {\n           \
    \ for (long j = i + 1; j < l.Count; j++) {\n                for (long k = j +\
    \ 1; k < l.Count; k++) {\n                    if (l[(int)i] + l[(int)j] + l[(int)k]\
    \ == 0) {\n                        return true;\n                    }\n     \
    \           }\n            }\n        }\n        return false;", "        // your\
    \ code here\n        return false;", "        // your code here\n        return\
    \ false;", "        // your code here\n        return false;", "        if (l.Count\
    \ < 3) {\n            return false;\n        }\n        else {\n            var\
    \ h = new Dictionary<long, long>();\n            foreach (var x in l) {\n    \
    \            if (h.ContainsKey(x)) {\n                    h[x] = h[x] + 1L;\n\
    \                }\n                else {\n                    h[x] = 1L;\n \
    \               }\n            }\n            foreach (var x in l) {\n       \
    \         foreach (var y in l) {\n                    var z = (long)0L - x - y;\n\
    \                    if (x == y && y == z) {\n                        if (h[x]\
    \ >= 3L) {\n                            return true;\n                       \
    \ }\n                    }\n                    else if (x == y) {\n         \
    \               if (h[x] >= 2L) {\n                            return true;\n\
    \                        }\n                    }\n                    else if\
    \ (y == z) {\n                        if (h[y] >= 2L) {\n                    \
    \        return true;\n                        }\n                    }\n    \
    \                else if (x == z) {\n                        if (h[x] >= 2L) {\n\
    \                            return true;\n                        }\n       \
    \             }\n                    else if (h.ContainsKey(z)) {\n          \
    \              return true;\n                    }\n                }\n      \
    \      }\n            return false;\n        }", "        // your code here\n\
    \        return false;", "        // your code here\n        return false;", " \
    \       if (((l.Count) < (3L))) {\n            return false;\n        }\n    \
    \    l.Sort();\n        long i = 0L;\n        while ((i < (l.Count))) {\n    \
    \        long j = (i + 1L);\n            while ((j < (l.Count))) {\n         \
    \       long k = (j + 1L);\n                while ((k < (l.Count))) {\n      \
    \              if ((((l[(int)i]) + (l[(int)j])) + (l[(int)k])) == 0L) {\n    \
    \                    return true;\n                    }\n                   \
    \ k = (k + 1L);\n                }\n                j = (j + 1L);\n          \
    \  }\n            i = (i + 1L);\n        }\n        return false;", "        for\
    \ (int i = 0; i < l.Count; i++) {\n            for (int j = i + 1; j < l.Count;\
    \ j++) {\n                for (int k = j + 1; k < l.Count; k++) {\n          \
    \          if (l[i] + l[j] + l[k] == 0) {\n                        return true;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ false;", "        // your code here\n        return false;", "        // your\
    \ code here\n        return false;", "        // your code here\n        return\
    \ false;", "        if (l.Count < 3) {\n            return false;\n        }\n\
    \        l.Sort();\n        for (int i = 0; i < l.Count; i++) {\n            for\
    \ (int j = i + 1; j < l.Count; j++) {\n                for (int k = j + 1; k <\
    \ l.Count; k++) {\n                    if (l[i] + l[j] + l[k] == 0) {\n      \
    \                  return true;\n                    }\n                }\n  \
    \          }\n        }\n        return false;", "        // your code here\n\
    \        return false;", "        // your code here\n        return false;", " \
    \       // your code here\n        return false;", "        // your code here\n\
    \        return false;", "        // your code here\n        return false;", " \
    \       // your code here\n        return false;", "        // your code here\n\
    \        return false;", "        // your code here\n        return false;", " \
    \       // your code here\n        return false;", "        // your code here\n\
    \        return false;", "        // your code here\n        return false;", " \
    \       if (l.Count < 3) {\n            return false;\n        }\n        else\
    \ {\n            for (int i = 0; i < l.Count; i++) {\n                for (int\
    \ j = i + 1; j < l.Count; j++) {\n                    for (int k = j + 1; k <\
    \ l.Count; k++) {\n                        if (l[i] + l[j] + l[k] == 0) {\n  \
    \                          return true;\n                        }\n         \
    \           }\n                }\n            }\n            return false;\n \
    \       }", "        // your code here\n        return false;", "        // your\
    \ code here\n        return false;", "        // your code here\n        return\
    \ false;", "        // your code here\n        return false;", "        // your\
    \ code here\n        return false;", "        if (l.Count < 3) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < l.Count; i++) {\n    \
    \        for (int j = i + 1; j < l.Count; j++) {\n                for (int k =\
    \ j + 1; k < l.Count; k++) {\n                    if (l[i] + l[j] + l[k] == 0)\
    \ {\n                        return true;\n                    }\n           \
    \     }\n            }\n        }\n        return false;", "        var n = l.Count;\n\
    \        var i = 0;\n        while (i < n) {\n            var j = i + 1;\n   \
    \         while (j < n) {\n                var k = j + 1;\n                while\
    \ (k < n) {\n                    if (l[i] + l[j] + l[k] == 0L) {\n           \
    \             return true;\n                    }\n                    k = k +\
    \ 1;\n                }\n                j = j + 1;\n            }\n         \
    \   i = i + 1;\n        }\n        return false;", "        if (l.Count < 3) {\n\
    \            return false;\n        }\n        l.Sort();\n        for (int i =\
    \ 0; i < l.Count; i++) {\n            for (int j = i + 1; j < l.Count; j++) {\n\
    \                for (int k = j + 1; k < l.Count; k++) {\n                   \
    \ if (l[i] + l[j] + l[k] == 0) {\n                        return true;\n     \
    \               }\n                }\n            }\n        }\n        return\
    \ false;", "        // your code here\n        return false;", "        // your\
    \ code here\n        return false;", "        long n = (long)l.Count;\n      \
    \  long i = (long)0L;\n        while ((i < n)) {\n            long j = (long)0L;\n\
    \            while ((j < n)) {\n                long k = (long)0L;\n         \
    \       while ((k < n)) {\n                    if (((i != j) && (j != k) && (i\
    \ != k))) {\n                        if (((l[(int)i] + l[(int)j]) + l[(int)k])\
    \ == (long)0L) {\n                            return true;\n                 \
    \       }\n                    }\n                    k = (long)(k + (long)1L);\n\
    \                }\n                j = (long)(j + (long)1L);\n            }\n\
    \            i = (long)(i + (long)1L);\n        }\n        return false;", " \
    \       // your code here\n        return false;", "        var s = new HashSet<long>();\n\
    \        foreach (var x in l) {\n            if (s.Contains(-x)) {\n         \
    \       return true;\n            }\n            s.Add(x);\n        }\n      \
    \  return false;", "        // your code here\n        return false;", "     \
    \   // your code here\n        return false;", "        if (l.Count < 3) {\n \
    \           return false;\n        }\n        l.Sort();\n        for (long i =\
    \ 0; i < l.Count; i++) {\n            for (long j = i + 1; j < l.Count; j++) {\n\
    \                long sum = l[(int)i] + l[(int)j];\n                long k = l.BinarySearch((long)(0L\
    \ - sum));\n                if (k >= 0 && k != i && k != j) {\n              \
    \      return true;\n                }\n            }\n        }\n        return\
    \ false;", "        // your code here\n        return false;", "        // your\
    \ code here\n        return false;", "        if (l.Count < 3) {\n           \
    \ return false;\n        }\n        l.Sort();\n        for (int i = 0; i < l.Count;\
    \ i++) {\n            for (int j = i + 1; j < l.Count; j++) {\n              \
    \  for (int k = j + 1; k < l.Count; k++) {\n                    if (l[i] + l[j]\
    \ + l[k] == 0) {\n                        return true;\n                    }\n\
    \                }\n            }\n        }\n        return false;", "      \
    \  if (l.Count < 3) {\n            return false;\n        }\n        for (long\
    \ i = 0; i < l.Count; i++) {\n            for (long j = i + 1; j < l.Count; j++)\
    \ {\n                for (long k = j + 1; k < l.Count; k++) {\n              \
    \      if (l[(int)i] + l[(int)j] + l[(int)k] == 0) {\n                       \
    \ return true;\n                    }\n                }\n            }\n    \
    \    }\n        return false;", "        if (l.Count < 3) {\n            return\
    \ false;\n        }\n        for (int i = 0; i < l.Count; i++) {\n           \
    \ for (int j = i + 1; j < l.Count; j++) {\n                for (int k = j + 1;\
    \ k < l.Count; k++) {\n                    if (l[i] + l[j] + l[k] == 0) {\n  \
    \                      return true;\n                    }\n                }\n\
    \            }\n        }\n        return false;", "        if (l.Count < 3) {\n\
    \            return false;\n        }\n        for (int i = 0; i < l.Count; i++)\
    \ {\n            for (int j = i + 1; j < l.Count; j++) {\n                for\
    \ (int k = j + 1; k < l.Count; k++) {\n                    if (l[i] + l[j] + l[k]\
    \ == 0) {\n                        return true;\n                    }\n     \
    \           }\n            }\n        }\n        return false;", "        for\
    \ (long i = 0L; i < l.Count; i++) {\n            for (long j = i + 1L; j < l.Count;\
    \ j++) {\n                for (long k = j + 1L; k < l.Count; k++) {\n        \
    \            if (l[(int)i] + l[(int)j] + l[(int)k] == 0L) {\n                \
    \        return true;\n                    }\n                }\n            }\n\
    \        }\n        return false;", "        if (l.Count < 3) {\n            return\
    \ false;\n        }\n        else {\n            for (int i = 0; i < l.Count;\
    \ i++) {\n                for (int j = i + 1; j < l.Count; j++) {\n          \
    \          for (int k = j + 1; k < l.Count; k++) {\n                        if\
    \ (l[i] + l[j] + l[k] == 0) {\n                            return true;\n    \
    \                    }\n                    }\n                }\n           \
    \ }\n            return false;\n        }", "        // your code here\n     \
    \   return false;", "        // your code here\n        return false;", "    \
    \    // your code here\n        return false;", "        // your code here\n \
    \       return false;", "        // your code here\n        return false;", " \
    \       // your code here\n        return false;", "        // your code here\n\
    \        return false;", "        if (l.Count < 3) {\n            return false;\n\
    \        }\n        l.Sort();\n        for (int i = 0; i < l.Count; i++) {\n \
    \           for (int j = i + 1; j < l.Count; j++) {\n                for (int\
    \ k = j + 1; k < l.Count; k++) {\n                    if (l[i] + l[j] + l[k] ==\
    \ 0) {\n                        return true;\n                    }\n        \
    \        }\n            }\n        }\n        return false;", "        // your\
    \ code here\n        return false;", "        // your code here\n        return\
    \ false;", "        // your code here\n        return false;", "        // your\
    \ code here\n        return false;", "        for (int i = 0; i < l.Count; i++)\
    \ {\n            for (int j = i + 1; j < l.Count; j++) {\n                for\
    \ (int k = j + 1; k < l.Count; k++) {\n                    if (l[i] + l[j] + l[k]\
    \ == 0) {\n                        return true;\n                    }\n     \
    \           }\n            }\n        }\n        return false;", "        var\
    \ n = l.Count;\n        for (var i = 0; i < n; i++) {\n            for (var j\
    \ = i + 1; j < n; j++) {\n                for (var k = j + 1; k < n; k++) {\n\
    \                    if (l[i] + l[j] + l[k] == 0L) {\n                       \
    \ return true;\n                    }\n                }\n            }\n    \
    \    }\n        return false;", '        return false;', "        // your code\
    \ here\n        return false;", "        // your code here\n        return false;",
  "        if (l.Count < 3) {\n            return false;\n        }\n        for (int\
    \ i = 0; i < l.Count; i++) {\n            for (int j = i + 1; j < l.Count; j++)\
    \ {\n                for (int k = j + 1; k < l.Count; k++) {\n               \
    \     if (l[i] + l[j] + l[k] == 0) {\n                        return true;\n \
    \                   }\n                }\n            }\n        }\n        return\
    \ false;", "        // your code here\n        return false;", "        // your\
    \ code here\n        return false;", "        // your code here\n        return\
    \ false;", "        // your code here\n        return false;", "        // your\
    \ code here\n        return false;", "        // your code here\n        return\
    \ false;", "        // your code here\n        return false;", "        if (l.Count\
    \ < 3) {\n            return false;\n        }\n        for (int i = 0; i < l.Count;\
    \ i++) {\n            for (int j = i + 1; j < l.Count; j++) {\n              \
    \  for (int k = j + 1; k < l.Count; k++) {\n                    if (l[i] + l[j]\
    \ + l[k] == 0) {\n                        return true;\n                    }\n\
    \                }\n            }\n        }\n        return false;", "      \
    \  // your code here\n        return false;", "        // your code here\n   \
    \     return false;", "        // your code here\n        return false;", "  \
    \      if (l.Count < 3) {\n            return false;\n        }\n        l.Sort();\n\
    \        for (int i = 0; i < l.Count; i++) {\n            for (int j = i + 1;\
    \ j < l.Count; j++) {\n                for (int k = j + 1; k < l.Count; k++) {\n\
    \                    if (l[i] + l[j] + l[k] == 0) {\n                        return\
    \ true;\n                    }\n                }\n            }\n        }\n\
    \        return false;", "        // your code here\n        return false;", " \
    \       // your code here\n        return false;", "        // your code here\n\
    \        return false;", "        // your code here\n        return false;", " \
    \       if (l.Count < 3) {\n            return false;\n        }\n        for\
    \ (int i = 0; i < l.Count; i++) {\n            for (int j = i + 1; j < l.Count;\
    \ j++) {\n                for (int k = j + 1; k < l.Count; k++) {\n          \
    \          if (l[i] + l[j] + l[k] == 0) {\n                        return true;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ false;", "        if (l.Count < 3) {\n            return false;\n        }\n\
    \        for (int i = 0; i < l.Count; i++) {\n            for (int j = i + 1;\
    \ j < l.Count; j++) {\n                for (int k = j + 1; k < l.Count; k++) {\n\
    \                    if (l[i] + l[j] + l[k] == 0) {\n                        return\
    \ true;\n                    }\n                }\n            }\n        }\n\
    \        return false;", "        if (l.Count < 3) {\n            return false;\n\
    \        }\n        l.Sort();\n        for (int i = 0; i < l.Count; i++) {\n \
    \           for (int j = i + 1; j < l.Count; j++) {\n                for (int\
    \ k = j + 1; k < l.Count; k++) {\n                    if (l[i] + l[j] + l[k] ==\
    \ 0) {\n                        return true;\n                    }\n        \
    \        }\n            }\n        }\n        return false;", "        // your\
    \ code here\n        return false;", "        // your code here\n        return\
    \ false;", "        // your code here\n        return false;", "        // your\
    \ code here\n        return false;", "        // your code here\n        return\
    \ false;", "        // your code here\n        return false;", "        // your\
    \ code here\n        return false;", '        return false;', "        // your\
    \ code here\n        return false;", "        // your code here\n        return\
    \ false;", "        // your code here\n        return false;", "        // your\
    \ code here\n        return false;", "        // your code here\n        return\
    \ false;", "        // your code here\n        return false;", "        if (l.Count\
    \ < 3) {\n            return false;\n        }\n        for (long i = 0; i < l.Count;\
    \ i++) {\n            for (long j = i + 1; j < l.Count; j++) {\n             \
    \   for (long k = j + 1; k < l.Count; k++) {\n                    if (l[(int)i]\
    \ + l[(int)j] + l[(int)k] == 0) {\n                        return true;\n    \
    \                }\n                }\n            }\n        }\n        return\
    \ false;", "        // your code here\n        return false;", "        // your\
    \ code here\n        return false;", "        // your code here\n        return\
    \ false;", "        // your code here\n        return false;", "        // your\
    \ code here\n        return false;", "        // your code here\n        return\
    \ false;", "        // your code here\n        return false;", "        // your\
    \ code here\n        return false;", "        // your code here\n        return\
    \ false;", "        // your code here\n        return false;", "        if (l.Count\
    \ < 3) {\n            return false;\n        }\n        for (int i = 0; i < l.Count;\
    \ i++) {\n            for (int j = i + 1; j < l.Count; j++) {\n              \
    \  for (int k = j + 1; k < l.Count; k++) {\n                    if (l[i] + l[j]\
    \ + l[k] == 0) {\n                        return true;\n                    }\n\
    \                }\n            }\n        }\n        return false;", "      \
    \  if (l.Count < 3) {\n            return false;\n        }\n        for (int\
    \ i = 0; i < l.Count; i++) {\n            for (int j = i + 1; j < l.Count; j++)\
    \ {\n                for (int k = j + 1; k < l.Count; k++) {\n               \
    \     if (l[i] + l[j] + l[k] == 0) {\n                        return true;\n \
    \                   }\n                }\n            }\n        }\n        return\
    \ false;", "        // your code here\n        return false;", "        if (l.Count\
    \ < 3) {\n            return false;\n        }\n        l.Sort();\n        for\
    \ (int i = 0; i < l.Count; i++) {\n            for (int j = i + 1; j < l.Count;\
    \ j++) {\n                long sum = l[i] + l[j];\n                int k = l.BinarySearch(-sum);\n\
    \                if (k > j) {\n                    return true;\n            \
    \    }\n            }\n        }\n        return false;", "        // your code\
    \ here\n        return false;", "        // your code here\n        return false;",
  "        // your code here\n        return false;", "        // your code here\n\
    \        return false;", "        // your code here\n        return false;", " \
    \       if (l.Count < 3) {\n            return false;\n        }\n        for\
    \ (int i = 0; i < l.Count; i++) {\n            for (int j = i + 1; j < l.Count;\
    \ j++) {\n                for (int k = j + 1; k < l.Count; k++) {\n          \
    \          if (l[i] + l[j] + l[k] == 0) {\n                        return true;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ false;", "        if (l.Count < 3) {\n            return false;\n        }\n\
    \        for (int i = 0; i < l.Count; i++) {\n            for (int j = i + 1;\
    \ j < l.Count; j++) {\n                for (int k = j + 1; k < l.Count; k++) {\n\
    \                    if (l[i] + l[j] + l[k] == 0) {\n                        return\
    \ true;\n                    }\n                }\n            }\n        }\n\
    \        return false;", "        // your code here\n        return false;"]
stop_tokens:
- "\n    }\n"
