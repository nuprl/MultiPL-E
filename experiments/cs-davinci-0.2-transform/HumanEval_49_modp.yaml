name: HumanEval_49_modp
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> Modp((3L),\
  \ (5L))\n    // (3L)\n    // >>> Modp((1101L), (101L))\n    // (2L)\n    // >>>\
  \ Modp((0L), (101L))\n    // (1L)\n    // >>> Modp((3L), (11L))\n    // (8L)\n \
  \   // >>> Modp((100L), (101L))\n    // (1L)\n    public static long Modp(long n,\
  \ long p) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Modp((3L),\
  \ (5L)) == (3L));\n    Debug.Assert(Modp((1101L), (101L)) == (2L));\n    Debug.Assert(Modp((0L),\
  \ (101L)) == (1L));\n    Debug.Assert(Modp((3L), (11L)) == (8L));\n    Debug.Assert(Modp((100L),\
  \ (101L)) == (1L));\n    Debug.Assert(Modp((30L), (5L)) == (4L));\n    Debug.Assert(Modp((31L),\
  \ (5L)) == (3L));\n    }\n\n}\n"
completions: ["        if (n == 0) {\n            return 1;\n        }\n        long\
    \ z = Modp(n / 2, p);\n        if (n % 2 == 0) {\n            return z * z % p;\n\
    \        } else {\n            return z * z % p * n % p;\n        }", "      \
    \  if (n == 0) {\n            return 1;\n        }\n        if (n % 2 == 0) {\n\
    \            return Modp(n / 2, p) * Modp(n / 2, p) % p;\n        }\n        return\
    \ Modp(n / 2, p) * Modp(n / 2, p) * n % p;", "        if (n == 0) {\n        \
    \    return 1;\n        }\n        if (n % 2 == 0) {\n            return Modp(n\
    \ / 2, p) * Modp(n / 2, p) % p;\n        }\n        return Modp(n / 2, p) * Modp(n\
    \ / 2, p) * n % p;", "        if (n == 0) return 1;\n        if (n % 2 == 0) {\n\
    \            long t = Modp(n / 2, p);\n            return (t * t) % p;\n     \
    \   } else {\n            return (n * Modp(n - 1, p)) % p;\n        }", "    \
    \    if (n == 0) return 1;\n        if (n % 2 == 0) {\n            long t = Modp(n\
    \ / 2, p);\n            return (t * t) % p;\n        } else {\n            return\
    \ (n * Modp(n - 1, p)) % p;\n        }", "        if (n == 0) {\n            return\
    \ 1;\n        }\n        long z = Modp(n / 2, p);\n        if (n % 2 == 0) {\n\
    \            return z * z % p;\n        } else {\n            return z * z % p\
    \ * n % p;\n        }", "        if (n == 0) return 1;\n        if (n % 2 == 0)\
    \ {\n            long t = Modp(n / 2, p);\n            return (t * t) % p;\n \
    \       } else {\n            return (Modp(n - 1, p) * n) % p;\n        }", " \
    \       if (n == 0) {\n            return 1;\n        }\n        if (n % 2 ==\
    \ 0) {\n            long t = Modp(n / 2, p);\n            return (t * t) % p;\n\
    \        }\n        return (Modp(n - 1, p) * n) % p;", "        if (n == 0) return\
    \ 1;\n        if (n % 2 == 0) {\n            long t = Modp(n / 2, p);\n      \
    \      return (t * t) % p;\n        } else {\n            return (Modp(n - 1,\
    \ p) * n) % p;\n        }", "        if (n == 0) return 1;\n        long a = Modp(n\
    \ / 2, p);\n        a = (a * a) % p;\n        if (n % 2 == 1) a = (a * 2) % p;\n\
    \        return a;", "        if (n == 0) return 1;\n        if (n % 2 == 0) {\n\
    \            long x = Modp(n / 2, p);\n            return (x * x) % p;\n     \
    \   } else {\n            return (n * Modp(n - 1, p)) % p;\n        }", "    \
    \    if (n == 0) {\n            return 1;\n        }\n        if (n % 2 == 0)\
    \ {\n            long t = Modp(n / 2, p);\n            return (t * t) % p;\n \
    \       }\n        return (Modp(n - 1, p) * n) % p;", "        if (n == 0) return\
    \ 1;\n        if (n % 2 == 0) {\n            long x = Modp(n / 2, p);\n      \
    \      return (x * x) % p;\n        } else {\n            return (n * Modp(n -\
    \ 1, p)) % p;\n        }", "        if (n == 0) return 1;\n        if (n == 1)\
    \ return n;\n        if (n % 2 == 0) return Modp(n / 2, p) * Modp(n / 2, p) %\
    \ p;\n        return n * Modp(n - 1, p) % p;", "        if (n == 0) return 1;\n\
    \        if (n % 2 == 0) {\n            long r = Modp(n / 2, p);\n           \
    \ return r * r % p;\n        }\n        return Modp(n - 1, p) * n % p;", "   \
    \     if (n == 0) {\n            return 1;\n        } else if (n % 2 == 0) {\n\
    \            long half = Modp(n / 2, p);\n            return (half * half) % p;\n\
    \        } else {\n            return (Modp(n - 1, p) * n) % p;\n        }", " \
    \       if (n == 0) return 1;\n        if (n % 2 == 0) {\n            long t =\
    \ Modp(n / 2, p);\n            return (t * t) % p;\n        } else {\n       \
    \     return (n * Modp(n - 1, p)) % p;\n        }", "        if (n == 0) return\
    \ 1;\n        if (n == 1) return n;\n        if (n % 2 == 0) {\n            long\
    \ t = Modp(n / 2, p);\n            return (t * t) % p;\n        }\n        return\
    \ (n * Modp(n - 1, p)) % p;", "        if (n == 0) return 1;\n        if (n ==\
    \ 1) return n;\n        long r = Modp(n / 2, p);\n        r = (r * r) % p;\n \
    \       if (n % 2 == 1) r = (r * n) % p;\n        return r;", "        if (n ==\
    \ 0) return 1;\n        if (n % 2 == 0) return Modp(n / 2, p) * Modp(n / 2, p)\
    \ % p;\n        return n * Modp(n - 1, p) % p;", "        long res = 1;\n    \
    \    while (n > 0) {\n            if ((n & 1) != 0) {\n                res = (res\
    \ * n) % p;\n            }\n            n = n >> 1;\n            n = (n * n) %\
    \ p;\n        }\n        return res;", "        if (n == 0) {\n            return\
    \ 1;\n        }\n        if (n % 2 == 0) {\n            long x = Modp(n / 2, p);\n\
    \            return (x * x) % p;\n        }\n        return (n * Modp(n - 1, p))\
    \ % p;", "        if (n == 0) {\n            return 1;\n        }\n        long\
    \ r = Modp(n / 2, p);\n        r = (r * r) % p;\n        if (n % 2 == 1) {\n \
    \           r = (r * 2) % p;\n        }\n        return r;", "        if (n ==\
    \ 0) return 1;\n        if (n == 1) return n;\n        if (n % 2 == 0) {\n   \
    \         long t = Modp(n / 2, p);\n            return (t * t) % p;\n        }\n\
    \        return (n * Modp(n - 1, p)) % p;", "        if (n == 0) return 1;\n \
    \       if (n == 1) return n;\n        if (n % 2 == 0) return Modp(n / 2, p) *\
    \ Modp(n / 2, p) % p;\n        return Modp(n / 2, p) * Modp(n / 2, p) * n % p;",
  "        if (n == 0) return 1;\n        if (n % 2 == 0) {\n            long t =\
    \ Modp(n / 2, p);\n            return (t * t) % p;\n        } else {\n       \
    \     return (n * Modp(n - 1, p)) % p;\n        }", "        if (n == 0) return\
    \ 1;\n        long ans = Modp(n / 2, p);\n        ans = (ans * ans) % p;\n   \
    \     if (n % 2 == 1) ans = (ans * 2) % p;\n        return ans;", "        if\
    \ (n < 0) {\n            return (p - (-n % p)) % p;\n        }\n        return\
    \ n % p;", "        if (n == 0) {\n            return 1;\n        }\n        if\
    \ (n % 2 == 0) {\n            long x = Modp(n / 2, p);\n            return (x\
    \ * x) % p;\n        }\n        return (Modp(n - 1, p) * n) % p;", "        long\
    \ res = 1;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n       \
    \         res = (res * n) % p;\n            }\n            n = n >> 1;\n     \
    \       n = (n * n) % p;\n        }\n        return res;", "        if (n == 0)\
    \ {\n            return 1;\n        }\n        if (n % 2 == 0) {\n           \
    \ long x = Modp(n / 2, p);\n            return (x * x) % p;\n        }\n     \
    \   return (Modp(n - 1, p) * n) % p;", "        if (n == 0) return 1;\n      \
    \  if (n % 2 == 0) {\n            long t = Modp(n / 2, p);\n            return\
    \ (t * t) % p;\n        } else {\n            return (n * Modp(n - 1, p)) % p;\n\
    \        }", "        if (n == 0) return 1;\n        if (n % 2 == 0) {\n     \
    \       long t = Modp(n / 2, p);\n            return (t * t) % p;\n        } else\
    \ {\n            return (Modp(n - 1, p) * n) % p;\n        }", "        if (n\
    \ == 0) return 1;\n        if (n % 2 == 0) {\n            long t = Modp(n / 2,\
    \ p);\n            return (t * t) % p;\n        } else {\n            return (n\
    \ * Modp(n - 1, p)) % p;\n        }", "        if (n == 0) {\n            return\
    \ 1;\n        }\n        if (n % 2 == 0) {\n            return Modp(n / 2, p)\
    \ * Modp(n / 2, p) % p;\n        }\n        return n * Modp(n - 1, p) % p;", " \
    \       if (n == 0) return 1;\n        if (n % 2 == 0) {\n            long t =\
    \ Modp(n / 2, p);\n            return (t * t) % p;\n        } else {\n       \
    \     return (Modp(n - 1, p) * n) % p;\n        }", "        if (n == 0) return\
    \ 1;\n        if (n % 2 == 0) {\n            long t = Modp(n / 2, p);\n      \
    \      return (t * t) % p;\n        } else {\n            return (Modp(n - 1,\
    \ p) * n) % p;\n        }", "        if (n == 0) return 1;\n        if (n % 2\
    \ == 0) {\n            long t = Modp(n / 2, p);\n            return (t * t) %\
    \ p;\n        } else {\n            return (n * Modp(n - 1, p)) % p;\n       \
    \ }", "        if (n == 0) return 1;\n        if (n % 2 == 0) {\n            long\
    \ x = Modp(n / 2, p);\n            return (x * x) % p;\n        } else {\n   \
    \         return (n * Modp(n - 1, p)) % p;\n        }", "        if (n == 0) return\
    \ 1;\n        if (n % 2 == 0) {\n            long t = Modp(n / 2, p);\n      \
    \      return (t * t) % p;\n        } else {\n            return (n * Modp(n -\
    \ 1, p)) % p;\n        }", "        long result = 1;\n        long base_ = 2;\n\
    \        while (n > 0) {\n            if (n % 2 == 1) {\n                result\
    \ = (result * base_) % p;\n            }\n            n = n / 2;\n           \
    \ base_ = (base_ * base_) % p;\n        }\n        return result;", "        if\
    \ (n == 0) return 1;\n        if (n % 2 == 0) {\n            long t = Modp(n /\
    \ 2, p);\n            return (t * t) % p;\n        } else {\n            return\
    \ (n * Modp(n - 1, p)) % p;\n        }", "        if (n == 0) return 1;\n    \
    \    if (n % 2 == 0) {\n            long t = Modp(n / 2, p);\n            return\
    \ (t * t) % p;\n        } else {\n            return (n * Modp(n - 1, p)) % p;\n\
    \        }", "        if (n == 0) {\n            return 1;\n        }\n      \
    \  if (n % 2 == 0) {\n            long t = Modp(n / 2, p);\n            return\
    \ (t * t) % p;\n        }\n        return (Modp(n - 1, p) * n) % p;", "      \
    \  if (n == 0) return 1;\n        if (n % 2 == 0) {\n            long t = Modp(n\
    \ / 2, p);\n            return (t * t) % p;\n        } else {\n            return\
    \ (n * Modp(n - 1, p)) % p;\n        }", "        if (n == 0) {\n            return\
    \ 1;\n        }\n        long ans = 1;\n        long base_ = n;\n        while\
    \ (p > 0) {\n            if ((p & 1) == 1) {\n                ans = (ans * base_)\
    \ % MOD;\n            }\n            base_ = (base_ * base_) % MOD;\n        \
    \    p >>= 1;\n        }\n        return ans;", "        if (n == 0) {\n     \
    \       return 1;\n        }\n        if (n % 2 == 0) {\n            return Modp(n\
    \ / 2, p) * Modp(n / 2, p) % p;\n        }\n        return n * Modp(n - 1, p)\
    \ % p;", "        if (n == 0) return 1;\n        if (n % 2 == 0) {\n         \
    \   long t = Modp(n / 2, p);\n            return (t * t) % p;\n        } else\
    \ {\n            return (n * Modp(n - 1, p)) % p;\n        }", "        if (n\
    \ < 0) {\n            return (p - Modp(-n, p)) % p;\n        }\n        if (n\
    \ == 0) {\n            return 1;\n        }\n        if (n == 1) {\n         \
    \   return n;\n        }\n        if (n % 2 == 0) {\n            return Modp(n\
    \ / 2, p) * Modp(n / 2, p) % p;\n        }\n        return Modp(n / 2, p) * Modp(n\
    \ / 2, p) * n % p;", "        if (n == 0) return 1;\n        if (n == 1) return\
    \ n;\n        if (n % 2 == 0) {\n            long t = Modp(n / 2, p);\n      \
    \      return (t * t) % p;\n        }\n        return (n * Modp(n - 1, p)) % p;",
  "        if (n == 0) return 1;\n        if (n % 2 == 0) {\n            long t =\
    \ Modp(n / 2, p);\n            return (t * t) % p;\n        } else {\n       \
    \     return (n * Modp(n - 1, p)) % p;\n        }", "        if (n < 0) {\n  \
    \          return p - Modp(-n, p);\n        }\n        long r = 1;\n        long\
    \ b = 2;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n         \
    \       r = (r * b) % p;\n            }\n            n >>= 1;\n            b =\
    \ (b * b) % p;\n        }\n        return r;", "        if (n == 0) return 1;\n\
    \        if (n == 1) return n;\n        if (n % 2 == 0) {\n            long t\
    \ = Modp(n / 2, p);\n            return (t * t) % p;\n        }\n        return\
    \ (n * Modp(n - 1, p)) % p;", "        if (n == 0) return 1;\n        if (n ==\
    \ 1) return n;\n        if (n % 2 == 0) {\n            long t = Modp(n / 2, p);\n\
    \            return (t * t) % p;\n        }\n        return (n * Modp(n - 1, p))\
    \ % p;", "        if (n == 0) {\n            return 1;\n        }\n        if\
    \ (n == 1) {\n            return n;\n        }\n        if (n % 2 == 0) {\n  \
    \          return Modp(n / 2, p) * Modp(n / 2, p) % p;\n        }\n        return\
    \ n * Modp(n - 1, p) % p;", "        if (n == 0) return 1;\n        if (n % 2\
    \ == 0) {\n            long t = Modp(n / 2, p);\n            return (t * t) %\
    \ p;\n        } else {\n            return (n * Modp(n - 1, p)) % p;\n       \
    \ }", "        if (n == 0) return 1;\n        if (n % 2 == 0) {\n            long\
    \ t = Modp(n / 2, p);\n            return (t * t) % p;\n        } else {\n   \
    \         return (Modp(n - 1, p) * n) % p;\n        }", "        if (n == 0) return\
    \ 1;\n        if (n % 2 == 0) {\n            long t = Modp(n / 2, p);\n      \
    \      return (t * t) % p;\n        } else {\n            return (n * Modp(n -\
    \ 1, p)) % p;\n        }", "        if (n == 0) return 1;\n        if (n == 1)\
    \ return n;\n        if (n % 2 == 0) {\n            long x = Modp(n / 2, p);\n\
    \            return (x * x) % p;\n        } else {\n            return (n * Modp(n\
    \ - 1, p)) % p;\n        }", "        long result = 1;\n        long base_ = 2;\n\
    \        while (n > 0) {\n            if (n % 2 == 1) {\n                result\
    \ = (result * base_) % p;\n            }\n            n /= 2;\n            base_\
    \ = (base_ * base_) % p;\n        }\n        return result;", "        if (n ==\
    \ 0) return 1;\n        if (n == 1) return n;\n        if (n % 2 == 0) {\n   \
    \         long x = Modp(n / 2, p);\n            return (x * x) % p;\n        }\
    \ else {\n            return (n * Modp(n - 1, p)) % p;\n        }", "        if\
    \ (n < 0) {\n            n = n % p + p;\n        }\n        return n % p;", " \
    \       if (n < 0) {\n            n = n % p + p;\n        }\n        return n\
    \ % p;", "        if (n < 0) {\n            return p - Modp(-n, p);\n        }\n\
    \        long res = 1;\n        while (n > 0) {\n            if ((n & 1) == 1)\
    \ {\n                res = (res * 2) % p;\n            }\n            n >>= 1;\n\
    \        }\n        return res;", "        if (n == 0) {\n            return 1;\n\
    \        }\n        if (n % 2 == 0) {\n            long x = Modp(n / 2, p);\n\
    \            return x * x % p;\n        }\n        return n * Modp(n - 1, p) %\
    \ p;", "        if (n == 0) {\n            return 1;\n        }\n        long\
    \ r = Modp(n / 2, p);\n        r = (r * r) % p;\n        if (n % 2 == 1) {\n \
    \           r = (r * 2) % p;\n        }\n        return r;", "        if (n ==\
    \ 0) return 1;\n        if (n % 2 == 0) {\n            long m = Modp(n / 2, p);\n\
    \            return (m * m) % p;\n        } else {\n            return (n * Modp(n\
    \ - 1, p)) % p;\n        }", "        if (n == 0) return 1;\n        if (n % 2\
    \ == 0) {\n            long t = Modp(n / 2, p);\n            return (t * t) %\
    \ p;\n        } else {\n            return (Modp(n - 1, p) * n) % p;\n       \
    \ }", "        if (n == 0) return 1;\n        if (n % 2 == 0) {\n            long\
    \ t = Modp(n / 2, p);\n            return (t * t) % p;\n        } else {\n   \
    \         return (n * Modp(n - 1, p)) % p;\n        }", "        if (n == 0) return\
    \ 1;\n        if (n == 1) return n;\n        if (n % 2 == 0) {\n            long\
    \ x = Modp(n / 2, p);\n            return (x * x) % p;\n        } else {\n   \
    \         return (n * Modp(n - 1, p)) % p;\n        }", "        long r = 1;\n\
    \        long b = 2;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n\
    \                r = (r * b) % p;\n            }\n            n >>= 1;\n     \
    \       b = (b * b) % p;\n        }\n        return r;", "        if (n == 0)\
    \ {\n            return 1;\n        }\n        if (n % 2 == 0) {\n           \
    \ return Modp(n / 2, p) * Modp(n / 2, p) % p;\n        }\n        return Modp(n\
    \ / 2, p) * Modp(n / 2, p) * n % p;", "        if (n == 0) {\n            return\
    \ 1;\n        }\n        if (n % 2 == 0) {\n            long t = Modp(n / 2, p);\n\
    \            return (t * t) % p;\n        }\n        return (Modp(n - 1, p) *\
    \ n) % p;", "        long res = 1;\n        for (int i = 0; i < n; i++) {\n  \
    \          res = (res * 2) % p;\n        }\n        return res;", "        if\
    \ (n < 0) {\n            return ((-n) % p + p) % p;\n        }\n        return\
    \ n % p;", "        if (n == 0) return 1;\n        if (n % 2 == 0) {\n       \
    \     long t = Modp(n / 2, p);\n            return (t * t) % p;\n        } else\
    \ {\n            return (n * Modp(n - 1, p)) % p;\n        }", "        if (n\
    \ == 0) return 1;\n        if (n == 1) return n;\n        if (n % 2 == 0) {\n\
    \            long m = Modp(n / 2, p);\n            return (m * m) % p;\n     \
    \   }\n        return (n * Modp(n - 1, p)) % p;", "        if (n == 0) return\
    \ 1;\n        if (n % 2 == 0) {\n            long x = Modp(n / 2, p);\n      \
    \      return (x * x) % p;\n        } else {\n            return (n * Modp(n -\
    \ 1, p)) % p;\n        }", "        if (n == 0) {\n            return 1;\n   \
    \     }\n        if (n % 2 == 0) {\n            long x = Modp(n / 2, p);\n   \
    \         return (x * x) % p;\n        }\n        return (Modp(n - 1, p) * n)\
    \ % p;", "        long result = 1;\n        long base_ = 2;\n        while (n\
    \ > 0) {\n            if (n % 2 == 1) {\n                result = (result * base_)\
    \ % p;\n            }\n            n /= 2;\n            base_ = (base_ * base_)\
    \ % p;\n        }\n        return result;", "        if (n == 0) return 1;\n \
    \       if (n == 1) return n;\n        if (n % 2 == 0) {\n            long t =\
    \ Modp(n / 2, p);\n            return (t * t) % p;\n        }\n        return\
    \ (n * Modp(n - 1, p)) % p;", "        if (n == 0) {\n            return 1;\n\
    \        }\n        if (n % 2 == 0) {\n            return Modp(n / 2, p) * Modp(n\
    \ / 2, p) % p;\n        }\n        return Modp(n / 2, p) * Modp(n / 2, p) * n\
    \ % p;", "        if (n == 0) {\n            return 1;\n        }\n        if\
    \ (n % 2 == 0) {\n            long t = Modp(n / 2, p);\n            return (t\
    \ * t) % p;\n        }\n        return (Modp(n - 1, p) * n) % p;", "        if\
    \ (n == 0) return 1;\n        if (n % 2 == 0) {\n            long t = Modp(n /\
    \ 2, p);\n            return (t * t) % p;\n        } else {\n            return\
    \ (Modp(n - 1, p) * n) % p;\n        }", "        long res = 1;\n        while\
    \ (n > 0) {\n            if ((n & 1) == 1) {\n                res = (res * n)\
    \ % p;\n            }\n            n = n >> 1;\n            n = (n * n) % p;\n\
    \        }\n        return res;", "        long result = 1;\n        long power\
    \ = n;\n        while (p > 0) {\n            if ((p & 1) == 1) {\n           \
    \     result = (result * power) % 1000000007;\n            }\n            power\
    \ = (power * power) % 1000000007;\n            p >>= 1;\n        }\n        return\
    \ result;", "        if (n == 0) return 1;\n        if (n == 1) return n;\n  \
    \      if (n % 2 == 0) {\n            long t = Modp(n / 2, p);\n            return\
    \ (t * t) % p;\n        }\n        return (n * Modp(n - 1, p)) % p;", "      \
    \  if (n == 0) {\n            return 1;\n        }\n        if (n % 2 == 0) {\n\
    \            long x = Modp(n / 2, p);\n            return (x * x) % p;\n     \
    \   }\n        return (Modp(n - 1, p) * n) % p;", "        if (n == 0) return\
    \ 1;\n        if (n % 2 == 0) {\n            long r = Modp(n / 2, p);\n      \
    \      return (r * r) % p;\n        } else {\n            return (n * Modp(n -\
    \ 1, p)) % p;\n        }", "        if (n == 0) return 1;\n        if (n % 2 ==\
    \ 0) {\n            long t = Modp(n / 2, p);\n            return (t * t) % p;\n\
    \        } else {\n            return (Modp(n - 1, p) * n) % p;\n        }", " \
    \       if (n < 0) {\n            return p - Modp(-n, p);\n        }\n       \
    \ if (n < p) {\n            return n;\n        }\n        if (n % p == 0) {\n\
    \            return 0;\n        }\n        if (n < p * p) {\n            return\
    \ n % p;\n        }\n        return Modp(n / p, p) * p + n % p;", "        if\
    \ (n == 0) {\n            return 1;\n        }\n        if (n % 2 == 0) {\n  \
    \          long x = Modp(n / 2, p);\n            return (x * x) % p;\n       \
    \ }\n        return (Modp(n - 1, p) * n) % p;", "        if (n == 0) return 1;\n\
    \        if (n % 2 == 0) {\n            long t = Modp(n / 2, p);\n           \
    \ return (t * t) % p;\n        } else {\n            return (Modp(n - 1, p) *\
    \ n) % p;\n        }", "        if (n == 0) return 1;\n        if (n % 2 == 0)\
    \ {\n            long t = Modp(n / 2, p);\n            return (t * t) % p;\n \
    \       } else {\n            return (n * Modp(n - 1, p)) % p;\n        }", " \
    \       if (n == 0) return 1;\n        if (n % 2 == 0) {\n            long t =\
    \ Modp(n / 2, p);\n            return (t * t) % p;\n        } else {\n       \
    \     return (n * Modp(n - 1, p)) % p;\n        }", "        long r = 1;\n   \
    \     long b = 2;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n\
    \                r = (r * b) % p;\n            }\n            n >>= 1;\n     \
    \       b = (b * b) % p;\n        }\n        return r;", "        if (n == 0)\
    \ return 1;\n        if (n == 1) return n;\n        if (n % 2 == 0) {\n      \
    \      long x = Modp(n / 2, p);\n            return (x * x) % p;\n        } else\
    \ {\n            return (n * Modp(n - 1, p)) % p;\n        }", "        if (n\
    \ == 0) return 1;\n        if (n == 1) return n;\n        if (n % 2 == 0) {\n\
    \            long t = Modp(n / 2, p);\n            return (t * t) % p;\n     \
    \   }\n        return (n * Modp(n - 1, p)) % p;", "        if (n == 0) return\
    \ 1;\n        if (n % 2 == 0) {\n            long t = Modp(n / 2, p);\n      \
    \      return (t * t) % p;\n        } else {\n            return (Modp(n - 1,\
    \ p) * n) % p;\n        }", "        if (n == 0) return 1;\n        if (n % 2\
    \ == 0) {\n            long t = Modp(n / 2, p);\n            return (t * t) %\
    \ p;\n        } else {\n            return (Modp(n - 1, p) * n) % p;\n       \
    \ }", "        long res = 1;\n        while (n > 0) {\n            if ((n & 1)\
    \ == 1) {\n                res = (res * n) % p;\n            }\n            n\
    \ = n >> 1;\n            n = (n * n) % p;\n        }\n        return res;", " \
    \       long res = 1;\n        while (n > 0) {\n            if ((n & 1) == 1)\
    \ {\n                res = (res * n) % p;\n            }\n            n = n >>\
    \ 1;\n            n = (n * n) % p;\n        }\n        return res;", "       \
    \ if (n == 0) {\n            return 1;\n        }\n        if (n % 2 == 0) {\n\
    \            long x = Modp(n / 2, p);\n            return (x * x) % p;\n     \
    \   }\n        return (Modp(n - 1, p) * n) % p;", "        long res = 1;\n   \
    \     for (int i = 0; i < n; i++) {\n            res = (res * 2) % p;\n      \
    \  }\n        return res;", "        if (n == 0) return 1;\n        if (n == 1)\
    \ return n;\n        if (n % 2 == 0) {\n            long t = Modp(n / 2, p);\n\
    \            return (t * t) % p;\n        }\n        return (n * Modp(n - 1, p))\
    \ % p;", "        if (n == 0) return 1;\n        if (n == 1) return n;\n     \
    \   if (n % 2 == 0) {\n            long x = Modp(n / 2, p);\n            return\
    \ (x * x) % p;\n        } else {\n            return (n * Modp(n - 1, p)) % p;\n\
    \        }", "        if (n == 0) return 1;\n        long r = Modp(n / 2, p);\n\
    \        r = (r * r) % p;\n        if (n % 2 == 1) r = (r * 2) % p;\n        return\
    \ r;", "        if (n == 0) return 1;\n        if (n % 2 == 0) {\n           \
    \ long t = Modp(n / 2, p);\n            return (t * t) % p;\n        } else {\n\
    \            return (n * Modp(n - 1, p)) % p;\n        }", "        if (n == 0)\
    \ return 1;\n        if (n % 2 == 0) {\n            long t = Modp(n / 2, p);\n\
    \            return t * t % p;\n        }\n        return Modp(n - 1, p) * n %\
    \ p;", "        if (n == 0) {\n            return 1;\n        }\n        if (n\
    \ % 2 == 0) {\n            return Modp(n / 2, p) * Modp(n / 2, p) % p;\n     \
    \   }\n        return Modp(n / 2, p) * Modp(n / 2, p) * n % p;", "        if (n\
    \ == 0) return 1;\n        if (n % 2 == 0) {\n            long t = Modp(n / 2,\
    \ p);\n            return (t * t) % p;\n        } else {\n            return (n\
    \ * Modp(n - 1, p)) % p;\n        }", "        if (n == 0) {\n            return\
    \ 1;\n        }\n        if (n % 2 == 0) {\n            return Modp(n / 2, p)\
    \ * Modp(n / 2, p) % p;\n        }\n        return Modp(n / 2, p) * Modp(n / 2,\
    \ p) * n % p;", "        if (n == 0) return 1;\n        if (n % 2 == 0) {\n  \
    \          long t = Modp(n / 2, p);\n            return (t * t) % p;\n       \
    \ } else {\n            return (Modp(n - 1, p) * n) % p;\n        }", "      \
    \  if (n == 0) {\n            return 1;\n        }\n        if (n % 2 == 0) {\n\
    \            long x = Modp(n / 2, p);\n            return x * x % p;\n       \
    \ }\n        return n * Modp(n - 1, p) % p;", "        if (n == 0) return 1;\n\
    \        if (n % 2 == 0) {\n            long t = Modp(n / 2, p);\n           \
    \ return (t * t) % p;\n        } else {\n            return (n * Modp(n - 1, p))\
    \ % p;\n        }", "        if (n == 0) return 1;\n        if (n % 2 == 0) {\n\
    \            long t = Modp(n / 2, p);\n            return (t * t) % p;\n     \
    \   } else {\n            return (n * Modp(n - 1, p)) % p;\n        }", "    \
    \    if (n == 0) return 1;\n        if (n % 2 == 0) {\n            long t = Modp(n\
    \ / 2, p);\n            return (t * t) % p;\n        } else {\n            return\
    \ (Modp(n - 1, p) * n) % p;\n        }", "        if (n == 0) {\n            return\
    \ 1;\n        }\n        long res = Modp(n / 2, p);\n        res = (res * res)\
    \ % p;\n        if (n % 2 == 1) {\n            res = (res * 2) % p;\n        }\n\
    \        return res;", "        if (n < 0) {\n            return Modp(n + p, p);\n\
    \        }\n        if (n < p) {\n            return n;\n        }\n        if\
    \ (n % p == 0) {\n            return 0;\n        }\n        if (n % 2 == 0) {\n\
    \            return Modp(n / 2, p) * 2 % p;\n        }\n        return Modp(n\
    \ / 2, p) * 2 % p + 1;", "        if (n == 0) return 1;\n        if (n == 1) return\
    \ n;\n        if (n % 2 == 0) {\n            long t = Modp(n / 2, p);\n      \
    \      return (t * t) % p;\n        }\n        return (n * Modp(n - 1, p)) % p;",
  "        if (n == 0) return 1;\n        if (n == 1) return n;\n        if (n % 2\
    \ == 0) {\n            long x = Modp(n / 2, p);\n            return (x * x) %\
    \ p;\n        } else {\n            return (n * Modp(n - 1, p)) % p;\n       \
    \ }", "        long r = 1;\n        while (n > 0) {\n            if ((n & 1) ==\
    \ 1) {\n                r = (r * n) % p;\n            }\n            n = n >>\
    \ 1;\n            n = (n * n) % p;\n        }\n        return r;", "        if\
    \ (n == 0) {\n            return 1;\n        }\n        if (n % 2 == 0) {\n  \
    \          long t = Modp(n / 2, p);\n            return (t * t) % p;\n       \
    \ }\n        return (Modp(n - 1, p) * n) % p;", "        if (n == 0) {\n     \
    \       return 1;\n        }\n        if (n % 2 == 0) {\n            long x =\
    \ Modp(n / 2, p);\n            return (x * x) % p;\n        }\n        return\
    \ (Modp(n - 1, p) * n) % p;", "        if (n == 0) return 1;\n        if (n %\
    \ 2 == 0) {\n            long t = Modp(n / 2, p);\n            return (t * t)\
    \ % p;\n        } else {\n            return (n * Modp(n - 1, p)) % p;\n     \
    \   }", "        if (n == 0) return 1;\n        if (n % 2 == 0) {\n          \
    \  long t = Modp(n / 2, p);\n            return (t * t) % p;\n        } else {\n\
    \            return (Modp(n - 1, p) * n) % p;\n        }", "        if (n == 0)\
    \ return 1;\n        if (n % 2 == 0) {\n            long t = Modp(n / 2, p);\n\
    \            return (t * t) % p;\n        } else {\n            return (n * Modp(n\
    \ - 1, p)) % p;\n        }", "        if (n == 0) return 1;\n        if (n ==\
    \ 1) return n;\n        if (n % 2 == 0) {\n            long x = Modp(n / 2, p);\n\
    \            return (x * x) % p;\n        } else {\n            return (n * Modp(n\
    \ - 1, p)) % p;\n        }", "        if (n == 0) return 1;\n        if (n % 2\
    \ == 0) {\n            long t = Modp(n / 2, p);\n            return (t * t) %\
    \ p;\n        } else {\n            return (n * Modp(n - 1, p)) % p;\n       \
    \ }", "        if (n == 0) return 1;\n        long z = Modp(n / 2, p);\n     \
    \   if (n % 2 == 0) return z * z % p;\n        else return z * z % p * n % p;",
  "        if (n == 0) return 1;\n        if (n % 2 == 0) {\n            long t =\
    \ Modp(n / 2, p);\n            return (t * t) % p;\n        } else {\n       \
    \     return (n * Modp(n - 1, p)) % p;\n        }", "        if (n == 0) {\n \
    \           return 1;\n        }\n        if (n % 2 == 0) {\n            long\
    \ t = Modp(n / 2, p);\n            return (t * t) % p;\n        }\n        return\
    \ (Modp(n - 1, p) * n) % p;", "        if (n == 0) return 1;\n        if (n %\
    \ 2 == 0) {\n            long t = Modp(n / 2, p);\n            return (t * t)\
    \ % p;\n        } else {\n            return (n * Modp(n - 1, p)) % p;\n     \
    \   }", "        if (n == 0) return 1;\n        if (n % 2 == 0) {\n          \
    \  long t = Modp(n / 2, p);\n            return (t * t) % p;\n        } else {\n\
    \            return (Modp(n - 1, p) * n) % p;\n        }", "        if (n == 0)\
    \ return 1;\n        if (n % 2 == 0) {\n            long r = Modp(n / 2, p);\n\
    \            return (r * r) % p;\n        } else {\n            return (n * Modp(n\
    \ - 1, p)) % p;\n        }", "        if (n == 0) return 1;\n        if (n % 2\
    \ == 0) {\n            long x = Modp(n / 2, p);\n            return (x * x) %\
    \ p;\n        } else {\n            return (n * Modp(n - 1, p)) % p;\n       \
    \ }", "        if (n == 0) {\n            return 1;\n        }\n        if (n\
    \ % 2 == 0) {\n            return Modp(n / 2, p) * Modp(n / 2, p) % p;\n     \
    \   }\n        return n * Modp(n - 1, p) % p;", "        if (n == 0) return 1;\n\
    \        if (n == 1) return n;\n        if (n % 2 == 0) {\n            long t\
    \ = Modp(n / 2, p);\n            return (t * t) % p;\n        }\n        return\
    \ (n * Modp(n - 1, p)) % p;", "        if (n == 0) return 1;\n        long a =\
    \ Modp(n / 2, p);\n        a = a * a % p;\n        if (n % 2 == 1) a = a * 2 %\
    \ p;\n        return a;", "        if (n == 0) return 1;\n        if (n % 2 ==\
    \ 0) {\n            long t = Modp(n / 2, p);\n            return (t * t) % p;\n\
    \        } else {\n            return (Modp(n - 1, p) * n) % p;\n        }", " \
    \       if (n < 0) {\n            n = n % p + p;\n        }\n        return n\
    \ % p;", "        if (n == 0) return 1;\n        if (n == 1) return n;\n     \
    \   if (n % 2 == 0) {\n            long x = Modp(n / 2, p);\n            return\
    \ (x * x) % p;\n        } else {\n            return (n * Modp(n - 1, p)) % p;\n\
    \        }", "        if (n == 0) {\n            return 1;\n        }\n      \
    \  long r = Modp(n / 2, p);\n        r = (r * r) % p;\n        if (n % 2 == 1)\
    \ {\n            r = (r * 2) % p;\n        }\n        return r;", "        long\
    \ res = 1;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n       \
    \         res = (res * n) % p;\n            }\n            n = n >> 1;\n     \
    \       n = (n * n) % p;\n        }\n        return res;", "        if (n == 0)\
    \ {\n            return 1;\n        }\n        long result = Modp(n / 2, p);\n\
    \        result = (result * result) % p;\n        if (n % 2 == 1) {\n        \
    \    result = (result * n) % p;\n        }\n        return result;", "       \
    \ if (n < 0) {\n            return Modp(-n, p);\n        }\n        if (n == 0)\
    \ {\n            return 1;\n        }\n        if (n == 1) {\n            return\
    \ n;\n        }\n        if (n % 2 == 0) {\n            return Modp(n / 2, p)\
    \ * Modp(n / 2, p) % p;\n        }\n        return Modp(n / 2, p) * Modp(n / 2,\
    \ p) * n % p;", "        if (n == 0) return 1;\n        if (n % 2 == 0) {\n  \
    \          long t = Modp(n / 2, p);\n            return (t * t) % p;\n       \
    \ } else {\n            return (n * Modp(n - 1, p)) % p;\n        }", "      \
    \  if (n == 0) return 1;\n        if (n == 1) return n;\n        if (n % 2 ==\
    \ 0) {\n            long t = Modp(n / 2, p);\n            return (t * t) % p;\n\
    \        }\n        return (n * Modp(n - 1, p)) % p;", "        if (n == 0) return\
    \ 1;\n        if (n == 1) return n;\n        if (n % 2 == 0) {\n            long\
    \ x = Modp(n / 2, p);\n            return (x * x) % p;\n        } else {\n   \
    \         return (n * Modp(n - 1, p)) % p;\n        }", "        if (n == 0) return\
    \ 1;\n        long z = Modp(n / 2, p);\n        if (n % 2 == 0) return z * z %\
    \ p;\n        else return z * z % p * n % p;", "        if (n == 0) {\n      \
    \      return 1;\n        }\n        if (n % 2 == 0) {\n            long half\
    \ = Modp(n / 2, p);\n            return (half * half) % p;\n        }\n      \
    \  return (Modp(n - 1, p) * n) % p;", "        if (n == 0) return 1;\n       \
    \ if (n % 2 == 0) {\n            long t = Modp(n / 2, p);\n            return\
    \ (t * t) % p;\n        } else {\n            return (Modp(n - 1, p) * n) % p;\n\
    \        }", "        long result = 1;\n        long base_ = 2;\n        while\
    \ (n > 0) {\n            if (n % 2 == 1) {\n                result = (result *\
    \ base_) % p;\n            }\n            n = n / 2;\n            base_ = (base_\
    \ * base_) % p;\n        }\n        return result;", "        if (n == 0) {\n\
    \            return 1;\n        }\n        long res = Modp(n / 2, p);\n      \
    \  res = (res * res) % p;\n        if (n % 2 == 1) {\n            res = (res *\
    \ 2) % p;\n        }\n        return res;", "        long r = 1;\n        while\
    \ (n > 0) {\n            if ((n & 1) == 1) {\n                r = (r * n) % p;\n\
    \            }\n            n = n >> 1;\n            n = (n * n) % p;\n      \
    \  }\n        return r;", "        if (n == 0) return 1;\n        if (n % 2 ==\
    \ 0) {\n            long t = Modp(n / 2, p);\n            return (t * t) % p;\n\
    \        } else {\n            return (n * Modp(n - 1, p)) % p;\n        }", " \
    \       if (n == 0) return 1;\n        long r = Modp(n / 2, p);\n        r = (r\
    \ * r) % p;\n        if (n % 2 == 1) r = (r * 2) % p;\n        return r;", " \
    \       if (n == 0) return 1;\n        if (n % 2 == 0) {\n            long t =\
    \ Modp(n / 2, p);\n            return (t * t) % p;\n        } else {\n       \
    \     return (n * Modp(n - 1, p)) % p;\n        }", "        if (n == 0) {\n \
    \           return 1;\n        }\n        if (n % 2 == 0) {\n            return\
    \ Modp(n / 2, p) * Modp(n / 2, p) % p;\n        }\n        return n * Modp(n -\
    \ 1, p) % p;", "        if (n == 0) return 1;\n        if (n % 2 == 0) {\n   \
    \         long t = Modp(n / 2, p);\n            return (t * t) % p;\n        }\
    \ else {\n            return (Modp(n - 1, p) * n) % p;\n        }", "        if\
    \ (n == 0) {\n            return 1;\n        }\n        if (n % 2 == 0) {\n  \
    \          return Modp(n / 2, p) * Modp(n / 2, p) % p;\n        }\n        return\
    \ Modp(n / 2, p) * Modp(n / 2, p) * n % p;", "        if (n == 0) {\n        \
    \    return 1;\n        }\n        long r = Modp(n / 2, p);\n        r = (r *\
    \ r) % p;\n        if (n % 2 == 1) {\n            r = (r * 2) % p;\n        }\n\
    \        return r;", "        if (n == 0) return 1;\n        if (n % 2 == 0) {\n\
    \            long t = Modp(n / 2, p);\n            return (t * t) % p;\n     \
    \   } else {\n            return (n * Modp(n - 1, p)) % p;\n        }", "    \
    \    if (n < 0) {\n            return p - Modp(-n, p);\n        }\n        if\
    \ (n < p) {\n            return n;\n        }\n        if (n % p == 0) {\n   \
    \         return 0;\n        }\n        if (n % 2 == 0) {\n            return\
    \ 2 * Modp(n / 2, p);\n        }\n        return p + Modp(n - p, p);", "     \
    \   if (n == 0) return 1;\n        if (n % 2 == 0) {\n            long t = Modp(n\
    \ / 2, p);\n            return (t * t) % p;\n        } else {\n            return\
    \ (n * Modp(n - 1, p)) % p;\n        }", "        if (n == 0) return 1;\n    \
    \    if (n % 2 == 0) {\n            long t = Modp(n / 2, p);\n            return\
    \ (t * t) % p;\n        } else {\n            return (Modp(n - 1, p) * n) % p;\n\
    \        }", "        if (n == 0) return 1;\n        if (n % 2 == 0) {\n     \
    \       long t = Modp(n / 2, p);\n            return (t * t) % p;\n        } else\
    \ {\n            return (n * Modp(n - 1, p)) % p;\n        }", "        if (n\
    \ == 0) return 1;\n        if (n % 2 == 0) {\n            long ret = Modp(n /\
    \ 2, p);\n            return (ret * ret) % p;\n        } else {\n            return\
    \ (Modp(n - 1, p) * n) % p;\n        }", "        if (n == 0) return 1;\n    \
    \    if (n % 2 == 0) {\n            long t = Modp(n / 2, p);\n            return\
    \ (t * t) % p;\n        } else {\n            return (Modp(n - 1, p) * n) % p;\n\
    \        }", "        if (n == 0) return 1;\n        if (n == 1) return n;\n \
    \       if (n % 2 == 0) {\n            long t = Modp(n / 2, p);\n            return\
    \ (t * t) % p;\n        }\n        return (n * Modp(n - 1, p)) % p;", "      \
    \  if (n == 0) return 1;\n        if (n % 2 == 0) {\n            long t = Modp(n\
    \ / 2, p);\n            return (t * t) % p;\n        } else {\n            return\
    \ (n * Modp(n - 1, p)) % p;\n        }", "        if (n == 0) {\n            return\
    \ 1;\n        }\n        if (n % 2 == 0) {\n            long t = Modp(n / 2, p);\n\
    \            return (t * t) % p;\n        }\n        return (Modp(n - 1, p) *\
    \ n) % p;", "        if (n == 0) {\n            return 1;\n        }\n       \
    \ if (n % 2 == 0) {\n            long x = Modp(n / 2, p);\n            return\
    \ (x * x) % p;\n        }\n        return (Modp(n - 1, p) * n) % p;", "      \
    \  if (n == 0) return 1;\n        if (n % 2 == 0) {\n            long t = Modp(n\
    \ / 2, p);\n            return (t * t) % p;\n        } else {\n            return\
    \ (n * Modp(n - 1, p)) % p;\n        }", "        if (n == 0) return 1;\n    \
    \    if (n % 2 == 0) {\n            long t = Modp(n / 2, p);\n            return\
    \ (t * t) % p;\n        } else {\n            return (n * Modp(n - 1, p)) % p;\n\
    \        }", "        if (n == 0) {\n            return 1;\n        }\n      \
    \  if (n % 2 == 0) {\n            long t = Modp(n / 2, p);\n            return\
    \ (t * t) % p;\n        }\n        return (Modp(n - 1, p) * n) % p;", "      \
    \  long result = 1;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n\
    \                result = (result * n) % p;\n            }\n            n = n\
    \ >> 1;\n            n = (n * n) % p;\n        }\n        return result;", " \
    \       if (n == 0) return 1;\n        if (n % 2 == 0) {\n            long t =\
    \ Modp(n / 2, p);\n            return (t * t) % p;\n        } else {\n       \
    \     return (n * Modp(n - 1, p)) % p;\n        }", "        if (n == 0) {\n \
    \           return 1;\n        }\n        if (n % 2 == 0) {\n            return\
    \ Modp(n / 2, p) * Modp(n / 2, p) % p;\n        }\n        return Modp(n / 2,\
    \ p) * Modp(n / 2, p) * n % p;", "        if (n == 0) {\n            return 1;\n\
    \        }\n        long result = Modp(n / 2, p);\n        result = (result *\
    \ result) % p;\n        if (n % 2 == 1) {\n            result = (result * 2) %\
    \ p;\n        }\n        return result;", "        if (n == 0) {\n           \
    \ return 1;\n        }\n        if (n % 2 == 0) {\n            long t = Modp(n\
    \ / 2, p);\n            return t * t % p;\n        }\n        return n * Modp(n\
    \ - 1, p) % p;", "        if (n == 0) {\n            return 1;\n        }\n  \
    \      if (n % 2 == 0) {\n            long x = Modp(n / 2, p);\n            return\
    \ (x * x) % p;\n        }\n        return (Modp(n - 1, p) * n) % p;", "      \
    \  if (n == 0) return 1;\n        if (n % 2 == 0) {\n            long x = Modp(n\
    \ / 2, p);\n            return (x * x) % p;\n        } else {\n            return\
    \ (n * Modp(n - 1, p)) % p;\n        }", "        if (n == 0) {\n            return\
    \ 1;\n        }\n        if (n == 1) {\n            return n;\n        }\n   \
    \     long half = Modp(n / 2, p);\n        long result = half * half % p;\n  \
    \      if (n % 2 == 1) {\n            result = result * n % p;\n        }\n  \
    \      return result;", "        if (n == 0) return 1;\n        if (n == 1) return\
    \ n;\n        if (n % 2 == 0) {\n            long t = Modp(n / 2, p);\n      \
    \      return (t * t) % p;\n        }\n        return (n * Modp(n - 1, p)) % p;",
  "        long r = n % p;\n        if (r < 0) r += p;\n        return r;", "    \
    \    if (n == 0) {\n            return 1;\n        }\n        long r = Modp(n\
    \ / 2, p);\n        r = (r * r) % p;\n        if (n % 2 == 1) {\n            r\
    \ = (r * 2) % p;\n        }\n        return r;", "        if (n == 0) return 1;\n\
    \        if (n % 2 == 0) {\n            long t = Modp(n / 2, p);\n           \
    \ return (t * t) % p;\n        } else {\n            return (n * Modp(n - 1, p))\
    \ % p;\n        }", "        if (n == 0) {\n            return 1;\n        }\n\
    \        if (n % 2 == 0) {\n            return Modp(n / 2, p) * Modp(n / 2, p)\
    \ % p;\n        }\n        return Modp(n / 2, p) * Modp(n / 2, p) * n % p;", " \
    \       if (n == 0) {\n            return 1;\n        }\n        if (n % 2 ==\
    \ 0) {\n            long x = Modp(n / 2, p);\n            return (x * x) % p;\n\
    \        }\n        return (Modp(n - 1, p) * n) % p;", "        if (n == 0) return\
    \ 1;\n        if (n % 2 == 0) {\n            long t = Modp(n / 2, p);\n      \
    \      return (t * t) % p;\n        } else {\n            return (n * Modp(n -\
    \ 1, p)) % p;\n        }", "        if (n == 0) {\n            return 1;\n   \
    \     }\n        long res = Modp(n / 2, p);\n        res = (res * res) % p;\n\
    \        if (n % 2 == 1) {\n            res = (res * 2) % p;\n        }\n    \
    \    return res;", "        if (n == 0) return 1;\n        if (n % 2 == 0) {\n\
    \            long x = Modp(n / 2, p);\n            return (x * x) % p;\n     \
    \   } else {\n            return (n * Modp(n - 1, p)) % p;\n        }", "    \
    \    if (n == 0) return 1;\n        if (n % 2 == 0) {\n            long t = Modp(n\
    \ / 2, p);\n            return (t * t) % p;\n        } else {\n            return\
    \ (n * Modp(n - 1, p)) % p;\n        }", "        if (n == 0) {\n            return\
    \ 1;\n        }\n        if (n % 2 == 0) {\n            long t = Modp(n / 2, p);\n\
    \            return (t * t) % p;\n        }\n        return (Modp(n - 1, p) *\
    \ n) % p;", "        if (n == 0) return 1;\n        if (n % 2 == 0) {\n      \
    \      long t = Modp(n / 2, p);\n            return (t * t) % p;\n        } else\
    \ {\n            return (n * Modp(n - 1, p)) % p;\n        }", "        if (n\
    \ == 0) {\n            return 1;\n        }\n        if (n % 2 == 0) {\n     \
    \       long x = Modp(n / 2, p);\n            return (x * x) % p;\n        }\n\
    \        return (Modp(n - 1, p) * n) % p;", "        if (n < 0) {\n          \
    \  return (p - (-n % p)) % p;\n        }\n        return n % p;", "        if\
    \ (n == 0) {\n            return 1;\n        }\n        if (n % 2 == 0) {\n  \
    \          long x = Modp(n / 2, p);\n            return (x * x) % p;\n       \
    \ }\n        return (Modp(n - 1, p) * n) % p;", "        if (n < 0) {\n      \
    \      n = n % p + p;\n        }\n        return n % p;"]
stop_tokens:
- "\n    }\n"
