name: HumanEval_126_is_sorted
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a list of numbers, return whether or not they are sorted\n\
  \    // in ascending order. If list has more than 1 duplicate of the same\n    //\
  \ number, return False. Assume no negative numbers and only integers.\n    // Examples\n\
  \    // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n  \
  \  // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,\
  \ (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,\
  \ (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n\
  \    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
  \ (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>\
  \ IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,\
  \ (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new\
  \ long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //\
  \ (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
  \ (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>\
  \ lst) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
  \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
  \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
  \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
  \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
  \ (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new\
  \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,\
  \ (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n\
  \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n\
  \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))\
  \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
  \ (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))\
  \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
  \ (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n\
  \    }\n\n}\n"
completions: ["        if (lst.Count == 0) {\n            return true;\n        }\n\
    \        long last = lst[0];\n        bool seen = false;\n        for (int i =\
    \ 1; i < lst.Count; i++) {\n            if (lst[i] < last) {\n               \
    \ return false;\n            }\n            if (lst[i] == last) {\n          \
    \      if (seen) {\n                    return false;\n                }\n   \
    \             seen = true;\n            }\n            last = lst[i];\n      \
    \  }\n        return true;", "        long last = lst[0];\n        bool seen =\
    \ false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                return false;\n            }\n            if (lst[i]\
    \ == last) {\n                if (seen) {\n                    return false;\n\
    \                }\n                seen = true;\n            }\n            last\
    \ = lst[i];\n        }\n        return true;", "        if (lst.Count == 0) {\n\
    \            return true;\n        }\n        long last = lst[0];\n        int\
    \ count = 1;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                return false;\n            }\n            if (lst[i]\
    \ == last) {\n                count += 1;\n            }\n            else {\n\
    \                if (count > 1) {\n                    return false;\n       \
    \         }\n                count = 1;\n            }\n            last = lst[i];\n\
    \        }\n        return true;", "        long prev = lst[0];\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < prev) {\n           \
    \     return false;\n            }\n            prev = lst[i];\n        }\n  \
    \      return true;", "        if (lst.Count == 0) {\n            return true;\n\
    \        }\n        long prev = lst[0];\n        bool seen = false;\n        for\
    \ (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < prev) {\n      \
    \          return false;\n            }\n            if (lst[i] == prev) {\n \
    \               if (seen) {\n                    return false;\n             \
    \   }\n                seen = true;\n            }\n            prev = lst[i];\n\
    \        }\n        return true;", "        // Your code goes here\n        return\
    \ false;", "        // Your code here\n        return false;", "        // Your\
    \ code goes here\n        return false;", "        if (lst.Count == 0) {\n   \
    \         return true;\n        }\n        long prev = lst[0];\n        bool seen\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < prev) {\n                return false;\n            }\n            if (lst[i]\
    \ == prev) {\n                if (seen) {\n                    return false;\n\
    \                }\n                seen = true;\n            }\n            prev\
    \ = lst[i];\n        }\n        return true;", "        if (lst.Count == 0) {\n\
    \            return true;\n        }\n        long prev = lst[0];\n        bool\
    \ seen = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if\
    \ (lst[i] < prev) {\n                return false;\n            }\n          \
    \  if (lst[i] == prev) {\n                if (seen) {\n                    return\
    \ false;\n                }\n                seen = true;\n            }\n   \
    \         prev = lst[i];\n        }\n        return true;", "        if (lst.Count\
    \ == 0) {\n            return true;\n        }\n        long prev = lst[0];\n\
    \        long count = 1;\n        for (int i = 1; i < lst.Count; i++) {\n    \
    \        if (lst[i] < prev) {\n                return false;\n            }\n\
    \            if (lst[i] == prev) {\n                count++;\n               \
    \ if (count > 1) {\n                    return false;\n                }\n   \
    \         }\n            prev = lst[i];\n        }\n        return true;", " \
    \       if (lst.Count == 0) {\n            return true;\n        }\n        if\
    \ (lst.Count == 1) {\n            return true;\n        }\n        long prev =\
    \ lst[0];\n        long curr = lst[1];\n        if (prev > curr) {\n         \
    \   return false;\n        }\n        for (int i = 2; i < lst.Count; i++) {\n\
    \            prev = curr;\n            curr = lst[i];\n            if (prev >\
    \ curr) {\n                return false;\n            }\n            if (prev\
    \ == curr) {\n                return false;\n            }\n        }\n      \
    \  return true;", "        if (lst.Count == 0) {\n            return true;\n \
    \       }\n        long prev = lst[0];\n        bool prev_seen = false;\n    \
    \    for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < prev) {\n\
    \                return false;\n            }\n            if (lst[i] == prev)\
    \ {\n                if (prev_seen) {\n                    return false;\n   \
    \             }\n                prev_seen = true;\n            }\n          \
    \  prev = lst[i];\n        }\n        return true;", "        if (lst.Count ==\
    \ 0) {\n            return true;\n        }\n        long prev = lst[0];\n   \
    \     bool has_dup = false;\n        for (int i = 1; i < lst.Count; i++) {\n \
    \           if (lst[i] < prev) {\n                return false;\n            }\n\
    \            if (lst[i] == prev) {\n                if (has_dup) {\n         \
    \           return false;\n                }\n                has_dup = true;\n\
    \            }\n            prev = lst[i];\n        }\n        return true;",
  "        if (lst.Count == 0) {\n            return true;\n        }\n        long\
    \ last = lst[0];\n        int count = 1;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < last) {\n                return false;\n  \
    \          }\n            if (lst[i] == last) {\n                count++;\n  \
    \          }\n            else {\n                if (count > 1) {\n         \
    \           return false;\n                }\n                count = 1;\n   \
    \         }\n            last = lst[i];\n        }\n        return true;", " \
    \       if (lst.Count == 0) {\n            return true;\n        }\n        long\
    \ prev = lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if\
    \ (lst[i] < prev) {\n                return false;\n            }\n          \
    \  prev = lst[i];\n        }\n        return true;", "        if (lst.Count ==\
    \ 0) {\n            return true;\n        }\n        long prev = lst[0];\n   \
    \     bool seen_dup = false;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < prev) {\n                return false;\n           \
    \ }\n            if (lst[i] == prev) {\n                if (seen_dup) {\n    \
    \                return false;\n                }\n                seen_dup =\
    \ true;\n            }\n            prev = lst[i];\n        }\n        return\
    \ true;", "        if (lst.Count == 0) {\n            return true;\n        }\n\
    \        long prev = lst[0];\n        long count = 1;\n        for (int i = 1;\
    \ i < lst.Count; i++) {\n            if (lst[i] < prev) {\n                return\
    \ false;\n            }\n            if (lst[i] == prev) {\n                count++;\n\
    \                if (count > 1) {\n                    return false;\n       \
    \         }\n            }\n            prev = lst[i];\n        }\n        return\
    \ true;", "        if (lst.Count == 0) {\n            return true;\n        }\n\
    \        long last = lst[0];\n        int count = 1;\n        for (int i = 1;\
    \ i < lst.Count; i++) {\n            if (lst[i] < last) {\n                return\
    \ false;\n            }\n            if (lst[i] == last) {\n                count\
    \ += 1;\n            }\n            else {\n                if (count > 1) {\n\
    \                    return false;\n                }\n                count =\
    \ 1;\n            }\n            last = lst[i];\n        }\n        return count\
    \ <= 1;", "        if (lst.Count < 2) {\n            return true;\n        }\n\
    \        long prev = lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < prev) {\n                return false;\n           \
    \ }\n            if (lst[i] == prev) {\n                return false;\n      \
    \      }\n            prev = lst[i];\n        }\n        return true;"]
stop_tokens:
- "\n    }\n"
