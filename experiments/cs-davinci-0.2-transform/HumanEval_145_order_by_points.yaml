name: HumanEval_145_order_by_points
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Write a function which sorts the given list of integers\n  \
  \  // in ascending order according to the sum of their digits.\n    // Note: if\
  \ there are several items with similar sum of their digits,\n    // order them based\
  \ on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
  \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
  \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
  \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
  \    public static List<long> OrderByPoints(List<long> nums) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
  \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
  \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
  \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
  \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
  \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
  \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
  \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
  \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
  \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
  \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
  \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
  \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
  \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,\
  \ (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
  \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
  \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,\
  \ (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
  \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,\
  \ (long)6L}))));\n    }\n\n}\n"
completions: ['        return nums.Select((x, i) => new { x, i }).OrderBy(x => x.x.ToString().Select(y
    => (int)y - 48).Sum()).ThenBy(x => x.i).Select(x => x.x).ToList();', "       \
    \ var sorted = nums.Select((x, i) => new { x, i }).OrderBy(x => SumDigits(x.x)).ThenBy(x\
    \ => x.i).Select(x => x.x).ToList();\n        return sorted;", "        // Your\
    \ code goes here\n        return nums;", '        return nums.OrderBy(x => x.ToString().Select(y
    => (int)Char.GetNumericValue(y)).Sum()).ThenBy(x => nums.IndexOf(x)).ToList();',
  '        return nums.OrderBy(x => x.ToString().Select(y => int.Parse(y.ToString())).Sum()).ThenBy(x
    => nums.IndexOf(x)).ToList();', '        return nums.OrderBy(x => x.ToString().Select(y
    => int.Parse(y.ToString())).Sum()).ThenBy(x => nums.IndexOf(x)).ToList();', " \
    \       // Your code goes here\n        return nums;", '        return nums.OrderBy(x
    => x.ToString().Select(y => (int)Char.GetNumericValue(y)).Sum()).ThenBy(x => nums.IndexOf(x)).ToList();',
  '        return nums.OrderBy(x => x.ToString().Select(y => int.Parse(y.ToString())).Sum()).ThenBy(x
    => nums.IndexOf(x)).ToList();', "        // TODO: Implement this function\n  \
    \      return nums;", "        // Your code here\n        return nums;", "   \
    \     // Write your code here\n        return nums;", "        // Write your code\
    \ here\n        return nums;", '        return nums.OrderBy(x => x.ToString().Select(y
    => (int)Char.GetNumericValue(y)).Sum()).ThenBy(x => nums.IndexOf(x)).ToList();',
  "        // TODO: Implement this function\n        return null;", "        // TODO:\
    \ Implement this function\n        return null;", '        return nums.OrderBy(x
    => x.ToString().Select(y => (int)Char.GetNumericValue(y)).Sum()).ThenBy(x => nums.IndexOf(x)).ToList();',
  "        // TODO: Implement this function\n        return null;", "        List<long>\
    \ result = new List<long>();\n        List<long> temp = new List<long>();\n  \
    \      List<long> temp2 = new List<long>();\n        List<long> temp3 = new List<long>();\n\
    \        List<long> temp4 = new List<long>();\n        List<long> temp5 = new\
    \ List<long>();\n        List<long> temp6 = new List<long>();\n        List<long>\
    \ temp7 = new List<long>();\n        List<long> temp8 = new List<long>();\n  \
    \      List<long> temp9 = new List<long>();\n        List<long> temp10 = new List<long>();\n\
    \        List<long> temp11 = new List<long>();\n        List<long> temp12 = new\
    \ List<long>();\n        List<long> temp13 = new List<long>();\n        List<long>\
    \ temp14 = new List<long>();\n        List<long> temp15 = new List<long>();\n\
    \        List<long> temp16 = new List<long>();\n        List<long> temp17 = new\
    \ List<long>();\n        List<long> temp18 = new List<long>();\n        List<long>\
    \ temp19 = new List<long>();\n        List<long> temp20 = new List<long>();\n\
    \        List<long> temp21 = new List<long>();\n        List<long> temp22 = new\
    \ List<long>();\n        List<long> temp23 = new List<long>();\n        List<long>\
    \ temp24 = new List<long>();\n        List<long> temp25 = new List<long>();\n\
    \        List<long> temp26 = new List<long>();\n        List<long> temp27 = new\
    \ List<long>();\n        List<long> temp28 = new List<long>();\n        List<long>\
    \ temp29 = new List<long>();\n        List<long> temp30 = new List<long>();\n\
    \        List<long> temp31 = new List<long>();\n        List<long> temp32 = new\
    \ List<long>();\n        List<long> temp33 = new List<long>();\n        List<",
  "        return nums.OrderBy(n => n.ToString().Select(c => c - '0').Sum()).ThenBy(n\
    \ => nums.IndexOf(n)).ToList();", '        return nums.OrderBy(x => x.ToString().Select(y
    => (int)Char.GetNumericValue(y)).Sum()).ThenBy(x => nums.IndexOf(x)).ToList();',
  "        var result = new List<long>();\n        var dict = new Dictionary<long,\
    \ long>();\n        for (int i = 0; i < nums.Count; i++) {\n            var sum\
    \ = 0L;\n            var num = nums[i];\n            while (num != 0) {\n    \
    \            sum += num % 10;\n                num /= 10;\n            }\n   \
    \         dict[sum] = nums[i];\n        }\n        var sorted = dict.Keys.ToList();\n\
    \        sorted.Sort();\n        foreach (var key in sorted) {\n            result.Add(dict[key]);\n\
    \        }\n        return result;", "        return nums.OrderBy(x => x.ToString().Sum(y\
    \ => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();", '        return nums.OrderBy(x
    => x.ToString().Select(y => (int)Char.GetNumericValue(y)).Sum()).ThenBy(x => nums.IndexOf(x)).ToList();',
  "        return nums.OrderBy(x => x.ToString().Sum(c => c - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        var result = new List<long>();\n        var dict = new Dictionary<long,\
    \ List<long>>();\n        for (int i = 0; i < nums.Count; i++) {\n           \
    \ var sum = SumDigits(nums[i]);\n            if (!dict.ContainsKey(sum)) {\n \
    \               dict[sum] = new List<long>();\n            }\n            dict[sum].Add(nums[i]);\n\
    \        }\n        var keys = dict.Keys.ToList();\n        keys.Sort();\n   \
    \     foreach (var key in keys) {\n            dict[key].Sort();\n           \
    \ result.AddRange(dict[key]);\n        }\n        return result;", "        //\
    \ TODO: implement\n        return null;", "        // TODO: implement this function\n\
    \        return null;", "        // TODO: Implement this function\n        return\
    \ null;", '        return nums.OrderBy(x => x.ToString().Select(y => (int)Char.GetNumericValue(y)).Sum()).ThenBy(x
    => nums.IndexOf(x)).ToList();', "        return nums.OrderBy(x => x.ToString().Sum(y\
    \ => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();", "        // Write your\
    \ code here\n        return nums;", "        var result = new List<long>();\n\
    \        var dict = new Dictionary<long, List<long>>();\n        foreach (var\
    \ num in nums) {\n            var sum = 0L;\n            var n = num;\n      \
    \      while (n != 0) {\n                sum += n % 10;\n                n /=\
    \ 10;\n            }\n            if (!dict.ContainsKey(sum)) {\n            \
    \    dict[sum] = new List<long>();\n            }\n            dict[sum].Add(num);\n\
    \        }\n        var keys = dict.Keys.ToList();\n        keys.Sort();\n   \
    \     foreach (var key in keys) {\n            result.AddRange(dict[key]);\n \
    \       }\n        return result;", "        return nums.OrderBy(x => x.ToString().Sum(y\
    \ => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();", "        // TODO: Implement\
    \ this function\n        return null;", '        return nums.OrderBy(x => x.ToString().Select(y
    => int.Parse(y.ToString())).Sum()).ThenBy(x => nums.IndexOf(x)).ToList();', " \
    \       var result = new List<long>();\n        var dict = new Dictionary<long,\
    \ List<long>>();\n        for (int i = 0; i < nums.Count; i++) {\n           \
    \ var sum = GetSumOfDigits(nums[i]);\n            if (!dict.ContainsKey(sum))\
    \ {\n                dict[sum] = new List<long>();\n            }\n          \
    \  dict[sum].Add(nums[i]);\n        }\n        var keys = dict.Keys.ToList();\n\
    \        keys.Sort();\n        foreach (var key in keys) {\n            var list\
    \ = dict[key];\n            list.Sort();\n            result.AddRange(list);\n\
    \        }\n        return result;", "        // TODO: implement this function\n\
    \        return null;", '        return nums.OrderBy(x => x.ToString().Select(y
    => int.Parse(y.ToString())).Sum()).ThenBy(x => nums.IndexOf(x)).ToList();', '        return
    nums.OrderBy(x => x.ToString().Select(y => (long)Char.GetNumericValue(y)).Sum()).ThenBy(x
    => nums.IndexOf(x)).ToList();', '        return nums.OrderBy(x => x.ToString().Select(y
    => int.Parse(y.ToString())).Sum()).ThenBy(x => nums.IndexOf(x)).ToList();', " \
    \       return nums.OrderBy(x => x.ToString().Sum(c => c - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        // TODO: implement the function\n        return nums;", "        return\
    \ nums.OrderBy(x => x.ToString().Sum(y => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        return nums.OrderBy(x => x.ToString().Sum(c => c - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        // TODO: implement this function\n        return null;", "        // TODO:\
    \ implement this function\n        return nums;", "        return nums.OrderBy(x\
    \ => x.ToString().Select(y => y - '0').Sum()).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        // TODO: Implement this function\n        return null;", "        // Your\
    \ code goes here\n        return nums;", "        // Your code goes here\n   \
    \     return nums;", "        // Write your code here\n        return nums;",
  "        // TODO: implement this function\n        return nums;", "        // TODO:\
    \ implement this function\n        return null;", "        // TODO: Implement\
    \ this function\n        return nums;", "        return nums.OrderBy(x => x.ToString().Sum(y\
    \ => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();", "        return nums.OrderBy(n\
    \ => n.ToString().Select(c => c - '0').Sum()).ThenBy(n => nums.IndexOf(n)).ToList();",
  "        // your code here\n        return null;", "        // Write your code here\n\
    \        return nums;", '        return nums.OrderBy(x => x.ToString().Select(y
    => int.Parse(y.ToString())).Sum()).ThenBy(x => nums.IndexOf(x)).ToList();', " \
    \       return nums.OrderBy(x => x.ToString().Sum(c => c - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        // Write your code here\n        return nums;", "        // TODO: Implement\
    \ me\n        return null;", "        var result = new List<long>();\n       \
    \ var sorted = nums.Select((x, i) => new { Index = i, Value = x })\n         \
    \                .OrderBy(x => x.Value)\n                         .ToList();\n\
    \        var sums = new List<long>();\n        foreach (var item in sorted) {\n\
    \            var sum = 0L;\n            var num = item.Value;\n            while\
    \ (num != 0) {\n                sum += num % 10;\n                num /= 10;\n\
    \            }\n            sums.Add(sum);\n        }\n        var sortedSums\
    \ = sums.Select((x, i) => new { Index = i, Value = x })\n                    \
    \         .OrderBy(x => x.Value)\n                             .ToList();\n  \
    \      foreach (var item in sortedSums) {\n            result.Add(sorted[item.Index].Value);\n\
    \        }\n        return result;", "        var result = new List<long>();\n\
    \        var dict = new Dictionary<long, List<long>>();\n        var dict2 = new\
    \ Dictionary<long, long>();\n        foreach (var num in nums) {\n           \
    \ var sum = 0L;\n            var num2 = num;\n            while (num2 != 0) {\n\
    \                sum += num2 % 10;\n                num2 /= 10;\n            }\n\
    \            if (!dict.ContainsKey(sum)) {\n                dict[sum] = new List<long>();\n\
    \            }\n            dict[sum].Add(num);\n            dict2[num] = sum;\n\
    \        }\n        var keys = dict.Keys.ToList();\n        keys.Sort();\n   \
    \     foreach (var key in keys) {\n            dict[key].Sort();\n           \
    \ foreach (var num in dict[key]) {\n                result.Add(num);\n       \
    \     }\n        }\n        return result;", "        // TODO: Implement OrderByPoints\n\
    \        return nums;", "        // Write your code here\n        return nums;",
  "        return nums.OrderBy(x => x.ToString().Sum(y => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        return nums.OrderBy(x => x.ToString().Sum(y => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        return nums.OrderBy(x => x.ToString().Sum(y => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        // Your code goes here\n        return nums;", '        return nums.OrderBy(x
    => x.ToString().Select(y => int.Parse(y.ToString())).Sum()).ThenBy(x => nums.IndexOf(x)).ToList();',
  "        // TODO: Implement your solution here\n        return null;", "       \
    \ return nums.OrderBy(x => x.ToString().Sum(y => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        // TODO: implement this function\n        return null;", "        var result\
    \ = new List<long>();\n        var dict = new Dictionary<long, List<long>>();\n\
    \        foreach (var num in nums) {\n            var sum = 0L;\n            var\
    \ n = num;\n            while (n != 0) {\n                sum += n % 10;\n   \
    \             n /= 10;\n            }\n            if (!dict.ContainsKey(sum))\
    \ {\n                dict[sum] = new List<long>();\n            }\n          \
    \  dict[sum].Add(num);\n        }\n        foreach (var key in dict.Keys.OrderBy(k\
    \ => k)) {\n            foreach (var num in dict[key]) {\n                result.Add(num);\n\
    \            }\n        }\n        return result;", "        // Write your code\
    \ here\n        return null;", "        // TODO: implement this function\n   \
    \     return nums;", "        // TODO: Implement me\n        return nums;", " \
    \       return nums.OrderBy(x => x.ToString().Sum(c => c - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        return nums.OrderBy(x => x.ToString().Select(y => y - '0').Sum()).ThenBy(x\
    \ => nums.IndexOf(x)).ToList();", "        return nums.OrderBy(x => x.ToString().Sum(y\
    \ => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();", "        return nums.OrderBy(x\
    \ => x.ToString().Sum(c => c - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        // TODO: implement this function\n        return null;", '        return
    nums.OrderBy(x => x.ToString().Select(y => int.Parse(y.ToString())).Sum()).ThenBy(x
    => nums.IndexOf(x)).ToList();', "        return nums.Select((x, i) => new { x,\
    \ i })\n            .OrderBy(x => x.x.ToString().Sum(y => y - '0'))\n        \
    \    .ThenBy(x => x.i)\n            .Select(x => x.x)\n            .ToList();",
  '        return nums.OrderBy(x => x.ToString().Select(y => (int)Char.GetNumericValue(y)).Sum()).ThenBy(x
    => nums.IndexOf(x)).ToList();', "        return nums.OrderBy(x => x.ToString().Sum(y\
    \ => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();", "        // TODO: implement\
    \ this function\n        return nums;", '        return nums.OrderBy(x => x.ToString().Select(y
    => (int)Char.GetNumericValue(y)).Sum()).ThenBy(x => nums.IndexOf(x)).ToList();',
  "        return nums.OrderBy(x => x.ToString().Sum(y => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        // TODO: Implement this function\n        return null;", '        return
    nums.OrderBy(x => x.ToString().Sum(y => int.Parse(y.ToString()))).ThenBy(x =>
    nums.IndexOf(x)).ToList();', "        // Write your code here\n        return\
    \ nums;", "        // your code here\n        return nums;", "        // TODO:\
    \ Implement this function\n        return null;", "        // Write your code\
    \ here\n        return nums;", "        // Write your code here\n        return\
    \ nums;", "        return nums.OrderBy(x => x.ToString().Sum(y => y - '0')).ThenBy(x\
    \ => nums.IndexOf(x)).ToList();", "        // Write your code here\n        return\
    \ nums;", "        return nums.OrderBy(x => x.ToString().Sum(y => y - '0')).ThenBy(x\
    \ => nums.IndexOf(x)).ToList();", "        return nums.OrderBy(x => x.ToString().Sum(y\
    \ => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();", "        return nums.OrderBy(x\
    \ => x.ToString().Select(y => y - '0').Sum()).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        return nums.OrderBy(x => x.ToString().Sum(c => c - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        // TODO: Implement this function\n        return nums;", "        return\
    \ nums.OrderBy(x => x.ToString().Select(y => y - '0').Sum()).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        return nums.OrderBy(x => x.ToString().Sum(y => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        List<long> result = new List<long>();\n        int[] sums = new int[nums.Count];\n\
    \        for (int i = 0; i < nums.Count; i++) {\n            sums[i] = SumDigits(nums[i]);\n\
    \        }\n        int[] sorted = new int[nums.Count];\n        Array.Copy(sums,\
    \ sorted, nums.Count);\n        Array.Sort(sorted);\n        for (int i = 0; i\
    \ < nums.Count; i++) {\n            int j = Array.IndexOf(sums, sorted[i]);\n\
    \            result.Add(nums[j]);\n        }\n        return result;", "     \
    \   return nums.OrderBy(x => x.ToString().Select(y => y - '0').Sum()).ThenBy(x\
    \ => nums.IndexOf(x)).ToList();", "        return nums.OrderBy(x => x.ToString().Select(c\
    \ => c - '0').Sum()).ThenBy(x => nums.IndexOf(x)).ToList();", "        // TODO:\
    \ implement this function\n        return nums;", "        // TODO: implement\
    \ this function\n        return null;", "        return nums.OrderBy(x => x.ToString().Sum(y\
    \ => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();", "        // TODO: Implement\
    \ this function\n        return nums;", '        return nums.OrderBy(x => x.ToString().Select(y
    => (int)Char.GetNumericValue(y)).Sum()).ThenBy(x => nums.IndexOf(x)).ToList();',
  "        return nums.OrderBy(x => x.ToString().Sum(c => c - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        // TODO: Implement this function\n        return null;", "        return\
    \ nums.OrderBy(x => x.ToString().Sum(c => c - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  '        return nums.OrderBy(x => x.ToString().Select(y => (int)Char.GetNumericValue(y)).Sum()).ThenBy(x
    => nums.IndexOf(x)).ToList();', "        // TODO: implement this function\n  \
    \      return nums;", '        return nums.OrderBy(x => x.ToString().Select(y
    => int.Parse(y.ToString())).Sum()).ThenBy(x => nums.IndexOf(x)).ToList();', " \
    \       // Your code goes here\n        return nums;", "        var result = new\
    \ List<long>();\n        var points = new List<long>();\n        for (int i =\
    \ 0; i < nums.Count; i++) {\n            points.Add(GetPoints(nums[i]));\n   \
    \     }\n        var sortedPoints = points.OrderBy(x => x).ToList();\n       \
    \ for (int i = 0; i < sortedPoints.Count; i++) {\n            for (int j = 0;\
    \ j < points.Count; j++) {\n                if (sortedPoints[i] == points[j])\
    \ {\n                    result.Add(nums[j]);\n                    points[j] =\
    \ -1;\n                    break;\n                }\n            }\n        }\n\
    \        return result;", "        // TODO: implement this function\n        return\
    \ null;", "        // TODO: implement this function\n        return null;", " \
    \       var result = new List<long>();\n        var dict = new Dictionary<long,\
    \ List<long>>();\n        foreach (var num in nums) {\n            var sum = 0L;\n\
    \            var n = num;\n            while (n != 0) {\n                sum +=\
    \ n % 10;\n                n /= 10;\n            }\n            if (!dict.ContainsKey(sum))\
    \ {\n                dict[sum] = new List<long>();\n            }\n          \
    \  dict[sum].Add(num);\n        }\n        foreach (var key in dict.Keys.OrderBy(x\
    \ => x)) {\n            foreach (var num in dict[key]) {\n                result.Add(num);\n\
    \            }\n        }\n        return result;", "        // TODO: implement\
    \ this function\n        return nums;", "        // TODO: implement this function\n\
    \        return null;", "        // Your code goes here\n        return nums;",
  "        // TODO: Implement this\n        return nums;", "        return nums.OrderBy(x\
    \ => x.ToString().Sum(y => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        return nums.OrderBy(x => x.ToString().Sum(c => c - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        // your code goes here\n        return nums;", "        return nums.OrderBy(x\
    \ => x.ToString().Sum(y => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        // Your code goes here\n        return nums;", '        return nums.OrderBy(x
    => x.ToString().Select(y => (int)Char.GetNumericValue(y)).Sum()).ThenBy(x => nums.IndexOf(x)).ToList();',
  "        return nums.OrderBy(x => x.ToString().Select(y => y - '0').Sum()).ThenBy(x\
    \ => nums.IndexOf(x)).ToList();", "        return nums.OrderBy(n => n.ToString().Select(c\
    \ => c - '0').Sum()).ThenBy(n => nums.IndexOf(n)).ToList();", "        return\
    \ nums.OrderBy(x => x.ToString().Sum(c => c - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  '        return nums.OrderBy(x => x.ToString().Select(y => int.Parse(y.ToString())).Sum()).ThenBy(x
    => nums.IndexOf(x)).ToList();', "        // TODO: implement this function\n  \
    \      return null;", "        var result = new List<long>();\n        var sum\
    \ = new List<long>();\n        for (int i = 0; i < nums.Count; i++) {\n      \
    \      sum.Add(SumDigits(nums[i]));\n        }\n        for (int i = 0; i < nums.Count;\
    \ i++) {\n            var min = sum.Min();\n            var index = sum.IndexOf(min);\n\
    \            result.Add(nums[index]);\n            sum.RemoveAt(index);\n    \
    \        nums.RemoveAt(index);\n        }\n        return result;", "        return\
    \ nums.OrderBy(x => x.ToString().Sum(y => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        // TODO: Implement this function\n        return nums;", "        // Write\
    \ your code here\n        return nums;", '        return nums.OrderBy(x => x.ToString().Select(y
    => int.Parse(y.ToString())).Sum()).ThenBy(x => nums.IndexOf(x)).ToList();', " \
    \       // TODO: implement this function\n        return nums;", '        return
    nums.OrderBy(x => x.ToString().Select(y => (int)Char.GetNumericValue(y)).Sum()).ThenBy(x
    => nums.IndexOf(x)).ToList();', "        List<long> result = new List<long>();\n\
    \        List<long> temp = new List<long>();\n        List<long> temp2 = new List<long>();\n\
    \        List<long> temp3 = new List<long>();\n        List<long> temp4 = new\
    \ List<long>();\n        List<long> temp5 = new List<long>();\n        List<long>\
    \ temp6 = new List<long>();\n        List<long> temp7 = new List<long>();\n  \
    \      List<long> temp8 = new List<long>();\n        List<long> temp9 = new List<long>();\n\
    \        List<long> temp10 = new List<long>();\n        List<long> temp11 = new\
    \ List<long>();\n        List<long> temp12 = new List<long>();\n        List<long>\
    \ temp13 = new List<long>();\n        List<long> temp14 = new List<long>();\n\
    \        List<long> temp15 = new List<long>();\n        List<long> temp16 = new\
    \ List<long>();\n        List<long> temp17 = new List<long>();\n        List<long>\
    \ temp18 = new List<long>();\n        List<long> temp19 = new List<long>();\n\
    \        List<long> temp20 = new List<long>();\n        List<long> temp21 = new\
    \ List<long>();\n        List<long> temp22 = new List<long>();\n        List<long>\
    \ temp23 = new List<long>();\n        List<long> temp24 = new List<long>();\n\
    \        List<long> temp25 = new List<long>();\n        List<long> temp26 = new\
    \ List<long>();\n        List<long> temp27 = new List<long>();\n        List<long>\
    \ temp28 = new List<long>();\n        List<long> temp29 = new List<long>();\n\
    \        List<long> temp30 = new List<long>();\n        List<long> temp31 = new\
    \ List<long>();\n        List<long> temp32 = new List<long>();\n        List<long>\
    \ temp33 = new List<long>();\n        List<", "        return nums.OrderBy(x =>\
    \ x.ToString().Sum(y => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();", " \
    \       // TODO: implement\n        return nums;", "        return nums.OrderBy(x\
    \ => x.ToString().Sum(y => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        // TODO: implement\n        return nums;", "        List<long> result =\
    \ new List<long>();\n        List<long> temp = new List<long>();\n        List<long>\
    \ temp2 = new List<long>();\n        List<long> temp3 = new List<long>();\n  \
    \      int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n\
    \        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n\
    \        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n\
    \        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n\
    \        int y = 0;\n        int z = 0;\n        int aa = 0;\n        int ab =\
    \ 0;\n        int ac = 0;\n        int ad = 0;\n        int ae = 0;\n        int\
    \ af = 0;\n        int ag = 0;\n        int ah = 0;\n        int ai = 0;\n   \
    \     int aj = 0;\n        int ak = 0;\n        int al = 0;\n        int am =\
    \ 0;\n        int an = 0;\n        int ao = 0;\n        int ap = 0;\n        int\
    \ aq = 0;\n        int ar = 0;\n        int as1 = 0;\n        int at = 0;\n  \
    \      int au = 0;\n        int av = 0;\n        int aw = 0;\n        int ax =\
    \ 0;\n        int ay = 0;\n        int az = 0;\n        int ba = 0;\n        int\
    \ bb = 0;\n        int bc = 0;\n        int bd = 0;\n        int be = 0;\n   \
    \     int bf = 0;\n        int bg = 0;\n        int bh = 0;\n        int bi =\
    \ 0;\n        int bj = 0;\n        int bk = 0;\n        int bl = 0;\n        int\
    \ bm = 0;\n        int bn = 0;\n        int bo = 0;\n        int bp = 0;\n   \
    \     int bq = 0;\n        int br = 0;\n       ", "        return nums.OrderBy(n\
    \ => n.ToString().Select(c => c - '0').Sum()).ThenBy(n => nums.IndexOf(n)).ToList();",
  "        var sorted = nums.Select((x, i) => new { x, i }).OrderBy(x => x.x.ToString().Sum(c\
    \ => c - '0')).ThenBy(x => x.i).Select(x => x.x).ToList();\n        return sorted;",
  '        return nums.OrderBy(x => x.ToString().Select(y => (int)Char.GetNumericValue(y)).Sum()).ThenBy(x
    => nums.IndexOf(x)).ToList();', "        // Write your code here\n        return\
    \ nums;", "        return nums.OrderBy(x => x.ToString().Select(c => c - '0').Sum()).ThenBy(x\
    \ => nums.IndexOf(x)).ToList();", "        // Write your code here\n        return\
    \ nums;", "        // Your code goes here\n        return nums;", "        return\
    \ nums.OrderBy(x => x.ToString().Sum(y => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        // TODO: implement this function\n        return null;", "        // TODO:\
    \ implement this function\n        return nums;", "        return nums.OrderBy(x\
    \ => x.ToString().Sum(c => c - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        return nums.OrderBy(x => x.ToString().Sum(c => c - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        // Write your code here\n        return nums;", "        // TODO: implement\n\
    \        return null;", "        // TODO: Implement this function\n        return\
    \ nums;", '        return nums.OrderBy(x => x.ToString().Select(y => (int)char.GetNumericValue(y)).Sum()).ThenBy(x
    => nums.IndexOf(x)).ToList();', "        // TODO: implement this function\n  \
    \      return nums;", "        return nums.OrderBy(x => x.ToString().Select(c\
    \ => c - '0').Sum()).ThenBy(x => nums.IndexOf(x)).ToList();", "        var result\
    \ = new List<long>();\n        var dict = new Dictionary<long, long>();\n    \
    \    foreach (var num in nums) {\n            var sum = 0L;\n            var n\
    \ = num;\n            while (n != 0) {\n                sum += n % 10;\n     \
    \           n /= 10;\n            }\n            dict[num] = sum;\n        }\n\
    \        var sorted = dict.OrderBy(x => x.Value).ThenBy(x => x.Key);\n       \
    \ foreach (var item in sorted) {\n            result.Add(item.Key);\n        }\n\
    \        return result;", "        // TODO: Implement me\n        return null;",
  "        // Write your code here\n        return nums;", "        var dict = new\
    \ Dictionary<long, List<long>>();\n        for (int i = 0; i < nums.Count; i++)\
    \ {\n            long sum = 0;\n            foreach (var digit in nums[i].ToString())\
    \ {\n                sum += int.Parse(digit.ToString());\n            }\n    \
    \        if (!dict.ContainsKey(sum)) {\n                dict[sum] = new List<long>();\n\
    \            }\n            dict[sum].Add(nums[i]);\n        }\n        var result\
    \ = new List<long>();\n        foreach (var key in dict.Keys.OrderBy(x => x))\
    \ {\n            result.AddRange(dict[key]);\n        }\n        return result;",
  "        // write your code here\n        return nums;", '        return nums.OrderBy(x
    => x.ToString().Select(y => int.Parse(y.ToString())).Sum()).ThenBy(x => nums.IndexOf(x)).ToList();',
  "        return nums.Select((num, index) => new { num, index })\n            .OrderBy(x\
    \ => x.num.ToString().Sum(c => c - '0'))\n            .ThenBy(x => x.index)\n\
    \            .Select(x => x.num)\n            .ToList();", "        // TODO: implement\
    \ this function\n        return nums;", "        return nums.OrderBy(x => x.ToString().Sum(y\
    \ => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();", "        // Write your\
    \ code here\n        return nums;", "        var result = new List<long>();\n\
    \        var dict = new Dictionary<long, long>();\n        foreach (var num in\
    \ nums) {\n            var sum = 0L;\n            var n = num;\n            while\
    \ (n != 0) {\n                sum += n % 10;\n                n /= 10;\n     \
    \       }\n            if (!dict.ContainsKey(sum)) {\n                dict[sum]\
    \ = num;\n            } else {\n                dict[sum] = Math.Min(dict[sum],\
    \ num);\n            }\n        }\n        var keys = dict.Keys.ToList();\n  \
    \      keys.Sort();\n        foreach (var key in keys) {\n            result.Add(dict[key]);\n\
    \        }\n        return result;", "        var dict = new Dictionary<long,\
    \ List<long>>();\n        for (int i = 0; i < nums.Count; i++) {\n           \
    \ var sum = nums[i].ToString().Select(x => long.Parse(x.ToString())).Sum();\n\
    \            if (!dict.ContainsKey(sum)) {\n                dict[sum] = new List<long>();\n\
    \            }\n            dict[sum].Add(nums[i]);\n        }\n        var result\
    \ = new List<long>();\n        foreach (var item in dict.OrderBy(x => x.Key))\
    \ {\n            result.AddRange(item.Value.OrderBy(x => x));\n        }\n   \
    \     return result;", '        return nums.OrderBy(x => x.ToString().Select(y
    => (long)Char.GetNumericValue(y)).Sum()).ThenBy(x => nums.IndexOf(x)).ToList();',
  "        // TODO: implement this function\n        return null;", "        // TODO:\
    \ implement this function\n        return nums;", "        // Write your code\
    \ here\n        return nums;", '        return nums.OrderBy(x => x.ToString().Select(y
    => int.Parse(y.ToString())).Sum()).ThenBy(x => nums.IndexOf(x)).ToList();', '        return
    nums.OrderBy(x => x.ToString().Select(y => (int)Char.GetNumericValue(y)).Sum()).ThenBy(x
    => nums.IndexOf(x)).ToList();', "        // your code here\n        return nums;",
  "        // TODO: Implement this function\n        return nums;", "        return\
    \ nums.OrderBy(x => x.ToString().Sum(y => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        // TODO: implement this function\n        return nums;", "        return\
    \ nums.OrderBy(x => x.ToString().Select(y => y - '0').Sum()).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        // Write your code here\n        return nums;", '        return nums.OrderBy(x
    => x.ToString().Select(y => (int)Char.GetNumericValue(y)).Sum()).ThenBy(x => nums.IndexOf(x)).ToList();',
  "        return nums.OrderBy(x => x.ToString().Sum(c => c - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        // Write your code here\n        return nums;", "        // TODO: Implement\
    \ this function\n        return nums;"]
stop_tokens:
- "\n    }\n"
