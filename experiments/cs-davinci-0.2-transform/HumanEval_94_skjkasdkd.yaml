name: HumanEval_94_skjkasdkd
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You are given a list of integers.\n    // You need to find the\
  \ largest prime value and return the sum of its digits.\n    // Examples:\n    //\
  \ >>> Skjkasdkd((new List<long>(new long[]{(long)0L, (long)3L, (long)2L, (long)1L,\
  \ (long)3L, (long)5L, (long)7L, (long)4L, (long)5L, (long)5L, (long)5L, (long)2L,\
  \ (long)181L, (long)32L, (long)4L, (long)32L, (long)3L, (long)2L, (long)32L, (long)324L,\
  \ (long)4L, (long)3L})))\n    // (10L)\n    // >>> Skjkasdkd((new List<long>(new\
  \ long[]{(long)1L, (long)0L, (long)1L, (long)8L, (long)2L, (long)4597L, (long)2L,\
  \ (long)1L, (long)3L, (long)40L, (long)1L, (long)2L, (long)1L, (long)2L, (long)4L,\
  \ (long)2L, (long)5L, (long)1L})))\n    // (25L)\n    // >>> Skjkasdkd((new List<long>(new\
  \ long[]{(long)1L, (long)3L, (long)1L, (long)32L, (long)5107L, (long)34L, (long)83278L,\
  \ (long)109L, (long)163L, (long)23L, (long)2323L, (long)32L, (long)30L, (long)1L,\
  \ (long)9L, (long)3L})))\n    // (13L)\n    // >>> Skjkasdkd((new List<long>(new\
  \ long[]{(long)0L, (long)724L, (long)32L, (long)71L, (long)99L, (long)32L, (long)6L,\
  \ (long)0L, (long)5L, (long)91L, (long)83L, (long)0L, (long)5L, (long)6L})))\n \
  \   // (11L)\n    // >>> Skjkasdkd((new List<long>(new long[]{(long)0L, (long)81L,\
  \ (long)12L, (long)3L, (long)1L, (long)21L})))\n    // (3L)\n    // >>> Skjkasdkd((new\
  \ List<long>(new long[]{(long)0L, (long)8L, (long)1L, (long)2L, (long)1L, (long)7L})))\n\
  \    // (7L)\n    public static long Skjkasdkd(List<long> lst) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Skjkasdkd((new\
  \ List<long>(new long[]{(long)0L, (long)3L, (long)2L, (long)1L, (long)3L, (long)5L,\
  \ (long)7L, (long)4L, (long)5L, (long)5L, (long)5L, (long)2L, (long)181L, (long)32L,\
  \ (long)4L, (long)32L, (long)3L, (long)2L, (long)32L, (long)324L, (long)4L, (long)3L})))\
  \ == (10L));\n    Debug.Assert(Skjkasdkd((new List<long>(new long[]{(long)1L, (long)0L,\
  \ (long)1L, (long)8L, (long)2L, (long)4597L, (long)2L, (long)1L, (long)3L, (long)40L,\
  \ (long)1L, (long)2L, (long)1L, (long)2L, (long)4L, (long)2L, (long)5L, (long)1L})))\
  \ == (25L));\n    Debug.Assert(Skjkasdkd((new List<long>(new long[]{(long)1L, (long)3L,\
  \ (long)1L, (long)32L, (long)5107L, (long)34L, (long)83278L, (long)109L, (long)163L,\
  \ (long)23L, (long)2323L, (long)32L, (long)30L, (long)1L, (long)9L, (long)3L})))\
  \ == (13L));\n    Debug.Assert(Skjkasdkd((new List<long>(new long[]{(long)0L, (long)724L,\
  \ (long)32L, (long)71L, (long)99L, (long)32L, (long)6L, (long)0L, (long)5L, (long)91L,\
  \ (long)83L, (long)0L, (long)5L, (long)6L}))) == (11L));\n    Debug.Assert(Skjkasdkd((new\
  \ List<long>(new long[]{(long)0L, (long)81L, (long)12L, (long)3L, (long)1L, (long)21L})))\
  \ == (3L));\n    Debug.Assert(Skjkasdkd((new List<long>(new long[]{(long)0L, (long)8L,\
  \ (long)1L, (long)2L, (long)1L, (long)7L}))) == (7L));\n    Debug.Assert(Skjkasdkd((new\
  \ List<long>(new long[]{(long)8191L}))) == (19L));\n    Debug.Assert(Skjkasdkd((new\
  \ List<long>(new long[]{(long)8191L, (long)123456L, (long)127L, (long)7L}))) ==\
  \ (19L));\n    Debug.Assert(Skjkasdkd((new List<long>(new long[]{(long)127L, (long)97L,\
  \ (long)8192L}))) == (10L));\n    }\n\n}\n"
completions: ["        long max = 0;\n        foreach (long i in lst) {\n        \
    \    if (i > max) {\n                max = i;\n            }\n        }\n    \
    \    long sum = 0;\n        while (max > 0) {\n            sum += max % 10;\n\
    \            max /= 10;\n        }\n        return sum;", "        long max =\
    \ 0;\n        foreach (long i in lst) {\n            if (IsPrime(i)) {\n     \
    \           max = i;\n            }\n        }\n        return SumDigits(max);",
  "        long max = 0;\n        foreach (long i in lst) {\n            if (i > max)\
    \ {\n                max = i;\n            }\n        }\n        long sum = 0;\n\
    \        while (max > 0) {\n            sum += max % 10;\n            max /= 10;\n\
    \        }\n        return sum;", "        long max = 0;\n        foreach (long\
    \ i in lst) {\n            if (i > max) {\n                max = i;\n        \
    \    }\n        }\n        long sum = 0;\n        while (max > 0) {\n        \
    \    sum += max % 10;\n            max /= 10;\n        }\n        return sum;",
  "        long largest = 0;\n        foreach (long i in lst) {\n            if (IsPrime(i))\
    \ {\n                if (i > largest) {\n                    largest = i;\n  \
    \              }\n            }\n        }\n        return SumDigits(largest);",
  "        long max = 0;\n        foreach (long i in lst) {\n            if (i > max)\
    \ {\n                max = i;\n            }\n        }\n        long sum = 0;\n\
    \        while (max > 0) {\n            sum += max % 10;\n            max /= 10;\n\
    \        }\n        return sum;", "        long largestPrime = 0;\n        foreach\
    \ (long i in lst) {\n            if (IsPrime(i)) {\n                if (i > largestPrime)\
    \ {\n                    largestPrime = i;\n                }\n            }\n\
    \        }\n        return SumDigits(largestPrime);", "        // Your code goes\
    \ here.\n        return 0L;", "        // Your code goes here.\n        return\
    \ 0L;", "        long max = 0;\n        foreach (long i in lst) {\n          \
    \  if (IsPrime(i)) {\n                max = i;\n            }\n        }\n   \
    \     return SumDigits(max);", "        long max = 0;\n        foreach (long n\
    \ in lst) {\n            if (n > max && IsPrime(n)) {\n                max = n;\n\
    \            }\n        }\n        return SumDigits(max);", "        long max\
    \ = 0;\n        foreach (long i in lst) {\n            if (IsPrime(i)) {\n   \
    \             if (i > max) {\n                    max = i;\n                }\n\
    \            }\n        }\n        return SumDigits(max);", "        long largestPrime\
    \ = 0;\n        foreach (long num in lst) {\n            if (IsPrime(num)) {\n\
    \                largestPrime = num;\n            }\n        }\n        return\
    \ SumOfDigits(largestPrime);", "        long largestPrime = 0;\n        foreach\
    \ (long num in lst) {\n            if (IsPrime(num)) {\n                largestPrime\
    \ = num;\n            }\n        }\n        return SumDigits(largestPrime);",
  "        long max = 0;\n        foreach (long i in lst) {\n            if (IsPrime(i))\
    \ {\n                if (i > max) {\n                    max = i;\n          \
    \      }\n            }\n        }\n        return SumDigits(max);", "       \
    \ long largestPrime = 0;\n        foreach (long n in lst) {\n            if (IsPrime(n))\
    \ {\n                largestPrime = n;\n            }\n        }\n        return\
    \ SumDigits(largestPrime);", "        long largestPrime = 0;\n        foreach\
    \ (long i in lst) {\n            if (IsPrime(i)) {\n                if (i > largestPrime)\
    \ {\n                    largestPrime = i;\n                }\n            }\n\
    \        }\n        return SumDigits(largestPrime);", "        long largestPrime\
    \ = 0;\n        foreach (long num in lst) {\n            if (IsPrime(num)) {\n\
    \                largestPrime = num;\n            }\n        }\n        return\
    \ SumDigits(largestPrime);", "        long max = 0;\n        foreach (long i in\
    \ lst) {\n            if (i > max) {\n                max = i;\n            }\n\
    \        }\n        long sum = 0;\n        for (long i = 2; i <= max; i++) {\n\
    \            bool isPrime = true;\n            for (long j = 2; j < i; j++) {\n\
    \                if (i % j == 0) {\n                    isPrime = false;\n   \
    \                 break;\n                }\n            }\n            if (isPrime)\
    \ {\n                sum += i;\n            }\n        }\n        return sum;",
  "        // Your code goes here.\n        return 0L;", "        // Your code goes\
    \ here.\n        return (long)0L;", "        long largestPrime = 0;\n        foreach\
    \ (long num in lst) {\n            if (IsPrime(num)) {\n                largestPrime\
    \ = num;\n            }\n        }\n        long sum = 0;\n        foreach (char\
    \ c in largestPrime.ToString()) {\n            sum += long.Parse(c.ToString());\n\
    \        }\n        return sum;", "        long largestPrime = 0;\n        foreach\
    \ (long i in lst) {\n            if (IsPrime(i)) {\n                largestPrime\
    \ = i;\n            }\n        }\n        return SumDigits(largestPrime);", " \
    \       long max = 0;\n        foreach (long num in lst) {\n            if (IsPrime(num))\
    \ {\n                max = num;\n            }\n        }\n        return SumDigits(max);",
  "        long max = 0;\n        foreach (long i in lst) {\n            if (IsPrime(i))\
    \ {\n                max = i;\n            }\n        }\n        return SumDigits(max);",
  "        // Your code goes here.\n        return (long)0L;", "        long largestPrime\
    \ = 0;\n        foreach (long i in lst) {\n            if (IsPrime(i)) {\n   \
    \             largestPrime = i;\n            }\n        }\n        return SumDigits(largestPrime);",
  "        long max = 0;\n        foreach (long item in lst) {\n            if (item\
    \ > max) {\n                max = item;\n            }\n        }\n        long\
    \ sum = 0;\n        while (max > 0) {\n            sum += max % 10;\n        \
    \    max /= 10;\n        }\n        return sum;", "        long largestPrime =\
    \ 0;\n        foreach (long num in lst) {\n            if (IsPrime(num)) {\n \
    \               largestPrime = num;\n            }\n        }\n        return\
    \ SumOfDigits(largestPrime);", "        long maxPrime = 0;\n        foreach (long\
    \ num in lst) {\n            if (IsPrime(num)) {\n                maxPrime = Math.Max(maxPrime,\
    \ num);\n            }\n        }\n        return SumDigits(maxPrime);", "   \
    \     long max = 0;\n        foreach (long i in lst) {\n            if (IsPrime(i))\
    \ {\n                max = i;\n            }\n        }\n        return SumDigits(max);",
  "        // Your code goes here.\n        return 0L;", "        long largestPrime\
    \ = 0;\n        foreach (long num in lst) {\n            if (IsPrime(num)) {\n\
    \                largestPrime = num;\n            }\n        }\n        return\
    \ SumOfDigits(largestPrime);", "        long max = 0;\n        foreach (long i\
    \ in lst) {\n            if (IsPrime(i)) {\n                max = i;\n       \
    \     }\n        }\n        return SumDigits(max);", "        long largestPrime\
    \ = 0;\n        foreach (long l in lst) {\n            if (IsPrime(l)) {\n   \
    \             largestPrime = l;\n            }\n        }\n        return SumDigits(largestPrime);",
  "        long max = 0;\n        foreach (long i in lst) {\n            if (IsPrime(i))\
    \ {\n                max = i;\n            }\n        }\n        return SumDigits(max);",
  "        long largestPrime = 0;\n        foreach (long num in lst) {\n         \
    \   if (IsPrime(num)) {\n                largestPrime = num;\n            }\n\
    \        }\n        return SumDigits(largestPrime);", "        long max = 0;\n\
    \        foreach (long i in lst) {\n            if (i > max) {\n             \
    \   max = i;\n            }\n        }\n        long sum = 0;\n        while (max\
    \ > 0) {\n            sum += max % 10;\n            max /= 10;\n        }\n  \
    \      return sum;", "        long max = 0;\n        foreach (long i in lst) {\n\
    \            if (i > max) {\n                if (IsPrime(i)) {\n             \
    \       max = i;\n                }\n            }\n        }\n        return\
    \ SumDigits(max);", "        long max = 0;\n        foreach (long i in lst) {\n\
    \            if (IsPrime(i)) {\n                max = i;\n            }\n    \
    \    }\n        return SumDigits(max);", "        long max = 0;\n        foreach\
    \ (long i in lst) {\n            if (i > max) {\n                max = i;\n  \
    \          }\n        }\n        long sum = 0;\n        while (max > 0) {\n  \
    \          sum += max % 10;\n            max /= 10;\n        }\n        return\
    \ sum;", "        long max = 0;\n        foreach (long i in lst) {\n         \
    \   if (i > max) {\n                max = i;\n            }\n        }\n     \
    \   long sum = 0;\n        while (max > 0) {\n            sum += max % 10;\n \
    \           max /= 10;\n        }\n        return sum;", "        long max = 0;\n\
    \        foreach (long i in lst) {\n            if (IsPrime(i)) {\n          \
    \      max = i;\n            }\n        }\n        return SumDigits(max);", " \
    \       long max = 0;\n        foreach (long i in lst) {\n            if (IsPrime(i))\
    \ {\n                if (i > max) {\n                    max = i;\n          \
    \      }\n            }\n        }\n        return SumDigits(max);", '        return
    (long)0L;', "        long max = 0;\n        foreach (long n in lst) {\n      \
    \      if (isPrime(n)) {\n                max = Math.Max(max, n);\n          \
    \  }\n        }\n        return sumDigits(max);", "        long max = 0;\n   \
    \     foreach (long i in lst) {\n            if (i > max) {\n                max\
    \ = i;\n            }\n        }\n        long sum = 0;\n        while (max >\
    \ 0) {\n            sum += max % 10;\n            max /= 10;\n        }\n    \
    \    return sum;", "        // Your code goes here.\n        return 0L;", "  \
    \      // Your code goes here.\n        return 0L;", "        long max = 0;\n\
    \        foreach (long i in lst) {\n            if (IsPrime(i)) {\n          \
    \      max = i;\n            }\n        }\n        return SumDigits(max);", " \
    \       long max = 0;\n        foreach (long i in lst) {\n            if (isPrime(i))\
    \ {\n                if (i > max) {\n                    max = i;\n          \
    \      }\n            }\n        }\n        return sumDigits(max);", "       \
    \ long maxPrime = 0;\n        foreach (long num in lst) {\n            if (IsPrime(num))\
    \ {\n                maxPrime = Math.Max(maxPrime, num);\n            }\n    \
    \    }\n        return SumDigits(maxPrime);", "        long largestPrime = 0;\n\
    \        foreach (long num in lst) {\n            if (IsPrime(num)) {\n      \
    \          largestPrime = num;\n            }\n        }\n        return SumOfDigits(largestPrime);",
  "        long max = 0;\n        foreach (long i in lst) {\n            if (IsPrime(i))\
    \ {\n                max = i;\n            }\n        }\n        return SumDigits(max);",
  "        long max = 0;\n        foreach (long i in lst) {\n            if (IsPrime(i))\
    \ {\n                max = i;\n            }\n        }\n        return SumDigits(max);",
  "        long max = 0;\n        foreach (long i in lst) {\n            if (IsPrime(i))\
    \ {\n                if (i > max) {\n                    max = i;\n          \
    \      }\n            }\n        }\n        return SumOfDigits(max);", "     \
    \   // Your code goes here.\n        return 0L;", "        long max = 0;\n   \
    \     foreach (long x in lst) {\n            if (IsPrime(x)) {\n             \
    \   max = x;\n            }\n        }\n        return SumDigits(max);", "   \
    \     long max = 0;\n        foreach (long i in lst) {\n            if (IsPrime(i))\
    \ {\n                max = i;\n            }\n        }\n        return SumDigits(max);",
  "        long max = 0;\n        foreach (long i in lst) {\n            if (i > max)\
    \ {\n                max = i;\n            }\n        }\n        long sum = 0;\n\
    \        while (max > 0) {\n            sum += max % 10;\n            max /= 10;\n\
    \        }\n        return sum;", "        long max = 0;\n        foreach (long\
    \ i in lst) {\n            if (i > max) {\n                max = i;\n        \
    \    }\n        }\n        long sum = 0;\n        while (max > 0) {\n        \
    \    sum += max % 10;\n            max /= 10;\n        }\n        return sum;",
  "        long max = 0;\n        foreach (long i in lst) {\n            if (IsPrime(i))\
    \ {\n                max = i;\n            }\n        }\n        return SumOfDigits(max);",
  "        long max = 0;\n        foreach (long num in lst) {\n            if (IsPrime(num))\
    \ {\n                max = Math.Max(max, num);\n            }\n        }\n   \
    \     return SumDigits(max);", "        long max = 0;\n        foreach (long i\
    \ in lst) {\n            if (IsPrime(i)) {\n                max = i;\n       \
    \     }\n        }\n        return SumDigits(max);", "        long max = 0;\n\
    \        foreach (long i in lst) {\n            if (i > max) {\n             \
    \   max = i;\n            }\n        }\n        long sum = 0;\n        while (max\
    \ > 0) {\n            sum += max % 10;\n            max /= 10;\n        }\n  \
    \      return sum;", "        long largestPrime = 0;\n        foreach (long num\
    \ in lst) {\n            if (IsPrime(num)) {\n                largestPrime = Math.Max(largestPrime,\
    \ num);\n            }\n        }\n        return SumDigits(largestPrime);", " \
    \       long largestPrime = 0;\n        foreach (long num in lst) {\n        \
    \    if (IsPrime(num)) {\n                largestPrime = num;\n            }\n\
    \        }\n        return SumOfDigits(largestPrime);", "        long max = 0;\n\
    \        foreach (long i in lst) {\n            if (IsPrime(i)) {\n          \
    \      if (i > max) {\n                    max = i;\n                }\n     \
    \       }\n        }\n        return SumDigits(max);", "        // Your code goes\
    \ here.\n        return 0L;", "        long max = 0;\n        foreach (long i\
    \ in lst) {\n            if (IsPrime(i)) {\n                max = i;\n       \
    \     }\n        }\n        return SumDigits(max);", "        long max = 0;\n\
    \        foreach (long n in lst) {\n            if (n > max && IsPrime(n)) {\n\
    \                max = n;\n            }\n        }\n        return SumDigits(max);",
  "        long max = 0;\n        foreach (long i in lst) {\n            if (IsPrime(i))\
    \ {\n                if (i > max) {\n                    max = i;\n          \
    \      }\n            }\n        }\n        return SumDigits(max);", "       \
    \ long largestPrime = 0;\n        foreach (long num in lst) {\n            if\
    \ (IsPrime(num)) {\n                largestPrime = num;\n            }\n     \
    \   }\n        return SumOfDigits(largestPrime);", "        long max = 0;\n  \
    \      foreach (long i in lst) {\n            if (i > max) {\n               \
    \ max = i;\n            }\n        }\n        long sum = 0;\n        while (max\
    \ > 0) {\n            sum += max % 10;\n            max /= 10;\n        }\n  \
    \      return sum;", "        long max = 0;\n        foreach (long i in lst) {\n\
    \            if (IsPrime(i)) {\n                if (i > max) {\n             \
    \       max = i;\n                }\n            }\n        }\n        return\
    \ SumDigits(max);", "        long max = 0;\n        foreach (long num in lst)\
    \ {\n            if (num > max && IsPrime(num)) {\n                max = num;\n\
    \            }\n        }\n        return SumDigits(max);", "        long max\
    \ = 0;\n        foreach (long num in lst) {\n            if (IsPrime(num)) {\n\
    \                max = Math.Max(max, num);\n            }\n        }\n       \
    \ return SumDigits(max);", "        long largestPrime = 0;\n        for (long\
    \ i = 0; i < lst.Count; i++) {\n            if (IsPrime(lst[(int)i])) {\n    \
    \            largestPrime = lst[(int)i];\n            }\n        }\n        long\
    \ sum = 0;\n        while (largestPrime > 0) {\n            sum += largestPrime\
    \ % 10;\n            largestPrime /= 10;\n        }\n        return sum;", " \
    \       // Your code goes here.\n        return 0L;", "        long max = 0;\n\
    \        foreach (long i in lst) {\n            if (i > max) {\n             \
    \   max = i;\n            }\n        }\n        long sum = 0;\n        while (max\
    \ > 0) {\n            sum += max % 10;\n            max /= 10;\n        }\n  \
    \      return sum;", "        // Your code goes here.\n        return 0L;", " \
    \       long max = 0;\n        foreach (long i in lst) {\n            if (IsPrime(i))\
    \ {\n                max = i;\n            }\n        }\n        return SumDigits(max);",
  "        long max = 0;\n        foreach (long i in lst) {\n            if (IsPrime(i))\
    \ {\n                max = Math.Max(max, i);\n            }\n        }\n     \
    \   return SumDigits(max);", "        long max = (long)0L;\n        foreach (long\
    \ i in lst) {\n            if (i > max) {\n                max = i;\n        \
    \    }\n        }\n        long sum = (long)0L;\n        foreach (long i in lst)\
    \ {\n            if (i == max) {\n                if (i > (long)1L) {\n      \
    \              if (i % (long)2L != (long)0L) {\n                        if (i\
    \ % (long)3L != (long)0L) {\n                            if (i % (long)5L != (long)0L)\
    \ {\n                                if (i % (long)7L != (long)0L) {\n       \
    \                             if (i % (long)11L != (long)0L) {\n             \
    \                           if (i % (long)13L != (long)0L) {\n               \
    \                             if (i % (long)17L != (long)0L) {\n             \
    \                                   if (i % (long)19L != (long)0L) {\n       \
    \                                             if (i % (long)23L != (long)0L) {\n\
    \                                                        if (i % (long)29L !=\
    \ (long)0L) {\n                                                            if\
    \ (i % (long)31L != (long)0L) {\n                                            \
    \                    if (i % (long)37L != (long)0L) {\n                      \
    \                                              if (i % (long)41L != (long)0L)\
    \ {\n                                                                        if\
    \ (i % (long)43L != (long)0L) {\n                                            \
    \                                if (i % (long)47L != (long)0L) {\n          \
    \                                                                      if (i %\
    \ (long)53L != (long)0L) {\n                                                 \
    \                                   if (i % (long)59L != (long)0L) {\n       \
    \                                                                            \
    \     if (i % (long)61L != (long)0L) {\n                                     \
    \                                                       if (i % (long)67L != (long)0L)\
    \ {\n                                                                        \
    \                        if (i % (long)71L !=", "        long max = 0;\n     \
    \   foreach (long i in lst) {\n            if (i > max) {\n                max\
    \ = i;\n            }\n        }\n        long sum = 0;\n        while (max >\
    \ 0) {\n            sum += max % 10;\n            max /= 10;\n        }\n    \
    \    return sum;", "        long max = 0;\n        foreach (long i in lst) {\n\
    \            if (i > max) {\n                max = i;\n            }\n       \
    \ }\n        long sum = 0;\n        while (max > 0) {\n            sum += max\
    \ % 10;\n            max /= 10;\n        }\n        return sum;", "        long\
    \ largestPrime = 0;\n        foreach (long num in lst) {\n            if (IsPrime(num))\
    \ {\n                largestPrime = num;\n            }\n        }\n        return\
    \ SumDigits(largestPrime);", "        long max = 0;\n        foreach (long i in\
    \ lst) {\n            if (i > max) {\n                max = i;\n            }\n\
    \        }\n        long sum = 0;\n        while (max > 0) {\n            sum\
    \ += max % 10;\n            max /= 10;\n        }\n        return sum;", "   \
    \     long max = 0;\n        foreach (long i in lst) {\n            if (IsPrime(i))\
    \ {\n                if (i > max) {\n                    max = i;\n          \
    \      }\n            }\n        }\n        return SumOfDigits(max);", "     \
    \   var primes = new List<long>();\n        for (long i = 0; i < lst.Count; i++)\
    \ {\n            if (lst[(int)i] == 0) {\n                continue;\n        \
    \    }\n            if (lst[(int)i] == 1) {\n                continue;\n     \
    \       }\n            if (lst[(int)i] == 2) {\n                primes.Add(2L);\n\
    \                continue;\n            }\n            if (lst[(int)i] == 3) {\n\
    \                primes.Add(3L);\n                continue;\n            }\n \
    \           if (lst[(int)i] == 5) {\n                primes.Add(5L);\n       \
    \         continue;\n            }\n            if (lst[(int)i] == 7) {\n    \
    \            primes.Add(7L);\n                continue;\n            }\n     \
    \       if (lst[(int)i] == 11) {\n                primes.Add(11L);\n         \
    \       continue;\n            }\n            if (lst[(int)i] == 13) {\n     \
    \           primes.Add(13L);\n                continue;\n            }\n     \
    \       if (lst[(int)i] == 17) {\n                primes.Add(17L);\n         \
    \       continue;\n            }\n            if (lst[(int)i] == 19) {\n     \
    \           primes.Add(19L);\n                continue;\n            }\n     \
    \       if (lst[(int)i] == 23) {\n                primes.Add(23L);\n         \
    \       continue;\n            }\n            if (lst[(int)i] == 29) {\n     \
    \           primes.Add(29L);\n                continue;\n            }\n     \
    \       if (lst[(int)i] == 31) {\n                primes.Add(31L);\n         \
    \       continue;\n            }\n            if (lst[(int)i] == 37) {\n     \
    \           primes.Add(37L);\n                continue;\n            }\n     \
    \       if (lst[(int)i] == 41) {\n                primes.Add(41L);\n         \
    \       continue;\n            }\n            if (lst", "        long max = 0;\n\
    \        foreach (long i in lst) {\n            if (i > max) {\n             \
    \   max = i;\n            }\n        }\n        long sum = 0;\n        for (long\
    \ i = 2; i <= max; i++) {\n            bool isPrime = true;\n            for (long\
    \ j = 2; j <= i / 2; j++) {\n                if (i % j == 0) {\n             \
    \       isPrime = false;\n                    break;\n                }\n    \
    \        }\n            if (isPrime) {\n                long n = i;\n        \
    \        while (n > 0) {\n                    sum += n % 10;\n               \
    \     n /= 10;\n                }\n            }\n        }\n        return sum;",
  "        long max = 0;\n        foreach (long i in lst) {\n            if (IsPrime(i))\
    \ {\n                if (i > max) {\n                    max = i;\n          \
    \      }\n            }\n        }\n        return SumDigits(max);", "       \
    \ long max = 0;\n        foreach (long i in lst) {\n            if (IsPrime(i))\
    \ {\n                if (i > max) {\n                    max = i;\n          \
    \      }\n            }\n        }\n        return SumDigits(max);", "       \
    \ // Your code goes here.\n        return 0L;", "        long max = 0;\n     \
    \   foreach (long i in lst) {\n            if (IsPrime(i)) {\n               \
    \ if (i > max) {\n                    max = i;\n                }\n          \
    \  }\n        }\n        return SumDigits(max);", "        long largestPrime =\
    \ 0;\n        for (int i = 0; i < lst.Count; i++) {\n            if (IsPrime(lst[i]))\
    \ {\n                if (lst[i] > largestPrime) {\n                    largestPrime\
    \ = lst[i];\n                }\n            }\n        }\n        return SumDigits(largestPrime);",
  "        long max = 0;\n        foreach (long i in lst) {\n            if (IsPrime(i))\
    \ {\n                if (i > max) {\n                    max = i;\n          \
    \      }\n            }\n        }\n        return SumDigits(max);", "       \
    \ long max = 0;\n        foreach (long x in lst) {\n            if (IsPrime(x))\
    \ {\n                if (x > max) {\n                    max = x;\n          \
    \      }\n            }\n        }\n        return SumDigits(max);", "       \
    \ long max = 0;\n        foreach (long i in lst) {\n            if (i > max) {\n\
    \                max = i;\n            }\n        }\n        long sum = 0;\n \
    \       while (max > 0) {\n            sum += max % 10;\n            max /= 10;\n\
    \        }\n        return sum;", "        long max = 0;\n        foreach (long\
    \ i in lst) {\n            if (i > max) {\n                if (IsPrime(i)) {\n\
    \                    max = i;\n                }\n            }\n        }\n \
    \       return SumDigits(max);", "        long max = 0;\n        foreach (long\
    \ i in lst) {\n            if (i > max) {\n                max = i;\n        \
    \    }\n        }\n        long sum = 0;\n        while (max > 0) {\n        \
    \    sum += max % 10;\n            max /= 10;\n        }\n        return sum;",
  "        long max = 0;\n        foreach (long i in lst) {\n            if (IsPrime(i))\
    \ {\n                if (i > max) {\n                    max = i;\n          \
    \      }\n            }\n        }\n        return SumDigits(max);", "       \
    \ // Your code goes here.\n        // You can add other functions as well if you\
    \ need.\n        // >>> Skjkasdkd((new List<long>(new long[]{(long)0L, (long)3L,\
    \ (long)2L, (long)1L, (long)3L, (long)5L, (long)7L, (long)4L, (long)5L, (long)5L,\
    \ (long)5L, (long)2L, (long)181L, (long)32L, (long)4L, (long)32L, (long)3L, (long)2L,\
    \ (long)32L, (long)324L, (long)4L, (long)3L})))\n        // (10L)\n        //\
    \ >>> Skjkasdkd((new List<long>(new long[]{(long)1L, (long)0L, (long)1L, (long)8L,\
    \ (long)2L, (long)4597L, (long)2L, (long)1L, (long)3L, (long)40L, (long)1L, (long)2L,\
    \ (long)1L, (long)2L, (long)4L, (long)2L, (long)5L, (long)1L})))\n        // (25L)\n\
    \        // >>> Skjkasdkd((new List<long>(new long[]{(long)1L, (long)3L, (long)1L,\
    \ (long)32L, (long)5107L, (long)34L, (long)83278L, (long)109L, (long)163L, (long)23L,\
    \ (long)2323L, (long)32L, (long)30L, (long)1L, (long)9L, (long)3L})))\n      \
    \  // (13L)\n        // >>> Skjkasdkd((new List<long>(new long[]{(long)0L, (long)724L,\
    \ (long)32L, (long)71L, (long)99L, (long)32L, (long)6L, (long)0L, (", "      \
    \  long max = 0;\n        foreach (long x in lst) {\n            if (IsPrime(x))\
    \ {\n                if (x > max) {\n                    max = x;\n          \
    \      }\n            }\n        }\n        return SumDigits(max);", "       \
    \ long largestPrime = 0;\n        foreach (long num in lst) {\n            if\
    \ (IsPrime(num)) {\n                largestPrime = num;\n            }\n     \
    \   }\n        return SumDigits(largestPrime);", "        long max = 0;\n    \
    \    foreach (long n in lst) {\n            if (n > max && IsPrime(n)) {\n   \
    \             max = n;\n            }\n        }\n        return SumDigits(max);",
  "        long max = 0;\n        foreach (long i in lst) {\n            if (IsPrime(i))\
    \ {\n                if (i > max) {\n                    max = i;\n          \
    \      }\n            }\n        }\n        return SumDigits(max);", "       \
    \ long sum = 0;\n        long max = 0;\n        foreach (long i in lst) {\n  \
    \          if (IsPrime(i)) {\n                if (i > max) {\n               \
    \     max = i;\n                }\n            }\n        }\n        while (max\
    \ > 0) {\n            sum += max % 10;\n            max /= 10;\n        }\n  \
    \      return sum;", "        long max = 0;\n        foreach (long i in lst) {\n\
    \            if (IsPrime(i)) {\n                max = i;\n            }\n    \
    \    }\n        return SumDigits(max);", "        return lst.Where(x => x > 1).Select(x\
    \ => new {\n            x = x,\n            isPrime = Enumerable.Range(2, (int)Math.Sqrt(x)\
    \ - 1).All(y => x % y > 0)\n        }).Where(x => x.isPrime).Max(x => x.x).ToString().Select(x\
    \ => (long)Char.GetNumericValue(x)).Sum();", "        long max = 0;\n        foreach\
    \ (long i in lst) {\n            if (i > max) {\n                max = i;\n  \
    \          }\n        }\n        long[] primes = new long[max + 1];\n        for\
    \ (long i = 0; i < max + 1; i++) {\n            primes[i] = i;\n        }\n  \
    \      primes[0] = 0;\n        primes[1] = 0;\n        for (long i = 2; i < max\
    \ + 1; i++) {\n            if (primes[i] != 0) {\n                for (long j\
    \ = i * i; j < max + 1; j += i) {\n                    primes[j] = 0;\n      \
    \          }\n            }\n        }\n        long maxPrime = 0;\n        foreach\
    \ (long i in lst) {\n            if (primes[i] > maxPrime) {\n               \
    \ maxPrime = primes[i];\n            }\n        }\n        long sum = 0;\n   \
    \     while (maxPrime > 0) {\n            sum += maxPrime % 10;\n            maxPrime\
    \ /= 10;\n        }\n        return sum;", "        long largestPrime = 0;\n \
    \       foreach (long num in lst) {\n            if (num > largestPrime && IsPrime(num))\
    \ {\n                largestPrime = num;\n            }\n        }\n        return\
    \ SumDigits(largestPrime);", "        long largestPrime = 0;\n        foreach\
    \ (long num in lst) {\n            if (IsPrime(num)) {\n                largestPrime\
    \ = num;\n            }\n        }\n        return SumDigits(largestPrime);",
  "        long max = 0;\n        foreach (long i in lst) {\n            if (i > max)\
    \ {\n                max = i;\n            }\n        }\n        long sum = 0;\n\
    \        for (long i = max; i > 1; i--) {\n            if (IsPrime(i)) {\n   \
    \             sum = 0;\n                foreach (char c in i.ToString()) {\n \
    \                   sum += (long)Char.GetNumericValue(c);\n                }\n\
    \                break;\n            }\n        }\n        return sum;", "   \
    \     long max = 0;\n        foreach (long i in lst) {\n            if (IsPrime(i))\
    \ {\n                if (i > max) {\n                    max = i;\n          \
    \      }\n            }\n        }\n        return SumDigits(max);", "       \
    \ long largestPrime = 0;\n        foreach (long i in lst) {\n            if (IsPrime(i))\
    \ {\n                if (i > largestPrime) {\n                    largestPrime\
    \ = i;\n                }\n            }\n        }\n        return SumDigits(largestPrime);",
  "        long max = 0;\n        foreach (long i in lst) {\n            if (i > max)\
    \ {\n                max = i;\n            }\n        }\n        long sum = 0;\n\
    \        while (max > 0) {\n            sum += max % 10;\n            max /= 10;\n\
    \        }\n        return sum;", "        long max = 0;\n        foreach (long\
    \ i in lst) {\n            if (IsPrime(i)) {\n                max = i;\n     \
    \       }\n        }\n        return SumDigits(max);", "        long max = 0;\n\
    \        foreach (long n in lst) {\n            if (n > max && IsPrime(n)) {\n\
    \                max = n;\n            }\n        }\n        return SumDigits(max);",
  "        long max = 0;\n        foreach (long i in lst) {\n            if (IsPrime(i))\
    \ {\n                max = i;\n            }\n        }\n        return SumDigits(max);",
  "        long largestPrime = 0;\n        foreach (long i in lst) {\n           \
    \ if (IsPrime(i)) {\n                if (i > largestPrime) {\n               \
    \     largestPrime = i;\n                }\n            }\n        }\n       \
    \ return SumDigits(largestPrime);", "        long max = 0;\n        foreach (long\
    \ i in lst) {\n            if (IsPrime(i)) {\n                if (i > max) {\n\
    \                    max = i;\n                }\n            }\n        }\n \
    \       return SumDigits(max);", "        long max = 0;\n        foreach (long\
    \ i in lst) {\n            if (IsPrime(i)) {\n                max = i;\n     \
    \       }\n        }\n        return SumDigits(max);", "        long largestPrime\
    \ = 0;\n        foreach (long num in lst) {\n            if (IsPrime(num)) {\n\
    \                largestPrime = num;\n            }\n        }\n        return\
    \ SumDigits(largestPrime);", "        long max = 0;\n        foreach (long i in\
    \ lst) {\n            if (IsPrime(i)) {\n                if (i > max) {\n    \
    \                max = i;\n                }\n            }\n        }\n     \
    \   return SumDigits(max);", "        long largestPrime = 0;\n        foreach\
    \ (long i in lst) {\n            if (IsPrime(i)) {\n                if (i > largestPrime)\
    \ {\n                    largestPrime = i;\n                }\n            }\n\
    \        }\n        return SumOfDigits(largestPrime);", "        long max = 0;\n\
    \        foreach (long i in lst) {\n            if (i > max) {\n             \
    \   max = i;\n            }\n        }\n        long sum = 0;\n        while (max\
    \ > 0) {\n            sum += max % 10;\n            max /= 10;\n        }\n  \
    \      return sum;", "        // Your code goes here.\n        return (long)0L;",
  "        long largestPrime = 0;\n        foreach (long num in lst) {\n         \
    \   if (IsPrime(num)) {\n                largestPrime = num;\n            }\n\
    \        }\n        return SumDigits(largestPrime);", "        long max = 0;\n\
    \        foreach (long i in lst) {\n            if (i > max) {\n             \
    \   max = i;\n            }\n        }\n        long sum = 0;\n        while (max\
    \ > 0) {\n            sum += max % 10;\n            max /= 10;\n        }\n  \
    \      return sum;", "        long largestPrime = 0;\n        foreach (long i\
    \ in lst) {\n            if (IsPrime(i)) {\n                if (i > largestPrime)\
    \ {\n                    largestPrime = i;\n                }\n            }\n\
    \        }\n        return SumDigits(largestPrime);", "        long max = 0;\n\
    \        foreach (long i in lst) {\n            if (i > max) {\n             \
    \   max = i;\n            }\n        }\n        long sum = 0;\n        while (max\
    \ > 0) {\n            sum += max % 10;\n            max /= 10;\n        }\n  \
    \      return sum;", "        long max = 0;\n        foreach (long i in lst) {\n\
    \            if (IsPrime(i)) {\n                max = i;\n            }\n    \
    \    }\n        return SumDigits(max);", "        long max = 0;\n        foreach\
    \ (long i in lst) {\n            if (i > max) {\n                max = i;\n  \
    \          }\n        }\n        long sum = 0;\n        for (long i = 2; i <=\
    \ max; i++) {\n            bool isPrime = true;\n            for (long j = 2;\
    \ j < i; j++) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if (isPrime) {\n                long num = i;\n                while\
    \ (num > 0) {\n                    sum += num % 10;\n                    num /=\
    \ 10;\n                }\n            }\n        }\n        return sum;", "  \
    \      long largestPrime = 0;\n        foreach (long i in lst) {\n           \
    \ if (IsPrime(i)) {\n                if (i > largestPrime) {\n               \
    \     largestPrime = i;\n                }\n            }\n        }\n       \
    \ return SumDigits(largestPrime);", "        long largestPrime = 0;\n        foreach\
    \ (long num in lst) {\n            if (IsPrime(num)) {\n                largestPrime\
    \ = num;\n            }\n        }\n        return SumDigits(largestPrime);",
  "        // Your code goes here.\n        long max = 0;\n        foreach (long num\
    \ in lst) {\n            if (IsPrime(num)) {\n                if (num > max) {\n\
    \                    max = num;\n                }\n            }\n        }\n\
    \        return SumDigits(max);", "        long max = 0;\n        foreach (long\
    \ i in lst) {\n            if (IsPrime(i)) {\n                max = Math.Max(max,\
    \ i);\n            }\n        }\n        return SumOfDigits(max);", "        long\
    \ max = 0;\n        foreach (long i in lst) {\n            if (IsPrime(i)) {\n\
    \                max = i;\n            }\n        }\n        return SumDigits(max);",
  "        long max = 0;\n        foreach (long i in lst) {\n            if (i > max)\
    \ {\n                max = i;\n            }\n        }\n        long sum = 0;\n\
    \        while (max > 0) {\n            sum += max % 10;\n            max /= 10;\n\
    \        }\n        return sum;", "        long largestPrime = 0;\n        foreach\
    \ (long i in lst) {\n            if (IsPrime(i)) {\n                if (i > largestPrime)\
    \ {\n                    largestPrime = i;\n                }\n            }\n\
    \        }\n        return SumDigits(largestPrime);", "        long max = 0;\n\
    \        foreach (long i in lst) {\n            if (i > max) {\n             \
    \   max = i;\n            }\n        }\n        long sum = 0;\n        while (max\
    \ > 0) {\n            sum += max % 10;\n            max /= 10;\n        }\n  \
    \      return sum;", "        long largest = 0;\n        foreach (long num in\
    \ lst) {\n            if (num > largest && isPrime(num)) {\n                largest\
    \ = num;\n            }\n        }\n        return sumDigits(largest);", "   \
    \     long max = 0;\n        foreach (long i in lst) {\n            if (i > max)\
    \ {\n                max = i;\n            }\n        }\n        long sum = 0;\n\
    \        while (max > 0) {\n            sum += max % 10;\n            max /= 10;\n\
    \        }\n        return sum;", "        long largestPrime = 0;\n        foreach\
    \ (long num in lst) {\n            if (IsPrime(num)) {\n                largestPrime\
    \ = num;\n            }\n        }\n        return SumDigits(largestPrime);",
  "        long largest = 0;\n        foreach (long i in lst) {\n            if (IsPrime(i))\
    \ {\n                if (i > largest) {\n                    largest = i;\n  \
    \              }\n            }\n        }\n        return SumDigits(largest);",
  "        long largestPrime = 0;\n        foreach (long num in lst) {\n         \
    \   if (num > largestPrime && IsPrime(num)) {\n                largestPrime =\
    \ num;\n            }\n        }\n        return SumDigits(largestPrime);", " \
    \       long max = 0;\n        foreach (long n in lst) {\n            if (n >\
    \ max && IsPrime(n)) {\n                max = n;\n            }\n        }\n \
    \       return SumDigits(max);", "        long max = 0;\n        foreach (long\
    \ i in lst) {\n            if (IsPrime(i)) {\n                max = i;\n     \
    \       }\n        }\n        return SumDigits(max);", "        long max = 0;\n\
    \        foreach (long i in lst) {\n            if (i > max) {\n             \
    \   max = i;\n            }\n        }\n        long sum = 0;\n        while (max\
    \ > 0) {\n            sum += max % 10;\n            max /= 10;\n        }\n  \
    \      return sum;", "        long max = 0;\n        foreach (long i in lst) {\n\
    \            if (i > max) {\n                max = i;\n            }\n       \
    \ }\n        long sum = 0;\n        while (max > 0) {\n            sum += max\
    \ % 10;\n            max /= 10;\n        }\n        return sum;", "        long\
    \ max = 0;\n        foreach (long i in lst) {\n            if (IsPrime(i)) {\n\
    \                max = i;\n            }\n        }\n        return SumDigits(max);",
  "        long largestPrime = 0;\n        foreach (long i in lst) {\n           \
    \ if (IsPrime(i)) {\n                if (i > largestPrime) {\n               \
    \     largestPrime = i;\n                }\n            }\n        }\n       \
    \ long sum = 0;\n        foreach (char c in largestPrime.ToString()) {\n     \
    \       sum += (long)Char.GetNumericValue(c);\n        }\n        return sum;",
  "        long max = 0;\n        foreach (long i in lst) {\n            if (i > max)\
    \ {\n                max = i;\n            }\n        }\n        long sum = 0;\n\
    \        while (max > 0) {\n            sum += max % 10;\n            max /= 10;\n\
    \        }\n        return sum;", "        long largestPrime = 0;\n        foreach\
    \ (long num in lst) {\n            if (IsPrime(num)) {\n                largestPrime\
    \ = num;\n            }\n        }\n        return SumDigits(largestPrime);",
  "        long max = 0;\n        foreach (long i in lst) {\n            if (i > max)\
    \ {\n                max = i;\n            }\n        }\n        long sum = 0;\n\
    \        while (max > 0) {\n            sum += max % 10;\n            max /= 10;\n\
    \        }\n        return sum;", "        long max = 0;\n        foreach (long\
    \ i in lst) {\n            if (i > max) {\n                max = i;\n        \
    \    }\n        }\n        long sum = 0;\n        while (max > 0) {\n        \
    \    sum += max % 10;\n            max /= 10;\n        }\n        return sum;",
  "        long max = (long)0L;\n        foreach (long i in lst) {\n            if\
    \ (IsPrime(i)) {\n                if (i > max) {\n                    max = i;\n\
    \                }\n            }\n        }\n        return SumDigits(max);",
  "        long max = 0;\n        foreach (long i in lst) {\n            if (IsPrime(i))\
    \ {\n                max = i;\n            }\n        }\n        return SumDigits(max);",
  "        // Your code goes here.\n        // You can add more classes and methods\
    \ as you need.\n        // You can add more classes and methods as you need.\n\
    \        // You can add more classes and methods as you need.\n        // You\
    \ can add more classes and methods as you need.\n        // You can add more classes\
    \ and methods as you need.\n        // You can add more classes and methods as\
    \ you need.\n        // You can add more classes and methods as you need.\n  \
    \      // You can add more classes and methods as you need.\n        // You can\
    \ add more classes and methods as you need.\n        // You can add more classes\
    \ and methods as you need.\n        // You can add more classes and methods as\
    \ you need.\n        // You can add more classes and methods as you need.\n  \
    \      // You can add more classes and methods as you need.\n        // You can\
    \ add more classes and methods as you need.\n        // You can add more classes\
    \ and methods as you need.\n        // You can add more classes and methods as\
    \ you need.\n        // You can add more classes and methods as you need.\n  \
    \      // You can add more classes and methods as you need.\n        // You can\
    \ add more classes and methods as you need.\n        // You can add more classes\
    \ and methods as you need.\n        // You can add more classes and methods as\
    \ you need.\n        // You can add more classes and methods as you need.\n  \
    \      // You can add more classes and methods as you need.\n        // You can\
    \ add more classes and methods as you need.\n        // You can add more classes\
    \ and methods as you need.\n        // You can add more classes and methods as\
    \ you need.\n        // You can add more classes and methods as you need.\n  \
    \      // You can add more classes and methods as you need.\n        // You can\
    \ add more classes and methods as you need.\n        // You can add more classes\
    \ and methods as you need.\n        // You can add more classes and methods as\
    \ you need.\n        // You can add more classes and methods as you need.\n  \
    \      // You can add more classes and methods as you need.\n        // You can\
    \ add more classes and methods as you need.\n        // You can add more classes\
    \ and methods as you need.\n        // You can add more classes and methods as\
    \ you need.", "        long largestPrime = 0;\n        foreach (long num in lst)\
    \ {\n            if (IsPrime(num)) {\n                largestPrime = num;\n  \
    \          }\n        }\n        return SumDigits(largestPrime);", "        long\
    \ max = 0;\n        foreach (long i in lst) {\n            if (IsPrime(i)) {\n\
    \                if (i > max) {\n                    max = i;\n              \
    \  }\n            }\n        }\n        return SumDigits(max);", "        // Your\
    \ code goes here.\n        return 0L;", "        long max = 0;\n        foreach\
    \ (long i in lst) {\n            if (IsPrime(i)) {\n                if (i > max)\
    \ {\n                    max = i;\n                }\n            }\n        }\n\
    \        return SumOfDigits(max);", "        long max = 0;\n        foreach (long\
    \ i in lst) {\n            if (IsPrime(i)) {\n                if (i > max) {\n\
    \                    max = i;\n                }\n            }\n        }\n \
    \       return SumDigits(max);", "        long largestPrime = 0;\n        foreach\
    \ (long num in lst) {\n            if (IsPrime(num)) {\n                largestPrime\
    \ = num;\n            }\n        }\n        return SumDigits(largestPrime);",
  "        long max = 0;\n        foreach (long i in lst) {\n            if (IsPrime(i))\
    \ {\n                max = i;\n            }\n        }\n        return SumDigits(max);",
  "        long max = 0;\n        foreach (long i in lst) {\n            if (i > max)\
    \ {\n                max = i;\n            }\n        }\n        long sum = 0;\n\
    \        while (max > 0) {\n            sum += max % 10;\n            max /= 10;\n\
    \        }\n        return sum;", "        long max = 0;\n        foreach (long\
    \ i in lst) {\n            if (i > max) {\n                max = i;\n        \
    \    }\n        }\n        long sum = 0;\n        while (max > 0) {\n        \
    \    sum += max % 10;\n            max /= 10;\n        }\n        return sum;",
  "        long max = 0;\n        foreach (long i in lst) {\n            if (IsPrime(i))\
    \ {\n                if (i > max) {\n                    max = i;\n          \
    \      }\n            }\n        }\n        return SumDigits(max);", "       \
    \ long largestPrime = 0;\n        foreach (long num in lst) {\n            if\
    \ (IsPrime(num)) {\n                largestPrime = num;\n            }\n     \
    \   }\n        return SumDigits(largestPrime);", "        long max = 0;\n    \
    \    foreach (long i in lst) {\n            if (IsPrime(i)) {\n              \
    \  max = i;\n            }\n        }\n        return SumDigits(max);", "    \
    \    // Your code goes here.\n        return 0L;", "        // Your code goes\
    \ here.\n        return (long)0L;", "        long maxPrime = 0;\n        foreach\
    \ (long i in lst) {\n            if (IsPrime(i)) {\n                maxPrime =\
    \ Math.Max(maxPrime, i);\n            }\n        }\n        return SumDigits(maxPrime);",
  "        // Your code goes here.\n        return (long)0L;", "        long max =\
    \ 0;\n        foreach (long i in lst) {\n            if (i > max) {\n        \
    \        max = i;\n            }\n        }\n        long sum = 0;\n        while\
    \ (max > 0) {\n            sum += max % 10;\n            max /= 10;\n        }\n\
    \        return sum;", "        long max = 0;\n        foreach (long n in lst)\
    \ {\n            if (IsPrime(n)) {\n                max = Math.Max(max, n);\n\
    \            }\n        }\n        return SumDigits(max);", "        long largest\
    \ = 0;\n        foreach (long i in lst) {\n            if (IsPrime(i)) {\n   \
    \             if (i > largest) {\n                    largest = i;\n         \
    \       }\n            }\n        }\n        return SumDigits(largest);", "  \
    \      long max = 0;\n        foreach (long i in lst) {\n            if (i > max)\
    \ {\n                max = i;\n            }\n        }\n        long sum = 0;\n\
    \        while (max > 0) {\n            sum += max % 10;\n            max /= 10;\n\
    \        }\n        return sum;", "        long max = 0;\n        foreach (long\
    \ i in lst) {\n            if (IsPrime(i)) {\n                max = i;\n     \
    \       }\n        }\n        return SumDigits(max);", "        long largestPrime\
    \ = 0;\n        foreach (long i in lst) {\n            if (IsPrime(i)) {\n   \
    \             if (i > largestPrime) {\n                    largestPrime = i;\n\
    \                }\n            }\n        }\n        return SumDigits(largestPrime);",
  "        // Your code goes here.\n        return 0L;", "        long max = 0;\n\
    \        foreach (long i in lst) {\n            if (IsPrime(i)) {\n          \
    \      if (i > max) {\n                    max = i;\n                }\n     \
    \       }\n        }\n        return SumDigits(max);", "        long max = 0;\n\
    \        foreach (long i in lst) {\n            if (i > max) {\n             \
    \   max = i;\n            }\n        }\n        long sum = 0;\n        while (max\
    \ > 0) {\n            sum += max % 10;\n            max /= 10;\n        }\n  \
    \      return sum;", "        long max = 0;\n        foreach (long i in lst) {\n\
    \            if (IsPrime(i)) {\n                max = i;\n            }\n    \
    \    }\n        return SumDigits(max);", "        long max = 0;\n        foreach\
    \ (long i in lst) {\n            if (IsPrime(i)) {\n                max = i;\n\
    \            }\n        }\n        return SumDigits(max);", "        long largestPrime\
    \ = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            if (IsPrime(lst[i]))\
    \ {\n                if (lst[i] > largestPrime) {\n                    largestPrime\
    \ = lst[i];\n                }\n            }\n        }\n        return SumDigits(largestPrime);",
  "        long max = 0;\n        foreach (long i in lst) {\n            if (IsPrime(i))\
    \ {\n                max = i;\n            }\n        }\n        return SumDigits(max);",
  "        long max = 0;\n        foreach (long i in lst) {\n            if (i > max)\
    \ {\n                max = i;\n            }\n        }\n        long sum = 0;\n\
    \        while (max > 0) {\n            sum += max % 10;\n            max /= 10;\n\
    \        }\n        return sum;", "        long largestPrime = 0;\n        foreach\
    \ (long i in lst) {\n            if (IsPrime(i)) {\n                if (i > largestPrime)\
    \ {\n                    largestPrime = i;\n                }\n            }\n\
    \        }\n        return SumDigits(largestPrime);", "        long max = 0;\n\
    \        foreach (long i in lst) {\n            if (i > max) {\n             \
    \   max = i;\n            }\n        }\n        long sum = 0;\n        while (max\
    \ > 0) {\n            sum += max % 10;\n            max /= 10;\n        }\n  \
    \      return sum;", "        long largestPrime = 0;\n        foreach (long num\
    \ in lst) {\n            if (IsPrime(num)) {\n                largestPrime = num;\n\
    \            }\n        }\n        return SumDigits(largestPrime);", "       \
    \ long max = 0;\n        foreach (long i in lst) {\n            if (IsPrime(i))\
    \ {\n                max = i;\n            }\n        }\n        return SumDigits(max);",
  "        long largestPrime = 0;\n        foreach (long i in lst) {\n           \
    \ if (IsPrime(i)) {\n                if (i > largestPrime) {\n               \
    \     largestPrime = i;\n                }\n            }\n        }\n       \
    \ return SumDigits(largestPrime);", "        long max = 0;\n        foreach (long\
    \ i in lst) {\n            if (i > max) {\n                max = i;\n        \
    \    }\n        }\n        long sum = 0;\n        while (max > 0) {\n        \
    \    sum += max % 10;\n            max /= 10;\n        }\n        return sum;",
  "        long max = 0;\n        foreach (long i in lst) {\n            if (i > max)\
    \ {\n                max = i;\n            }\n        }\n        long sum = 0;\n\
    \        while (max > 0) {\n            sum += max % 10;\n            max /= 10;\n\
    \        }\n        return sum;", "        long max = 0;\n        foreach (long\
    \ i in lst) {\n            if (i > max) {\n                max = i;\n        \
    \    }\n        }\n        long sum = 0;\n        while (max > 0) {\n        \
    \    sum += max % 10;\n            max /= 10;\n        }\n        return sum;",
  "        long max = 0;\n        foreach (long i in lst) {\n            if (IsPrime(i))\
    \ {\n                max = i;\n            }\n        }\n        return SumDigits(max);",
  "        // Your code goes here.\n        return (long)0L;"]
stop_tokens:
- "\n    }\n"
