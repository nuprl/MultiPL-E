name: HumanEval_136_largest_smallest_integers
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Create a function that returns a tuple (a, b), where 'a' is\n\
  \    // the largest of negative integers, and 'b' is the smallest\n    // of positive\
  \ integers in a list.\n    // If there is no negative or positive integers, return\
  \ them as None.\n    // Examples:\n    // >>> LargestSmallestIntegers((new List<long>(new\
  \ long[]{(long)2L, (long)4L, (long)1L, (long)3L, (long)5L, (long)7L})))\n    //\
  \ Tuple.Create((Nullable<long>)null, 1L)\n    // >>> LargestSmallestIntegers((new\
  \ List<long>()))\n    // Tuple.Create((Nullable<long>)null, (Nullable<long>)null)\n\
  \    // >>> LargestSmallestIntegers((new List<long>(new long[]{(long)0L})))\n  \
  \  // Tuple.Create((Nullable<long>)null, (Nullable<long>)null)\n    public static\
  \ Tuple<Nullable<long>, Nullable<long>> LargestSmallestIntegers(List<long> lst)\
  \ {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestSmallestIntegers((new\
  \ List<long>(new long[]{(long)2L, (long)4L, (long)1L, (long)3L, (long)5L, (long)7L}))).Equals(Tuple.Create((Nullable<long>)null,\
  \ 1L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)2L,\
  \ (long)4L, (long)1L, (long)3L, (long)5L, (long)7L, (long)0L}))).Equals(Tuple.Create((Nullable<long>)null,\
  \ 1L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)1L,\
  \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)-2L}))).Equals(Tuple.Create(-2L,\
  \ 1L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)4L,\
  \ (long)5L, (long)3L, (long)6L, (long)2L, (long)7L, (long)-7L}))).Equals(Tuple.Create(-7L,\
  \ 2L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)7L,\
  \ (long)3L, (long)8L, (long)4L, (long)9L, (long)2L, (long)5L, (long)-9L}))).Equals(Tuple.Create(-9L,\
  \ 2L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>())).Equals(Tuple.Create((Nullable<long>)null,\
  \ (Nullable<long>)null)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new\
  \ long[]{(long)0L}))).Equals(Tuple.Create((Nullable<long>)null, (Nullable<long>)null)));\n\
  \    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)-1L,\
  \ (long)-3L, (long)-5L, (long)-6L}))).Equals(Tuple.Create(-1L, (Nullable<long>)null)));\n\
  \    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)-1L,\
  \ (long)-3L, (long)-5L, (long)-6L, (long)0L}))).Equals(Tuple.Create(-1L, (Nullable<long>)null)));\n\
  \    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)-6L,\
  \ (long)-4L, (long)-4L, (long)-3L, (long)1L}))).Equals(Tuple.Create(-3L, 1L)));\n\
  \    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)-6L,\
  \ (long)-4L, (long)-4L, (long)-3L, (long)-100L, (long)1L}))).Equals(Tuple.Create(-3L,\
  \ 1L)));\n    }\n\n}\n"
completions: ["        long? min = null;\n        long? max = null;\n        foreach\
    \ (long i in lst) {\n            if (i > 0) {\n                if (min == null\
    \ || i < min) {\n                    min = i;\n                }\n           \
    \ } else if (i < 0) {\n                if (max == null || i > max) {\n       \
    \             max = i;\n                }\n            }\n        }\n        return\
    \ Tuple.Create(max, min);", "        // Write your code here\n        return null;",
  "        // Write your code here\n        long? largest = null;\n        long? smallest\
    \ = null;\n        foreach (long i in lst) {\n            if (i < 0) {\n     \
    \           if (largest == null || i > largest) {\n                    largest\
    \ = i;\n                }\n            } else if (i > 0) {\n                if\
    \ (smallest == null || i < smallest) {\n                    smallest = i;\n  \
    \              }\n            }\n        }\n        return Tuple.Create(largest,\
    \ smallest);", "        // Your code goes here\n        return null;", "     \
    \   // Your code goes here\n        return null;", "        long? min = null;\n\
    \        long? max = null;\n        foreach (long i in lst) {\n            if\
    \ (i > 0) {\n                if (min == null || i < min) {\n                 \
    \   min = i;\n                }\n            } else if (i < 0) {\n           \
    \     if (max == null || i > max) {\n                    max = i;\n          \
    \      }\n            }\n        }\n        return Tuple.Create(max, min);", " \
    \       long? maxNeg = null;\n        long? minPos = null;\n        foreach (long\
    \ i in lst) {\n            if (i < 0) {\n                if (maxNeg == null ||\
    \ i > maxNeg) {\n                    maxNeg = i;\n                }\n        \
    \    } else if (i > 0) {\n                if (minPos == null || i < minPos) {\n\
    \                    minPos = i;\n                }\n            }\n        }\n\
    \        return Tuple.Create(maxNeg, minPos);", "        long? largest = null;\n\
    \        long? smallest = null;\n        foreach (long i in lst) {\n         \
    \   if (i < 0) {\n                if (largest == null || i > largest) {\n    \
    \                largest = i;\n                }\n            } else if (i > 0)\
    \ {\n                if (smallest == null || i < smallest) {\n               \
    \     smallest = i;\n                }\n            }\n        }\n        return\
    \ Tuple.Create(largest, smallest);", '        return Tuple.Create((Nullable<long>)null,
    (Nullable<long>)null);', "        long? max = null;\n        long? min = null;\n\
    \        foreach (long i in lst) {\n            if (i < 0) {\n               \
    \ if (max == null || i > max) {\n                    max = i;\n              \
    \  }\n            } else if (i > 0) {\n                if (min == null || i <\
    \ min) {\n                    min = i;\n                }\n            }\n   \
    \     }\n        return Tuple.Create(max, min);", '        return Tuple.Create((Nullable<long>)null,
    (Nullable<long>)null);', "        long? maxNeg = null;\n        long? minPos =\
    \ null;\n        foreach (long i in lst) {\n            if (i < 0) {\n       \
    \         if (maxNeg == null || i > maxNeg) {\n                    maxNeg = i;\n\
    \                }\n            } else if (i > 0) {\n                if (minPos\
    \ == null || i < minPos) {\n                    minPos = i;\n                }\n\
    \            }\n        }\n        return Tuple.Create(maxNeg, minPos);", "  \
    \      // Write your code here\n        long min = 0;\n        long max = 0;\n\
    \        bool minSet = false;\n        bool maxSet = false;\n        foreach (long\
    \ i in lst) {\n            if (i < 0) {\n                if (!maxSet) {\n    \
    \                max = i;\n                    maxSet = true;\n              \
    \  } else if (i > max) {\n                    max = i;\n                }\n  \
    \          } else if (i > 0) {\n                if (!minSet) {\n             \
    \       min = i;\n                    minSet = true;\n                } else if\
    \ (i < min) {\n                    min = i;\n                }\n            }\n\
    \        }\n        return Tuple.Create((Nullable<long>)max, (Nullable<long>)min);",
  "        long? largestNegative = null;\n        long? smallestPositive = null;\n\
    \        foreach (long i in lst) {\n            if (i < 0) {\n               \
    \ if (largestNegative == null || i > largestNegative) {\n                    largestNegative\
    \ = i;\n                }\n            } else if (i > 0) {\n                if\
    \ (smallestPositive == null || i < smallestPositive) {\n                    smallestPositive\
    \ = i;\n                }\n            }\n        }\n        return Tuple.Create(largestNegative,\
    \ smallestPositive);", "        long max = long.MinValue;\n        long min =\
    \ long.MaxValue;\n        bool hasNegative = false;\n        bool hasPositive\
    \ = false;\n        foreach (long i in lst) {\n            if (i < 0) {\n    \
    \            hasNegative = true;\n                if (i > max) {\n           \
    \         max = i;\n                }\n            } else if (i > 0) {\n     \
    \           hasPositive = true;\n                if (i < min) {\n            \
    \        min = i;\n                }\n            }\n        }\n        if (hasNegative)\
    \ {\n            if (hasPositive) {\n                return Tuple.Create((Nullable<long>)max,\
    \ (Nullable<long>)min);\n            } else {\n                return Tuple.Create((Nullable<long>)max,\
    \ (Nullable<long>)null);\n            }\n        } else {\n            if (hasPositive)\
    \ {\n                return Tuple.Create((Nullable<long>)null, (Nullable<long>)min);\n\
    \            } else {\n                return Tuple.Create((Nullable<long>)null,\
    \ (Nullable<long>)null);\n            }\n        }", "        long? largest =\
    \ null;\n        long? smallest = null;\n        foreach (long item in lst) {\n\
    \            if (item < 0) {\n                if (largest == null || item > largest)\
    \ {\n                    largest = item;\n                }\n            } else\
    \ if (item > 0) {\n                if (smallest == null || item < smallest) {\n\
    \                    smallest = item;\n                }\n            }\n    \
    \    }\n        return Tuple.Create(largest, smallest);", "        // Your code\
    \ here\n        return null;", "        long? min = null;\n        long? max =\
    \ null;\n        foreach (long x in lst) {\n            if (x > 0) {\n       \
    \         if (min == null || x < min) {\n                    min = x;\n      \
    \          }\n            } else if (x < 0) {\n                if (max == null\
    \ || x > max) {\n                    max = x;\n                }\n           \
    \ }\n        }\n        return Tuple.Create(max, min);", "        long? largestNegative\
    \ = null;\n        long? smallestPositive = null;\n        foreach (long i in\
    \ lst) {\n            if (i < 0) {\n                if (largestNegative == null\
    \ || i > largestNegative) {\n                    largestNegative = i;\n      \
    \          }\n            } else if (i > 0) {\n                if (smallestPositive\
    \ == null || i < smallestPositive) {\n                    smallestPositive = i;\n\
    \                }\n            }\n        }\n        return Tuple.Create(largestNegative,\
    \ smallestPositive);", "        long? maxNeg = null;\n        long? minPos = null;\n\
    \        foreach (long i in lst) {\n            if (i < 0) {\n               \
    \ if (maxNeg == null || i > maxNeg) {\n                    maxNeg = i;\n     \
    \           }\n            } else if (i > 0) {\n                if (minPos ==\
    \ null || i < minPos) {\n                    minPos = i;\n                }\n\
    \            }\n        }\n        return Tuple.Create(maxNeg, minPos);"]
stop_tokens:
- "\n    }\n"
