name: HumanEval_136_largest_smallest_integers
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Create a function that returns a tuple (a, b), where 'a' is\n\
  \    // the largest of negative integers, and 'b' is the smallest\n    // of positive\
  \ integers in a list.\n    // If there is no negative or positive integers, return\
  \ them as None.\n    // Examples:\n    // >>> LargestSmallestIntegers((new List<long>(new\
  \ long[]{(long)2L, (long)4L, (long)1L, (long)3L, (long)5L, (long)7L})))\n    //\
  \ Tuple.Create((Nullable<long>)null, 1L)\n    // >>> LargestSmallestIntegers((new\
  \ List<long>()))\n    // Tuple.Create((Nullable<long>)null, (Nullable<long>)null)\n\
  \    // >>> LargestSmallestIntegers((new List<long>(new long[]{(long)0L})))\n  \
  \  // Tuple.Create((Nullable<long>)null, (Nullable<long>)null)\n    public static\
  \ Tuple<Nullable<long>, Nullable<long>> LargestSmallestIntegers(List<long> lst)\
  \ {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestSmallestIntegers((new\
  \ List<long>(new long[]{(long)2L, (long)4L, (long)1L, (long)3L, (long)5L, (long)7L}))).Equals(Tuple.Create((Nullable<long>)null,\
  \ 1L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)2L,\
  \ (long)4L, (long)1L, (long)3L, (long)5L, (long)7L, (long)0L}))).Equals(Tuple.Create((Nullable<long>)null,\
  \ 1L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)1L,\
  \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)-2L}))).Equals(Tuple.Create(-2L,\
  \ 1L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)4L,\
  \ (long)5L, (long)3L, (long)6L, (long)2L, (long)7L, (long)-7L}))).Equals(Tuple.Create(-7L,\
  \ 2L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)7L,\
  \ (long)3L, (long)8L, (long)4L, (long)9L, (long)2L, (long)5L, (long)-9L}))).Equals(Tuple.Create(-9L,\
  \ 2L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>())).Equals(Tuple.Create((Nullable<long>)null,\
  \ (Nullable<long>)null)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new\
  \ long[]{(long)0L}))).Equals(Tuple.Create((Nullable<long>)null, (Nullable<long>)null)));\n\
  \    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)-1L,\
  \ (long)-3L, (long)-5L, (long)-6L}))).Equals(Tuple.Create(-1L, (Nullable<long>)null)));\n\
  \    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)-1L,\
  \ (long)-3L, (long)-5L, (long)-6L, (long)0L}))).Equals(Tuple.Create(-1L, (Nullable<long>)null)));\n\
  \    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)-6L,\
  \ (long)-4L, (long)-4L, (long)-3L, (long)1L}))).Equals(Tuple.Create(-3L, 1L)));\n\
  \    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)-6L,\
  \ (long)-4L, (long)-4L, (long)-3L, (long)-100L, (long)1L}))).Equals(Tuple.Create(-3L,\
  \ 1L)));\n    }\n\n}\n"
completions: ["        long? min = null;\n        long? max = null;\n        foreach\
    \ (long i in lst) {\n            if (i > 0) {\n                if (min == null\
    \ || i < min) {\n                    min = i;\n                }\n           \
    \ } else if (i < 0) {\n                if (max == null || i > max) {\n       \
    \             max = i;\n                }\n            }\n        }\n        return\
    \ Tuple.Create(max, min);", "        // Write your code here\n        return null;",
  "        // Write your code here\n        long? largest = null;\n        long? smallest\
    \ = null;\n        foreach (long i in lst) {\n            if (i < 0) {\n     \
    \           if (largest == null || i > largest) {\n                    largest\
    \ = i;\n                }\n            } else if (i > 0) {\n                if\
    \ (smallest == null || i < smallest) {\n                    smallest = i;\n  \
    \              }\n            }\n        }\n        return Tuple.Create(largest,\
    \ smallest);", "        // Your code goes here\n        return null;", "     \
    \   // Your code goes here\n        return null;", "        long? min = null;\n\
    \        long? max = null;\n        foreach (long i in lst) {\n            if\
    \ (i > 0) {\n                if (min == null || i < min) {\n                 \
    \   min = i;\n                }\n            } else if (i < 0) {\n           \
    \     if (max == null || i > max) {\n                    max = i;\n          \
    \      }\n            }\n        }\n        return Tuple.Create(max, min);", " \
    \       long? maxNeg = null;\n        long? minPos = null;\n        foreach (long\
    \ i in lst) {\n            if (i < 0) {\n                if (maxNeg == null ||\
    \ i > maxNeg) {\n                    maxNeg = i;\n                }\n        \
    \    } else if (i > 0) {\n                if (minPos == null || i < minPos) {\n\
    \                    minPos = i;\n                }\n            }\n        }\n\
    \        return Tuple.Create(maxNeg, minPos);", "        long? largest = null;\n\
    \        long? smallest = null;\n        foreach (long i in lst) {\n         \
    \   if (i < 0) {\n                if (largest == null || i > largest) {\n    \
    \                largest = i;\n                }\n            } else if (i > 0)\
    \ {\n                if (smallest == null || i < smallest) {\n               \
    \     smallest = i;\n                }\n            }\n        }\n        return\
    \ Tuple.Create(largest, smallest);", '        return Tuple.Create((Nullable<long>)null,
    (Nullable<long>)null);', "        long? max = null;\n        long? min = null;\n\
    \        foreach (long i in lst) {\n            if (i < 0) {\n               \
    \ if (max == null || i > max) {\n                    max = i;\n              \
    \  }\n            } else if (i > 0) {\n                if (min == null || i <\
    \ min) {\n                    min = i;\n                }\n            }\n   \
    \     }\n        return Tuple.Create(max, min);", '        return Tuple.Create((Nullable<long>)null,
    (Nullable<long>)null);', "        long? maxNeg = null;\n        long? minPos =\
    \ null;\n        foreach (long i in lst) {\n            if (i < 0) {\n       \
    \         if (maxNeg == null || i > maxNeg) {\n                    maxNeg = i;\n\
    \                }\n            } else if (i > 0) {\n                if (minPos\
    \ == null || i < minPos) {\n                    minPos = i;\n                }\n\
    \            }\n        }\n        return Tuple.Create(maxNeg, minPos);", "  \
    \      // Write your code here\n        long min = 0;\n        long max = 0;\n\
    \        bool minSet = false;\n        bool maxSet = false;\n        foreach (long\
    \ i in lst) {\n            if (i < 0) {\n                if (!maxSet) {\n    \
    \                max = i;\n                    maxSet = true;\n              \
    \  } else if (i > max) {\n                    max = i;\n                }\n  \
    \          } else if (i > 0) {\n                if (!minSet) {\n             \
    \       min = i;\n                    minSet = true;\n                } else if\
    \ (i < min) {\n                    min = i;\n                }\n            }\n\
    \        }\n        return Tuple.Create((Nullable<long>)max, (Nullable<long>)min);",
  "        long? largestNegative = null;\n        long? smallestPositive = null;\n\
    \        foreach (long i in lst) {\n            if (i < 0) {\n               \
    \ if (largestNegative == null || i > largestNegative) {\n                    largestNegative\
    \ = i;\n                }\n            } else if (i > 0) {\n                if\
    \ (smallestPositive == null || i < smallestPositive) {\n                    smallestPositive\
    \ = i;\n                }\n            }\n        }\n        return Tuple.Create(largestNegative,\
    \ smallestPositive);", "        long max = long.MinValue;\n        long min =\
    \ long.MaxValue;\n        bool hasNegative = false;\n        bool hasPositive\
    \ = false;\n        foreach (long i in lst) {\n            if (i < 0) {\n    \
    \            hasNegative = true;\n                if (i > max) {\n           \
    \         max = i;\n                }\n            } else if (i > 0) {\n     \
    \           hasPositive = true;\n                if (i < min) {\n            \
    \        min = i;\n                }\n            }\n        }\n        if (hasNegative)\
    \ {\n            if (hasPositive) {\n                return Tuple.Create((Nullable<long>)max,\
    \ (Nullable<long>)min);\n            } else {\n                return Tuple.Create((Nullable<long>)max,\
    \ (Nullable<long>)null);\n            }\n        } else {\n            if (hasPositive)\
    \ {\n                return Tuple.Create((Nullable<long>)null, (Nullable<long>)min);\n\
    \            } else {\n                return Tuple.Create((Nullable<long>)null,\
    \ (Nullable<long>)null);\n            }\n        }", "        long? largest =\
    \ null;\n        long? smallest = null;\n        foreach (long item in lst) {\n\
    \            if (item < 0) {\n                if (largest == null || item > largest)\
    \ {\n                    largest = item;\n                }\n            } else\
    \ if (item > 0) {\n                if (smallest == null || item < smallest) {\n\
    \                    smallest = item;\n                }\n            }\n    \
    \    }\n        return Tuple.Create(largest, smallest);", "        // Your code\
    \ here\n        return null;", "        long? min = null;\n        long? max =\
    \ null;\n        foreach (long x in lst) {\n            if (x > 0) {\n       \
    \         if (min == null || x < min) {\n                    min = x;\n      \
    \          }\n            } else if (x < 0) {\n                if (max == null\
    \ || x > max) {\n                    max = x;\n                }\n           \
    \ }\n        }\n        return Tuple.Create(max, min);", "        long? largestNegative\
    \ = null;\n        long? smallestPositive = null;\n        foreach (long i in\
    \ lst) {\n            if (i < 0) {\n                if (largestNegative == null\
    \ || i > largestNegative) {\n                    largestNegative = i;\n      \
    \          }\n            } else if (i > 0) {\n                if (smallestPositive\
    \ == null || i < smallestPositive) {\n                    smallestPositive = i;\n\
    \                }\n            }\n        }\n        return Tuple.Create(largestNegative,\
    \ smallestPositive);", "        long? maxNeg = null;\n        long? minPos = null;\n\
    \        foreach (long i in lst) {\n            if (i < 0) {\n               \
    \ if (maxNeg == null || i > maxNeg) {\n                    maxNeg = i;\n     \
    \           }\n            } else if (i > 0) {\n                if (minPos ==\
    \ null || i < minPos) {\n                    minPos = i;\n                }\n\
    \            }\n        }\n        return Tuple.Create(maxNeg, minPos);", "  \
    \      // Write your code here\n        return null;", "        var maxNeg = lst.Where(x\
    \ => x < 0).DefaultIfEmpty().Max();\n        var minPos = lst.Where(x => x > 0).DefaultIfEmpty().Min();\n\
    \        return Tuple.Create(maxNeg, minPos);", "        // Your code goes here\n\
    \        return null;", "        long? largestNegative = null;\n        long?\
    \ smallestPositive = null;\n        foreach (long i in lst) {\n            if\
    \ (i < 0) {\n                if (largestNegative == null || i > largestNegative)\
    \ {\n                    largestNegative = i;\n                }\n           \
    \ } else if (i > 0) {\n                if (smallestPositive == null || i < smallestPositive)\
    \ {\n                    smallestPositive = i;\n                }\n          \
    \  }\n        }\n        return Tuple.Create(largestNegative, smallestPositive);",
  "        // Write your code here\n        return null;", "        // Your code goes\
    \ here\n        return Tuple.Create((Nullable<long>)null, (Nullable<long>)null);",
  "        // Your code goes here.\n        return null;", "        var maxNegative\
    \ = lst.Where(x => x < 0).DefaultIfEmpty().Max();\n        var minPositive = lst.Where(x\
    \ => x > 0).DefaultIfEmpty().Min();\n        return Tuple.Create(maxNegative,\
    \ minPositive);", "        // Your code goes here\n        return null;", "  \
    \      // Write your code here\n        return null;", "        long maxNeg =\
    \ long.MinValue;\n        long minPos = long.MaxValue;\n        foreach (long\
    \ x in lst) {\n            if (x < 0) {\n                if (x > maxNeg) {\n \
    \                   maxNeg = x;\n                }\n            } else if (x >\
    \ 0) {\n                if (x < minPos) {\n                    minPos = x;\n \
    \               }\n            }\n        }\n        if (maxNeg == long.MinValue)\
    \ {\n            maxNeg = (Nullable<long>)null;\n        }\n        if (minPos\
    \ == long.MaxValue) {\n            minPos = (Nullable<long>)null;\n        }\n\
    \        return Tuple.Create(maxNeg, minPos);", "        // Your code goes here\n\
    \        return null;", "        // Your code goes here\n        long? largestNegative\
    \ = null;\n        long? smallestPositive = null;\n        foreach (long i in\
    \ lst) {\n            if (i < 0) {\n                if (largestNegative == null\
    \ || i > largestNegative) {\n                    largestNegative = i;\n      \
    \          }\n            } else if (i > 0) {\n                if (smallestPositive\
    \ == null || i < smallestPositive) {\n                    smallestPositive = i;\n\
    \                }\n            }\n        }\n        return Tuple.Create(largestNegative,\
    \ smallestPositive);", "        // Write your code here\n        return null;",
  "        var a = lst.Where(x => x < 0).Max();\n        var b = lst.Where(x => x\
    \ > 0).Min();\n        return Tuple.Create(a, b);", '        return new Tuple<Nullable<long>,
    Nullable<long>>(null, null);', "        long? largestNegative = null;\n      \
    \  long? smallestPositive = null;\n        foreach (long x in lst) {\n       \
    \     if (x < 0) {\n                if (largestNegative == null || x > largestNegative)\
    \ {\n                    largestNegative = x;\n                }\n           \
    \ } else if (x > 0) {\n                if (smallestPositive == null || x < smallestPositive)\
    \ {\n                    smallestPositive = x;\n                }\n          \
    \  }\n        }\n        return Tuple.Create(largestNegative, smallestPositive);",
  "        // Your code goes here.\n        return null;", "        // Your code goes\
    \ here\n        return null;", "        long largestNegative = 0;\n        long\
    \ smallestPositive = 0;\n        bool largestNegativeFound = false;\n        bool\
    \ smallestPositiveFound = false;\n        foreach (long i in lst) {\n        \
    \    if (i < 0) {\n                if (!largestNegativeFound) {\n            \
    \        largestNegative = i;\n                    largestNegativeFound = true;\n\
    \                } else {\n                    if (i > largestNegative) {\n  \
    \                      largestNegative = i;\n                    }\n         \
    \       }\n            } else if (i > 0) {\n                if (!smallestPositiveFound)\
    \ {\n                    smallestPositive = i;\n                    smallestPositiveFound\
    \ = true;\n                } else {\n                    if (i < smallestPositive)\
    \ {\n                        smallestPositive = i;\n                    }\n  \
    \              }\n            }\n        }\n        return Tuple.Create((Nullable<long>)largestNegative,\
    \ (Nullable<long>)smallestPositive);", "        // Write your code here\n    \
    \    return null;", "        // Your code goes here\n        long min = long.MaxValue;\n\
    \        long max = long.MinValue;\n        bool hasPositive = false;\n      \
    \  bool hasNegative = false;\n        foreach (long i in lst) {\n            if\
    \ (i < 0) {\n                hasNegative = true;\n                if (i > max)\
    \ {\n                    max = i;\n                }\n            } else if (i\
    \ > 0) {\n                hasPositive = true;\n                if (i < min) {\n\
    \                    min = i;\n                }\n            }\n        }\n \
    \       if (!hasPositive) {\n            min = (Nullable<long>)null;\n       \
    \ }\n        if (!hasNegative) {\n            max = (Nullable<long>)null;\n  \
    \      }\n        return Tuple.Create(max, min);", "        long min = 0;\n  \
    \      long max = 0;\n        bool minSet = false;\n        bool maxSet = false;\n\
    \        foreach (long i in lst) {\n            if (i > 0) {\n               \
    \ if (!minSet) {\n                    min = i;\n                    minSet = true;\n\
    \                } else {\n                    if (i < min) {\n              \
    \          min = i;\n                    }\n                }\n            } else\
    \ if (i < 0) {\n                if (!maxSet) {\n                    max = i;\n\
    \                    maxSet = true;\n                } else {\n              \
    \      if (i > max) {\n                        max = i;\n                    }\n\
    \                }\n            }\n        }\n        return Tuple.Create((Nullable<long>)(maxSet\
    \ ? max : (Nullable<long>)null), (Nullable<long>)(minSet ? min : (Nullable<long>)null));",
  "        long? largestNegative = null;\n        long? smallestPositive = null;\n\
    \        foreach (long x in lst) {\n            if (x < 0) {\n               \
    \ if (largestNegative == null || x > largestNegative) {\n                    largestNegative\
    \ = x;\n                }\n            } else if (x > 0) {\n                if\
    \ (smallestPositive == null || x < smallestPositive) {\n                    smallestPositive\
    \ = x;\n                }\n            }\n        }\n        return Tuple.Create(largestNegative,\
    \ smallestPositive);", "        long? largestNegative = null;\n        long? smallestPositive\
    \ = null;\n        foreach (long num in lst) {\n            if (num < 0) {\n \
    \               if (largestNegative == null || num > largestNegative) {\n    \
    \                largestNegative = num;\n                }\n            } else\
    \ if (num > 0) {\n                if (smallestPositive == null || num < smallestPositive)\
    \ {\n                    smallestPositive = num;\n                }\n        \
    \    }\n        }\n        return Tuple.Create(largestNegative, smallestPositive);",
  "        long? largestNegative = null;\n        long? smallestPositive = null;\n\
    \        foreach (long item in lst) {\n            if (item < 0) {\n         \
    \       if (largestNegative == null || item > largestNegative) {\n           \
    \         largestNegative = item;\n                }\n            } else if (item\
    \ > 0) {\n                if (smallestPositive == null || item < smallestPositive)\
    \ {\n                    smallestPositive = item;\n                }\n       \
    \     }\n        }\n        return Tuple.Create(largestNegative, smallestPositive);",
  "        var a = lst.Where(x => x < 0).DefaultIfEmpty().Max();\n        var b =\
    \ lst.Where(x => x > 0).DefaultIfEmpty().Min();\n        return Tuple.Create(a,\
    \ b);", "        // Your code goes here.\n        return Tuple.Create((Nullable<long>)null,\
    \ (Nullable<long>)null);", "        long? a = null;\n        long? b = null;\n\
    \        foreach (long x in lst) {\n            if (x < 0) {\n               \
    \ if (a == null || x > a) {\n                    a = x;\n                }\n \
    \           } else if (x > 0) {\n                if (b == null || x < b) {\n \
    \                   b = x;\n                }\n            }\n        }\n    \
    \    return Tuple.Create(a, b);", "        long? min = null;\n        long? max\
    \ = null;\n        foreach (long i in lst) {\n            if (i > 0) {\n     \
    \           if (min == null || i < min) {\n                    min = i;\n    \
    \            }\n            } else if (i < 0) {\n                if (max == null\
    \ || i > max) {\n                    max = i;\n                }\n           \
    \ }\n        }\n        return Tuple.Create(max, min);", "        long? min =\
    \ null;\n        long? max = null;\n        foreach (long i in lst) {\n      \
    \      if (i > 0) {\n                if (min == null || i < min) {\n         \
    \           min = i;\n                }\n            } else if (i < 0) {\n   \
    \             if (max == null || i > max) {\n                    max = i;\n  \
    \              }\n            }\n        }\n        return Tuple.Create(max, min);",
  "        // Your code goes here\n        return null;", "        long? maxNeg =\
    \ null;\n        long? minPos = null;\n        foreach (long i in lst) {\n   \
    \         if (i < 0) {\n                if (maxNeg == null || i > maxNeg) {\n\
    \                    maxNeg = i;\n                }\n            } else if (i\
    \ > 0) {\n                if (minPos == null || i < minPos) {\n              \
    \      minPos = i;\n                }\n            }\n        }\n        return\
    \ Tuple.Create(maxNeg, minPos);", "        // Your code goes here\n        return\
    \ null;", "        // Your code goes here\n        return null;", "        //\
    \ Your code goes here\n        return null;", "        long? largestNegative =\
    \ null;\n        long? smallestPositive = null;\n        foreach (long i in lst)\
    \ {\n            if (i < 0) {\n                if (largestNegative == null ||\
    \ i > largestNegative) {\n                    largestNegative = i;\n         \
    \       }\n            } else if (i > 0) {\n                if (smallestPositive\
    \ == null || i < smallestPositive) {\n                    smallestPositive = i;\n\
    \                }\n            }\n        }\n        return Tuple.Create(largestNegative,\
    \ smallestPositive);", "        // Your code goes here.\n        return Tuple.Create((Nullable<long>)null,\
    \ (Nullable<long>)null);", "        long? largestNegative = null;\n        long?\
    \ smallestPositive = null;\n        foreach (long i in lst) {\n            if\
    \ (i < 0) {\n                if (largestNegative == null || i > largestNegative)\
    \ {\n                    largestNegative = i;\n                }\n           \
    \ } else if (i > 0) {\n                if (smallestPositive == null || i < smallestPositive)\
    \ {\n                    smallestPositive = i;\n                }\n          \
    \  }\n        }\n        return Tuple.Create(largestNegative, smallestPositive);",
  "        long? largestNegative = null;\n        long? smallestPositive = null;\n\
    \        foreach (long i in lst) {\n            if (i < 0) {\n               \
    \ if (largestNegative == null || i > largestNegative) {\n                    largestNegative\
    \ = i;\n                }\n            } else if (i > 0) {\n                if\
    \ (smallestPositive == null || i < smallestPositive) {\n                    smallestPositive\
    \ = i;\n                }\n            }\n        }\n        return Tuple.Create(largestNegative,\
    \ smallestPositive);", "        long? min = null;\n        long? max = null;\n\
    \        foreach (long i in lst) {\n            if (i > 0) {\n               \
    \ if (min == null || i < min) {\n                    min = i;\n              \
    \  }\n            } else if (i < 0) {\n                if (max == null || i >\
    \ max) {\n                    max = i;\n                }\n            }\n   \
    \     }\n        return Tuple.Create(max, min);", "        long? largestNegative\
    \ = null;\n        long? smallestPositive = null;\n        foreach (long item\
    \ in lst) {\n            if (item < 0) {\n                if (largestNegative\
    \ == null || item > largestNegative) {\n                    largestNegative =\
    \ item;\n                }\n            } else if (item > 0) {\n             \
    \   if (smallestPositive == null || item < smallestPositive) {\n             \
    \       smallestPositive = item;\n                }\n            }\n        }\n\
    \        return Tuple.Create(largestNegative, smallestPositive);", "        //\
    \ Write your code here\n        return null;", "        // Write your code here\n\
    \        return null;", "        long? largestNegative = null;\n        long?\
    \ smallestPositive = null;\n        foreach (long item in lst) {\n           \
    \ if (item < 0) {\n                if (largestNegative == null || item > largestNegative)\
    \ {\n                    largestNegative = item;\n                }\n        \
    \    } else if (item > 0) {\n                if (smallestPositive == null || item\
    \ < smallestPositive) {\n                    smallestPositive = item;\n      \
    \          }\n            }\n        }\n        return Tuple.Create(largestNegative,\
    \ smallestPositive);", "        // Write your code here\n        return Tuple.Create((Nullable<long>)null,\
    \ (Nullable<long>)null);", "        long? largest = null;\n        long? smallest\
    \ = null;\n        foreach (long i in lst) {\n            if (i < 0) {\n     \
    \           if (largest == null || i > largest) {\n                    largest\
    \ = i;\n                }\n            } else if (i > 0) {\n                if\
    \ (smallest == null || i < smallest) {\n                    smallest = i;\n  \
    \              }\n            }\n        }\n        return Tuple.Create(largest,\
    \ smallest);", "        long? a = null;\n        long? b = null;\n        foreach\
    \ (long x in lst) {\n            if (x < 0) {\n                if (a == null ||\
    \ x > a) {\n                    a = x;\n                }\n            } else\
    \ if (x > 0) {\n                if (b == null || x < b) {\n                  \
    \  b = x;\n                }\n            }\n        }\n        return Tuple.Create(a,\
    \ b);", "        // Write your code here\n        return null;", "        long?\
    \ min = null;\n        long? max = null;\n        foreach (long i in lst) {\n\
    \            if (i > 0) {\n                if (min == null || i < min) {\n   \
    \                 min = i;\n                }\n            } else if (i < 0) {\n\
    \                if (max == null || i > max) {\n                    max = i;\n\
    \                }\n            }\n        }\n        return Tuple.Create(max,\
    \ min);", "        long? maxNeg = null;\n        long? minPos = null;\n      \
    \  foreach (long x in lst) {\n            if (x < 0) {\n                if (maxNeg\
    \ == null || x > maxNeg) {\n                    maxNeg = x;\n                }\n\
    \            } else if (x > 0) {\n                if (minPos == null || x < minPos)\
    \ {\n                    minPos = x;\n                }\n            }\n     \
    \   }\n        return Tuple.Create(maxNeg, minPos);", '        return Tuple.Create((Nullable<long>)null,
    (Nullable<long>)null);', "        // Your code goes here\n        long? a = null;\n\
    \        long? b = null;\n        foreach (long i in lst) {\n            if (i\
    \ < 0) {\n                if (a == null || i > a) {\n                    a = i;\n\
    \                }\n            } else if (i > 0) {\n                if (b ==\
    \ null || i < b) {\n                    b = i;\n                }\n          \
    \  }\n        }\n        return Tuple.Create(a, b);", "        long? largestNegative\
    \ = null;\n        long? smallestPositive = null;\n        foreach (long i in\
    \ lst) {\n            if (i < 0) {\n                if (largestNegative == null\
    \ || i > largestNegative) {\n                    largestNegative = i;\n      \
    \          }\n            } else if (i > 0) {\n                if (smallestPositive\
    \ == null || i < smallestPositive) {\n                    smallestPositive = i;\n\
    \                }\n            }\n        }\n        return Tuple.Create(largestNegative,\
    \ smallestPositive);", "        var a = lst.Where(x => x < 0).DefaultIfEmpty().Max();\n\
    \        var b = lst.Where(x => x > 0).DefaultIfEmpty().Min();\n        return\
    \ Tuple.Create(a, b);", "        long? largestNegative = null;\n        long?\
    \ smallestPositive = null;\n        foreach (long x in lst) {\n            if\
    \ (x < 0) {\n                if (largestNegative == null || x > largestNegative)\
    \ {\n                    largestNegative = x;\n                }\n           \
    \ } else if (x > 0) {\n                if (smallestPositive == null || x < smallestPositive)\
    \ {\n                    smallestPositive = x;\n                }\n          \
    \  }\n        }\n        return Tuple.Create(largestNegative, smallestPositive);",
  "        // Your code goes here\n        return null;", "        var a = lst.Where(x\
    \ => x < 0).DefaultIfEmpty().Max();\n        var b = lst.Where(x => x > 0).DefaultIfEmpty().Min();\n\
    \        return Tuple.Create(a, b);", "        // Your code goes here\n      \
    \  return null;", "        long? min = null;\n        long? max = null;\n    \
    \    foreach (long i in lst) {\n            if (i < 0) {\n                if (max\
    \ == null || i > max) {\n                    max = i;\n                }\n   \
    \         } else if (i > 0) {\n                if (min == null || i < min) {\n\
    \                    min = i;\n                }\n            }\n        }\n \
    \       return Tuple.Create(max, min);", "        // Your code goes here.\n  \
    \      return null;", "        var a = lst.Where(x => x < 0).DefaultIfEmpty().Max();\n\
    \        var b = lst.Where(x => x > 0).DefaultIfEmpty().Min();\n        return\
    \ Tuple.Create(a, b);", "        long? largestNegative = null;\n        long?\
    \ smallestPositive = null;\n        foreach (long item in lst) {\n           \
    \ if (item < 0) {\n                if (largestNegative == null || item > largestNegative)\
    \ {\n                    largestNegative = item;\n                }\n        \
    \    } else if (item > 0) {\n                if (smallestPositive == null || item\
    \ < smallestPositive) {\n                    smallestPositive = item;\n      \
    \          }\n            }\n        }\n        return Tuple.Create(largestNegative,\
    \ smallestPositive);", "        long? largestNegative = null;\n        long? smallestPositive\
    \ = null;\n        foreach (long i in lst) {\n            if (i < 0) {\n     \
    \           if (largestNegative == null || i > largestNegative) {\n          \
    \          largestNegative = i;\n                }\n            } else if (i >\
    \ 0) {\n                if (smallestPositive == null || i < smallestPositive)\
    \ {\n                    smallestPositive = i;\n                }\n          \
    \  }\n        }\n        return Tuple.Create(largestNegative, smallestPositive);",
  "        long maxNeg = 0;\n        long minPos = 0;\n        bool maxNegFound =\
    \ false;\n        bool minPosFound = false;\n        foreach (long i in lst) {\n\
    \            if (i < 0) {\n                if (!maxNegFound) {\n             \
    \       maxNeg = i;\n                    maxNegFound = true;\n               \
    \ } else if (i > maxNeg) {\n                    maxNeg = i;\n                }\n\
    \            } else if (i > 0) {\n                if (!minPosFound) {\n      \
    \              minPos = i;\n                    minPosFound = true;\n        \
    \        } else if (i < minPos) {\n                    minPos = i;\n         \
    \       }\n            }\n        }\n        return Tuple.Create((Nullable<long>)maxNeg,\
    \ (Nullable<long>)minPos);", "        long? maxNeg = null;\n        long? minPos\
    \ = null;\n        foreach (long i in lst) {\n            if (i < 0) {\n     \
    \           if (maxNeg == null || i > maxNeg) {\n                    maxNeg =\
    \ i;\n                }\n            } else if (i > 0) {\n                if (minPos\
    \ == null || i < minPos) {\n                    minPos = i;\n                }\n\
    \            }\n        }\n        return Tuple.Create(maxNeg, minPos);", "  \
    \      // Your code goes here.\n        // You can add additional classes/methods.\n\
    \        long max = 0;\n        long min = 0;\n        bool max_set = false;\n\
    \        bool min_set = false;\n        foreach (long i in lst) {\n          \
    \  if (i < 0) {\n                if (!max_set) {\n                    max = i;\n\
    \                    max_set = true;\n                } else if (i > max) {\n\
    \                    max = i;\n                }\n            } else if (i > 0)\
    \ {\n                if (!min_set) {\n                    min = i;\n         \
    \           min_set = true;\n                } else if (i < min) {\n         \
    \           min = i;\n                }\n            }\n        }\n        return\
    \ Tuple.Create((Nullable<long>)max, (Nullable<long>)min);", "        // Your code\
    \ here\n        return null;", "        Nullable<long> largestNegative = null;\n\
    \        Nullable<long> smallestPositive = null;\n        foreach (long i in lst)\
    \ {\n            if (i < 0) {\n                if (largestNegative == null ||\
    \ i > largestNegative) {\n                    largestNegative = i;\n         \
    \       }\n            } else if (i > 0) {\n                if (smallestPositive\
    \ == null || i < smallestPositive) {\n                    smallestPositive = i;\n\
    \                }\n            }\n        }\n        return Tuple.Create(largestNegative,\
    \ smallestPositive);", "        long? largest = null;\n        long? smallest\
    \ = null;\n        foreach (long i in lst) {\n            if (i < 0) {\n     \
    \           if (largest == null || i > largest) {\n                    largest\
    \ = i;\n                }\n            } else if (i > 0) {\n                if\
    \ (smallest == null || i < smallest) {\n                    smallest = i;\n  \
    \              }\n            }\n        }\n        return Tuple.Create(largest,\
    \ smallest);", "        // Write your code here\n        return null;", "    \
    \    // Your code here\n        return null;", "        // Your code goes here.\n\
    \        return null;", "        // Write your code here\n        return null;",
  "        long? largestNegative = null;\n        long? smallestPositive = null;\n\
    \        foreach (long i in lst) {\n            if (i < 0) {\n               \
    \ if (largestNegative == null || i > largestNegative) {\n                    largestNegative\
    \ = i;\n                }\n            } else if (i > 0) {\n                if\
    \ (smallestPositive == null || i < smallestPositive) {\n                    smallestPositive\
    \ = i;\n                }\n            }\n        }\n        return Tuple.Create(largestNegative,\
    \ smallestPositive);", "        var a = lst.Where(x => x < 0).DefaultIfEmpty().Max();\n\
    \        var b = lst.Where(x => x > 0).DefaultIfEmpty().Min();\n        return\
    \ Tuple.Create(a, b);", "        long largestNegative = 0;\n        long smallestPositive\
    \ = 0;\n        bool largestNegativeFound = false;\n        bool smallestPositiveFound\
    \ = false;\n        for (int i = 0; i < lst.Count; i++) {\n            if (lst[i]\
    \ < 0) {\n                if (!largestNegativeFound) {\n                    largestNegative\
    \ = lst[i];\n                    largestNegativeFound = true;\n              \
    \  } else {\n                    if (lst[i] > largestNegative) {\n           \
    \             largestNegative = lst[i];\n                    }\n             \
    \   }\n            } else if (lst[i] > 0) {\n                if (!smallestPositiveFound)\
    \ {\n                    smallestPositive = lst[i];\n                    smallestPositiveFound\
    \ = true;\n                } else {\n                    if (lst[i] < smallestPositive)\
    \ {\n                        smallestPositive = lst[i];\n                    }\n\
    \                }\n            }\n        }\n        if (!largestNegativeFound)\
    \ {\n            largestNegative = (Nullable<long>)null;\n        }\n        if\
    \ (!smallestPositiveFound) {\n            smallestPositive = (Nullable<long>)null;\n\
    \        }\n        return Tuple.Create(largestNegative, smallestPositive);",
  "        // Your code goes here\n        return null;", "        long largestNegative\
    \ = 0;\n        long smallestPositive = 0;\n        bool largestNegativeFound\
    \ = false;\n        bool smallestPositiveFound = false;\n        foreach (long\
    \ i in lst) {\n            if (i < 0) {\n                if (!largestNegativeFound)\
    \ {\n                    largestNegative = i;\n                    largestNegativeFound\
    \ = true;\n                } else {\n                    if (i > largestNegative)\
    \ {\n                        largestNegative = i;\n                    }\n   \
    \             }\n            } else if (i > 0) {\n                if (!smallestPositiveFound)\
    \ {\n                    smallestPositive = i;\n                    smallestPositiveFound\
    \ = true;\n                } else {\n                    if (i < smallestPositive)\
    \ {\n                        smallestPositive = i;\n                    }\n  \
    \              }\n            }\n        }\n        return Tuple.Create(largestNegativeFound\
    \ ? (Nullable<long>)largestNegative : (Nullable<long>)null, smallestPositiveFound\
    \ ? (Nullable<long>)smallestPositive : (Nullable<long>)null);", "        // Your\
    \ code goes here\n        return null;", "        // Your code goes here\n   \
    \     return null;", "        var a = lst.Where(x => x < 0).DefaultIfEmpty().Max();\n\
    \        var b = lst.Where(x => x > 0).DefaultIfEmpty().Min();\n        return\
    \ Tuple.Create(a, b);", "        // Your code goes here\n        return null;",
  "        long? maxNegative = null;\n        long? minPositive = null;\n        foreach\
    \ (long x in lst) {\n            if (x < 0) {\n                if (maxNegative\
    \ == null || x > maxNegative) {\n                    maxNegative = x;\n      \
    \          }\n            } else if (x > 0) {\n                if (minPositive\
    \ == null || x < minPositive) {\n                    minPositive = x;\n      \
    \          }\n            }\n        }\n        return Tuple.Create(maxNegative,\
    \ minPositive);", "        // Your code goes here.\n        return null;", " \
    \       // Your code goes here.\n        // You can add additional classes.\n\
    \        return null;", "        long? min = null;\n        long? max = null;\n\
    \        foreach (long x in lst) {\n            if (x > 0) {\n               \
    \ if (min == null || x < min) {\n                    min = x;\n              \
    \  }\n            } else if (x < 0) {\n                if (max == null || x >\
    \ max) {\n                    max = x;\n                }\n            }\n   \
    \     }\n        return Tuple.Create(max, min);", "        Nullable<long> largestNegative\
    \ = null;\n        Nullable<long> smallestPositive = null;\n        foreach (long\
    \ x in lst) {\n            if (x < 0) {\n                if (largestNegative ==\
    \ null || x > largestNegative) {\n                    largestNegative = x;\n \
    \               }\n            } else if (x > 0) {\n                if (smallestPositive\
    \ == null || x < smallestPositive) {\n                    smallestPositive = x;\n\
    \                }\n            }\n        }\n        return Tuple.Create(largestNegative,\
    \ smallestPositive);", "        // Your code goes here\n        return null;",
  "        long? largestNegative = null;\n        long? smallestPositive = null;\n\
    \        foreach (long i in lst) {\n            if (i < 0) {\n               \
    \ if (largestNegative == null || i > largestNegative) {\n                    largestNegative\
    \ = i;\n                }\n            } else if (i > 0) {\n                if\
    \ (smallestPositive == null || i < smallestPositive) {\n                    smallestPositive\
    \ = i;\n                }\n            }\n        }\n        return Tuple.Create(largestNegative,\
    \ smallestPositive);", "        long? maxNeg = null;\n        long? minPos = null;\n\
    \        foreach (long i in lst) {\n            if (i < 0) {\n               \
    \ if (maxNeg == null || i > maxNeg) {\n                    maxNeg = i;\n     \
    \           }\n            } else if (i > 0) {\n                if (minPos ==\
    \ null || i < minPos) {\n                    minPos = i;\n                }\n\
    \            }\n        }\n        return Tuple.Create(maxNeg, minPos);", "  \
    \      // Write your code here\n        return null;", "        long? largestNegative\
    \ = null;\n        long? smallestPositive = null;\n        foreach (long i in\
    \ lst) {\n            if (i < 0) {\n                if (largestNegative == null\
    \ || i > largestNegative) {\n                    largestNegative = i;\n      \
    \          }\n            } else if (i > 0) {\n                if (smallestPositive\
    \ == null || i < smallestPositive) {\n                    smallestPositive = i;\n\
    \                }\n            }\n        }\n        return Tuple.Create(largestNegative,\
    \ smallestPositive);", "        long? maxNegative = null;\n        long? minPositive\
    \ = null;\n        foreach (long i in lst) {\n            if (i < 0) {\n     \
    \           if (maxNegative == null || i > maxNegative) {\n                  \
    \  maxNegative = i;\n                }\n            } else if (i > 0) {\n    \
    \            if (minPositive == null || i < minPositive) {\n                 \
    \   minPositive = i;\n                }\n            }\n        }\n        return\
    \ Tuple.Create(maxNegative, minPositive);", "        // Your code goes here\n\
    \        return null;", "        long? largestNegative = null;\n        long?\
    \ smallestPositive = null;\n        foreach (long i in lst) {\n            if\
    \ (i < 0) {\n                if (largestNegative == null || i > largestNegative)\
    \ {\n                    largestNegative = i;\n                }\n           \
    \ } else if (i > 0) {\n                if (smallestPositive == null || i < smallestPositive)\
    \ {\n                    smallestPositive = i;\n                }\n          \
    \  }\n        }\n        return Tuple.Create(largestNegative, smallestPositive);",
  "        // Your code goes here\n        long min = long.MaxValue;\n        long\
    \ max = long.MinValue;\n        bool hasPositive = false;\n        bool hasNegative\
    \ = false;\n        foreach (long num in lst) {\n            if (num > 0) {\n\
    \                hasPositive = true;\n                if (num < min) {\n     \
    \               min = num;\n                }\n            } else if (num < 0)\
    \ {\n                hasNegative = true;\n                if (num > max) {\n \
    \                   max = num;\n                }\n            }\n        }\n\
    \        if (hasPositive) {\n            if (hasNegative) {\n                return\
    \ Tuple.Create((Nullable<long>)max, (Nullable<long>)min);\n            } else\
    \ {\n                return Tuple.Create((Nullable<long>)null, (Nullable<long>)min);\n\
    \            }\n        } else {\n            if (hasNegative) {\n           \
    \     return Tuple.Create((Nullable<long>)max, (Nullable<long>)null);\n      \
    \      } else {\n                return Tuple.Create((Nullable<long>)null, (Nullable<long>)null);\n\
    \            }\n        }", "        // Write your code here\n        return null;",
  "        long? maxNeg = null;\n        long? minPos = null;\n        foreach (long\
    \ l in lst) {\n            if (l < 0) {\n                if (maxNeg == null ||\
    \ l > maxNeg) {\n                    maxNeg = l;\n                }\n        \
    \    } else if (l > 0) {\n                if (minPos == null || l < minPos) {\n\
    \                    minPos = l;\n                }\n            }\n        }\n\
    \        return Tuple.Create(maxNeg, minPos);", "        long? largestNegative\
    \ = null;\n        long? smallestPositive = null;\n        foreach (long item\
    \ in lst) {\n            if (item < 0) {\n                if (largestNegative\
    \ == null || item > largestNegative) {\n                    largestNegative =\
    \ item;\n                }\n            } else if (item > 0) {\n             \
    \   if (smallestPositive == null || item < smallestPositive) {\n             \
    \       smallestPositive = item;\n                }\n            }\n        }\n\
    \        return Tuple.Create(largestNegative, smallestPositive);", "        //\
    \ Your code goes here\n        return null;", "        // Your code goes here\n\
    \        long maxNeg = 0;\n        long minPos = 0;\n        bool neg = false;\n\
    \        bool pos = false;\n        foreach (long i in lst) {\n            if\
    \ (i < 0) {\n                if (i > maxNeg) {\n                    maxNeg = i;\n\
    \                    neg = true;\n                }\n            }\n         \
    \   else if (i > 0) {\n                if (pos == false) {\n                 \
    \   minPos = i;\n                    pos = true;\n                }\n        \
    \        else if (i < minPos) {\n                    minPos = i;\n           \
    \     }\n            }\n        }\n        if (neg == false) {\n            maxNeg\
    \ = (long)null;\n        }\n        if (pos == false) {\n            minPos =\
    \ (long)null;\n        }\n        return Tuple.Create(maxNeg, minPos);", "   \
    \     // Your code goes here\n        return null;", "        long? largestNegative\
    \ = null;\n        long? smallestPositive = null;\n        foreach (long i in\
    \ lst) {\n            if (i < 0) {\n                if (largestNegative == null\
    \ || i > largestNegative) {\n                    largestNegative = i;\n      \
    \          }\n            } else if (i > 0) {\n                if (smallestPositive\
    \ == null || i < smallestPositive) {\n                    smallestPositive = i;\n\
    \                }\n            }\n        }\n        return Tuple.Create(largestNegative,\
    \ smallestPositive);", "        // Your code goes here\n        return null;",
  "        // Write your code here\n        return null;", "        long? min = null;\n\
    \        long? max = null;\n        foreach (long i in lst) {\n            if\
    \ (i < 0) {\n                if (max == null || i > max) {\n                 \
    \   max = i;\n                }\n            } else if (i > 0) {\n           \
    \     if (min == null || i < min) {\n                    min = i;\n          \
    \      }\n            }\n        }\n        return Tuple.Create(max, min);", " \
    \       // Your code goes here\n        return null;", "        // Your code goes\
    \ here.\n        return null;", "        // Your code goes here\n        return\
    \ null;", "        // Write your code here\n        return null;", "        //\
    \ Write your code here.\n        return null;", "        // Your code goes here\n\
    \        return null;", "        // Your code goes here.\n        // You can add\
    \ other functions as well.\n        return null;", "        // Your code goes\
    \ here.\n        return null;", "        // Write your code here\n        return\
    \ null;", "        // Your code goes here\n        return null;", '        return
    Tuple.Create((Nullable<long>)null, (Nullable<long>)null);', "        // Your code\
    \ goes here\n        return null;", "        long? min = null;\n        long?\
    \ max = null;\n        foreach (long i in lst) {\n            if (i > 0) {\n \
    \               if (min == null || i < min) {\n                    min = i;\n\
    \                }\n            } else if (i < 0) {\n                if (max ==\
    \ null || i > max) {\n                    max = i;\n                }\n      \
    \      }\n        }\n        return Tuple.Create(max, min);", "        // Your\
    \ code goes here.\n        // You can add additional classes/methods.\n      \
    \  return Tuple.Create((Nullable<long>)null, (Nullable<long>)null);", "      \
    \  long? largest = null;\n        long? smallest = null;\n        foreach (long\
    \ i in lst) {\n            if (i < 0) {\n                if (largest == null ||\
    \ i > largest) {\n                    largest = i;\n                }\n      \
    \      } else if (i > 0) {\n                if (smallest == null || i < smallest)\
    \ {\n                    smallest = i;\n                }\n            }\n   \
    \     }\n        return Tuple.Create(largest, smallest);", "        // Write your\
    \ code here\n        return null;", "        // Your code goes here\n        long\
    \ max = 0;\n        long min = 0;\n        bool maxSet = false;\n        bool\
    \ minSet = false;\n        foreach (long i in lst) {\n            if (i < 0) {\n\
    \                if (!maxSet) {\n                    max = i;\n              \
    \      maxSet = true;\n                } else if (i > max) {\n               \
    \     max = i;\n                }\n            } else if (i > 0) {\n         \
    \       if (!minSet) {\n                    min = i;\n                    minSet\
    \ = true;\n                } else if (i < min) {\n                    min = i;\n\
    \                }\n            }\n        }\n        return Tuple.Create((Nullable<long>)max,\
    \ (Nullable<long>)min);", "        // Your code goes here\n        long? min =\
    \ null;\n        long? max = null;\n        foreach (long i in lst) {\n      \
    \      if (i > 0) {\n                if (min == null || i < min) {\n         \
    \           min = i;\n                }\n            } else if (i < 0) {\n   \
    \             if (max == null || i > max) {\n                    max = i;\n  \
    \              }\n            }\n        }\n        return Tuple.Create(max, min);",
  "        // Write your code here.\n        return null;", "        long? min = null;\n\
    \        long? max = null;\n        foreach (long i in lst) {\n            if\
    \ (i > 0) {\n                if (min == null || i < min) {\n                 \
    \   min = i;\n                }\n            } else if (i < 0) {\n           \
    \     if (max == null || i > max) {\n                    max = i;\n          \
    \      }\n            }\n        }\n        return Tuple.Create(max, min);", " \
    \       // Your code goes here.\n        return null;", "        // Write your\
    \ code here\n        return null;", "        // Your code goes here\n        return\
    \ null;", "        long? largestNegative = null;\n        long? smallestPositive\
    \ = null;\n        foreach (long i in lst) {\n            if (i < 0) {\n     \
    \           if (largestNegative == null || i > largestNegative) {\n          \
    \          largestNegative = i;\n                }\n            } else if (i >\
    \ 0) {\n                if (smallestPositive == null || i < smallestPositive)\
    \ {\n                    smallestPositive = i;\n                }\n          \
    \  }\n        }\n        return Tuple.Create(largestNegative, smallestPositive);",
  "        long? maxNegative = null;\n        long? minPositive = null;\n        foreach\
    \ (long i in lst) {\n            if (i < 0) {\n                if (maxNegative\
    \ == null || i > maxNegative) {\n                    maxNegative = i;\n      \
    \          }\n            } else if (i > 0) {\n                if (minPositive\
    \ == null || i < minPositive) {\n                    minPositive = i;\n      \
    \          }\n            }\n        }\n        return Tuple.Create(maxNegative,\
    \ minPositive);", "        // Your code goes here.\n        return null;", " \
    \       // Your code goes here.\n        return null;", "        var pos = lst.Where(x\
    \ => x > 0).Min();\n        var neg = lst.Where(x => x < 0).Max();\n        return\
    \ Tuple.Create(neg, pos);", "        long? min = null;\n        long? max = null;\n\
    \        foreach (long i in lst) {\n            if (i > 0) {\n               \
    \ if (min == null || i < min) {\n                    min = i;\n              \
    \  }\n            } else if (i < 0) {\n                if (max == null || i >\
    \ max) {\n                    max = i;\n                }\n            }\n   \
    \     }\n        return Tuple.Create(max, min);", "        long? maxNeg = null;\n\
    \        long? minPos = null;\n        foreach (long i in lst) {\n           \
    \ if (i < 0) {\n                if (maxNeg == null || i > maxNeg) {\n        \
    \            maxNeg = i;\n                }\n            } else if (i > 0) {\n\
    \                if (minPos == null || i < minPos) {\n                    minPos\
    \ = i;\n                }\n            }\n        }\n        return Tuple.Create(maxNeg,\
    \ minPos);", "        // Your code goes here\n        return null;", "       \
    \ // Write your code here\n        return null;", "        // Your code goes here\n\
    \        return null;", "        // Write your code here\n        return null;",
  "        long? largest = null;\n        long? smallest = null;\n        foreach\
    \ (long i in lst) {\n            if (i < 0) {\n                if (largest ==\
    \ null || i > largest) {\n                    largest = i;\n                }\n\
    \            } else if (i > 0) {\n                if (smallest == null || i <\
    \ smallest) {\n                    smallest = i;\n                }\n        \
    \    }\n        }\n        return Tuple.Create(largest, smallest);", "       \
    \ // Write your code here\n        return null;", "        long? min = null;\n\
    \        long? max = null;\n        foreach (long i in lst) {\n            if\
    \ (i > 0) {\n                if (min == null || i < min) {\n                 \
    \   min = i;\n                }\n            } else if (i < 0) {\n           \
    \     if (max == null || i > max) {\n                    max = i;\n          \
    \      }\n            }\n        }\n        return Tuple.Create(max, min);", " \
    \       Nullable<long> largestNegative = null;\n        Nullable<long> smallestPositive\
    \ = null;\n        foreach (long x in lst) {\n            if (x < 0) {\n     \
    \           if (largestNegative == null || x > largestNegative) {\n          \
    \          largestNegative = x;\n                }\n            } else if (x >\
    \ 0) {\n                if (smallestPositive == null || x < smallestPositive)\
    \ {\n                    smallestPositive = x;\n                }\n          \
    \  }\n        }\n        return Tuple.Create(largestNegative, smallestPositive);",
  "        long? maxNeg = null;\n        long? minPos = null;\n        foreach (long\
    \ i in lst) {\n            if (i < 0) {\n                if (maxNeg == null ||\
    \ i > maxNeg) {\n                    maxNeg = i;\n                }\n        \
    \    } else if (i > 0) {\n                if (minPos == null || i < minPos) {\n\
    \                    minPos = i;\n                }\n            }\n        }\n\
    \        return Tuple.Create(maxNeg, minPos);", "        // Your code goes here\n\
    \        return Tuple.Create((Nullable<long>)null, (Nullable<long>)null);", " \
    \       // Your code goes here\n        return null;", "        long? largest\
    \ = null;\n        long? smallest = null;\n        foreach (long x in lst) {\n\
    \            if (x < 0) {\n                if (largest == null || x > largest)\
    \ {\n                    largest = x;\n                }\n            } else if\
    \ (x > 0) {\n                if (smallest == null || x < smallest) {\n       \
    \             smallest = x;\n                }\n            }\n        }\n   \
    \     return Tuple.Create(largest, smallest);", "        // Insert code here\n\
    \        return null;", "        // Your code goes here\n        return null;",
  "        long? largestNegative = null;\n        long? smallestPositive = null;\n\
    \        foreach (long i in lst) {\n            if (i < 0) {\n               \
    \ if (largestNegative == null || i > largestNegative) {\n                    largestNegative\
    \ = i;\n                }\n            } else if (i > 0) {\n                if\
    \ (smallestPositive == null || i < smallestPositive) {\n                    smallestPositive\
    \ = i;\n                }\n            }\n        }\n        return Tuple.Create(largestNegative,\
    \ smallestPositive);", "        // Your code goes here\n        return null;",
  "        // Your code goes here.\n        return null;", "        long? largestNegative\
    \ = null;\n        long? smallestPositive = null;\n        foreach (long x in\
    \ lst) {\n            if (x < 0) {\n                if (largestNegative == null\
    \ || x > largestNegative) {\n                    largestNegative = x;\n      \
    \          }\n            } else if (x > 0) {\n                if (smallestPositive\
    \ == null || x < smallestPositive) {\n                    smallestPositive = x;\n\
    \                }\n            }\n        }\n        return Tuple.Create(largestNegative,\
    \ smallestPositive);", "        // Your code goes here\n        return null;",
  "        // Write your code here\n        return null;", "        // your code here\n\
    \        return null;", "        // Write your code here\n        return null;",
  "        // Write your code here\n        return null;", "        // Your code here\n\
    \        return null;", "        // Write your code here\n        return Tuple.Create((Nullable<long>)null,\
    \ (Nullable<long>)null);", "        // Your code goes here\n        return null;",
  "        // Your code goes here\n        return null;", "        // Your code here\n\
    \        long? largestNegative = null;\n        long? smallestPositive = null;\n\
    \        foreach (long num in lst) {\n            if (num < 0) {\n           \
    \     if (largestNegative == null || num > largestNegative) {\n              \
    \      largestNegative = num;\n                }\n            } else if (num >\
    \ 0) {\n                if (smallestPositive == null || num < smallestPositive)\
    \ {\n                    smallestPositive = num;\n                }\n        \
    \    }\n        }\n        return Tuple.Create(largestNegative, smallestPositive);",
  "        // Your code here\n        return null;", "        // Write your code here\n\
    \        return null;", "        // Your code goes here\n        return null;",
  "        var negative = lst.Where(x => x < 0).DefaultIfEmpty().Max();\n        var\
    \ positive = lst.Where(x => x > 0).DefaultIfEmpty().Min();\n        return Tuple.Create(negative,\
    \ positive);", "        long? maxNegative = null;\n        long? minPositive =\
    \ null;\n        foreach (long i in lst) {\n            if (i < 0) {\n       \
    \         if (maxNegative == null || i > maxNegative) {\n                    maxNegative\
    \ = i;\n                }\n            } else if (i > 0) {\n                if\
    \ (minPositive == null || i < minPositive) {\n                    minPositive\
    \ = i;\n                }\n            }\n        }\n        return Tuple.Create(maxNegative,\
    \ minPositive);", "        var a = lst.Where(x => x < 0).DefaultIfEmpty().Max();\n\
    \        var b = lst.Where(x => x > 0).DefaultIfEmpty().Min();\n        return\
    \ Tuple.Create(a, b);", "        long? min = null;\n        long? max = null;\n\
    \        foreach (long i in lst) {\n            if (i > 0) {\n               \
    \ if (min == null || i < min) {\n                    min = i;\n              \
    \  }\n            } else if (i < 0) {\n                if (max == null || i >\
    \ max) {\n                    max = i;\n                }\n            }\n   \
    \     }\n        return Tuple.Create(max, min);", "        var negatives = lst.Where(x\
    \ => x < 0).ToList();\n        var positives = lst.Where(x => x > 0).ToList();\n\
    \        var maxNegative = negatives.Count > 0 ? negatives.Max() : (Nullable<long>)null;\n\
    \        var minPositive = positives.Count > 0 ? positives.Min() : (Nullable<long>)null;\n\
    \        return Tuple.Create(maxNegative, minPositive);", "        // Your code\
    \ goes here\n        return null;", "        long? min = null;\n        long?\
    \ max = null;\n        foreach (long i in lst) {\n            if (i > 0) {\n \
    \               if (min == null || i < min) {\n                    min = i;\n\
    \                }\n            } else if (i < 0) {\n                if (max ==\
    \ null || i > max) {\n                    max = i;\n                }\n      \
    \      }\n        }\n        return Tuple.Create(max, min);", "        Nullable<long>\
    \ a = null;\n        Nullable<long> b = null;\n        foreach (long x in lst)\
    \ {\n            if (x < 0) {\n                if (a == null || x > a) {\n   \
    \                 a = x;\n                }\n            } else if (x > 0) {\n\
    \                if (b == null || x < b) {\n                    b = x;\n     \
    \           }\n            }\n        }\n        return Tuple.Create(a, b);",
  "        // Your code goes here.\n        return null;", "        // Your code goes\
    \ here\n        return null;", "        // Your code goes here.\n        return\
    \ null;", "        // Your code goes here.\n        return null;"]
stop_tokens:
- "\n    }\n"
