name: HumanEval_34_unique
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Return sorted unique elements in a list\n    // >>> Unique((new\
  \ List<long>(new long[]{(long)5L, (long)3L, (long)5L, (long)2L, (long)3L, (long)3L,\
  \ (long)9L, (long)0L, (long)123L})))\n    // (new List<long>(new long[]{(long)0L,\
  \ (long)2L, (long)3L, (long)5L, (long)9L, (long)123L}))\n    public static List<long>\
  \ Unique(List<long> l) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Unique((new\
  \ List<long>(new long[]{(long)5L, (long)3L, (long)5L, (long)2L, (long)3L, (long)3L,\
  \ (long)9L, (long)0L, (long)123L}))).Equals((new List<long>(new long[]{(long)0L,\
  \ (long)2L, (long)3L, (long)5L, (long)9L, (long)123L}))));\n    }\n\n}\n"
completions: ["        l.Sort();\n        int n = l.Count;\n        int i = 0;\n \
    \       while (i < n) {\n            int j = i + 1;\n            while (j < n\
    \ && l[i] == l[j]) {\n                j += 1;\n            }\n            l.RemoveRange(i\
    \ + 1, j - i - 1);\n            n -= j - i - 1;\n            i += 1;\n       \
    \ }\n        return l;", "        l.Sort();\n        int i = 0;\n        while\
    \ (i < l.Count - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        List<long> res = new List<long>();\n        foreach (long\
    \ i in l) {\n            if (!res.Contains(i)) {\n                res.Add(i);\n\
    \            }\n        }\n        res.Sort();\n        return res;", "      \
    \  l.Sort();\n        int i = 0;\n        while (i < l.Count - 1) {\n        \
    \    if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n            } else\
    \ {\n                i++;\n            }\n        }\n        return l;", "   \
    \     l.Sort();\n        int i = 0;\n        while (i < l.Count - 1) {\n     \
    \       if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n            }\
    \ else {\n                i++;\n            }\n        }\n        return l;",
  "        l.Sort();\n        int n = l.Count;\n        int i = 0;\n        while\
    \ (i < n) {\n            int j = i + 1;\n            while (j < n && l[i] == l[j])\
    \ {\n                j += 1;\n            }\n            if (j > i + 1) {\n  \
    \              l.RemoveRange(i + 1, j - i - 1);\n                n -= j - i -\
    \ 1;\n            }\n            i += 1;\n        }\n        return l;", "   \
    \     l.Sort();\n        int n = l.Count;\n        if (n == 0) {\n           \
    \ return l;\n        }\n        int p = 0;\n        for (int i = 1; i < n; i++)\
    \ {\n            if (l[p] != l[i]) {\n                p++;\n                l[p]\
    \ = l[i];\n            }\n        }\n        p++;\n        return l.GetRange(0,\
    \ p);", "        l.Sort();\n        int i = 0;\n        while (i < l.Count - 1)\
    \ {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n   \
    \         } else {\n                i += 1;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i += 1;\n            }\n        }\n   \
    \     return l;", "        List<long> res = new List<long>();\n        foreach\
    \ (long x in l) {\n            if (!res.Contains(x)) {\n                res.Add(x);\n\
    \            }\n        }\n        res.Sort();\n        return res;", "      \
    \  l.Sort();\n        int i = 0;\n        while (i < l.Count - 1) {\n        \
    \    if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n            } else\
    \ {\n                i += 1;\n            }\n        }\n        return l;", " \
    \       l.Sort();\n        int i = 0;\n        while (i < l.Count - 1) {\n   \
    \         if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n          \
    \  } else {\n                i++;\n            }\n        }\n        return l;",
  "        l.Sort();\n        int i = 0;\n        while (i < l.Count - 1) {\n    \
    \        if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n           \
    \ } else {\n                i += 1;\n            }\n        }\n        return\
    \ l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count - 1)\
    \ {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n   \
    \         } else {\n                i++;\n            }\n        }\n        return\
    \ l;", "        List<long> ret = new List<long>();\n        foreach (long x in\
    \ l) {\n            if (!ret.Contains(x)) {\n                ret.Add(x);\n   \
    \         }\n        }\n        ret.Sort();\n        return ret;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        for (int i = 1; i < l.Count; i++) {\n            if (l[i] == l[i - 1])\
    \ {\n                l.RemoveAt(i);\n                i--;\n            }\n   \
    \     }\n        return l;", "        l.Sort();\n        int i = 0;\n        while\
    \ (i < l.Count - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        int n = l.Count;\n        int i = 0;\n\
    \        while (i < n - 1) {\n            if (l[i] == l[i + 1]) {\n          \
    \      l.RemoveAt(i);\n                n--;\n            } else {\n          \
    \      i++;\n            }\n        }\n        return l;", "        List<long>\
    \ result = new List<long>();\n        foreach (long x in l) {\n            if\
    \ (!result.Contains(x)) {\n                result.Add(x);\n            }\n   \
    \     }\n        result.Sort();\n        return result;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        List<long> result = new List<long>();\n        long last = -1;\n    \
    \    foreach (long i in l) {\n            if (i != last) {\n                result.Add(i);\n\
    \                last = i;\n            }\n        }\n        return result;",
  "        l.Sort();\n        List<long> u = new List<long>();\n        long last\
    \ = -1;\n        foreach (long x in l) {\n            if (x != last) {\n     \
    \           u.Add(x);\n                last = x;\n            }\n        }\n \
    \       return u;", "        List<long> ret = new List<long>();\n        foreach\
    \ (long x in l) {\n            if (!ret.Contains(x)) {\n                ret.Add(x);\n\
    \            }\n        }\n        ret.Sort();\n        return ret;", "      \
    \  List<long> ret = new List<long>();\n        foreach (long x in l) {\n     \
    \       if (!ret.Contains(x)) {\n                ret.Add(x);\n            }\n\
    \        }\n        ret.Sort();\n        return ret;", "        l.Sort();\n  \
    \      int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i += 1;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i += 1;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int n = l.Count;\n        int i = 0;\n        while (i < n - 1) {\n \
    \           if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n        \
    \        n--;\n            } else {\n                i++;\n            }\n   \
    \     }\n        return l;", "        l.Sort();\n        int i = 0;\n        while\
    \ (i < l.Count - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        int n = l.Count;\n        int i = 0;\n\
    \        while (i < n - 1) {\n            if (l[i] == l[i + 1]) {\n          \
    \      l.RemoveAt(i);\n                n--;\n            } else {\n          \
    \      i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", '        return l.Distinct().OrderBy(x
    => x).ToList();', "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        int j = 0;\n        for (int i = 1;\
    \ i < l.Count; i++) {\n            if (l[j] != l[i]) {\n                j++;\n\
    \                l[j] = l[i];\n            }\n        }\n        l.RemoveRange(j\
    \ + 1, l.Count - j - 1);\n        return l;", "        l.Sort();\n        int\
    \ n = l.Count;\n        int i = 0;\n        while (i < n - 1) {\n            if\
    \ (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n                n--;\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        List<long> r = new List<long>();\n\
    \        long last = -1;\n        foreach (long x in l) {\n            if (x !=\
    \ last) {\n                r.Add(x);\n                last = x;\n            }\n\
    \        }\n        return r;", "        l.Sort();\n        int i = 0;\n     \
    \   while (i < l.Count - 1) {\n            if (l[i] == l[i + 1]) {\n         \
    \       l.RemoveAt(i);\n            } else {\n                i++;\n         \
    \   }\n        }\n        return l;", "        l.Sort();\n        int i = 0;\n\
    \        while (i < l.Count - 1) {\n            if (l[i] == l[i + 1]) {\n    \
    \            l.RemoveAt(i);\n            } else {\n                i++;\n    \
    \        }\n        }\n        return l;", "        l.Sort();\n        int i =\
    \ 0;\n        while (i < l.Count - 1) {\n            if (l[i] == l[i + 1]) {\n\
    \                l.RemoveAt(i);\n            } else {\n                i++;\n\
    \            }\n        }\n        return l;", "        l.Sort();\n        int\
    \ i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] == l[i + 1])\
    \ {\n                l.RemoveAt(i);\n            } else {\n                i++;\n\
    \            }\n        }\n        return l;", "        l.Sort();\n        int\
    \ n = l.Count;\n        int i = 0;\n        while (i < n) {\n            int j\
    \ = i + 1;\n            while (j < n && l[i] == l[j]) {\n                j++;\n\
    \            }\n            l.RemoveRange(i + 1, j - i - 1);\n            n -=\
    \ j - i - 1;\n            i++;\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", '        return l.Distinct().OrderBy(x
    => x).ToList();', "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        int n = l.Count;\n        int i = 0;\n\
    \        while (i < n - 1) {\n            if (l[i] == l[i + 1]) {\n          \
    \      l.RemoveAt(i);\n                n--;\n            } else {\n          \
    \      i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i += 1;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i += 1;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i += 1;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        List<long> r = new List<long>();\n        long last = -1;\n        foreach\
    \ (long x in l) {\n            if (x != last) {\n                r.Add(x);\n \
    \               last = x;\n            }\n        }\n        return r;", "   \
    \     l.Sort();\n        int i = 0;\n        while (i < l.Count - 1) {\n     \
    \       if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n            }\
    \ else {\n                i++;\n            }\n        }\n        return l;",
  "        l.Sort();\n        int n = l.Count;\n        int i = 0;\n        while\
    \ (i < n - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \                n -= 1;\n            } else {\n                i += 1;\n    \
    \        }\n        }\n        return l;", "        l.Sort();\n        int i =\
    \ 0;\n        while (i < l.Count - 1) {\n            if (l[i] == l[i + 1]) {\n\
    \                l.RemoveAt(i);\n            } else {\n                i++;\n\
    \            }\n        }\n        return l;", "        l.Sort();\n        List<long>\
    \ r = new List<long>();\n        long prev = -1;\n        foreach (long x in l)\
    \ {\n            if (x != prev) {\n                r.Add(x);\n               \
    \ prev = x;\n            }\n        }\n        return r;", "        l.Sort();\n\
    \        var r = new List<long>();\n        long last = -1;\n        foreach (var\
    \ x in l) {\n            if (x != last) {\n                r.Add(x);\n       \
    \         last = x;\n            }\n        }\n        return r;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int n = l.Count;\n        if (n == 0) {\n            return l;\n    \
    \    }\n        int i = 0;\n        int j = 1;\n        while (j < n) {\n    \
    \        if (l[i] == l[j]) {\n                j++;\n            } else {\n   \
    \             i++;\n                l[i] = l[j];\n                j++;\n     \
    \       }\n        }\n        return l.GetRange(0, i + 1);", "        List<long>\
    \ res = new List<long>();\n        foreach (long x in l) {\n            if (!res.Contains(x))\
    \ {\n                res.Add(x);\n            }\n        }\n        res.Sort();\n\
    \        return res;", "        l.Sort();\n        int i = 0;\n        while (i\
    \ < l.Count - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i += 1;\n            }\n        }\n   \
    \     return l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i += 1;\n            }\n        }\n   \
    \     return l;", '        return l.Distinct().OrderBy(x => x).ToList();', " \
    \       l.Sort();\n        int n = l.Count;\n        int i = 0;\n        while\
    \ (i < n - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \                n--;\n            } else {\n                i++;\n          \
    \  }\n        }\n        return l;", "        l.Sort();\n        int i = 0;\n\
    \        while (i < l.Count - 1) {\n            if (l[i] == l[i + 1]) {\n    \
    \            l.RemoveAt(i);\n            } else {\n                i++;\n    \
    \        }\n        }\n        return l;", "        l.Sort();\n        List<long>\
    \ r = new List<long>();\n        long last = -1;\n        foreach (long x in l)\
    \ {\n            if (x != last) {\n                r.Add(x);\n               \
    \ last = x;\n            }\n        }\n        return r;", "        List<long>\
    \ ret = new List<long>();\n        foreach (long x in l) {\n            if (!ret.Contains(x))\
    \ {\n                ret.Add(x);\n            }\n        }\n        ret.Sort();\n\
    \        return ret;", "        l.Sort();\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            if (l[i] == l[i - 1]) {\n                l.RemoveAt(i);\n\
    \                i--;\n            }\n        }\n        return l;", "       \
    \ l.Sort();\n        int i = 0;\n        while (i < l.Count - 1) {\n         \
    \   if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n            } else\
    \ {\n                i += 1;\n            }\n        }\n        return l;", " \
    \       l.Sort();\n        var r = new List<long>();\n        long last = -1;\n\
    \        foreach (var x in l) {\n            if (x != last) {\n              \
    \  r.Add(x);\n                last = x;\n            }\n        }\n        return\
    \ r;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count - 1)\
    \ {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n   \
    \         } else {\n                i++;\n            }\n        }\n        return\
    \ l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count - 1)\
    \ {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n   \
    \         } else {\n                i++;\n            }\n        }\n        return\
    \ l;", "        l.Sort();\n        var r = new List<long>();\n        long last\
    \ = -1;\n        foreach (var x in l) {\n            if (x != last) {\n      \
    \          r.Add(x);\n                last = x;\n            }\n        }\n  \
    \      return r;", "        l.Sort();\n        int i = 0;\n        while (i <\
    \ l.Count - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i += 1;\n            }\n        }\n   \
    \     return l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        List<long> r = new List<long>();\n\
    \        long last = -1;\n        foreach (long x in l) {\n            if (x !=\
    \ last) {\n                r.Add(x);\n                last = x;\n            }\n\
    \        }\n        return r;", "        l.Sort();\n        int n = l.Count;\n\
    \        int i = 0;\n        while (i < n) {\n            int j = i + 1;\n   \
    \         while (j < n && l[i] == l[j]) {\n                j++;\n            }\n\
    \            l.RemoveRange(i + 1, j - i - 1);\n            n -= j - i - 1;\n \
    \           i++;\n        }\n        return l;", "        l.Sort();\n        int\
    \ i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] == l[i + 1])\
    \ {\n                l.RemoveAt(i);\n            } else {\n                i++;\n\
    \            }\n        }\n        return l;", "        l.Sort();\n        int\
    \ i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] == l[i + 1])\
    \ {\n                l.RemoveAt(i);\n            } else {\n                i +=\
    \ 1;\n            }\n        }\n        return l;", "        l.Sort();\n     \
    \   int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] == l[i\
    \ + 1]) {\n                l.RemoveAt(i);\n            } else {\n            \
    \    i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int n = l.Count;\n        if (n == 0) {\n            return l;\n    \
    \    }\n        int p = 0;\n        for (int i = 1; i < n; i++) {\n          \
    \  if (l[p] != l[i]) {\n                p++;\n                l[p] = l[i];\n \
    \           }\n        }\n        return l.GetRange(0, p + 1);", "        l.Sort();\n\
    \        int n = l.Count;\n        int j = 0;\n        for (int i = 1; i < n;\
    \ i++) {\n            if (l[i] != l[j]) {\n                j++;\n            \
    \    l[j] = l[i];\n            }\n        }\n        l.RemoveRange(j + 1, n -\
    \ j - 1);\n        return l;", "        l.Sort();\n        int i = 0;\n      \
    \  while (i < l.Count - 1) {\n            if (l[i] == l[i + 1]) {\n          \
    \      l.RemoveAt(i);\n            } else {\n                i++;\n          \
    \  }\n        }\n        return l;", "        l.Sort();\n        int i = 0;\n\
    \        while (i < l.Count - 1) {\n            if (l[i] == l[i + 1]) {\n    \
    \            l.RemoveAt(i);\n            } else {\n                i++;\n    \
    \        }\n        }\n        return l;", "        l.Sort();\n        int i =\
    \ 0;\n        while (i < l.Count - 1) {\n            if (l[i] == l[i + 1]) {\n\
    \                l.RemoveAt(i);\n            } else {\n                i++;\n\
    \            }\n        }\n        return l;", "        l.Sort();\n        int\
    \ i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] == l[i + 1])\
    \ {\n                l.RemoveAt(i);\n            } else {\n                i++;\n\
    \            }\n        }\n        return l;", "        l.Sort();\n        int\
    \ i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] == l[i + 1])\
    \ {\n                l.RemoveAt(i);\n            } else {\n                i++;\n\
    \            }\n        }\n        return l;", '        return l.Distinct().OrderBy(x
    => x).ToList();', "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i += 1;\n            }\n        }\n   \
    \     return l;", "        List<long> ret = new List<long>();\n        foreach\
    \ (long x in l) {\n            if (!ret.Contains(x)) {\n                ret.Add(x);\n\
    \            }\n        }\n        ret.Sort();\n        return ret;", "      \
    \  l.Sort();\n        int i = 0;\n        while (i < l.Count - 1) {\n        \
    \    if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n            } else\
    \ {\n                i++;\n            }\n        }\n        return l;", "   \
    \     l.Sort();\n        int i = 0;\n        while (i < l.Count - 1) {\n     \
    \       if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n            }\
    \ else {\n                i++;\n            }\n        }\n        return l;",
  "        l.Sort();\n        var r = new List<long>();\n        long last = -1;\n\
    \        foreach (var e in l) {\n            if (e != last) {\n              \
    \  r.Add(e);\n                last = e;\n            }\n        }\n        return\
    \ r;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count - 1)\
    \ {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n   \
    \         } else {\n                i++;\n            }\n        }\n        return\
    \ l;", "        List<long> ret = new List<long>();\n        foreach (long x in\
    \ l) {\n            if (!ret.Contains(x)) {\n                ret.Add(x);\n   \
    \         }\n        }\n        ret.Sort();\n        return ret;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int n = l.Count;\n        int i = 0;\n        while (i < n) {\n     \
    \       int j = i + 1;\n            while (j < n && l[i] == l[j]) {\n        \
    \        j++;\n            }\n            l.RemoveRange(i + 1, j - i - 1);\n \
    \           n -= j - i - 1;\n            i++;\n        }\n        return l;",
  "        List<long> ret = new List<long>();\n        foreach (long x in l) {\n \
    \           if (!ret.Contains(x)) {\n                ret.Add(x);\n           \
    \ }\n        }\n        ret.Sort();\n        return ret;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i += 1;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i += 1;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i += 1;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        return l.Distinct().ToList();", "        l.Sort();\n        int i = 0;\n\
    \        while (i < l.Count - 1) {\n            if (l[i] == l[i + 1]) {\n    \
    \            l.RemoveAt(i);\n            } else {\n                i += 1;\n \
    \           }\n        }\n        return l;", "        l.Sort();\n        int\
    \ i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] == l[i + 1])\
    \ {\n                l.RemoveAt(i);\n            } else {\n                i++;\n\
    \            }\n        }\n        return l;", "        l.Sort();\n        List<long>\
    \ r = new List<long>();\n        long last = -1;\n        foreach (long x in l)\
    \ {\n            if (x != last) {\n                r.Add(x);\n               \
    \ last = x;\n            }\n        }\n        return r;", "        List<long>\
    \ ret = new List<long>();\n        foreach (long x in l) {\n            if (!ret.Contains(x))\
    \ {\n                ret.Add(x);\n            }\n        }\n        ret.Sort();\n\
    \        return ret;", "        l.Sort();\n        int i = 0;\n        while (i\
    \ < l.Count - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        for (int i = 1; i < l.Count; i++) {\n\
    \            if (l[i] == l[i - 1]) {\n                l.RemoveAt(i);\n       \
    \         i--;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        List<long> r = new List<long>();\n        long last = long.MinValue;\n\
    \        foreach (long x in l) {\n            if (x != last) {\n             \
    \   r.Add(x);\n                last = x;\n            }\n        }\n        return\
    \ r;", "        l.Sort();\n        int n = l.Count;\n        int j = 0;\n    \
    \    for (int i = 1; i < n; i++) {\n            if (l[i] != l[j]) {\n        \
    \        j++;\n                l[j] = l[i];\n            }\n        }\n      \
    \  j++;\n        return l.GetRange(0, j);", "        l.Sort();\n        int i\
    \ = 0;\n        while (i < l.Count - 1) {\n            if (l[i] == l[i + 1]) {\n\
    \                l.RemoveAt(i);\n            } else {\n                i++;\n\
    \            }\n        }\n        return l;", "        l.Sort();\n        int\
    \ n = l.Count;\n        int j = 0;\n        for (int i = 1; i < n; i++) {\n  \
    \          if (l[i] != l[j]) {\n                j++;\n                l[j] = l[i];\n\
    \            }\n        }\n        j++;\n        return l.GetRange(0, j);", " \
    \       l.Sort();\n        int i = 0;\n        while (i < l.Count - 1) {\n   \
    \         if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n          \
    \  } else {\n                i++;\n            }\n        }\n        return l;",
  "        l.Sort();\n        int i = 0;\n        while (i < l.Count - 1) {\n    \
    \        if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n           \
    \ } else {\n                i += 1;\n            }\n        }\n        return\
    \ l;", "        l.Sort();\n        List<long> r = new List<long>();\n        if\
    \ (l.Count > 0) {\n            r.Add(l[0]);\n            for (int i = 1; i < l.Count;\
    \ i++) {\n                if (l[i] != l[i - 1]) {\n                    r.Add(l[i]);\n\
    \                }\n            }\n        }\n        return r;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i += 1;\n            }\n        }\n        return l;", '        return
    l.Distinct().OrderBy(x => x).ToList();', "        l.Sort();\n        int i = 0;\n\
    \        while (i < l.Count - 1) {\n            if (l[i] == l[i + 1]) {\n    \
    \            l.RemoveAt(i);\n            } else {\n                i++;\n    \
    \        }\n        }\n        return l;", "        l.Sort();\n        int i =\
    \ 0;\n        while (i < l.Count - 1) {\n            if (l[i] == l[i + 1]) {\n\
    \                l.RemoveAt(i);\n            } else {\n                i++;\n\
    \            }\n        }\n        return l;", "        l.Sort();\n        int\
    \ i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] == l[i + 1])\
    \ {\n                l.RemoveAt(i);\n            } else {\n                i++;\n\
    \            }\n        }\n        return l;", "        l.Sort();\n        int\
    \ i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] == l[i + 1])\
    \ {\n                l.RemoveAt(i);\n            } else {\n                i++;\n\
    \            }\n        }\n        return l;", "        List<long> ret = new List<long>();\n\
    \        foreach (long x in l) {\n            if (!ret.Contains(x)) {\n      \
    \          ret.Add(x);\n            }\n        }\n        ret.Sort();\n      \
    \  return ret;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i += 1;\n            }\n        }\n   \
    \     return l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", '        return l.Distinct().OrderBy(x => x).ToList();', "    \
    \    l.Sort();\n        int i = 0;\n        while (i < l.Count - 1) {\n      \
    \      if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n            }\
    \ else {\n                i++;\n            }\n        }\n        return l;",
  "        List<long> ret = new List<long>();\n        foreach (long x in l) {\n \
    \           if (!ret.Contains(x)) {\n                ret.Add(x);\n           \
    \ }\n        }\n        ret.Sort();\n        return ret;", '        return l.Distinct().OrderBy(x
    => x).ToList();', "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        List<long> ret = new List<long>();\n        foreach (long\
    \ x in l) {\n            if (!ret.Contains(x)) {\n                ret.Add(x);\n\
    \            }\n        }\n        ret.Sort();\n        return ret;", "      \
    \  List<long> ret = new List<long>();\n        foreach (long i in l) {\n     \
    \       if (!ret.Contains(i)) {\n                ret.Add(i);\n            }\n\
    \        }\n        ret.Sort();\n        return ret;", "        l.Sort();\n  \
    \      int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        List<long>\
    \ res = new List<long>();\n        foreach (long x in l) {\n            if (!res.Contains(x))\
    \ {\n                res.Add(x);\n            }\n        }\n        res.Sort();\n\
    \        return res;", "        l.Sort();\n        int i = 0;\n        while (i\
    \ < l.Count - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i += 1;\n            }\n        }\n   \
    \     return l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        List<long> r = new List<long>();\n\
    \        long last = -1;\n        foreach (long x in l) {\n            if (x !=\
    \ last) {\n                r.Add(x);\n                last = x;\n            }\n\
    \        }\n        return r;", "        l.Sort();\n        int i = 0;\n     \
    \   while (i < l.Count - 1) {\n            if (l[i] == l[i + 1]) {\n         \
    \       l.RemoveAt(i);\n            } else {\n                i++;\n         \
    \   }\n        }\n        return l;", "        l.Sort();\n        int n = l.Count;\n\
    \        int i = 0;\n        while (i < n - 1) {\n            if (l[i] == l[i\
    \ + 1]) {\n                l.RemoveAt(i);\n                n--;\n            }\
    \ else {\n                i++;\n            }\n        }\n        return l;",
  "        l.Sort();\n        int i = 0;\n        while (i < l.Count - 1) {\n    \
    \        if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n           \
    \ } else {\n                i++;\n            }\n        }\n        return l;",
  "        l.Sort();\n        int n = l.Count;\n        int j = 0;\n        for (int\
    \ i = 1; i < n; i++) {\n            if (l[i] != l[j]) {\n                j++;\n\
    \                l[j] = l[i];\n            }\n        }\n        return l.GetRange(0,\
    \ j + 1);"]
stop_tokens:
- "\n    }\n"
