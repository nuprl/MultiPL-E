name: HumanEval_34_unique
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Return sorted unique elements in a list\n    // >>> Unique((new\
  \ List<long>(new long[]{(long)5L, (long)3L, (long)5L, (long)2L, (long)3L, (long)3L,\
  \ (long)9L, (long)0L, (long)123L})))\n    // (new List<long>(new long[]{(long)0L,\
  \ (long)2L, (long)3L, (long)5L, (long)9L, (long)123L}))\n    public static List<long>\
  \ Unique(List<long> l) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Unique((new\
  \ List<long>(new long[]{(long)5L, (long)3L, (long)5L, (long)2L, (long)3L, (long)3L,\
  \ (long)9L, (long)0L, (long)123L}))).Equals((new List<long>(new long[]{(long)0L,\
  \ (long)2L, (long)3L, (long)5L, (long)9L, (long)123L}))));\n    }\n\n}\n"
completions: ["        l.Sort();\n        int n = l.Count;\n        int i = 0;\n \
    \       while (i < n) {\n            int j = i + 1;\n            while (j < n\
    \ && l[i] == l[j]) {\n                j += 1;\n            }\n            l.RemoveRange(i\
    \ + 1, j - i - 1);\n            n -= j - i - 1;\n            i += 1;\n       \
    \ }\n        return l;", "        l.Sort();\n        int i = 0;\n        while\
    \ (i < l.Count - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        List<long> res = new List<long>();\n        foreach (long\
    \ i in l) {\n            if (!res.Contains(i)) {\n                res.Add(i);\n\
    \            }\n        }\n        res.Sort();\n        return res;", "      \
    \  l.Sort();\n        int i = 0;\n        while (i < l.Count - 1) {\n        \
    \    if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n            } else\
    \ {\n                i++;\n            }\n        }\n        return l;", "   \
    \     l.Sort();\n        int i = 0;\n        while (i < l.Count - 1) {\n     \
    \       if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n            }\
    \ else {\n                i++;\n            }\n        }\n        return l;",
  "        l.Sort();\n        int n = l.Count;\n        int i = 0;\n        while\
    \ (i < n) {\n            int j = i + 1;\n            while (j < n && l[i] == l[j])\
    \ {\n                j += 1;\n            }\n            if (j > i + 1) {\n  \
    \              l.RemoveRange(i + 1, j - i - 1);\n                n -= j - i -\
    \ 1;\n            }\n            i += 1;\n        }\n        return l;", "   \
    \     l.Sort();\n        int n = l.Count;\n        if (n == 0) {\n           \
    \ return l;\n        }\n        int p = 0;\n        for (int i = 1; i < n; i++)\
    \ {\n            if (l[p] != l[i]) {\n                p++;\n                l[p]\
    \ = l[i];\n            }\n        }\n        p++;\n        return l.GetRange(0,\
    \ p);", "        l.Sort();\n        int i = 0;\n        while (i < l.Count - 1)\
    \ {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n   \
    \         } else {\n                i += 1;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i += 1;\n            }\n        }\n   \
    \     return l;", "        List<long> res = new List<long>();\n        foreach\
    \ (long x in l) {\n            if (!res.Contains(x)) {\n                res.Add(x);\n\
    \            }\n        }\n        res.Sort();\n        return res;", "      \
    \  l.Sort();\n        int i = 0;\n        while (i < l.Count - 1) {\n        \
    \    if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n            } else\
    \ {\n                i += 1;\n            }\n        }\n        return l;", " \
    \       l.Sort();\n        int i = 0;\n        while (i < l.Count - 1) {\n   \
    \         if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n          \
    \  } else {\n                i++;\n            }\n        }\n        return l;",
  "        l.Sort();\n        int i = 0;\n        while (i < l.Count - 1) {\n    \
    \        if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n           \
    \ } else {\n                i += 1;\n            }\n        }\n        return\
    \ l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count - 1)\
    \ {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n   \
    \         } else {\n                i++;\n            }\n        }\n        return\
    \ l;", "        List<long> ret = new List<long>();\n        foreach (long x in\
    \ l) {\n            if (!ret.Contains(x)) {\n                ret.Add(x);\n   \
    \         }\n        }\n        ret.Sort();\n        return ret;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        for (int i = 1; i < l.Count; i++) {\n            if (l[i] == l[i - 1])\
    \ {\n                l.RemoveAt(i);\n                i--;\n            }\n   \
    \     }\n        return l;", "        l.Sort();\n        int i = 0;\n        while\
    \ (i < l.Count - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;"]
stop_tokens:
- "\n    }\n"
