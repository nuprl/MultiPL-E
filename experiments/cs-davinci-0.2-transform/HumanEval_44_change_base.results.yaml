language: cs
name: HumanEval_44_change_base
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string result = \"\";\n        while (x > 0) {\n            result =\
    \ (x % numBase).ToString() + result;\n            x /= numBase;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string res = \"\";\n        while (x > 0) {\n            res = (x % numBase).ToString()\
    \ + res;\n            x /= numBase;\n        }\n        return res;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string result = \"\";\n        while (x > 0) {\n            result =\
    \ (x % numBase).ToString() + result;\n            x /= numBase;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string ret = \"\";\n        while (x > 0) {\n            ret = (x % numBase).ToString()\
    \ + ret;\n            x /= numBase;\n        }\n        return ret;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string result = \"\";\n        while (x > 0) {\n            result =\
    \ (x % numBase).ToString() + result;\n            x /= numBase;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string s = \"\";\n        while (x > 0) {\n            s = (x % numBase).ToString()\
    \ + s;\n            x /= numBase;\n        }\n        return s;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"\
    22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L),\
    \ (2L)).Equals((\"11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"\
    10000\")));\n    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n  \
    \  Debug.Assert(ChangeBase((7L), (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L),\
    \ (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"\
    3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L),\
    \ (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"\
    6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"7\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string ret = \"\";\n        while (x > 0) {\n            ret = (x % numBase).ToString()\
    \ + ret;\n            x /= numBase;\n        }\n        return ret;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string result = \"\";\n        while (x > 0) {\n            result =\
    \ (x % numBase).ToString() + result;\n            x /= numBase;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string result = \"\";\n        while (x > 0) {\n            result =\
    \ (x % numBase).ToString() + result;\n            x /= numBase;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string result = \"\";\n        while (x > 0) {\n            result =\
    \ (x % numBase).ToString() + result;\n            x /= numBase;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string result = \"\";\n        while (x > 0) {\n            result =\
    \ (x % numBase).ToString() + result;\n            x /= numBase;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        var sb = new StringBuilder();\n        while (x > 0) {\n            sb.Append(x\
    \ % numBase);\n            x /= numBase;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string ret = \"\";\n        while (x > 0) {\n            ret = (x % numBase).ToString()\
    \ + ret;\n            x /= numBase;\n        }\n        return ret;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string result = \"\";\n        while (x > 0) {\n            result =\
    \ (x % numBase).ToString() + result;\n            x /= numBase;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string result = \"\";\n        while (x > 0) {\n            result =\
    \ (x % numBase).ToString() + result;\n            x /= numBase;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string ret = \"\";\n        while (x > 0) {\n            ret = (x % numBase).ToString()\
    \ + ret;\n            x /= numBase;\n        }\n        return ret;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string ans = \"\";\n        while (x > 0) {\n            ans = (x % numBase).ToString()\
    \ + ans;\n            x /= numBase;\n        }\n        return ans;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string ret = \"\";\n        while (x > 0) {\n            ret = (x % numBase).ToString()\
    \ + ret;\n            x /= numBase;\n        }\n        return ret;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string ret = \"\";\n        while (x > 0) {\n            ret = (x % numBase).ToString()\
    \ + ret;\n            x /= numBase;\n        }\n        return ret;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        var sb = new StringBuilder();\n        while (x > 0) {\n            sb.Append(x\
    \ % numBase);\n            x /= numBase;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string result = \"\";\n        while (x > 0) {\n            result =\
    \ (x % numBase).ToString() + result;\n            x /= numBase;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string res = \"\";\n        while (x > 0) {\n            res = (x % numBase).ToString()\
    \ + res;\n            x /= numBase;\n        }\n        return res;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        var sb = new StringBuilder();\n        while (x > 0) {\n            sb.Append(x\
    \ % numBase);\n            x /= numBase;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        var sb = new StringBuilder();\n        while (x > 0) {\n            sb.Append(x\
    \ % numBase);\n            x /= numBase;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string ret = \"\";\n        while (x > 0) {\n            ret = (x % numBase).ToString()\
    \ + ret;\n            x /= numBase;\n        }\n        return ret;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string ret = \"\";\n        while (x > 0) {\n            ret = (x % numBase).ToString()\
    \ + ret;\n            x /= numBase;\n        }\n        return ret;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string result = \"\";\n        while (x > 0) {\n            result =\
    \ (x % numBase).ToString() + result;\n            x /= numBase;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string result = \"\";\n        while (x > 0) {\n            result =\
    \ (x % numBase).ToString() + result;\n            x /= numBase;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string result = \"\";\n        while (x > 0) {\n            result =\
    \ (x % numBase).ToString() + result;\n            x /= numBase;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string result = \"\";\n        while (x > 0) {\n            result =\
    \ (x % numBase).ToString() + result;\n            x /= numBase;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string result = \"\";\n        while (x > 0) {\n            result =\
    \ (x % numBase).ToString() + result;\n            x /= numBase;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string result = \"\";\n        while (x > 0) {\n            result =\
    \ (x % numBase).ToString() + result;\n            x /= numBase;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string result = \"\";\n        while (x > 0) {\n            result =\
    \ (x % numBase).ToString() + result;\n            x /= numBase;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        var sb = new StringBuilder();\n        while (x > 0) {\n            sb.Append(x\
    \ % numBase);\n            x /= numBase;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string result = \"\";\n        while (x > 0) {\n            result =\
    \ (x % numBase).ToString() + result;\n            x /= numBase;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string result = \"\";\n        while (x != 0) {\n            result =\
    \ (x % numBase).ToString() + result;\n            x /= numBase;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798829
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string s = \"\";\n        while (x > 0) {\n            s = (x % numBase).ToString()\
    \ + s;\n            x /= numBase;\n        }\n        return s;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"\
    22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L),\
    \ (2L)).Equals((\"11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"\
    10000\")));\n    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n  \
    \  Debug.Assert(ChangeBase((7L), (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L),\
    \ (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"\
    3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L),\
    \ (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"\
    6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"7\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string ret = \"\";\n        while (x > 0) {\n            ret = (x % numBase).ToString()\
    \ + ret;\n            x /= numBase;\n        }\n        return ret;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string ret = \"\";\n        while (x > 0) {\n            ret = (x % numBase).ToString()\
    \ + ret;\n            x /= numBase;\n        }\n        return ret;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        var sb = new StringBuilder();\n        while (x > 0) {\n            sb.Append(x\
    \ % numBase);\n            x /= numBase;\n        }\n        return string.Join(\"\
    \", sb.ToString().Reverse());\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string ret = \"\";\n        while (x > 0) {\n            ret = (x % numBase).ToString()\
    \ + ret;\n            x /= numBase;\n        }\n        return ret;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        var sb = new StringBuilder();\n        while (x > 0) {\n            sb.Append(x\
    \ % numBase);\n            x /= numBase;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string ret = \"\";\n        while (x > 0) {\n            ret = (x % numBase).ToString()\
    \ + ret;\n            x /= numBase;\n        }\n        return ret;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string result = \"\";\n        while (x > 0) {\n            result =\
    \ (x % numBase).ToString() + result;\n            x /= numBase;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        var sb = new StringBuilder();\n        while (x > 0) {\n            sb.Append(x\
    \ % numBase);\n            x /= numBase;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string ret = \"\";\n        while (x > 0) {\n            ret = (x % numBase).ToString()\
    \ + ret;\n            x /= numBase;\n        }\n        return ret;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string s = \"\";\n        while (x > 0) {\n            s = (x % numBase).ToString()\
    \ + s;\n            x /= numBase;\n        }\n        return s;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"\
    22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L),\
    \ (2L)).Equals((\"11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"\
    10000\")));\n    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n  \
    \  Debug.Assert(ChangeBase((7L), (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L),\
    \ (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"\
    3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L),\
    \ (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"\
    6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"7\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string s = \"\";\n        while (x > 0) {\n            s = (x % numBase).ToString()\
    \ + s;\n            x /= numBase;\n        }\n        return s;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"\
    22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L),\
    \ (2L)).Equals((\"11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"\
    10000\")));\n    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n  \
    \  Debug.Assert(ChangeBase((7L), (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L),\
    \ (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"\
    3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L),\
    \ (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"\
    6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"7\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string ret = \"\";\n        while (x > 0) {\n            ret = (x % numBase).ToString()\
    \ + ret;\n            x /= numBase;\n        }\n        return ret;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string result = \"\";\n        while (x > 0) {\n            result =\
    \ (x % numBase).ToString() + result;\n            x /= numBase;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string s = \"\";\n        while (x > 0) {\n            s = (x % numBase).ToString()\
    \ + s;\n            x /= numBase;\n        }\n        return s;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"\
    22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L),\
    \ (2L)).Equals((\"11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"\
    10000\")));\n    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n  \
    \  Debug.Assert(ChangeBase((7L), (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L),\
    \ (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"\
    3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L),\
    \ (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"\
    6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"7\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string ret = \"\";\n        while (x != 0) {\n            ret = (x %\
    \ numBase).ToString() + ret;\n            x /= numBase;\n        }\n        return\
    \ ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798829
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string result = \"\";\n        while (x > 0) {\n            result =\
    \ (x % numBase).ToString() + result;\n            x /= numBase;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string ret = \"\";\n        while (x > 0) {\n            long r = x %\
    \ numBase;\n            ret = r.ToString() + ret;\n            x /= numBase;\n\
    \        }\n        return ret;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798829
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string ret = \"\";\n        while (x > 0) {\n            ret = (x % numBase).ToString()\
    \ + ret;\n            x /= numBase;\n        }\n        return ret;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        var sb = new StringBuilder();\n        while (x > 0) {\n            sb.Append(x\
    \ % numBase);\n            x /= numBase;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string result = \"\";\n        while (x > 0) {\n            result =\
    \ (x % numBase).ToString() + result;\n            x /= numBase;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        var sb = new StringBuilder();\n        while (x > 0) {\n            sb.Append(x\
    \ % numBase);\n            x /= numBase;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        var result = new StringBuilder();\n        while (x > 0) {\n        \
    \    result.Append(x % numBase);\n            x /= numBase;\n        }\n     \
    \   return new string(result.ToString().Reverse().ToArray());\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"\
    22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L),\
    \ (2L)).Equals((\"11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"\
    10000\")));\n    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n  \
    \  Debug.Assert(ChangeBase((7L), (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L),\
    \ (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"\
    3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L),\
    \ (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"\
    6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"7\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        var sb = new StringBuilder();\n        while (x > 0) {\n            sb.Append(x\
    \ % numBase);\n            x /= numBase;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string result = \"\";\n        while (x > 0) {\n            result =\
    \ (x % numBase).ToString() + result;\n            x /= numBase;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string result = \"\";\n        while (x > 0) {\n            result =\
    \ (x % numBase).ToString() + result;\n            x /= numBase;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string result = \"\";\n        while (x > 0) {\n            result =\
    \ (x % numBase).ToString() + result;\n            x /= numBase;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        var sb = new StringBuilder();\n        while (x > 0) {\n            sb.Append(x\
    \ % numBase);\n            x /= numBase;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string ret = \"\";\n        while (x > 0) {\n            ret = (x % numBase).ToString()\
    \ + ret;\n            x /= numBase;\n        }\n        return ret;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        var sb = new StringBuilder();\n        while (x > 0) {\n            sb.Append(x\
    \ % numBase);\n            x /= numBase;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        var sb = new StringBuilder();\n        while (x > 0) {\n            sb.Append(x\
    \ % numBase);\n            x /= numBase;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string result = \"\";\n        while (x > 0) {\n            result =\
    \ (x % numBase).ToString() + result;\n            x /= numBase;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string result = \"\";\n        while (x > 0) {\n            result =\
    \ (x % numBase).ToString() + result;\n            x /= numBase;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string result = \"\";\n        while (x > 0) {\n            result =\
    \ (x % numBase).ToString() + result;\n            x /= numBase;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string result = \"\";\n        while (x > 0) {\n            result =\
    \ (x % numBase).ToString() + result;\n            x /= numBase;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string res = \"\";\n        while (x > 0) {\n            res = (x % numBase).ToString()\
    \ + res;\n            x /= numBase;\n        }\n        return res;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string result = \"\";\n        while (x > 0) {\n            result =\
    \ (x % numBase).ToString() + result;\n            x /= numBase;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string result = \"\";\n        while (x > 0) {\n            result =\
    \ (x % numBase).ToString() + result;\n            x /= numBase;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string ret = \"\";\n        while (x > 0) {\n            ret = (x % numBase).ToString()\
    \ + ret;\n            x /= numBase;\n        }\n        return ret;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string ret = \"\";\n        while (x > 0) {\n            ret = (x % numBase).ToString()\
    \ + ret;\n            x /= numBase;\n        }\n        return ret;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string ret = \"\";\n        while (x > 0) {\n            ret = (x % numBase).ToString()\
    \ + ret;\n            x /= numBase;\n        }\n        return ret;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string result = \"\";\n        while (x > 0) {\n            result =\
    \ (x % numBase).ToString() + result;\n            x /= numBase;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string ret = \"\";\n        while (x > 0) {\n            ret = (x % numBase).ToString()\
    \ + ret;\n            x /= numBase;\n        }\n        return ret;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string result = \"\";\n        while (x > 0) {\n            result =\
    \ (x % numBase).ToString() + result;\n            x /= numBase;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string result = \"\";\n        while (x > 0) {\n            result =\
    \ (x % numBase).ToString() + result;\n            x /= numBase;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string result = \"\";\n        while (x > 0) {\n            result =\
    \ (x % numBase).ToString() + result;\n            x /= numBase;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string ret = \"\";\n        while (x > 0) {\n            ret = (x % numBase).ToString()\
    \ + ret;\n            x /= numBase;\n        }\n        return ret;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string ret = \"\";\n        while (x > 0) {\n            ret = (x % numBase).ToString()\
    \ + ret;\n            x /= numBase;\n        }\n        return ret;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        var result = new List<long>();\n        while (x > 0) {\n           \
    \ result.Add(x % numBase);\n            x /= numBase;\n        }\n        result.Reverse();\n\
    \        return string.Join(\"\", result);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798829
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string ret = \"\";\n        while (x > 0) {\n            ret = (x % numBase).ToString()\
    \ + ret;\n            x /= numBase;\n        }\n        return ret;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string s = \"\";\n        while (x > 0) {\n            s = (x % numBase).ToString()\
    \ + s;\n            x /= numBase;\n        }\n        return s;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"\
    22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L),\
    \ (2L)).Equals((\"11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"\
    10000\")));\n    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n  \
    \  Debug.Assert(ChangeBase((7L), (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L),\
    \ (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"\
    3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L),\
    \ (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"\
    6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"7\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        var sb = new StringBuilder();\n        while (x > 0) {\n            sb.Append(x\
    \ % numBase);\n            x /= numBase;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string result = \"\";\n        while (x > 0) {\n            result =\
    \ (x % numBase).ToString() + result;\n            x /= numBase;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string ret = \"\";\n        while (x > 0) {\n            ret = (x % numBase).ToString()\
    \ + ret;\n            x /= numBase;\n        }\n        return ret;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string result = \"\";\n        while (x > 0) {\n            result =\
    \ (x % numBase).ToString() + result;\n            x /= numBase;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string ret = \"\";\n        while (x > 0) {\n            ret = (x % numBase).ToString()\
    \ + ret;\n            x /= numBase;\n        }\n        return ret;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string result = \"\";\n        while (x > 0) {\n            result =\
    \ (x % numBase).ToString() + result;\n            x /= numBase;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string ret = \"\";\n        while (x > 0) {\n            ret = (x % numBase).ToString()\
    \ + ret;\n            x /= numBase;\n        }\n        return ret;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string ret = \"\";\n        while (x > 0) {\n            ret = (x % numBase).ToString()\
    \ + ret;\n            x /= numBase;\n        }\n        return ret;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string s = \"\";\n        while (x > 0) {\n            s = (x % numBase).ToString()\
    \ + s;\n            x /= numBase;\n        }\n        return s;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"\
    22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L),\
    \ (2L)).Equals((\"11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"\
    10000\")));\n    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n  \
    \  Debug.Assert(ChangeBase((7L), (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L),\
    \ (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"\
    3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L),\
    \ (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"\
    6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"7\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string result = \"\";\n        while (x > 0) {\n            result =\
    \ (x % numBase).ToString() + result;\n            x /= numBase;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        var sb = new StringBuilder();\n        while (x > 0) {\n            sb.Append(x\
    \ % numBase);\n            x /= numBase;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string ret = \"\";\n        while (x > 0) {\n            ret = (x % numBase).ToString()\
    \ + ret;\n            x /= numBase;\n        }\n        return ret;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string result = \"\";\n        while (x > 0) {\n            result =\
    \ (x % numBase).ToString() + result;\n            x /= numBase;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string ret = \"\";\n        while (x > 0) {\n            ret = (x % numBase).ToString()\
    \ + ret;\n            x /= numBase;\n        }\n        return ret;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string result = \"\";\n        while (x > 0) {\n            result =\
    \ (x % numBase).ToString() + result;\n            x /= numBase;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string ret = \"\";\n        while (x > 0) {\n            ret = (x % numBase).ToString()\
    \ + ret;\n            x /= numBase;\n        }\n        return ret;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string result = \"\";\n        while (x > 0) {\n            result =\
    \ (x % numBase).ToString() + result;\n            x /= numBase;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string ret = \"\";\n        while (x > 0) {\n            ret = (x % numBase).ToString()\
    \ + ret;\n            x /= numBase;\n        }\n        return ret;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string result = \"\";\n        while (x > 0) {\n            result =\
    \ (x % numBase).ToString() + result;\n            x /= numBase;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string ret = \"\";\n        while (x > 0) {\n            ret = (x % numBase).ToString()\
    \ + ret;\n            x /= numBase;\n        }\n        return ret;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        var res = new StringBuilder();\n        while (x > 0) {\n           \
    \ res.Append(x % numBase);\n            x /= numBase;\n        }\n        return\
    \ new string(res.ToString().Reverse().ToArray());\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\"\
    )));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L),\
    \ (2L)).Equals((\"11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"\
    10000\")));\n    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n  \
    \  Debug.Assert(ChangeBase((7L), (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L),\
    \ (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"\
    3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L),\
    \ (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"\
    6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"7\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798829
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string result = \"\";\n        while (x > 0) {\n            result =\
    \ (x % numBase).ToString() + result;\n            x /= numBase;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        var sb = new StringBuilder();\n        while (x > 0) {\n            sb.Append(x\
    \ % numBase);\n            x /= numBase;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        var sb = new StringBuilder();\n        while (x > 0) {\n            sb.Append(x\
    \ % numBase);\n            x /= numBase;\n        }\n        return string.Join(\"\
    \", sb.ToString().Reverse());\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        var sb = new StringBuilder();\n        while (x > 0) {\n            sb.Append(x\
    \ % numBase);\n            x /= numBase;\n        }\n        var s = sb.ToString();\n\
    \        var arr = s.ToCharArray();\n        Array.Reverse(arr);\n        return\
    \ new string(arr);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string ret = \"\";\n        while (x > 0) {\n            ret = (x % numBase).ToString()\
    \ + ret;\n            x /= numBase;\n        }\n        return ret;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string res = \"\";\n        while (x > 0) {\n            res = (x % numBase).ToString()\
    \ + res;\n            x /= numBase;\n        }\n        return res;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        var sb = new StringBuilder();\n        while (x > 0) {\n            sb.Append(x\
    \ % numBase);\n            x /= numBase;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string s = \"\";\n        while (x > 0) {\n            s = (x % numBase).ToString()\
    \ + s;\n            x /= numBase;\n        }\n        return s;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"\
    22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L),\
    \ (2L)).Equals((\"11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"\
    10000\")));\n    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n  \
    \  Debug.Assert(ChangeBase((7L), (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L),\
    \ (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"\
    3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L),\
    \ (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"\
    6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"7\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string result = \"\";\n        while (x > 0) {\n            result =\
    \ (x % numBase).ToString() + result;\n            x /= numBase;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string ans = \"\";\n        while (x > 0) {\n            ans = (x % numBase).ToString()\
    \ + ans;\n            x /= numBase;\n        }\n        return ans;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string res = \"\";\n        while (x > 0) {\n            res = (x % numBase).ToString()\
    \ + res;\n            x /= numBase;\n        }\n        return res;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        var sb = new StringBuilder();\n        while (x > 0) {\n            sb.Append(x\
    \ % numBase);\n            x /= numBase;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        var sb = new StringBuilder();\n        while (x > 0) {\n            sb.Append(x\
    \ % numBase);\n            x /= numBase;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        var result = new List<long>();\n        while (x > 0) {\n           \
    \ result.Add(x % numBase);\n            x /= numBase;\n        }\n        result.Reverse();\n\
    \        return string.Join(\"\", result);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798829
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string ret = \"\";\n        while (x > 0) {\n            ret = (x % numBase).ToString()\
    \ + ret;\n            x /= numBase;\n        }\n        return ret;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string result = \"\";\n        while (x > 0) {\n            result =\
    \ (x % numBase).ToString() + result;\n            x /= numBase;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        var sb = new StringBuilder();\n        while (x > 0) {\n            sb.Append(x\
    \ % numBase);\n            x /= numBase;\n        }\n        return string.Join(\"\
    \", sb.ToString().Reverse());\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string result = \"\";\n        while (x > 0) {\n            result =\
    \ (x % numBase).ToString() + result;\n            x /= numBase;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string ret = \"\";\n        while (x > 0) {\n            ret = (x % numBase).ToString()\
    \ + ret;\n            x /= numBase;\n        }\n        return ret;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string ret = \"\";\n        while (x > 0) {\n            ret = (x % numBase).ToString()\
    \ + ret;\n            x /= numBase;\n        }\n        return ret;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        var sb = new StringBuilder();\n        while (x > 0) {\n            sb.Append(x\
    \ % numBase);\n            x /= numBase;\n        }\n        return string.Join(\"\
    \", sb.ToString().Reverse());\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        var sb = new StringBuilder();\n        while (x > 0) {\n            sb.Append(x\
    \ % numBase);\n            x /= numBase;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string result = \"\";\n        while (x > 0) {\n            result =\
    \ (x % numBase).ToString() + result;\n            x /= numBase;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        var sb = new StringBuilder();\n        while (x > 0) {\n            sb.Append(x\
    \ % numBase);\n            x /= numBase;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string result = \"\";\n        while (x > 0) {\n            result =\
    \ (x % numBase).ToString() + result;\n            x /= numBase;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string result = \"\";\n        while (x > 0) {\n            result =\
    \ (x % numBase).ToString() + result;\n            x /= numBase;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string res = \"\";\n        while (x > 0) {\n            res = (x % numBase).ToString()\
    \ + res;\n            x /= numBase;\n        }\n        return res;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string res = \"\";\n        while (x > 0) {\n            res = (x % numBase).ToString()\
    \ + res;\n            x /= numBase;\n        }\n        return res;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string result = \"\";\n        while (x > 0) {\n            result =\
    \ (x % numBase).ToString() + result;\n            x /= numBase;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string result = \"\";\n        while (x > 0) {\n            result =\
    \ (x % numBase).ToString() + result;\n            x /= numBase;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string result = \"\";\n        while (x > 0) {\n            result =\
    \ (x % numBase).ToString() + result;\n            x /= numBase;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        var sb = new StringBuilder();\n        while (x > 0) {\n            sb.Append(x\
    \ % numBase);\n            x /= numBase;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string result = \"\";\n        while (x > 0) {\n            result =\
    \ (x % numBase).ToString() + result;\n            x /= numBase;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        var sb = new StringBuilder();\n        while (x > 0) {\n            sb.Append(x\
    \ % numBase);\n            x /= numBase;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string result = \"\";\n        while (x > 0) {\n            result =\
    \ (x % numBase).ToString() + result;\n            x /= numBase;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string result = \"\";\n        while (x > 0) {\n            result =\
    \ (x % numBase).ToString() + result;\n            x /= numBase;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string s = \"\";\n        while (x > 0) {\n            s = (x % numBase).ToString()\
    \ + s;\n            x /= numBase;\n        }\n        return s;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"\
    22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L),\
    \ (2L)).Equals((\"11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"\
    10000\")));\n    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n  \
    \  Debug.Assert(ChangeBase((7L), (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L),\
    \ (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"\
    3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L),\
    \ (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"\
    6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"7\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string result = \"\";\n        while (x > 0) {\n            result =\
    \ (x % numBase).ToString() + result;\n            x /= numBase;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string s = \"\";\n        while (x > 0) {\n            s = (x % numBase).ToString()\
    \ + s;\n            x /= numBase;\n        }\n        return s;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"\
    22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L),\
    \ (2L)).Equals((\"11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"\
    10000\")));\n    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n  \
    \  Debug.Assert(ChangeBase((7L), (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L),\
    \ (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"\
    3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L),\
    \ (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"\
    6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"7\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        var sb = new StringBuilder();\n        while (x > 0) {\n            sb.Append(x\
    \ % numBase);\n            x /= numBase;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        var sb = new StringBuilder();\n        while (x > 0) {\n            sb.Append(x\
    \ % numBase);\n            x /= numBase;\n        }\n        return sb.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7697d6ea707e4ea3ba70ec7499f7cb45>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7697d6ea707e4ea3ba70ec7499f7cb45>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798759
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        var sb = new StringBuilder();\n        while (x > 0) {\n            sb.Append(x\
    \ % numBase);\n            x /= numBase;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string result = \"\";\n        while (x > 0) {\n            result =\
    \ (x % numBase).ToString() + result;\n            x /= numBase;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string ret = \"\";\n        while (x > 0) {\n            ret = (x % numBase).ToString()\
    \ + ret;\n            x /= numBase;\n        }\n        return ret;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string result = \"\";\n        while (x > 0) {\n            result =\
    \ (x % numBase).ToString() + result;\n            x /= numBase;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string ret = \"\";\n        while (x > 0) {\n            ret = (x % numBase).ToString()\
    \ + ret;\n            x /= numBase;\n        }\n        return ret;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string ret = \"\";\n        while (x > 0) {\n            ret = (x % numBase).ToString()\
    \ + ret;\n            x /= numBase;\n        }\n        return ret;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        var sb = new StringBuilder();\n        while (x > 0) {\n            sb.Append(x\
    \ % numBase);\n            x /= numBase;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string ret = \"\";\n        while (x > 0) {\n            ret = (x % numBase).ToString()\
    \ + ret;\n            x /= numBase;\n        }\n        return ret;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string result = \"\";\n        while (x > 0) {\n            result =\
    \ (x % numBase).ToString() + result;\n            x /= numBase;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        var result = new StringBuilder();\n        while (x > 0) {\n        \
    \    result.Append(x % numBase);\n            x /= numBase;\n        }\n     \
    \   return new string(result.ToString().Reverse().ToArray());\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"\
    22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L),\
    \ (2L)).Equals((\"11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"\
    10000\")));\n    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n  \
    \  Debug.Assert(ChangeBase((7L), (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L),\
    \ (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"\
    3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L),\
    \ (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"\
    6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"7\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        var sb = new StringBuilder();\n        while (x > 0) {\n            sb.Append(x\
    \ % numBase);\n            x /= numBase;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string s = \"\";\n        while (x > 0) {\n            s = (x % numBase).ToString()\
    \ + s;\n            x /= numBase;\n        }\n        return s;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"\
    22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L),\
    \ (2L)).Equals((\"11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"\
    10000\")));\n    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n  \
    \  Debug.Assert(ChangeBase((7L), (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L),\
    \ (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"\
    3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L),\
    \ (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"\
    6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"7\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        var sb = new StringBuilder();\n        while (x > 0) {\n            sb.Append(x\
    \ % numBase);\n            x /= numBase;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        var digits = new List<long>();\n        while (x > 0) {\n           \
    \ digits.Add(x % numBase);\n            x /= numBase;\n        }\n        digits.Reverse();\n\
    \        return string.Join(\"\", digits);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798829
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string s = \"\";\n        while (x > 0) {\n            s = (x % numBase).ToString()\
    \ + s;\n            x /= numBase;\n        }\n        return s;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"\
    22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L),\
    \ (2L)).Equals((\"11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"\
    10000\")));\n    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n  \
    \  Debug.Assert(ChangeBase((7L), (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L),\
    \ (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"\
    3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L),\
    \ (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"\
    6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"7\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string res = \"\";\n        while (x > 0) {\n            res = (x % numBase).ToString()\
    \ + res;\n            x /= numBase;\n        }\n        return res;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string result = \"\";\n        while (x > 0) {\n            result =\
    \ (x % numBase).ToString() + result;\n            x /= numBase;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        var sb = new StringBuilder();\n        while (x > 0) {\n            sb.Append(x\
    \ % numBase);\n            x /= numBase;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        var sb = new StringBuilder();\n        while (x > 0) {\n            sb.Append(x\
    \ % numBase);\n            x /= numBase;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        var sb = new StringBuilder();\n        while (x > 0) {\n            sb.Append(x\
    \ % numBase);\n            x /= numBase;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string result = \"\";\n        while (x > 0) {\n            result =\
    \ (x % numBase).ToString() + result;\n            x /= numBase;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string ret = \"\";\n        while (x > 0) {\n            ret = (x % numBase).ToString()\
    \ + ret;\n            x /= numBase;\n        }\n        return ret;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        var sb = new StringBuilder();\n        while (x > 0) {\n            sb.Append(x\
    \ % numBase);\n            x /= numBase;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string ret = \"\";\n        while (x > 0) {\n            ret = (x % numBase).ToString()\
    \ + ret;\n            x /= numBase;\n        }\n        return ret;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string result = \"\";\n        while (x > 0) {\n            result =\
    \ (x % numBase).ToString() + result;\n            x /= numBase;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string ret = \"\";\n        while (x > 0) {\n            ret = (x % numBase).ToString()\
    \ + ret;\n            x /= numBase;\n        }\n        return ret;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string result = \"\";\n        while (x > 0) {\n            result =\
    \ (x % numBase).ToString() + result;\n            x /= numBase;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string result = \"\";\n        while (x > 0) {\n            result =\
    \ (x % numBase).ToString() + result;\n            x /= numBase;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        var sb = new StringBuilder();\n        while (x > 0) {\n            sb.Append(x\
    \ % numBase);\n            x /= numBase;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        var sb = new StringBuilder();\n        while (x > 0) {\n            sb.Append(x\
    \ % numBase);\n            x /= numBase;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string result = \"\";\n        while (x > 0) {\n            result =\
    \ (x % numBase).ToString() + result;\n            x /= numBase;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string ret = \"\";\n        while (x > 0) {\n            ret = (x % numBase).ToString()\
    \ + ret;\n            x /= numBase;\n        }\n        return ret;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string result = \"\";\n        while (x > 0) {\n            result =\
    \ (x % numBase).ToString() + result;\n            x /= numBase;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string result = \"\";\n        while (x > 0) {\n            result =\
    \ (x % numBase).ToString() + result;\n            x /= numBase;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string ret = \"\";\n        while (x > 0) {\n            ret = (x % numBase).ToString()\
    \ + ret;\n            x /= numBase;\n        }\n        return ret;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string result = \"\";\n        while (x > 0) {\n            result =\
    \ (x % numBase).ToString() + result;\n            x /= numBase;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        var sb = new StringBuilder();\n        while (x > 0) {\n            sb.Append(x\
    \ % numBase);\n            x /= numBase;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string s = \"\";\n        while (x > 0) {\n            s = (x % numBase).ToString()\
    \ + s;\n            x /= numBase;\n        }\n        return s;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"\
    22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L),\
    \ (2L)).Equals((\"11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"\
    10000\")));\n    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n  \
    \  Debug.Assert(ChangeBase((7L), (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L),\
    \ (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"\
    3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L),\
    \ (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"\
    6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"7\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        var sb = new StringBuilder();\n        while (x > 0) {\n            sb.Append(x\
    \ % numBase);\n            x /= numBase;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        var sb = new StringBuilder();\n        while (x > 0) {\n            sb.Append(x\
    \ % numBase);\n            x /= numBase;\n        }\n        return string.Join(\"\
    \", sb.ToString().Reverse());\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string result = \"\";\n        while (x > 0) {\n            result =\
    \ (x % numBase).ToString() + result;\n            x /= numBase;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string ret = \"\";\n        while (x > 0) {\n            ret = (x % numBase).ToString()\
    \ + ret;\n            x /= numBase;\n        }\n        return ret;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string result = \"\";\n        while (x > 0) {\n            result =\
    \ (x % numBase).ToString() + result;\n            x /= numBase;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        var sb = new StringBuilder();\n        while (x > 0) {\n            sb.Append(x\
    \ % numBase);\n            x /= numBase;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string result = \"\";\n        while (x > 0) {\n            result =\
    \ (x % numBase).ToString() + result;\n            x /= numBase;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string res = \"\";\n        while (x > 0) {\n            res = (x % numBase).ToString()\
    \ + res;\n            x /= numBase;\n        }\n        return res;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string ret = \"\";\n        while (x > 0) {\n            ret = (x % numBase).ToString()\
    \ + ret;\n            x /= numBase;\n        }\n        return ret;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string result = \"\";\n        while (x > 0) {\n            result =\
    \ (x % numBase).ToString() + result;\n            x /= numBase;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L),\
    \ (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"\
    11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n\
    \    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"\
    2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L),\
    \ (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"\
    5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L),\
    \ (8L)).Equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string res = \"\";\n        while (x > 0) {\n            res = (x % numBase).ToString()\
    \ + res;\n            x /= numBase;\n        }\n        return res;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        string res = \"\";\n        while (x > 0) {\n            res = (x % numBase).ToString()\
    \ + res;\n            x /= numBase;\n        }\n        return res;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Change numerical base of input number x to base.\n   \
    \ // return string representation after the conversion.\n    // base numbers are\
    \ less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>>\
    \ ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n\
    \    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n\
    \        var sb = new StringBuilder();\n        while (x > 0) {\n            sb.Append(x\
    \ % numBase);\n            x /= numBase;\n        }\n        return new string(sb.ToString().Reverse().ToArray());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
    \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"\
    100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n\
    \    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L),\
    \ (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"\
    111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L),\
    \ (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"\
    4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L),\
    \ (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"\
    7\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798758
