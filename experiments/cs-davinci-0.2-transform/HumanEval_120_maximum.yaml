name: HumanEval_120_maximum
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given an array arr of integers and a positive integer k, return\
  \ a sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
  \ Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
  \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n\
  \    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,\
  \ (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
  \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
  \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
  \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in\
  \ the range of [1, 1000].\n    // 2. The elements in the array will be in the range\
  \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
  \ Maximum(List<long> arr, long k) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
  \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
  \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
  \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
  \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
  \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
  \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
  \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
  \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
  \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
  \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
  \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
  \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
  \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
  \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
  \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
  \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
  \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
  \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
  \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
  \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
  \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
  \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
  \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
  \    }\n\n}\n"
completions: ["        // Your code goes here.\n        return null;", "        //\
    \ Your code goes here.\n        return null;", "        // Your code goes here.\n\
    \        return null;", "        // Your code goes here.\n        return null;",
  '        return arr.OrderByDescending(x => x).Take((int)k).ToList();', "       \
    \ if (k == 0) {\n            return new List<long>();\n        }\n        if (k\
    \ == arr.Count) {\n            return arr;\n        }\n        if (k == 1) {\n\
    \            return new List<long>(new long[]{arr.Max()});\n        }\n      \
    \  List<long> result = new List<long>();\n        long max = arr.Max();\n    \
    \    result.Add(max);\n        arr.Remove(max);\n        return result.Concat(Maximum(arr,\
    \ k - 1)).ToList();", "        // Your code goes here.\n        return new List<long>();",
  "        // TODO: Implement your solution here\n        return new List<long>();",
  "        // Your code goes here.\n        return arr;", "        // Your code goes\
    \ here.\n        return arr;", "        // Your code goes here.\n        return\
    \ null;", "        // Your code goes here.\n        return null;", "        //\
    \ Your code goes here.\n        return arr;", "        // Your code goes here.\n\
    \        return arr;", "        // Your code goes here.\n        return arr;",
  "        // Your code goes here.\n        return null;", "        var maxHeap =\
    \ new MaxHeap(arr);\n        var result = new List<long>();\n        for (int\
    \ i = 0; i < k; i++) {\n            result.Add(maxHeap.Pop());\n        }\n  \
    \      return result;", '        return arr.OrderByDescending(x => x).Take((int)k).ToList();',
  "        // Your code goes here.\n        return null;", "        // Your code goes\
    \ here.\n        return new List<long>();", "        // Your code goes here.\n\
    \        return null;", "        List<long> result = new List<long>();\n     \
    \   if (k == 0) {\n            return result;\n        }\n        if (k == arr.Count)\
    \ {\n            return arr;\n        }\n        List<long> sorted = arr.OrderByDescending(x\
    \ => x).ToList();\n        for (int i = 0; i < k; i++) {\n            result.Add(sorted[i]);\n\
    \        }\n        return result;", "        // Your code goes here.\n      \
    \  return null;", "        // Your code goes here.\n        return arr;", "  \
    \      List<long> result = new List<long>();\n        for (int i = 0; i < k; i++)\
    \ {\n            long max = arr[0];\n            int maxIndex = 0;\n         \
    \   for (int j = 1; j < arr.Count; j++) {\n                if (arr[j] > max) {\n\
    \                    max = arr[j];\n                    maxIndex = j;\n      \
    \          }\n            }\n            result.Add(max);\n            arr.RemoveAt(maxIndex);\n\
    \        }\n        return result;", "        // Your code goes here.\n      \
    \  return new List<long>();", "        // Your code goes here.\n        return\
    \ new List<long>();", "        // Your code goes here.\n        return null;",
  "        // Your code goes here.\n        return arr;", "        // Your code goes\
    \ here.\n        return arr;", "        // Your code goes here.\n        return\
    \ null;", "        // Your code goes here.\n        return null;", "        //\
    \ Your code here\n        return new List<long>();", "        // Your code goes\
    \ here.\n        return null;", "        // Your code goes here.\n        return\
    \ arr;", "        // Your code here.\n        return new List<long>();", "   \
    \     // Your code goes here\n        return new List<long>();", "        // Your\
    \ code goes here.\n        return new List<long>();", "        // >>> Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L))\n        // (new\
    \ List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n        // >>> Maximum((new\
    \ List<long>(new long[]{(long)4L, (long)-4L, (long)4L})), (2L))\n        // (new\
    \ List<long>(new long[]{(long)4L, (long)4L}))\n        // >>> Maximum((new List<long>(new\
    \ long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})),\
    \ (1L))\n        // (new List<long>(new long[]{(long)2L}))\n        // >>> Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (2L))\n        // (new List<long>(new long[]{(long)2L, (long)2L}))\n\
    \        // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (3L))\n        // (new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)1L}))\n        // >>> Maximum((new List<long>(new\
    \ long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})),\
    \ (4L))\n        // (new List<long>(new long[]{(long)2L, (long)2L, (long)1L, (long)1L}))\n\
    \        // >>> Maximum((new List<long>(new long[]", "        // Your code goes\
    \ here.\n        return null;", "        // Your code goes here.\n        return\
    \ null;", "        // Your code goes here.\n        return null;", "        var\
    \ max = new List<long>();\n        for (var i = 0; i < k; i++) {\n           \
    \ max.Add(arr[i]);\n        }\n        max.Sort();\n        for (var i = k; i\
    \ < arr.Count; i++) {\n            if (arr[i] > max[0]) {\n                max[0]\
    \ = arr[i];\n                max.Sort();\n            }\n        }\n        return\
    \ max;", "        // Your code goes here.\n        return new List<long>();",
  '        return arr.OrderByDescending(x => x).Take((int)k).ToList();', "       \
    \ // Your code goes here.\n        return null;", "        // Your code goes here.\n\
    \        return arr;", "        // Your code goes here.\n        return null;",
  "        var result = new List<long>();\n        var maxHeap = new MaxHeap(arr);\n\
    \        for (int i = 0; i < k; i++) {\n            result.Add(maxHeap.Pop());\n\
    \        }\n        return result;", "        // Your code goes here.\n      \
    \  return null;", "        // Your code goes here.\n        return new List<long>();",
  "        // Your code here\n        return null;", "        // TODO: Implement your\
    \ solution here\n        return new List<long>();", "        var result = new\
    \ List<long>();\n        var heap = new Heap<long>();\n        foreach (var item\
    \ in arr) {\n            heap.Insert(item);\n        }\n        for (var i = 0;\
    \ i < k; i++) {\n            result.Add(heap.ExtractMax());\n        }\n     \
    \   return result;", "        // Your code goes here.\n        return null;",
  "        // Your code goes here.\n        return null;", "        // Your code goes\
    \ here.\n        return new List<long>();", "        // Your code goes here.\n\
    \        return null;", "        // Your code goes here.\n        return new List<long>();",
  "        // Your code goes here.\n        return arr;", "        // Your code here\n\
    \        return new List<long>();", "        List<long> result = new List<long>();\n\
    \        if (k == 0) {\n            return result;\n        }\n        if (k ==\
    \ arr.Count) {\n            return arr;\n        }\n        List<long> temp =\
    \ new List<long>();\n        for (int i = 0; i < arr.Count; i++) {\n         \
    \   temp.Add(arr[i]);\n        }\n        for (int i = 0; i < k; i++) {\n    \
    \        int maxIndex = 0;\n            for (int j = 0; j < temp.Count; j++) {\n\
    \                if (temp[j] > temp[maxIndex]) {\n                    maxIndex\
    \ = j;\n                }\n            }\n            result.Add(temp[maxIndex]);\n\
    \            temp.RemoveAt(maxIndex);\n        }\n        return result;", " \
    \       // Your code goes here.\n        return null;", "        // Your code\
    \ goes here.\n        return null;", "        // Your code goes here\n       \
    \ return null;", "        // Your code goes here.\n        return arr;", "   \
    \     // Your code goes here.\n        return new List<long>();", "        //\
    \ Your code goes here.\n        return null;", "        // Your code goes here.\n\
    \        return new List<long>();", "        // Your code goes here.\n       \
    \ return null;", "        // Your code goes here.\n        return null;", "  \
    \      // Your code goes here.\n        return null;", "        // Your code goes\
    \ here.\n        return null;", "        // Your code goes here.\n        return\
    \ new List<long>();", "        // Write your code here\n        return arr;",
  "        // Your code goes here.\n        return new List<long>();", '        return
    arr.OrderByDescending(x => x).Take((int)k).ToList();', "        // Your code goes\
    \ here.\n        return new List<long>();", "        // Your code goes here.\n\
    \        return arr;", '        return arr.OrderByDescending(x => x).Take((int)k).ToList();',
  "        // Your code goes here.\n        return null;", "        // Your code goes\
    \ here.\n        return null;", "        // Your code goes here.\n        return\
    \ null;", "        // Your code goes here.\n        return null;", "        var\
    \ heap = new Heap<long>();\n        foreach (var item in arr) {\n            heap.Insert(item);\n\
    \        }\n        var result = new List<long>();\n        while (k > 0) {\n\
    \            result.Add(heap.Pop());\n            k--;\n        }\n        return\
    \ result;", "        // Your code goes here.\n        return new List<long>();",
  "        // Your code goes here.\n        return arr;", "        // Your code goes\
    \ here.\n        return null;", "        // Your code goes here.\n        return\
    \ null;", "        if (k == 0) {\n            return new List<long>();\n     \
    \   }\n        if (k == arr.Count) {\n            return arr;\n        }\n   \
    \     List<long> result = new List<long>();\n        for (int i = 0; i < k; i++)\
    \ {\n            result.Add(arr[i]);\n        }\n        result.Sort();\n    \
    \    for (int i = k; i < arr.Count; i++) {\n            if (arr[i] > result[0])\
    \ {\n                result[0] = arr[i];\n                result.Sort();\n   \
    \         }\n        }\n        return result;", "        // Your code goes here.\n\
    \        return null;", "        List<long> result = new List<long>();\n     \
    \   if (k == 0) {\n            return result;\n        }\n        if (k == arr.Count)\
    \ {\n            return arr;\n        }\n        for (int i = 0; i < k; i++) {\n\
    \            result.Add(arr[i]);\n        }\n        result.Sort();\n        for\
    \ (int i = k; i < arr.Count; i++) {\n            if (arr[i] > result[0]) {\n \
    \               result.RemoveAt(0);\n                result.Add(arr[i]);\n   \
    \             result.Sort();\n            }\n        }\n        return result;",
  "        // Your code goes here.\n        return null;", "        // >>> Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L))\n        // (new\
    \ List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n        // >>> Maximum((new\
    \ List<long>(new long[]{(long)4L, (long)-4L, (long)4L})), (2L))\n        // (new\
    \ List<long>(new long[]{(long)4L, (long)4L}))\n        // >>> Maximum((new List<long>(new\
    \ long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})),\
    \ (1L))\n        // (new List<long>(new long[]{(long)2L}))\n        // >>> Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (2L))\n        // (new List<long>(new long[]{(long)2L, (long)2L}))\n\
    \        // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (3L))\n        // (new List<long>(new\
    \ long[]{(long)2L, (long)2L, (long)1L}))\n        // >>> Maximum((new List<long>(new\
    \ long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})),\
    \ (4L))\n        // (new List<long>(new long[]{(long)2L, (long)2L, (long)1L, (long)1L}))\n\
    \        // >>> Maximum((new List<long>(new long[]", "        // Your code goes\
    \ here.\n        return null;", "        // Your code goes here.\n        return\
    \ null;", "        // Your code goes here.\n        return new List<long>();",
  "        // Your code goes here.\n        return new List<long>();", "        //\
    \ Your code goes here.\n        return arr;", "        // Your code goes here.\n\
    \        return arr;", "        // Your code goes here.\n        return new List<long>();",
  "        // TODO: implement this function\n        return null;", "        // Your\
    \ code goes here.\n        return null;", "        // Your code here\n       \
    \ return null;", "        // Your code goes here.\n        return arr;", "   \
    \     // Your code goes here.\n        return null;", "        // Your code goes\
    \ here.\n        return null;", "        // Your code goes here.\n        return\
    \ new List<long>();", "        // Your code goes here.\n        return null;",
  "        // Your code goes here.\n        return null;", "        // Your code goes\
    \ here.\n        return null;", "        var result = new List<long>();\n    \
    \    var heap = new Heap<long>();\n        foreach (var i in arr) {\n        \
    \    heap.Insert(i);\n        }\n        for (var i = 0; i < k; i++) {\n     \
    \       result.Add(heap.Remove());\n        }\n        return result;", "    \
    \    // Your code goes here.\n        return arr;", '        return arr.OrderByDescending(x
    => x).Take((int)k).ToList();', "        // Your code goes here.\n        return\
    \ arr;", "        // Your code goes here.\n        return arr;", "        List<long>\
    \ result = new List<long>();\n        if (k == 0) {\n            return result;\n\
    \        }\n        if (k == arr.Count) {\n            return arr;\n        }\n\
    \        long max = arr[0];\n        for (long i = 0; i < k; i++) {\n        \
    \    max = arr[i];\n            for (long j = i; j < arr.Count; j++) {\n     \
    \           if (arr[j] > max) {\n                    max = arr[j];\n         \
    \           arr[j] = arr[i];\n                    arr[i] = max;\n            \
    \    }\n            }\n            result.Add(max);\n        }\n        return\
    \ result;", "        // TODO: Implement this function\n        return arr;", " \
    \       var result = new List<long>();\n        var heap = new Heap<long>();\n\
    \        foreach (var item in arr) {\n            heap.Push(item);\n        }\n\
    \        for (var i = 0; i < k; i++) {\n            result.Add(heap.Pop());\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (arr.Count == 0) {\n            return result;\n        }\n      \
    \  if (arr.Count == 1) {\n            result.Add(arr[0]);\n            return\
    \ result;\n        }\n        if (arr.Count == 2) {\n            if (arr[0] >\
    \ arr[1]) {\n                result.Add(arr[0]);\n                result.Add(arr[1]);\n\
    \            } else {\n                result.Add(arr[1]);\n                result.Add(arr[0]);\n\
    \            }\n            return result;\n        }\n        if (arr.Count ==\
    \ 3) {\n            if (arr[0] > arr[1]) {\n                if (arr[1] > arr[2])\
    \ {\n                    result.Add(arr[0]);\n                    result.Add(arr[1]);\n\
    \                    result.Add(arr[2]);\n                } else {\n         \
    \           if (arr[0] > arr[2]) {\n                        result.Add(arr[0]);\n\
    \                        result.Add(arr[2]);\n                        result.Add(arr[1]);\n\
    \                    } else {\n                        result.Add(arr[2]);\n \
    \                       result.Add(arr[0]);\n                        result.Add(arr[1]);\n\
    \                    }\n                }\n            } else {\n            \
    \    if (arr[0] > arr[2]) {\n                    result.Add(arr[1]);\n       \
    \             result.Add(arr[0]);\n                    result.Add(arr[2]);\n \
    \               } else {\n                    if (arr[1] > arr[2]) {\n       \
    \                 result.Add(arr[1]);\n                        result.Add(arr[2]);\n\
    \                        result.Add(arr[0]);\n                    } else {\n \
    \                       result.Add(arr[2]);\n                        result.Add(arr[1]);\n\
    \                        result.Add(arr[0]);\n                    }\n        \
    \        }\n            }\n            return result;\n        }\n        if (arr.Count\
    \ == 4) {\n            if (arr[0] > arr[1]) {\n                if (arr[1] > arr[2])\
    \ {\n                    if (arr[2] > arr[3]) {\n                        result.Add(arr",
  "        // Your code goes here.\n        return null;", "        // Your code goes\
    \ here.\n        return null;", "        // Your code goes here.\n        return\
    \ null;", "        List<long> result = new List<long>();\n        if (k == 0)\
    \ {\n            return result;\n        }\n        if (k == arr.Count) {\n  \
    \          return arr;\n        }\n        List<long> sorted = arr.OrderByDescending(x\
    \ => x).ToList();\n        for (int i = 0; i < k; i++) {\n            result.Add(sorted[i]);\n\
    \        }\n        return result;", "        // Your code goes here.\n      \
    \  return null;", "        // Your code goes here.\n        return null;", " \
    \       // Your code goes here\n        return arr;", "        // Your code goes\
    \ here.\n        return null;", "        // Your code here\n        return null;",
  "        // Your code here\n        return new List<long>();", "        List<long>\
    \ result = new List<long>();\n        for (long i = 0; i < k; i++) {\n       \
    \     result.Add(arr[(int)i]);\n        }\n        result.Sort();\n        for\
    \ (long i = k; i < arr.Count; i++) {\n            if (arr[(int)i] > result[0])\
    \ {\n                result[0] = arr[(int)i];\n                result.Sort();\n\
    \            }\n        }\n        return result;", "        // Your code here\n\
    \        return new List<long>();", "        // Your code goes here.\n       \
    \ return null;", "        // Your code goes here.\n        return arr;", "   \
    \     // Your code goes here.\n        return null;", "        // Your code goes\
    \ here.\n        return arr;", "        // Your code goes here.\n        return\
    \ null;", "        // Your code goes here.\n        return null;", '        return
    arr.OrderByDescending(x => x).Take((int)k).ToList();', "        // Your code here\n\
    \        return arr;", "        // Your code goes here.\n        return null;",
  "        // Your code goes here.\n        return arr;", "        List<long> result\
    \ = new List<long>();\n        for (long i = 0; i < k; i++) {\n            long\
    \ max = arr[0];\n            long maxIndex = 0;\n            for (long j = 0;\
    \ j < arr.Count; j++) {\n                if (arr[(int)j] > max) {\n          \
    \          max = arr[(int)j];\n                    maxIndex = j;\n           \
    \     }\n            }\n            result.Add(max);\n            arr.RemoveAt((int)maxIndex);\n\
    \        }\n        return result;", "        // Your code goes here.\n      \
    \  return arr;", "        // Your code goes here.\n        return arr;", "   \
    \     List<long> result = new List<long>();\n        if (k == 0L) {\n        \
    \    return result;\n        }\n        if (k == 1L) {\n            result.Add(arr.Max());\n\
    \            return result;\n        }\n        if (k == arr.Count) {\n      \
    \      result = arr;\n            result.Sort();\n            return result;\n\
    \        }\n        List<long> sorted = arr;\n        sorted.Sort();\n       \
    \ for (long i = (long)(sorted.Count - k); i < sorted.Count; i++) {\n         \
    \   result.Add(sorted[(int)i]);\n        }\n        return result;", "       \
    \ // Your code goes here.\n        return new List<long>();", "        var result\
    \ = new List<long>();\n        var pq = new PriorityQueue<long>();\n        foreach\
    \ (var item in arr) {\n            pq.Enqueue(item);\n        }\n        for (var\
    \ i = 0; i < k; i++) {\n            result.Add(pq.Dequeue());\n        }\n   \
    \     return result;", '        return arr.OrderByDescending(x => x).Take((int)k).ToList();',
  "        // your code here\n        return arr;", "        // Your code goes here.\n\
    \        return null;", "        // Your code goes here.\n        return null;",
  "        // Your code goes here.\n        return new List<long>();", "        //\
    \ Your code goes here.\n        return null;", "        // Your code goes here.\n\
    \        return new List<long>();", "        // >>> Maximum((new List<long>(new\
    \ long[]{(long)-3L, (long)-4L, (long)5L})), (3L))\n        // (new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))\n        // >>> Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L))\n        // (new List<long>(new\
    \ long[]{(long)4L, (long)4L}))\n        // >>> Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n   \
    \     // (new List<long>(new long[]{(long)2L}))\n        // >>> Maximum((new List<long>(new\
    \ long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})),\
    \ (2L))\n        // (new List<long>(new long[]{(long)2L, (long)2L}))\n       \
    \ // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L,\
    \ (long)-1L, (long)-2L, (long)1L})), (3L))\n        // (new List<long>(new long[]{(long)2L,\
    \ (long)2L, (long)1L}))\n        // >>> Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (4L))\n   \
    \     // (new List<long>(new long[]{(long)2L, (long)2L, (long)1L, (long)1L}))\n\
    \        // >>> Maximum((new List<long>(new long[]", "        // Your code goes\
    \ here.\n        return null;", "        // Your code here\n        return arr;",
  "        // Your code goes here.\n        return null;", "        // Your code goes\
    \ here.\n        return null;", "        var res = new List<long>();\n       \
    \ for (int i = 0; i < k; i++) {\n            var max = arr.Max();\n          \
    \  res.Add(max);\n            arr.Remove(max);\n        }\n        return res;",
  "        // Your code goes here.\n        return null;", "        // Your code goes\
    \ here.\n        return null;", '        return arr.OrderByDescending(x => x).Take((int)k).ToList();',
  "        // Your code goes here.\n        return arr;", "        // Your code goes\
    \ here.\n        return null;", '        return arr.OrderByDescending(x => x).Take((int)k).ToList();',
  "        // Your code goes here.\n        return null;", "        // Your code goes\
    \ here.\n        return null;", "        // Your code goes here.\n        return\
    \ null;", "        // The maximum k numbers in arr\n        var result = new List<long>();\n\
    \        // Write your code here\n        // To debug: Console.Error.WriteLine(\"\
    Debug messages...\");\n        return result;", "        // Your code goes here.\n\
    \        return arr;", "        // Your code here\n        return new List<long>();",
  "        // Your code goes here.\n        return null;", "        // Your code goes\
    \ here.\n        return new List<long>();", '        return arr.OrderByDescending(x
    => x).Take((int)k).ToList();', "        // Your code goes here.\n        return\
    \ arr;", "        // Your code goes here.\n        return null;", "        //\
    \ TODO: Implement this function\n        return arr;", "        // Your code goes\
    \ here.\n        return new List<long>();", "        // Your code goes here.\n\
    \        return arr;", "        // TODO: Implement this function\n        return\
    \ null;", "        if (k == 0) {\n            return new List<long>();\n     \
    \   }\n        if (k == arr.Count) {\n            return arr;\n        }\n   \
    \     List<long> result = new List<long>();\n        for (int i = 0; i < k; i++)\
    \ {\n            result.Add(arr[i]);\n        }\n        result.Sort();\n    \
    \    for (int i = k; i < arr.Count; i++) {\n            if (arr[i] > result[0])\
    \ {\n                result[0] = arr[i];\n                result.Sort();\n   \
    \         }\n        }\n        return result;", "        List<long> result =\
    \ new List<long>();\n        for (int i = 0; i < k; i++) {\n            result.Add(arr[i]);\n\
    \        }\n        result.Sort();\n        for (int i = k; i < arr.Count; i++)\
    \ {\n            if (arr[i] > result[0]) {\n                result[0] = arr[i];\n\
    \                result.Sort();\n            }\n        }\n        return result;",
  '        return arr.OrderByDescending(x => x).Take((int)k).ToList();', '        return
    arr.OrderByDescending(x => x).Take((int)k).ToList();', "        // Your code goes\
    \ here.\n        return null;", "        // Your code here\n        return arr;",
  "        List<long> result = new List<long>();\n        for (long i = 0; i < k;\
    \ i++) {\n            long max = arr[0];\n            long maxIndex = 0;\n   \
    \         for (long j = 0; j < arr.Count; j++) {\n                if (arr[(int)j]\
    \ > max) {\n                    max = arr[(int)j];\n                    maxIndex\
    \ = j;\n                }\n            }\n            result.Add(max);\n     \
    \       arr.RemoveAt((int)maxIndex);\n        }\n        return result;", "  \
    \      // Your code goes here.\n        return arr;", "        // Your code goes\
    \ here.\n        return arr;", "        // your code here\n        return arr;",
  "        // Your code goes here\n        return new List<long>();", "        //\
    \ Your code goes here.\n        return null;", "        // Your code goes here.\n\
    \        return null;", "        // Your code goes here.\n        return null;",
  "        // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),\
    \ (3L))\n        // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n\
    \        // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L))\n        // (new List<long>(new long[]{(long)4L, (long)4L}))\n       \
    \ // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L,\
    \ (long)-1L, (long)-2L, (long)1L})), (1L))\n        // (new List<long>(new long[]{(long)2L}))\n\
    \        // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (2L))\n        // (new List<long>(new\
    \ long[]{(long)2L, (long)2L}))\n        // >>> Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (3L))\n   \
    \     // (new List<long>(new long[]{(long)2L, (long)2L, (long)1L}))\n        //\
    \ >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L,\
    \ (long)-1L, (long)-2L, (long)1L})), (4L))\n        // (new List<long>(new long[]{(long)2L,\
    \ (long)2L, (long)1L, (long)1L}))\n        // >>> Maximum((new List<long>(new\
    \ long[]", '        return arr.OrderByDescending(x => x).Take((int)k).ToList();',
  '        return arr.OrderByDescending(x => x).Take((int)k).ToList();', "       \
    \ // Your code goes here.\n        return arr;"]
stop_tokens:
- "\n    }\n"
