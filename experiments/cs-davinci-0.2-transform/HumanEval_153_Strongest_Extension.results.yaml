language: cs
name: HumanEval_153_Strongest_Extension
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here.\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        int max_strength = 0;\n        string strongest_extension = \"\";\n
    \       foreach (string extension in extensions) {\n            int strength =
    0;\n            foreach (char c in extension) {\n                if (Char.IsUpper(c))
    {\n                    strength++;\n                } else {\n                    strength--;\n
    \               }\n            }\n            if (strength > max_strength) {\n
    \               max_strength = strength;\n                strongest_extension
    = extension;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6c64bef32eaf4151b98afaab8e9fc83d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6c64bef32eaf4151b98afaab8e9fc83d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code here\n        return \"\";\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new
    List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3b2c9b18c674e0cbb900d7789f8b5b8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3b2c9b18c674e0cbb900d7789f8b5b8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here.\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        string strongest = \"\";\n        double strength = -1;\n        foreach
    (string ext in extensions) {\n            double s = 0;\n            foreach (char
    c in ext) {\n                if (Char.IsUpper(c)) {\n                    s++;\n
    \               } else {\n                    s--;\n                }\n            }\n
    \           if (s > strength) {\n                strength = s;\n                strongest
    = ext;\n            }\n        }\n        return class_name + \".\" + strongest;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6571d51a6d9049ce8180d83aab1fea44>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6571d51a6d9049ce8180d83aab1fea44>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799441
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        string strongest_extension = \"\";\n        double strongest_strength
    = 0;\n        foreach (string extension in extensions) {\n            double strength
    = 0;\n            foreach (char c in extension) {\n                if (char.IsUpper(c))
    {\n                    strength += 1;\n                } else if (char.IsLower(c))
    {\n                    strength -= 1;\n                }\n            }\n            if
    (strength > strongest_strength) {\n                strongest_strength = strength;\n
    \               strongest_extension = extension;\n            }\n        }\n        return
    class_name + \".\" + strongest_extension;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new
    string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5e607c9af5c4403397af84864409dac8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5e607c9af5c4403397af84864409dac8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here.\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        string strongest_extension = \"\";\n        double strongest_strength
    = 0;\n        foreach (string extension in extensions) {\n            double strength
    = 0;\n            foreach (char c in extension) {\n                if (char.IsUpper(c))
    {\n                    strength += 1;\n                } else {\n                    strength
    -= 1;\n                }\n            }\n            if (strength > strongest_strength)
    {\n                strongest_strength = strength;\n                strongest_extension
    = extension;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <873bdcc31b254db7b73728c70560ef17>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <873bdcc31b254db7b73728c70560ef17>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here.\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        string strongest = \"\";\n        double strength = 0;\n        foreach
    (string extension in extensions) {\n            double current_strength = 0;\n
    \           foreach (char c in extension) {\n                if (char.IsUpper(c))
    {\n                    current_strength += 1;\n                } else {\n                    current_strength
    -= 1;\n                }\n            }\n            if (current_strength > strength)
    {\n                strength = current_strength;\n                strongest = extension;\n
    \           }\n        }\n        return class_name + \".\" + strongest;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d686f07f8df44dc8887265b7d44dbaba>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d686f07f8df44dc8887265b7d44dbaba>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799233
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        int max = 0;\n        string max_ext = \"\";\n        foreach (string
    ext in extensions) {\n            int cap = 0;\n            int sm = 0;\n            foreach
    (char c in ext) {\n                if (c >= 'A' && c <= 'Z') {\n                    cap++;\n
    \               } else if (c >= 'a' && c <= 'z') {\n                    sm++;\n
    \               }\n            }\n            if (cap - sm > max) {\n                max
    = cap - sm;\n                max_ext = ext;\n            }\n        }\n        return
    class_name + \".\" + max_ext;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new string[]{(string)\"tEN\",
    (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4fef98ffff3246b28ba9091609c899fc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4fef98ffff3246b28ba9091609c899fc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799441
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        return \"\";\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new string[]{(string)\"tEN\",
    (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d60f5ab53e3242e38f5c3d87a8021261>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d60f5ab53e3242e38f5c3d87a8021261>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799233
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        string strongest_extension = \"\";\n        double strongest_extension_strength
    = 0;\n        foreach (string extension in extensions) {\n            double strength
    = 0;\n            foreach (char c in extension) {\n                if (char.IsUpper(c))
    {\n                    strength += 1;\n                } else {\n                    strength
    -= 1;\n                }\n            }\n            if (strength > strongest_extension_strength)
    {\n                strongest_extension_strength = strength;\n                strongest_extension
    = extension;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d3cbd7412ced4cde86e2f424db30ba6a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d3cbd7412ced4cde86e2f424db30ba6a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799441
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here.\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        var strongest = extensions.Select(ext => new {\n            ext,\n
    \           strength = ext.Count(c => char.IsUpper(c)) - ext.Count(c => char.IsLower(c))\n
    \       }).OrderByDescending(x => x.strength).ThenBy(x => x.ext).First();\n        return
    class_name + \".\" + strongest.ext;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new
    string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <95a2fb1410304faa8fba6f31743eaab4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <95a2fb1410304faa8fba6f31743eaab4>:0
    \n"
  stdout: ''
  timestamp: 1659799441
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        string strongest = \"\";\n        double strength = 0;\n        foreach
    (string extension in extensions) {\n            int caps = 0;\n            int
    sm = 0;\n            foreach (char c in extension) {\n                if (char.IsUpper(c))
    {\n                    caps++;\n                } else {\n                    sm++;\n
    \               }\n            }\n            double new_strength = caps - sm;\n
    \           if (new_strength > strength) {\n                strength = new_strength;\n
    \               strongest = extension;\n            }\n        }\n        return
    class_name + \".\" + strongest;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new string[]{(string)\"tEN\",
    (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cca8802bf34b4d1eb46c82aae9e02bec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cca8802bf34b4d1eb46c82aae9e02bec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799441
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here.\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        double strength = 0;\n        string strongest_extension = \"\";\n
    \       foreach (string extension in extensions) {\n            int cap = 0;\n
    \           int sm = 0;\n            foreach (char c in extension) {\n                if
    (char.IsUpper(c)) {\n                    cap++;\n                } else {\n                    sm++;\n
    \               }\n            }\n            double current_strength = (double)cap
    - (double)sm;\n            if (current_strength > strength) {\n                strength
    = current_strength;\n                strongest_extension = extension;\n            }\n
    \       }\n        return class_name + \".\" + strongest_extension;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <69beff899b744b0aa5deae2fd4a65dfa>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <69beff899b744b0aa5deae2fd4a65dfa>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799441
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here.\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        string strongest = \"\";\n        double strength = 0;\n        foreach
    (string ext in extensions) {\n            int cap = 0;\n            int sm = 0;\n
    \           foreach (char c in ext) {\n                if (char.IsUpper(c)) {\n
    \                   cap++;\n                } else {\n                    sm++;\n
    \               }\n            }\n            double s = cap - sm;\n            if
    (s > strength) {\n                strength = s;\n                strongest = ext;\n
    \           }\n        }\n        return class_name + \".\" + strongest;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2dd0e2c6aef44e40b400fa9bb727a6f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2dd0e2c6aef44e40b400fa9bb727a6f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799233
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        var strongest = extensions.Select(ext => new {\n            Name =
    ext,\n            Strength = ext.Count(c => char.IsUpper(c)) - ext.Count(c =>
    char.IsLower(c))\n        }).OrderByDescending(x => x.Strength).ThenBy(x => x.Name).First();\n
    \       return $\"{class_name}.{strongest.Name}\";\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new
    List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <15bdbfc271f34e8ea51e154aaa113954>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <15bdbfc271f34e8ea51e154aaa113954>:0
    \n"
  stdout: ''
  timestamp: 1659799441
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        int strongest = 0;\n        string strongest_extension = \"\";\n        foreach
    (string extension in extensions) {\n            int strength = 0;\n            foreach
    (char c in extension) {\n                if (char.IsUpper(c)) {\n                    strength++;\n
    \               } else {\n                    strength--;\n                }\n
    \           }\n            if (strength > strongest) {\n                strongest
    = strength;\n                strongest_extension = extension;\n            }\n
    \       }\n        return class_name + \".\" + strongest_extension;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <36fc4f5e12e041ab9101d0db1b3b0e61>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <36fc4f5e12e041ab9101d0db1b3b0e61>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799441
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here.\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        int max_strength = 0;\n        string strongest_extension = \"\";\n
    \       foreach (string extension in extensions) {\n            int strength =
    0;\n            foreach (char c in extension) {\n                if (char.IsUpper(c))
    {\n                    strength++;\n                } else {\n                    strength--;\n
    \               }\n            }\n            if (strength > max_strength) {\n
    \               max_strength = strength;\n                strongest_extension
    = extension;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <234083617f2748d2a78c663d9e777a31>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <234083617f2748d2a78c663d9e777a31>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        string strongest_extension = \"\";\n        double strongest_strength
    = 0;\n        foreach (string extension in extensions) {\n            double strength
    = 0;\n            foreach (char c in extension) {\n                if (char.IsUpper(c))
    {\n                    strength += 1;\n                } else if (char.IsLower(c))
    {\n                    strength -= 1;\n                }\n            }\n            if
    (strength > strongest_strength) {\n                strongest_strength = strength;\n
    \               strongest_extension = extension;\n            }\n        }\n        return
    class_name + \".\" + strongest_extension;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new
    string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5e607c9af5c4403397af84864409dac8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5e607c9af5c4403397af84864409dac8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here.\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here.\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        int max_strength = 0;\n        string strongest_extension = \"\";\n
    \       foreach (string ext in extensions) {\n            int strength = 0;\n
    \           foreach (char c in ext) {\n                if (char.IsUpper(c)) {\n
    \                   strength++;\n                } else {\n                    strength--;\n
    \               }\n            }\n            if (strength > max_strength) {\n
    \               max_strength = strength;\n                strongest_extension
    = ext;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2c010f64eea54a2882d1cffde8e87f70>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2c010f64eea54a2882d1cffde8e87f70>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799441
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        int max_strength = 0;\n        string strongest_extension = \"\";\n
    \       foreach (string extension in extensions) {\n            int strength =
    0;\n            foreach (char c in extension) {\n                if (char.IsUpper(c))
    {\n                    strength++;\n                } else {\n                    strength--;\n
    \               }\n            }\n            if (strength > max_strength) {\n
    \               max_strength = strength;\n                strongest_extension
    = extension;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <234083617f2748d2a78c663d9e777a31>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <234083617f2748d2a78c663d9e777a31>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        int max = 0;\n        string max_ext = \"\";\n        foreach (string
    ext in extensions) {\n            int cap = 0;\n            int sm = 0;\n            foreach
    (char c in ext) {\n                if (char.IsUpper(c)) {\n                    cap++;\n
    \               } else {\n                    sm++;\n                }\n            }\n
    \           if (cap - sm > max) {\n                max = cap - sm;\n                max_ext
    = ext;\n            }\n        }\n        return class_name + \".\" + max_ext;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a90f6ea3e4574e41aeff357c1d844155>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a90f6ea3e4574e41aeff357c1d844155>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        string strongest = \"\";\n        double strength = 0;\n        foreach
    (string ext in extensions) {\n            int cap = 0;\n            int sm = 0;\n
    \           foreach (char c in ext) {\n                if (c >= 'A' && c <= 'Z')
    cap++;\n                else if (c >= 'a' && c <= 'z') sm++;\n            }\n
    \           double ext_strength = (double)cap - (double)sm;\n            if (ext_strength
    > strength) {\n                strength = ext_strength;\n                strongest
    = ext;\n            }\n        }\n        return class_name + \".\" + strongest;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <134d86d6d3464957b264493568c5c653>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <134d86d6d3464957b264493568c5c653>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799441
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        return \"\";\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new string[]{(string)\"tEN\",
    (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d60f5ab53e3242e38f5c3d87a8021261>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d60f5ab53e3242e38f5c3d87a8021261>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799233
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        string strongest = \"\";\n        double strength = 0;\n        foreach
    (string ext in extensions) {\n            int cap = 0;\n            int sm = 0;\n
    \           foreach (char c in ext) {\n                if (char.IsUpper(c)) {\n
    \                   cap++;\n                } else {\n                    sm++;\n
    \               }\n            }\n            double s = cap - sm;\n            if
    (s > strength) {\n                strength = s;\n                strongest = ext;\n
    \           }\n        }\n        return class_name + \".\" + strongest;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2dd0e2c6aef44e40b400fa9bb727a6f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2dd0e2c6aef44e40b400fa9bb727a6f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799233
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        string strongest_extension = extensions[0];\n        double strongest_extension_strength
    = 0;\n        foreach (string extension in extensions) {\n            int upper_case_count
    = 0;\n            int lower_case_count = 0;\n            foreach (char c in extension)
    {\n                if (char.IsUpper(c)) {\n                    upper_case_count++;\n
    \               } else if (char.IsLower(c)) {\n                    lower_case_count++;\n
    \               }\n            }\n            double strength = (double)upper_case_count
    - (double)lower_case_count;\n            if (strength > strongest_extension_strength)
    {\n                strongest_extension_strength = strength;\n                strongest_extension
    = extension;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f23ce217483645e58d8db313b9083640>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f23ce217483645e58d8db313b9083640>:0
    \n"
  stdout: ''
  timestamp: 1659799441
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        string strongest_extension = \"\";\n        float strongest_strength
    = -1;\n        foreach (string extension in extensions) {\n            float strength
    = 0;\n            for (int i = 0; i < extension.Length; i++) {\n                if
    (char.IsUpper(extension[i])) {\n                    strength += 1;\n                }
    else {\n                    strength -= 1;\n                }\n            }\n
    \           if (strength > strongest_strength) {\n                strongest_strength
    = strength;\n                strongest_extension = extension;\n            }\n
    \       }\n        return class_name + \".\" + strongest_extension;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <afdbc5e44a574b3fb7763bc80e77d07b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <afdbc5e44a574b3fb7763bc80e77d07b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799441
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        string strongest = \"\";\n        float strength = 0;\n        foreach
    (string extension in extensions) {\n            float current_strength = 0;\n
    \           foreach (char c in extension) {\n                if (char.IsUpper(c))
    {\n                    current_strength += 1;\n                } else {\n                    current_strength
    -= 1;\n                }\n            }\n            if (current_strength > strength)
    {\n                strength = current_strength;\n                strongest = extension;\n
    \           }\n        }\n        return class_name + \".\" + strongest;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7e37868f52064d25853c3d0ce6fc71b2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7e37868f52064d25853c3d0ce6fc71b2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799441
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        double max = 0;\n        string max_ext = \"\";\n        foreach (string
    ext in extensions) {\n            double strength = 0;\n            foreach (char
    c in ext) {\n                if (char.IsUpper(c)) {\n                    strength
    += 1;\n                } else {\n                    strength -= 1;\n                }\n
    \           }\n            if (strength > max) {\n                max = strength;\n
    \               max_ext = ext;\n            }\n        }\n        return class_name
    + \".\" + max_ext;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bf4eabb058284dfe90b71c7a73508d89>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bf4eabb058284dfe90b71c7a73508d89>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799233
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        string strongest = \"\";\n        double strength = 0;\n        foreach
    (string ext in extensions) {\n            double curr_strength = 0;\n            foreach
    (char c in ext) {\n                if (char.IsUpper(c)) {\n                    curr_strength
    += 1;\n                } else {\n                    curr_strength -= 1;\n                }\n
    \           }\n            if (curr_strength > strength) {\n                strength
    = curr_strength;\n                strongest = ext;\n            }\n        }\n
    \       return class_name + \".\" + strongest;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new
    List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <113ae85885344c8ab05495a2ffb52bc8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <113ae85885344c8ab05495a2ffb52bc8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code here\n        return \"\";\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new
    List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3b2c9b18c674e0cbb900d7789f8b5b8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3b2c9b18c674e0cbb900d7789f8b5b8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here.\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here.\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here.\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        string strongest_extension = \"\";\n        float strongest_strength
    = 0;\n        foreach (string extension in extensions) {\n            float strength
    = 0;\n            foreach (char c in extension) {\n                if (char.IsUpper(c))
    {\n                    strength += 1;\n                } else {\n                    strength
    -= 1;\n                }\n            }\n            if (strength > strongest_strength)
    {\n                strongest_strength = strength;\n                strongest_extension
    = extension;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <68e2fa9e8dbe44b0a2f82b5f149c18a9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <68e2fa9e8dbe44b0a2f82b5f149c18a9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here.\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        int max_strength = 0;\n        string strongest_extension = \"\";\n
    \       foreach (string extension in extensions) {\n            int strength =
    0;\n            foreach (char c in extension) {\n                if (char.IsUpper(c))
    {\n                    strength++;\n                } else {\n                    strength--;\n
    \               }\n            }\n            if (strength > max_strength) {\n
    \               max_strength = strength;\n                strongest_extension
    = extension;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <234083617f2748d2a78c663d9e777a31>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <234083617f2748d2a78c663d9e777a31>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here\n        return null;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0002e] in <1d4ce996e5b04718a8dffc7b6f492e69>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0002e] in <1d4ce996e5b04718a8dffc7b6f492e69>:0
    \n"
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        string strongest = \"\";\n        double strength = 0;\n        foreach
    (string ext in extensions) {\n            int cap = 0;\n            int sm = 0;\n
    \           foreach (char c in ext) {\n                if (char.IsUpper(c)) {\n
    \                   cap++;\n                } else {\n                    sm++;\n
    \               }\n            }\n            double s = (double)cap - (double)sm;\n
    \           if (s > strength) {\n                strength = s;\n                strongest
    = ext;\n            }\n        }\n        return class_name + \".\" + strongest;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8719bb52a7a04e058f96617b52ac399d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8719bb52a7a04e058f96617b52ac399d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799441
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        string strongest_extension = \"\";\n        double strongest_strength
    = 0;\n        foreach (string extension in extensions) {\n            double strength
    = 0;\n            foreach (char c in extension) {\n                if (char.IsUpper(c))
    {\n                    strength += 1;\n                } else {\n                    strength
    -= 1;\n                }\n            }\n            if (strength > strongest_strength)
    {\n                strongest_strength = strength;\n                strongest_extension
    = extension;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <873bdcc31b254db7b73728c70560ef17>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <873bdcc31b254db7b73728c70560ef17>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        string strongest_extension = \"\";\n        double strongest_strength
    = 0;\n        foreach (string extension in extensions) {\n            double strength
    = 0;\n            foreach (char c in extension) {\n                if (char.IsUpper(c))
    {\n                    strength += 1;\n                } else {\n                    strength
    -= 1;\n                }\n            }\n            if (strength > strongest_strength)
    {\n                strongest_strength = strength;\n                strongest_extension
    = extension;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <873bdcc31b254db7b73728c70560ef17>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <873bdcc31b254db7b73728c70560ef17>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        string strongest = \"\";\n        double strength = 0;\n        foreach
    (string ext in extensions) {\n            int cap = 0;\n            int sm = 0;\n
    \           foreach (char c in ext) {\n                if (char.IsUpper(c)) {\n
    \                   cap++;\n                } else {\n                    sm++;\n
    \               }\n            }\n            double s = cap - sm;\n            if
    (s > strength) {\n                strength = s;\n                strongest = ext;\n
    \           }\n        }\n        return class_name + \".\" + strongest;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2dd0e2c6aef44e40b400fa9bb727a6f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2dd0e2c6aef44e40b400fa9bb727a6f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799233
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        string strongest = \"\";\n        float strength = 0;\n        foreach
    (string ext in extensions) {\n            float ext_strength = 0;\n            foreach
    (char c in ext) {\n                if (char.IsUpper(c)) {\n                    ext_strength++;\n
    \               } else {\n                    ext_strength--;\n                }\n
    \           }\n            if (ext_strength > strength) {\n                strength
    = ext_strength;\n                strongest = ext;\n            }\n        }\n
    \       return class_name + \".\" + strongest;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new
    List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6700b3f9133a43b6a4b01706cf87429c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6700b3f9133a43b6a4b01706cf87429c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799234
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        string strongest_extension = \"\";\n        double strongest_strength
    = 0;\n        foreach (string extension in extensions) {\n            double strength
    = 0;\n            foreach (char c in extension) {\n                if (char.IsUpper(c))
    {\n                    strength += 1;\n                } else {\n                    strength
    -= 1;\n                }\n            }\n            if (strength > strongest_strength)
    {\n                strongest_strength = strength;\n                strongest_extension
    = extension;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <873bdcc31b254db7b73728c70560ef17>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <873bdcc31b254db7b73728c70560ef17>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        string strongest_extension = \"\";\n        double strongest_strength
    = 0;\n        foreach (string extension in extensions) {\n            int upper_count
    = 0;\n            int lower_count = 0;\n            foreach (char c in extension)
    {\n                if (char.IsUpper(c)) {\n                    upper_count++;\n
    \               } else if (char.IsLower(c)) {\n                    lower_count++;\n
    \               }\n            }\n            double strength = (double)upper_count
    - (double)lower_count;\n            if (strength > strongest_strength) {\n                strongest_strength
    = strength;\n                strongest_extension = extension;\n            }\n
    \       }\n        return class_name + \".\" + strongest_extension;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d9c0fe4445654d07bcd812c15b79d6fa>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d9c0fe4445654d07bcd812c15b79d6fa>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799441
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        string strongest = \"\";\n        double strength = 0;\n        foreach
    (string ext in extensions) {\n            int caps = 0;\n            int smalls
    = 0;\n            foreach (char c in ext) {\n                if (char.IsUpper(c))
    {\n                    caps++;\n                } else {\n                    smalls++;\n
    \               }\n            }\n            double ext_strength = (double)caps
    / (double)smalls;\n            if (ext_strength > strength) {\n                strength
    = ext_strength;\n                strongest = ext;\n            }\n        }\n
    \       return class_name + \".\" + strongest;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new
    List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ab0ff83bc36b4b40b3a29d34982cb59c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ab0ff83bc36b4b40b3a29d34982cb59c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799441
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here.\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here\n        return null;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0002e] in <1d4ce996e5b04718a8dffc7b6f492e69>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0002e] in <1d4ce996e5b04718a8dffc7b6f492e69>:0
    \n"
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here.\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here.\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        int max = 0;\n        string max_ext = \"\";\n        foreach (string
    ext in extensions) {\n            int cap = 0;\n            int sm = 0;\n            foreach
    (char c in ext) {\n                if (c >= 'A' && c <= 'Z') {\n                    cap++;\n
    \               } else if (c >= 'a' && c <= 'z') {\n                    sm++;\n
    \               }\n            }\n            if (cap - sm > max) {\n                max
    = cap - sm;\n                max_ext = ext;\n            }\n        }\n        return
    class_name + \".\" + max_ext;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new string[]{(string)\"tEN\",
    (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4fef98ffff3246b28ba9091609c899fc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4fef98ffff3246b28ba9091609c899fc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799441
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // TODO: Implement this function\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a1afc857a60e497daa5e47fb37e02a2c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a1afc857a60e497daa5e47fb37e02a2c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799441
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        int max_strength = 0;\n        string strongest_extension = \"\";\n
    \       foreach (string extension in extensions) {\n            int strength =
    0;\n            foreach (char c in extension) {\n                if (char.IsUpper(c))
    {\n                    strength++;\n                } else {\n                    strength--;\n
    \               }\n            }\n            if (strength > max_strength) {\n
    \               max_strength = strength;\n                strongest_extension
    = extension;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <234083617f2748d2a78c663d9e777a31>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <234083617f2748d2a78c663d9e777a31>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here.\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        int max = 0;\n        string max_ext = \"\";\n        foreach (string
    ext in extensions) {\n            int cap = 0;\n            int sm = 0;\n            foreach
    (char c in ext) {\n                if (char.IsUpper(c)) {\n                    cap++;\n
    \               } else {\n                    sm++;\n                }\n            }\n
    \           if (cap - sm > max) {\n                max = cap - sm;\n                max_ext
    = ext;\n            }\n        }\n        return class_name + \".\" + max_ext;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a90f6ea3e4574e41aeff357c1d844155>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a90f6ea3e4574e41aeff357c1d844155>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        int max = -1;\n        string max_ext = \"\";\n        foreach (string
    ext in extensions) {\n            int cap = 0;\n            int sm = 0;\n            foreach
    (char c in ext) {\n                if (char.IsUpper(c)) {\n                    cap++;\n
    \               } else {\n                    sm++;\n                }\n            }\n
    \           if (cap - sm > max) {\n                max = cap - sm;\n                max_ext
    = ext;\n            }\n        }\n        return class_name + \".\" + max_ext;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ce79880dc98b42aaa933768cd9f134da>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ce79880dc98b42aaa933768cd9f134da>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799441
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        string strongest = \"\";\n        double strength = 0;\n        foreach
    (string ext in extensions) {\n            double curr_strength = 0;\n            foreach
    (char c in ext) {\n                if (char.IsUpper(c)) {\n                    curr_strength
    += 1;\n                } else {\n                    curr_strength -= 1;\n                }\n
    \           }\n            if (curr_strength > strength) {\n                strength
    = curr_strength;\n                strongest = ext;\n            }\n        }\n
    \       return class_name + \".\" + strongest;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new
    List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <113ae85885344c8ab05495a2ffb52bc8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <113ae85885344c8ab05495a2ffb52bc8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here.\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code here\n        return \"\";\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new
    List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3b2c9b18c674e0cbb900d7789f8b5b8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3b2c9b18c674e0cbb900d7789f8b5b8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // >>> StrongestExtension((\"my_class\"), (new List<string>(new string[]{(string)\"AA\",
    (string)\"Be\", (string)\"CC\"})))\n        // (\"my_class.AA\")\n        // >>>
    StrongestExtension((\"Slices\"), (new List<string>(new string[]{(string)\"SErviNGSliCes\",
    (string)\"Cheese\", (string)\"StuFfed\"})))\n        // (\"Slices.SErviNGSliCes\")\n
    \       // >>> StrongestExtension((\"Slices\"), (new List<string>(new string[]{(string)\"SErviNGSliCes\",
    (string)\"Cheese\", (string)\"StuFfed\", (string)\"SErviNGSliCes\"})))\n        //
    (\"Slices.SErviNGSliCes\")\n        // >>> StrongestExtension((\"Slices\"), (new
    List<string>(new string[]{(string)\"SErviNGSliCes\", (string)\"Cheese\", (string)\"StuFfed\",
    (string)\"SErviNGSliCes\", (string)\"SErviNGSliCes\"})))\n        // (\"Slices.SErviNGSliCes\")\n
    \       // >>> StrongestExtension((\"Slices\"), (new List<string>(new string[]{(string)\"SErviNGSliCes\",
    (string)\"Cheese\", (string)\"StuFfed\", (string)\"SErviNGSliCes\", (string)\"SErviNGSliCes\",
    (string)\"SErviNGSliCes\"})))\n        // (\"Slices.SErviNGSliCes\")\n        //
    >>> StrongestExtension((\"Slices\"), (new List<string>(new string[]{(string)\"SErviNGSliCes\",
    (string)\"Cheese\", (string)\"StuFfed\", (string)\"SErviNGSliCes\", (string)\"SErviNGSliCes\",
    (string)\"SErviNGSliCes\", (string)\"SErviNGSliCes\"})))\n        // (\"Slices.SErviNGSliCes\")\n
    \      \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzegbzmpg.cs(25,26): error CS0161: ''Problem.StrongestExtension(string,
    List<string>)'': not all code paths return a value

    '
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        string strongest_extension = \"\";\n        float strongest_strength
    = 0;\n        foreach (string extension in extensions) {\n            float strength
    = 0;\n            foreach (char c in extension) {\n                if (char.IsUpper(c))
    {\n                    strength += 1;\n                } else {\n                    strength
    -= 1;\n                }\n            }\n            if (strength > strongest_strength)
    {\n                strongest_strength = strength;\n                strongest_extension
    = extension;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <68e2fa9e8dbe44b0a2f82b5f149c18a9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <68e2fa9e8dbe44b0a2f82b5f149c18a9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        string strongest = \"\";\n        float strength = 0;\n        foreach
    (string ext in extensions) {\n            float curr_strength = 0;\n            foreach
    (char c in ext) {\n                if (char.IsUpper(c)) {\n                    curr_strength++;\n
    \               } else {\n                    curr_strength--;\n                }\n
    \           }\n            if (curr_strength > strength) {\n                strength
    = curr_strength;\n                strongest = ext;\n            }\n        }\n
    \       return class_name + \".\" + strongest;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new
    List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <87787bf29a7348dabdb52d33eae4d43b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <87787bf29a7348dabdb52d33eae4d43b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799441
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here.\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        int max_strength = 0;\n        string strongest_extension = \"\";\n
    \       foreach (string extension in extensions) {\n            int strength =
    0;\n            foreach (char c in extension) {\n                if (char.IsUpper(c))
    {\n                    strength++;\n                } else {\n                    strength--;\n
    \               }\n            }\n            if (strength > max_strength) {\n
    \               max_strength = strength;\n                strongest_extension
    = extension;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <234083617f2748d2a78c663d9e777a31>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <234083617f2748d2a78c663d9e777a31>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        int max_strength = 0;\n        string strongest_extension = \"\";\n
    \       foreach (string extension in extensions) {\n            int strength =
    0;\n            foreach (char c in extension) {\n                if (Char.IsUpper(c))
    {\n                    strength++;\n                } else {\n                    strength--;\n
    \               }\n            }\n            if (strength > max_strength) {\n
    \               max_strength = strength;\n                strongest_extension
    = extension;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6c64bef32eaf4151b98afaab8e9fc83d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6c64bef32eaf4151b98afaab8e9fc83d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // >>> YOUR CODE HERE\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <158bec2be447485091d0b0af38781bb2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <158bec2be447485091d0b0af38781bb2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799441
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here.\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here.\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here.\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        int max_strength = 0;\n        string strongest_extension = \"\";\n
    \       foreach (string extension in extensions) {\n            int strength =
    0;\n            foreach (char c in extension) {\n                if (char.IsUpper(c))
    {\n                    strength++;\n                } else {\n                    strength--;\n
    \               }\n            }\n            if (strength > max_strength) {\n
    \               max_strength = strength;\n                strongest_extension
    = extension;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <234083617f2748d2a78c663d9e777a31>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <234083617f2748d2a78c663d9e777a31>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        int max = 0;\n        string strongest = \"\";\n        foreach (string
    extension in extensions) {\n            int cap = 0;\n            int sm = 0;\n
    \           foreach (char c in extension) {\n                if (char.IsUpper(c))
    {\n                    cap++;\n                } else {\n                    sm++;\n
    \               }\n            }\n            int strength = cap - sm;\n            if
    (strength > max) {\n                max = strength;\n                strongest
    = extension;\n            }\n        }\n        return class_name + \".\" + strongest;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <937cef07052b484f8c7cdaad49b566b6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <937cef07052b484f8c7cdaad49b566b6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code here\n        return \"\";\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new
    List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3b2c9b18c674e0cbb900d7789f8b5b8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3b2c9b18c674e0cbb900d7789f8b5b8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here.\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        int max_strength = 0;\n        string strongest_extension = \"\";\n
    \       foreach (string extension in extensions) {\n            int strength =
    0;\n            foreach (char c in extension) {\n                if (char.IsUpper(c))
    {\n                    strength++;\n                } else {\n                    strength--;\n
    \               }\n            }\n            if (strength > max_strength) {\n
    \               max_strength = strength;\n                strongest_extension
    = extension;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <234083617f2748d2a78c663d9e777a31>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <234083617f2748d2a78c663d9e777a31>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        string strongest = \"\";\n        double strength = 0;\n        foreach
    (string extension in extensions) {\n            int cap = 0;\n            int
    sm = 0;\n            foreach (char c in extension) {\n                if (char.IsUpper(c))
    {\n                    cap++;\n                } else {\n                    sm++;\n
    \               }\n            }\n            double current_strength = (double)cap
    - (double)sm;\n            if (current_strength > strength) {\n                strength
    = current_strength;\n                strongest = extension;\n            }\n        }\n
    \       return class_name + \".\" + strongest;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new
    List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d90c390172f144a5b4eb6bdad1815f9b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d90c390172f144a5b4eb6bdad1815f9b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799441
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here.\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        string strongest_extension = \"\";\n        double strongest_strength
    = 0;\n        foreach (string extension in extensions) {\n            double strength
    = 0;\n            foreach (char c in extension) {\n                if (char.IsUpper(c))
    {\n                    strength += 1;\n                } else {\n                    strength
    -= 1;\n                }\n            }\n            if (strength > strongest_strength)
    {\n                strongest_strength = strength;\n                strongest_extension
    = extension;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <873bdcc31b254db7b73728c70560ef17>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <873bdcc31b254db7b73728c70560ef17>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here!\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <88f8bf06ee85427a80192994f0a3ba2b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <88f8bf06ee85427a80192994f0a3ba2b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799441
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // TODO: Implement this function\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a1afc857a60e497daa5e47fb37e02a2c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a1afc857a60e497daa5e47fb37e02a2c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799441
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here.\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        string strongest_extension = \"\";\n        double strength = 0;\n
    \       foreach (string extension in extensions) {\n            double current_strength
    = 0;\n            foreach (char c in extension) {\n                if (char.IsUpper(c))
    {\n                    current_strength += 1;\n                } else {\n                    current_strength
    -= 1;\n                }\n            }\n            if (current_strength > strength)
    {\n                strength = current_strength;\n                strongest_extension
    = extension;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f36753bd8ad440d3bc1e777f12aae1b1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f36753bd8ad440d3bc1e777f12aae1b1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799233
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        string strongest = \"\";\n        double strength = 0;\n        foreach
    (string ext in extensions) {\n            double ext_strength = 0;\n            foreach
    (char c in ext) {\n                if (char.IsUpper(c)) {\n                    ext_strength
    += 1;\n                } else {\n                    ext_strength -= 1;\n                }\n
    \           }\n            if (ext_strength > strength) {\n                strength
    = ext_strength;\n                strongest = ext;\n            }\n        }\n
    \       return class_name + \".\" + strongest;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new
    List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6b8e302f42334bcea3ba4dfcd542963e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6b8e302f42334bcea3ba4dfcd542963e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        return class_name + \".\" + extensions.OrderByDescending(x => (x.Count(y
    => char.IsUpper(y)) - x.Count(y => char.IsLower(y)))).First();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799441
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code here\n        return \"\";\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new
    List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3b2c9b18c674e0cbb900d7789f8b5b8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3b2c9b18c674e0cbb900d7789f8b5b8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code here\n        return \"\";\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new
    List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3b2c9b18c674e0cbb900d7789f8b5b8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3b2c9b18c674e0cbb900d7789f8b5b8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        int max_strength = 0;\n        string strongest_extension = \"\";\n
    \       foreach (string extension in extensions) {\n            int strength =
    0;\n            foreach (char c in extension) {\n                if (Char.IsUpper(c))
    {\n                    strength++;\n                } else {\n                    strength--;\n
    \               }\n            }\n            if (strength > max_strength) {\n
    \               max_strength = strength;\n                strongest_extension
    = extension;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6c64bef32eaf4151b98afaab8e9fc83d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6c64bef32eaf4151b98afaab8e9fc83d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        int max = 0;\n        string ext = \"\";\n        foreach (string s
    in extensions) {\n            int cap = 0;\n            int sm = 0;\n            foreach
    (char c in s) {\n                if (char.IsUpper(c)) {\n                    cap++;\n
    \               } else {\n                    sm++;\n                }\n            }\n
    \           if (cap - sm > max) {\n                max = cap - sm;\n                ext
    = s;\n            }\n        }\n        return class_name + \".\" + ext;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2f207ebd579c4d028c3376b80267ff11>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2f207ebd579c4d028c3376b80267ff11>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799442
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        string strongest = \"\";\n        double strength = 0;\n        foreach
    (string ext in extensions) {\n            double tmp = 0;\n            for (int
    i = 0; i < ext.Length; i++) {\n                if (char.IsUpper(ext[i])) {\n                    tmp++;\n
    \               } else {\n                    tmp--;\n                }\n            }\n
    \           if (tmp > strength) {\n                strength = tmp;\n                strongest
    = ext;\n            }\n        }\n        return class_name + \".\" + strongest;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b8735e7465084fa981b8335946aee1ce>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b8735e7465084fa981b8335946aee1ce>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799442
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        string strongest = \"\";\n        int strength = 0;\n        foreach
    (string ext in extensions) {\n            int cap = 0;\n            int sm = 0;\n
    \           foreach (char c in ext) {\n                if (char.IsUpper(c)) {\n
    \                   cap++;\n                } else {\n                    sm++;\n
    \               }\n            }\n            if (cap - sm > strength) {\n                strength
    = cap - sm;\n                strongest = ext;\n            }\n        }\n        return
    class_name + \".\" + strongest;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new string[]{(string)\"tEN\",
    (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7657abe415b34b4fb3cf960af999afd4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7657abe415b34b4fb3cf960af999afd4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799442
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        string strongest_extension = \"\";\n        double strongest_strength
    = 0;\n        foreach (string extension in extensions) {\n            double strength
    = 0;\n            foreach (char c in extension) {\n                if (char.IsUpper(c))
    {\n                    strength += 1;\n                } else {\n                    strength
    -= 1;\n                }\n            }\n            if (strength > strongest_strength)
    {\n                strongest_strength = strength;\n                strongest_extension
    = extension;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <873bdcc31b254db7b73728c70560ef17>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <873bdcc31b254db7b73728c70560ef17>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code here\n        return \"\";\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new
    List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3b2c9b18c674e0cbb900d7789f8b5b8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3b2c9b18c674e0cbb900d7789f8b5b8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        int max_strength = 0;\n        string strongest_extension = \"\";\n
    \       foreach (string extension in extensions) {\n            int strength =
    0;\n            foreach (char c in extension) {\n                if (char.IsUpper(c))
    {\n                    strength++;\n                } else {\n                    strength--;\n
    \               }\n            }\n            if (strength > max_strength) {\n
    \               max_strength = strength;\n                strongest_extension
    = extension;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <234083617f2748d2a78c663d9e777a31>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <234083617f2748d2a78c663d9e777a31>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code here\n        return \"\";\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new
    List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3b2c9b18c674e0cbb900d7789f8b5b8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3b2c9b18c674e0cbb900d7789f8b5b8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        int max = 0;\n        string result = \"\";\n        foreach (string
    ext in extensions) {\n            int cap = ext.Count(char.IsUpper);\n            int
    sm = ext.Count(char.IsLower);\n            if (cap - sm > max) {\n                max
    = cap - sm;\n                result = class_name + \".\" + ext;\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new
    string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <df80088d8e0045d1b1f5c4534145f79e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <df80088d8e0045d1b1f5c4534145f79e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799442
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        string strongest = \"\";\n        double strength = 0;\n        foreach
    (string extension in extensions) {\n            int cap = 0;\n            int
    sm = 0;\n            foreach (char c in extension) {\n                if (char.IsUpper(c))
    {\n                    cap++;\n                } else {\n                    sm++;\n
    \               }\n            }\n            double str = (double)cap - (double)sm;\n
    \           if (str > strength) {\n                strength = str;\n                strongest
    = extension;\n            }\n        }\n        return class_name + \".\" + strongest;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <86d564bbe61946dd97ae5c68495533f7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <86d564bbe61946dd97ae5c68495533f7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799442
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        string strongest = \"\";\n        double strength = 0;\n        foreach
    (string ext in extensions) {\n            double ext_strength = 0;\n            foreach
    (char c in ext) {\n                if (char.IsUpper(c)) {\n                    ext_strength
    += 1;\n                } else {\n                    ext_strength -= 1;\n                }\n
    \           }\n            if (ext_strength > strength) {\n                strength
    = ext_strength;\n                strongest = ext;\n            }\n        }\n
    \       return class_name + \".\" + strongest;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new
    List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6b8e302f42334bcea3ba4dfcd542963e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6b8e302f42334bcea3ba4dfcd542963e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here.\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here.\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here.\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here.\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // >>> StrongestExtension((\"my_class\"), (new List<string>(new string[]{(string)\"AA\",
    (string)\"Be\", (string)\"CC\"})))\n        // (\"my_class.AA\")\n        // >>>
    StrongestExtension((\"Slices\"), (new List<string>(new string[]{(string)\"SErviNGSliCes\",
    (string)\"Cheese\", (string)\"StuFfed\"})))\n        // (\"Slices.SErviNGSliCes\")\n
    \       // >>> StrongestExtension((\"Slices\"), (new List<string>(new string[]{(string)\"SErviNGSliCes\",
    (string)\"Cheese\", (string)\"StuFfed\", (string)\"SErviNGSliCes\"})))\n        //
    (\"Slices.SErviNGSliCes\")\n        // >>> StrongestExtension((\"Slices\"), (new
    List<string>(new string[]{(string)\"SErviNGSliCes\", (string)\"Cheese\", (string)\"StuFfed\",
    (string)\"SErviNGSliCes\", (string)\"SErviNGSliCes\"})))\n        // (\"Slices.SErviNGSliCes\")\n
    \       // >>> StrongestExtension((\"Slices\"), (new List<string>(new string[]{(string)\"SErviNGSliCes\",
    (string)\"Cheese\", (string)\"StuFfed\", (string)\"SErviNGSliCes\", (string)\"SErviNGSliCes\",
    (string)\"SErviNGSliCes\"})))\n        // (\"Slices.SErviNGSliCes\")\n        //
    >>> StrongestExtension((\"Slices\"), (new List<string>(new string[]{(string)\"SErviNGSliCes\",
    (string)\"Cheese\", (string)\"StuFfed\", (string)\"SErviNGSliCes\", (string)\"SErviNGSliCes\",
    (string)\"SErviNGSliCes\", (string)\"SErviNGSliCes\"})))\n        // (\"Slices.SErviNGSliCes\")\n
    \      \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzegbzmpg.cs(25,26): error CS0161: ''Problem.StrongestExtension(string,
    List<string>)'': not all code paths return a value

    '
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here\n        string strongest_extension = \"\";\n
    \       float strongest_strength = 0;\n        foreach (string extension in extensions)
    {\n            float strength = 0;\n            foreach (char letter in extension)
    {\n                if (char.IsUpper(letter)) {\n                    strength++;\n
    \               } else {\n                    strength--;\n                }\n
    \           }\n            if (strength > strongest_strength) {\n                strongest_strength
    = strength;\n                strongest_extension = extension;\n            }\n
    \       }\n        return class_name + \".\" + strongest_extension;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f6d1dc6802554d19a8413a25acd372f1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f6d1dc6802554d19a8413a25acd372f1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799442
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code here\n        return \"\";\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new
    List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3b2c9b18c674e0cbb900d7789f8b5b8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3b2c9b18c674e0cbb900d7789f8b5b8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        int max_strength = 0;\n        string strongest_extension = \"\";\n
    \       foreach (string extension in extensions) {\n            int strength =
    0;\n            foreach (char c in extension) {\n                if (char.IsUpper(c))
    {\n                    strength++;\n                } else {\n                    strength--;\n
    \               }\n            }\n            if (strength > max_strength) {\n
    \               max_strength = strength;\n                strongest_extension
    = extension;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <234083617f2748d2a78c663d9e777a31>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <234083617f2748d2a78c663d9e777a31>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        int max = 0;\n        string strongest = \"\";\n        foreach (string
    ext in extensions) {\n            int cap = 0;\n            int sm = 0;\n            foreach
    (char c in ext) {\n                if (char.IsUpper(c)) {\n                    cap++;\n
    \               } else {\n                    sm++;\n                }\n            }\n
    \           int strength = cap - sm;\n            if (strength > max) {\n                max
    = strength;\n                strongest = ext;\n            }\n        }\n        return
    class_name + \".\" + strongest;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new string[]{(string)\"tEN\",
    (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ea42adabb46c4bc48896092c2fabcce5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ea42adabb46c4bc48896092c2fabcce5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799233
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code here\n        return \"\";\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new
    List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3b2c9b18c674e0cbb900d7789f8b5b8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3b2c9b18c674e0cbb900d7789f8b5b8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here.\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        string strongest = \"\";\n        double strength = 0;\n        foreach
    (string ext in extensions) {\n            double ext_strength = 0;\n            foreach
    (char c in ext) {\n                if (char.IsUpper(c)) {\n                    ext_strength
    += 1;\n                } else {\n                    ext_strength -= 1;\n                }\n
    \           }\n            if (ext_strength > strength) {\n                strength
    = ext_strength;\n                strongest = ext;\n            }\n        }\n
    \       return class_name + \".\" + strongest;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new
    List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6b8e302f42334bcea3ba4dfcd542963e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6b8e302f42334bcea3ba4dfcd542963e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code here\n        return \"\";\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new
    List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3b2c9b18c674e0cbb900d7789f8b5b8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3b2c9b18c674e0cbb900d7789f8b5b8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        string strongest_extension = \"\";\n        float strength = 0;\n        foreach
    (string extension in extensions) {\n            float current_strength = 0;\n
    \           foreach (char c in extension) {\n                if (char.IsUpper(c))
    {\n                    current_strength += 1;\n                } else {\n                    current_strength
    -= 1;\n                }\n            }\n            if (current_strength > strength)
    {\n                strength = current_strength;\n                strongest_extension
    = extension;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ecb57268ec164a838e40682d13cb116b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ecb57268ec164a838e40682d13cb116b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799442
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        return \"\";\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new string[]{(string)\"tEN\",
    (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d60f5ab53e3242e38f5c3d87a8021261>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d60f5ab53e3242e38f5c3d87a8021261>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799233
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here.\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        string strongest_extension = \"\";\n        double strongest_strength
    = 0;\n        foreach (string extension in extensions) {\n            double strength
    = 0;\n            foreach (char c in extension) {\n                if (char.IsUpper(c))
    {\n                    strength += 1;\n                } else {\n                    strength
    -= 1;\n                }\n            }\n            if (strength > strongest_strength)
    {\n                strongest_strength = strength;\n                strongest_extension
    = extension;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <873bdcc31b254db7b73728c70560ef17>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <873bdcc31b254db7b73728c70560ef17>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        int max_strength = -1;\n        string strongest_extension = \"\";\n
    \       foreach (string ext in extensions) {\n            int strength = 0;\n
    \           foreach (char c in ext) {\n                if (char.IsUpper(c)) {\n
    \                   strength++;\n                } else {\n                    strength--;\n
    \               }\n            }\n            if (strength > max_strength) {\n
    \               max_strength = strength;\n                strongest_extension
    = ext;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3521c96de776441899fa58eeae4f59f8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3521c96de776441899fa58eeae4f59f8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799442
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here.\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        int max_strength = 0;\n        string strongest_extension = \"\";\n
    \       foreach (string extension in extensions) {\n            int strength =
    0;\n            foreach (char c in extension) {\n                if (Char.IsUpper(c))
    {\n                    strength++;\n                } else {\n                    strength--;\n
    \               }\n            }\n            if (strength > max_strength) {\n
    \               max_strength = strength;\n                strongest_extension
    = extension;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6c64bef32eaf4151b98afaab8e9fc83d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6c64bef32eaf4151b98afaab8e9fc83d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        string strongest = \"\";\n        double strength = 0;\n        foreach
    (string ext in extensions) {\n            int cap = 0;\n            int sm = 0;\n
    \           foreach (char c in ext) {\n                if (char.IsUpper(c)) {\n
    \                   cap++;\n                } else {\n                    sm++;\n
    \               }\n            }\n            double s = cap - sm;\n            if
    (s > strength) {\n                strength = s;\n                strongest = ext;\n
    \           }\n        }\n        return class_name + \".\" + strongest;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2dd0e2c6aef44e40b400fa9bb727a6f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2dd0e2c6aef44e40b400fa9bb727a6f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799233
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here.\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        string strongest = \"\";\n        double strength = 0;\n        foreach
    (string ext in extensions) {\n            double ext_strength = 0;\n            foreach
    (char c in ext) {\n                if (char.IsUpper(c)) {\n                    ext_strength
    += 1;\n                } else {\n                    ext_strength -= 1;\n                }\n
    \           }\n            if (ext_strength > strength) {\n                strength
    = ext_strength;\n                strongest = ext;\n            }\n        }\n
    \       return class_name + \".\" + strongest;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new
    List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6b8e302f42334bcea3ba4dfcd542963e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6b8e302f42334bcea3ba4dfcd542963e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here.\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here.\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        int max_strength = 0;\n        string strongest_extension = \"\";\n
    \       foreach (string extension in extensions) {\n            int strength =
    0;\n            foreach (char c in extension) {\n                if (char.IsUpper(c))
    {\n                    strength++;\n                } else {\n                    strength--;\n
    \               }\n            }\n            if (strength > max_strength) {\n
    \               max_strength = strength;\n                strongest_extension
    = extension;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <234083617f2748d2a78c663d9e777a31>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <234083617f2748d2a78c663d9e777a31>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        int max_strength = 0;\n        string strongest_extension = \"\";\n
    \       foreach (string extension in extensions) {\n            int strength =
    0;\n            foreach (char c in extension) {\n                if (char.IsUpper(c))
    {\n                    strength++;\n                } else {\n                    strength--;\n
    \               }\n            }\n            if (strength > max_strength) {\n
    \               max_strength = strength;\n                strongest_extension
    = extension;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <234083617f2748d2a78c663d9e777a31>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <234083617f2748d2a78c663d9e777a31>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here.\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        // Your code goes here\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new
    string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n
    \   public static string StrongestExtension(string class_name, List<string> extensions)
    {\n        string strongest = \"\";\n        double strength = 0;\n        foreach
    (string ext in extensions) {\n            double ext_strength = 0;\n            foreach
    (char c in ext) {\n                if (char.IsUpper(c)) {\n                    ext_strength
    += 1;\n                } else {\n                    ext_strength -= 1;\n                }\n
    \           }\n            if (ext_strength > strength) {\n                strength
    = ext_strength;\n                strongest = ext;\n            }\n        }\n
    \       return class_name + \".\" + strongest;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new
    List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6b8e302f42334bcea3ba4dfcd542963e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6b8e302f42334bcea3ba4dfcd542963e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799232
