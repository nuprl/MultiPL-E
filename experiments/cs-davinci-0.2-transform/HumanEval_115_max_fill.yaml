name: HumanEval_115_max_fill
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You are given a rectangular grid of wells. Each row represents\
  \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
  \    // Each well has a corresponding bucket that can be used to extract water from\
  \ it, \n    // and all buckets have the same capacity.\n    // Your task is to use\
  \ the buckets to empty the wells.\n    // Output the number of times you need to\
  \ lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
  \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
  \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
  \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
  \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
  \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
  \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
  \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
  \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
  \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n   \
  \ // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
  \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
  \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
  \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length\
  \ <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public\
  \ static long MaxFill(List<List<long>> grid, long capacity) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxFill((new\
  \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
  \ (long)0L, (long)1L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
  \ (long)1L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
  \ (long)1L, (long)1L, (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new\
  \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
  \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
  \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
  \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
  \ (long)1L, (long)1L, (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new\
  \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
  \ (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L,\
  \ (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
  \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
  \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
  \ (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
  \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
  \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
  \ (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
completions: ["        // your code goes here\n        return 0;", "        // your\
    \ code goes here\n        return 0;", "        // your code here\n        return\
    \ 0;", "        // Your code goes here.\n        return 0;", "        long result\
    \ = 0;\n        // Your code goes here.\n        return result;", "        long\
    \ result = 0;\n        long max = 0;\n        for (int i = 0; i < grid.Count;\
    \ i++) {\n            for (int j = 0; j < grid[i].Count; j++) {\n            \
    \    if (grid[i][j] == 1) {\n                    result++;\n                }\n\
    \            }\n            if (result > max) {\n                max = result;\n\
    \            }\n            result = 0;\n        }\n        return max * capacity;",
  "        // your code here\n        return 0;", "        // your code here\n   \
    \     return 0;", '        return 0;', "        long maxFill = 0;\n        long\
    \ maxFillRow = 0;\n        long maxFillCol = 0;\n        long maxFillRowCount\
    \ = 0;\n        long maxFillColCount = 0;\n        long maxFillRowCountMax = 0;\n\
    \        long maxFillColCountMax = 0;\n        long maxFillRowCountMin = 0;\n\
    \        long maxFillColCountMin = 0;\n        long maxFillRowCountMinCount =\
    \ 0;\n        long maxFillColCountMinCount = 0;\n        long maxFillRowCountMaxCount\
    \ = 0;\n        long maxFillColCountMaxCount = 0;\n        long maxFillRowCountMaxCountMax\
    \ = 0;\n        long maxFillColCountMaxCountMax = 0;\n        long maxFillRowCountMaxCountMin\
    \ = 0;\n        long maxFillColCountMaxCountMin = 0;\n        long maxFillRowCountMaxCountMinCount\
    \ = 0;\n        long maxFillColCountMaxCountMinCount = 0;\n        long maxFillRowCountMaxCountMaxCount\
    \ = 0;\n        long maxFillColCountMaxCountMaxCount = 0;\n        long maxFillRowCountMaxCountMaxCountMax\
    \ = 0;\n        long maxFillColCountMaxCountMaxCountMax = 0;\n        long maxFillRowCountMaxCountMaxCountMin\
    \ = 0;\n        long maxFillColCountMaxCountMaxCountMin = 0;\n        long maxFillRowCountMaxCountMaxCountMinCount\
    \ = 0;\n        long maxFillColCountMaxCountMaxCountMinCount = 0;\n        long\
    \ maxFillRowCountMaxCountMaxCountMaxCount = 0;\n        long maxFillColCountMaxCountMaxCountMaxCount\
    \ = 0;\n        long maxFillRowCountMaxCountMaxCountMaxCountMax = 0;\n       \
    \ long maxFillColCountMaxCountMaxCountMaxCountMax = 0;\n        long maxFillRowCountMaxCountMaxCountMaxCountMin\
    \ = 0;\n        long maxFillColCountMaxCountMaxCountMaxCountMin = 0;\n       \
    \ long maxFillRowCountMaxCountMaxCountMaxCountMinCount = 0;\n        long maxFillColCountMaxCountMaxCountMaxCountMinCount\
    \ = 0;\n        long maxFillRowCountMaxCountMaxCountMaxCountMaxCount = 0;\n  \
    \      long maxFillColCountMaxCountMaxCountMaxCountMaxCount = 0;\n       ", " \
    \       // your code goes here\n        return 0;", "        long result = 0;\n\
    \        // Your code goes here.\n        return result;", "        // your code\
    \ here\n        return 0;", '        return 0;', "        // your code here\n\
    \        return 0;", "        // your code goes here\n        return 0;", "  \
    \      // your code goes here\n        return 0;", "        // your code goes\
    \ here\n        return 0;", "        // your code here\n        return 0;", " \
    \       long result = 0;\n        // Your code goes here.\n        return result;"]
stop_tokens:
- "\n    }\n"
